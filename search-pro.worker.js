const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":799,\"nextId\":799,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#是什么\",\"2\":\"v-8daa1a0e#为什么\",\"3\":\"v-8daa1a0e#参考与鸣谢\",\"4\":\"v-8daa1a0e#联系我\",\"5\":\"v-74bc627b\",\"6\":\"v-2e25198a\",\"7\":\"v-936853b6\",\"8\":\"v-14c69af4\",\"9\":\"v-c9bbfba2\",\"10\":\"v-4165b7de\",\"11\":\"v-14ce05ae\",\"12\":\"v-294cffea\",\"13\":\"v-0e28cdab\",\"14\":\"v-9a72c4ae\",\"15\":\"v-1be8c5c4\",\"16\":\"v-1be8c5c4#什么是tcp连接\",\"17\":\"v-1be8c5c4#三次握手\",\"18\":\"v-1be8c5c4#为什么需要三次握手而不是两次-或者四次\",\"19\":\"v-1be8c5c4#四次挥手\",\"20\":\"v-9a72c470\",\"21\":\"v-0fac0cf6\",\"22\":\"v-0fac0cf6#时间复杂度\",\"23\":\"v-0fac0cf6#_1-单层循环\",\"24\":\"v-0fac0cf6#例子1-简单\",\"25\":\"v-0fac0cf6#例子2-中等难度\",\"26\":\"v-0fac0cf6#例子3-较难\",\"27\":\"v-0fac0cf6#_2-两层循环\",\"28\":\"v-0fac0cf6#例子1\",\"29\":\"v-0fac0cf6#例子2\",\"30\":\"v-0fac0cf6#_3-三层循环\",\"31\":\"v-0fac0cf6#例子\",\"32\":\"v-0fac0cf6#空间复杂度\",\"33\":\"v-01ac142e\",\"34\":\"v-01ac142e#基本概念\",\"35\":\"v-01ac142e#数据结构三要素\",\"36\":\"v-fd067b50\",\"37\":\"v-fd067b50#线性表定义和操作\",\"38\":\"v-fd067b50#顺序表\",\"39\":\"v-fd067b50#单链表\",\"40\":\"v-fd067b50#双链表\",\"41\":\"v-fd067b50#循环链表\",\"42\":\"v-fd067b50#静态链表\",\"43\":\"v-fd067b50#顺序表与链表的比较和选择\",\"44\":\"v-9a72bbf6\",\"45\":\"v-9a726960\",\"46\":\"v-dfa09558\",\"47\":\"v-dfa09558#概念\",\"48\":\"v-dfa09558#目的\",\"49\":\"v-dfa09558#分类\",\"50\":\"v-dfa09558#外键约束\",\"51\":\"v-dfa09558#语法\",\"52\":\"v-dfa09558#删除-更新行为\",\"53\":\"v-6c2bb6d0\",\"54\":\"v-0ca649bb\",\"55\":\"v-0ca649bb#字符串函数\",\"56\":\"v-0ca649bb#数值函数\",\"57\":\"v-0ca649bb#日期函数\",\"58\":\"v-0ca649bb#流程函数\",\"59\":\"v-b9856e14\",\"60\":\"v-b9856e14#逻辑存储结构\",\"61\":\"v-b9856e14#架构\",\"62\":\"v-b9856e14#内存结构\",\"63\":\"v-b9856e14#buffer-pool-缓冲池\",\"64\":\"v-b9856e14#change-buffer-更改缓冲区\",\"65\":\"v-b9856e14#log-buffer-日志缓冲区\",\"66\":\"v-b9856e14#adaptive-hash-index-自适应哈希索引\",\"67\":\"v-b9856e14#磁盘结构\",\"68\":\"v-b9856e14#system-tablespace-系统表空间\",\"69\":\"v-b9856e14#file-pre-table-tablespaces-独立表空间\",\"70\":\"v-b9856e14#general-tablespaces-通用表空间\",\"71\":\"v-b9856e14#undo-tablespaces-撤销表空间\",\"72\":\"v-b9856e14#temporary-tablespaces-临时表\",\"73\":\"v-b9856e14#double-write-buffer-files-双写缓冲区\",\"74\":\"v-b9856e14#redo-log-重做日志\",\"75\":\"v-b9856e14#后台线程\",\"76\":\"v-b9856e14#事务原理\",\"77\":\"v-b9856e14#redo-log-重做日志-1\",\"78\":\"v-b9856e14#undo-log\",\"79\":\"v-b1f4f0e2\",\"80\":\"v-b1f4f0e2#概念介绍\",\"81\":\"v-b1f4f0e2#mvcc\",\"82\":\"v-b1f4f0e2#当前读\",\"83\":\"v-b1f4f0e2#快照读\",\"84\":\"v-b1f4f0e2#实现原理\",\"85\":\"v-b1f4f0e2#undo-log\",\"86\":\"v-b1f4f0e2#undo-log-版本链\",\"87\":\"v-b1f4f0e2#readview-读视图\",\"88\":\"v-b1f4f0e2#版本链数据访问规则\",\"89\":\"v-8965f874\",\"90\":\"v-49034968\",\"91\":\"v-49034968#多表关系\",\"92\":\"v-49034968#一对一\",\"93\":\"v-49034968#一对多\",\"94\":\"v-49034968#多对多\",\"95\":\"v-49034968#多表查询\",\"96\":\"v-49034968#内连接\",\"97\":\"v-49034968#外连接\",\"98\":\"v-49034968#自连接\",\"99\":\"v-49034968#联合查询\",\"100\":\"v-49034968#子查询\",\"101\":\"v-49034968#标量子查询\",\"102\":\"v-49034968#列子查询\",\"103\":\"v-49034968#行子查询\",\"104\":\"v-49034968#表子查询\",\"105\":\"v-43c7fd75\",\"106\":\"v-43c7fd75#基本概念\",\"107\":\"v-43c7fd75#mysql的安装\",\"108\":\"v-43c7fd75#mysql版本\",\"109\":\"v-43c7fd75#数据库类型\",\"110\":\"v-43c7fd75#关系型数据库\",\"111\":\"v-43c7fd75#非关系型数据库\",\"112\":\"v-43c7fd75#mysql数据模型\",\"113\":\"v-60dc87cc\",\"114\":\"v-60dc87cc#索引概述\",\"115\":\"v-60dc87cc#概念\",\"116\":\"v-60dc87cc#优缺点\",\"117\":\"v-60dc87cc#索引结构\",\"118\":\"v-60dc87cc#二叉树\",\"119\":\"v-60dc87cc#红黑树\",\"120\":\"v-60dc87cc#b树\",\"121\":\"v-60dc87cc#b-树\",\"122\":\"v-60dc87cc#优化的b-树\",\"123\":\"v-60dc87cc#hash\",\"124\":\"v-60dc87cc#思考\",\"125\":\"v-60dc87cc#存储引擎支持\",\"126\":\"v-60dc87cc#索引分类\",\"127\":\"v-60dc87cc#回表查询\",\"128\":\"v-60dc87cc#思考题\",\"129\":\"v-60dc87cc#索引语法\",\"130\":\"v-60dc87cc#索引使用\",\"131\":\"v-60dc87cc#索引失效场景\",\"132\":\"v-60dc87cc#sql提示\",\"133\":\"v-60dc87cc#覆盖索引\",\"134\":\"v-60dc87cc#前缀索引\",\"135\":\"v-60dc87cc#单列-联合索引\",\"136\":\"v-60dc87cc#索引设计原则\",\"137\":\"v-789e275b\",\"138\":\"v-789e275b#介绍\",\"139\":\"v-789e275b#全局锁\",\"140\":\"v-789e275b#介绍-1\",\"141\":\"v-789e275b#一致性数据备份\",\"142\":\"v-789e275b#特点\",\"143\":\"v-789e275b#表级锁\",\"144\":\"v-789e275b#介绍-2\",\"145\":\"v-789e275b#_1-表锁\",\"146\":\"v-789e275b#_2-元数据锁\",\"147\":\"v-789e275b#_3-意向锁\",\"148\":\"v-789e275b#行级锁\",\"149\":\"v-789e275b#行锁\",\"150\":\"v-789e275b#间隙锁\",\"151\":\"v-789e275b#临键锁\",\"152\":\"v-43a7dcb0\",\"153\":\"v-10ff6421\",\"154\":\"v-4cf6c634\",\"155\":\"v-4cf6c634#介绍\",\"156\":\"v-4cf6c634#类型\",\"157\":\"v-4cf6c634#语法\",\"158\":\"v-4cf6c634#案例\",\"159\":\"v-4cf6c634#插入触发器\",\"160\":\"v-4cf6c634#更新触发器\",\"161\":\"v-4cf6c634#删除触发器\",\"162\":\"v-524a0e21\",\"163\":\"v-524a0e21#介绍和基本语法\",\"164\":\"v-524a0e21#介绍\",\"165\":\"v-524a0e21#操作语法\",\"166\":\"v-524a0e21#检查选项\",\"167\":\"v-524a0e21#更新及作用\",\"168\":\"v-524a0e21#视图的更新\",\"169\":\"v-524a0e21#视图的作用\",\"170\":\"v-78afab36\",\"171\":\"v-21ba2ec8\",\"172\":\"v-21ba2ec8#学习目录\",\"173\":\"v-21ba2ec8#参考资料\",\"174\":\"v-149399ac\",\"175\":\"v-149399ac#通用语法\",\"176\":\"v-149399ac#sql分类\",\"177\":\"v-149399ac#ddl语句\",\"178\":\"v-149399ac#数据库操作\",\"179\":\"v-149399ac#数据表操作\",\"180\":\"v-149399ac#字段操作\",\"181\":\"v-149399ac#dml语句\",\"182\":\"v-149399ac#添加数据\",\"183\":\"v-149399ac#修改数据\",\"184\":\"v-149399ac#删除数据\",\"185\":\"v-149399ac#dql语句\",\"186\":\"v-149399ac#dql语法\",\"187\":\"v-149399ac#查询类型\",\"188\":\"v-149399ac#基本查询\",\"189\":\"v-149399ac#条件查询\",\"190\":\"v-149399ac#聚合查询\",\"191\":\"v-149399ac#聚合函数\",\"192\":\"v-149399ac#分组查询\",\"193\":\"v-149399ac#排序查询\",\"194\":\"v-149399ac#分页查询\",\"195\":\"v-149399ac#执行顺序\",\"196\":\"v-149399ac#dcl语句\",\"197\":\"v-149399ac#用户控制\",\"198\":\"v-149399ac#权限控制\",\"199\":\"v-e01d4ed6\",\"200\":\"v-e01d4ed6#insert优化\",\"201\":\"v-e01d4ed6#批量插入\",\"202\":\"v-e01d4ed6#手动提交事务\",\"203\":\"v-e01d4ed6#主键顺序插入\",\"204\":\"v-e01d4ed6#大批量数据插入\",\"205\":\"v-e01d4ed6#primery-key优化\",\"206\":\"v-e01d4ed6#数据的组织方式\",\"207\":\"v-e01d4ed6#页分裂\",\"208\":\"v-e01d4ed6#页合并\",\"209\":\"v-e01d4ed6#主键设计原则\",\"210\":\"v-e01d4ed6#order-by优化\",\"211\":\"v-e01d4ed6#查询类别\",\"212\":\"v-e01d4ed6#举例说明\",\"213\":\"v-e01d4ed6#注意事项\",\"214\":\"v-e01d4ed6#group-by优化\",\"215\":\"v-e01d4ed6#查询类型\",\"216\":\"v-e01d4ed6#注意事项-1\",\"217\":\"v-e01d4ed6#limit优化\",\"218\":\"v-e01d4ed6#优化场景\",\"219\":\"v-e01d4ed6#举例说明-1\",\"220\":\"v-e01d4ed6#优化思路\",\"221\":\"v-e01d4ed6#count优化\",\"222\":\"v-e01d4ed6#优化思路-1\",\"223\":\"v-e01d4ed6#count的用法\",\"224\":\"v-e01d4ed6#update优化\",\"225\":\"v-e01d4ed6#注意事项-2\",\"226\":\"v-e01d4ed6#举例说明-2\",\"227\":\"v-21422c2d\",\"228\":\"v-21422c2d#sql执行频率\",\"229\":\"v-21422c2d#慢查询日志\",\"230\":\"v-21422c2d#profile分析\",\"231\":\"v-21422c2d#explain执行计划\",\"232\":\"v-9f994086\",\"233\":\"v-9f994086#mysql的体系结构\",\"234\":\"v-9f994086#存储引擎简介\",\"235\":\"v-9f994086#存储引擎特点\",\"236\":\"v-9f994086#innodb\",\"237\":\"v-9f994086#myisam\",\"238\":\"v-9f994086#memory\",\"239\":\"v-9f994086#存储引擎选择\",\"240\":\"v-79533b1a\",\"241\":\"v-79533b1a#介绍\",\"242\":\"v-79533b1a#基本语法\",\"243\":\"v-79533b1a#变量\",\"244\":\"v-79533b1a#系统变量\",\"245\":\"v-79533b1a#用户自定义变量\",\"246\":\"v-79533b1a#局部变量\",\"247\":\"v-79533b1a#if判断\",\"248\":\"v-79533b1a#参数\",\"249\":\"v-79533b1a#case\",\"250\":\"v-79533b1a#循环\",\"251\":\"v-79533b1a#while循环\",\"252\":\"v-79533b1a#repeat循环\",\"253\":\"v-79533b1a#loop循环\",\"254\":\"v-79533b1a#游标\",\"255\":\"v-79533b1a#条件处理程序\",\"256\":\"v-79533b1a#存储函数\",\"257\":\"v-13f32783\",\"258\":\"v-13f32783#事务操作\",\"259\":\"v-13f32783#事务的四大特性\",\"260\":\"v-13f32783#事务并发问题\",\"261\":\"v-13f32783#事务的隔离级别\",\"262\":\"v-2921a50f\",\"263\":\"v-2921a50f#大纲\",\"264\":\"v-2921a50f#redis入门\",\"265\":\"v-2921a50f#redis客户端\",\"266\":\"v-2921a50f#redis进阶\",\"267\":\"v-2921a50f#redis原理\",\"268\":\"v-2921a50f#参考资料\",\"269\":\"v-a164f926\",\"270\":\"v-20c7d348\",\"271\":\"v-20c7d348#缓存\",\"272\":\"v-20c7d348#缓存穿透\",\"273\":\"v-20c7d348#缓存雪崩\",\"274\":\"v-20c7d348#缓存击穿\",\"275\":\"v-20c7d348#缓存污染\",\"276\":\"v-20c7d348#缓存更新策略\",\"277\":\"v-20c7d348#主动更新策略\",\"278\":\"v-20c7d348#缓存淘汰策略\",\"279\":\"v-519b40a0\",\"280\":\"v-75198dab\",\"281\":\"v-10b5d72d\",\"282\":\"v-10b5d72d#本地进程缓存\",\"283\":\"v-10b5d72d#caffeine\",\"284\":\"v-10b5d72d#caffeine示例\",\"285\":\"v-10b5d72d#caffeine缓存驱逐策略\",\"286\":\"v-23873776\",\"287\":\"v-8846cbc0\",\"288\":\"v-8846cbc0#初识-lua\",\"289\":\"v-8846cbc0#快速入门\",\"290\":\"v-8846cbc0#变量\",\"291\":\"v-8846cbc0#循环\",\"292\":\"v-8846cbc0#条件\",\"293\":\"v-8846cbc0#函数\",\"294\":\"v-2e845f3e\",\"295\":\"v-2e845f3e#搭建主从架构\",\"296\":\"v-2e845f3e#_1-集群结构\",\"297\":\"v-2e845f3e#_2-准备实例和配置\",\"298\":\"v-2e845f3e#_3-启动\",\"299\":\"v-2e845f3e#_4-开启主从关系\",\"300\":\"v-2e845f3e#_5-测试\",\"301\":\"v-2e845f3e#数据同步原理\",\"302\":\"v-2e845f3e#全量同步\",\"303\":\"v-2e845f3e#增量同步\",\"304\":\"v-2e845f3e#总结\",\"305\":\"v-6a3d1060\",\"306\":\"v-6a3d1060#安装openresty\",\"307\":\"v-6a3d1060#_1-安装\",\"308\":\"v-6a3d1060#_2-启动和运行\",\"309\":\"v-6a3d1060#_3-备注\",\"310\":\"v-6a3d1060#openresty快速入门\",\"311\":\"v-6a3d1060#步骤1-修改nginx-conf文件\",\"312\":\"v-6a3d1060#步骤2-编写item-lua文件\",\"313\":\"v-6a3d1060#openresty获取请求参数\",\"314\":\"v-6a3d1060#封装http请求工具\",\"315\":\"v-6a3d1060#向tomcat发送http请求\",\"316\":\"v-6a3d1060#根据商品id对tomcat集群负载均衡\",\"317\":\"v-6a3d1060#redis缓存预热\",\"318\":\"v-6a3d1060#查询redis\",\"319\":\"v-6a3d1060#nginx本地缓存\",\"320\":\"v-b6a85f34\",\"321\":\"v-b6a85f34#rdb持久化\",\"322\":\"v-b6a85f34#aof持久化\",\"323\":\"v-b6a85f34#rdb与aof对比\",\"324\":\"v-9507482e\",\"325\":\"v-9507482e#哨兵的作用和工作原理\",\"326\":\"v-9507482e#哨兵的作用\",\"327\":\"v-9507482e#服务状态监控\",\"328\":\"v-9507482e#选举新的master\",\"329\":\"v-9507482e#实现故障转移\",\"330\":\"v-9507482e#小结\",\"331\":\"v-9507482e#搭建哨兵集群\",\"332\":\"v-9507482e#集群结构\",\"333\":\"v-9507482e#准备实例和配置\",\"334\":\"v-9507482e#启动\",\"335\":\"v-9507482e#测试\",\"336\":\"v-9507482e#redistemplate连接集群\",\"337\":\"v-8e986b64\",\"338\":\"v-3c43b28a\",\"339\":\"v-3c43b28a#搭建分片集群\",\"340\":\"v-3c43b28a#集群结构\",\"341\":\"v-3c43b28a#准备实例和配置\",\"342\":\"v-3c43b28a#启动\",\"343\":\"v-3c43b28a#创建集群\",\"344\":\"v-3c43b28a#测试\",\"345\":\"v-3c43b28a#散列插槽\",\"346\":\"v-3c43b28a#集群伸缩\",\"347\":\"v-3c43b28a#故障转移\",\"348\":\"v-3c43b28a#redistemplate访问分片集群\",\"349\":\"v-573ec1a9\",\"350\":\"v-53e49a9c\",\"351\":\"v-53e49a9c#简介\",\"352\":\"v-53e49a9c#官方地址\",\"353\":\"v-53e49a9c#快速入门\",\"354\":\"v-fcc65208\",\"355\":\"v-fcc65208#编写一个-redisconfig-配置类\",\"356\":\"v-fcc65208#自定义序列化方式\",\"357\":\"v-fcc65208#优化自定义序列化\",\"358\":\"v-fcc65208#小结\",\"359\":\"v-f84282fc\",\"360\":\"v-f84282fc#介绍\",\"361\":\"v-f84282fc#操作api\",\"362\":\"v-f84282fc#spring-boot-中使用\",\"363\":\"v-54dbf3e0\",\"364\":\"v-71e056ea\",\"365\":\"v-71e056ea#什么是nosql\",\"366\":\"v-71e056ea#nosql与sql\",\"367\":\"v-71e056ea#认识redis\",\"368\":\"v-71e056ea#安装redis\",\"369\":\"v-71e056ea#redis启动的三种方式\",\"370\":\"v-71e056ea#前台启动\",\"371\":\"v-71e056ea#后台启动\",\"372\":\"v-71e056ea#开机启动\",\"373\":\"v-71e056ea#redis客户端\",\"374\":\"v-71e056ea#命令行客户端\",\"375\":\"v-71e056ea#图形化客户端\",\"376\":\"v-71e056ea#编程语言客户端\",\"377\":\"v-74de4522\",\"378\":\"v-74de4522#string-字符串\",\"379\":\"v-74de4522#hash-哈希\",\"380\":\"v-74de4522#list-列表\",\"381\":\"v-74de4522#set-集合\",\"382\":\"v-74de4522#sortedset-有序集合\",\"383\":\"v-1366557b\",\"384\":\"v-21c9d5a4\",\"385\":\"v-21c9d5a4#语法\",\"386\":\"v-21c9d5a4#脚本命令\",\"387\":\"v-e750edf2\",\"388\":\"v-e750edf2#xadd\",\"389\":\"v-e750edf2#xtrim\",\"390\":\"v-e750edf2#xdel\",\"391\":\"v-e750edf2#xlen\",\"392\":\"v-e750edf2#xrange\",\"393\":\"v-e750edf2#xrevrange\",\"394\":\"v-e750edf2#xread\",\"395\":\"v-e750edf2#xgroup-create\",\"396\":\"v-e750edf2#xreadgroup-group\",\"397\":\"v-08e2c420\",\"398\":\"v-08e2c420#geo类型\",\"399\":\"v-08e2c420#bitmap类型\",\"400\":\"v-08e2c420#hyperloglog类型\",\"401\":\"v-06153dcd\",\"402\":\"v-7ffb8e61\",\"403\":\"v-7ffb8e61#用户空间与内核空间\",\"404\":\"v-7ffb8e61#阻塞io\",\"405\":\"v-7ffb8e61#非阻塞io\",\"406\":\"v-7ffb8e61#io多路复用\",\"407\":\"v-7ffb8e61#select\",\"408\":\"v-7ffb8e61#poll\",\"409\":\"v-7ffb8e61#epoll\",\"410\":\"v-7ffb8e61#事件通知机制\",\"411\":\"v-7ffb8e61#web服务流程\",\"412\":\"v-7ffb8e61#总结\",\"413\":\"v-7ffb8e61#信号驱动io\",\"414\":\"v-7ffb8e61#异步io\",\"415\":\"v-7ffb8e61#同步和异步\",\"416\":\"v-4202f375\",\"417\":\"v-4202f375#字符串对象string\",\"418\":\"v-4202f375#列表对象list\",\"419\":\"v-4202f375#哈希对象hash\",\"420\":\"v-4202f375#集合对象set\",\"421\":\"v-4202f375#有序集合对象zset\",\"422\":\"v-6dc1af78\",\"423\":\"v-6dc1af78#resp协议\",\"424\":\"v-6dc1af78#自定义客户端\",\"425\":\"v-3420ecf3\",\"426\":\"v-3420ecf3#动态字符串sds\",\"427\":\"v-3420ecf3#基本概念\",\"428\":\"v-3420ecf3#底层实现\",\"429\":\"v-3420ecf3#内存预分配\",\"430\":\"v-3420ecf3#sds小结\",\"431\":\"v-3420ecf3#整数集intset\",\"432\":\"v-3420ecf3#基本概念-1\",\"433\":\"v-3420ecf3#底层实现-1\",\"434\":\"v-3420ecf3#数组扩容\",\"435\":\"v-3420ecf3#intset小结\",\"436\":\"v-3420ecf3#字典-哈希表dict\",\"437\":\"v-3420ecf3#基本概念-2\",\"438\":\"v-3420ecf3#底层实现-2\",\"439\":\"v-3420ecf3#扩容收缩\",\"440\":\"v-3420ecf3#rehash\",\"441\":\"v-3420ecf3#dict小结\",\"442\":\"v-3420ecf3#压缩列表ziplist\",\"443\":\"v-3420ecf3#ziplistentry\",\"444\":\"v-3420ecf3#encoding编码\",\"445\":\"v-3420ecf3#连锁更新问题\",\"446\":\"v-3420ecf3#ziplist小结\",\"447\":\"v-3420ecf3#快速列表quicklist\",\"448\":\"v-3420ecf3#基本概念-3\",\"449\":\"v-3420ecf3#底层实现-3\",\"450\":\"v-3420ecf3#限制压缩\",\"451\":\"v-3420ecf3#quicklist小结\",\"452\":\"v-3420ecf3#跳表skiplist\",\"453\":\"v-3420ecf3#基本概念-4\",\"454\":\"v-3420ecf3#底层实现-4\",\"455\":\"v-3420ecf3#skiplist小结\",\"456\":\"v-79599d42\",\"457\":\"v-79599d42#删除策略\",\"458\":\"v-79599d42#淘汰策略\",\"459\":\"v-a98569f0\",\"460\":\"v-a98569f0#思考\",\"461\":\"v-a98569f0#网络模型\",\"462\":\"v-a98569f0#单线程网络模型\",\"463\":\"v-a98569f0#多线程网络模型\",\"464\":\"v-a98569f0#底层实现\",\"465\":\"v-38959971\",\"466\":\"v-38959971#为什么会设计redisobject\",\"467\":\"v-38959971#redisobject\",\"468\":\"v-38959971#编码方式\",\"469\":\"v-38959971#数据类型\",\"470\":\"v-38959971#命令处理\",\"471\":\"v-38959971#对象共享\",\"472\":\"v-38959971#引用计数器\",\"473\":\"v-c94937a4\",\"474\":\"v-c94937a4#docker架构\",\"475\":\"v-c94937a4#docker镜像加速\",\"476\":\"v-c94937a4#样例剖析\",\"477\":\"v-6be43eec\",\"478\":\"v-6be43eec#compose简介\",\"479\":\"v-6be43eec#compose安装\",\"480\":\"v-6be43eec#compose样例\",\"481\":\"v-6be43eec#compose基本命令\",\"482\":\"v-6be43eec#compose文件结构\",\"483\":\"v-6be43eec#compose高级应用\",\"484\":\"v-51da8368\",\"485\":\"v-51da8368#容器命名\",\"486\":\"v-51da8368#创建网络\",\"487\":\"v-51da8368#连接容器\",\"488\":\"v-c4b8f44c\",\"489\":\"v-c4b8f44c#什么是dockerfile\",\"490\":\"v-c4b8f44c#示例说明\",\"491\":\"v-c4b8f44c#镜像结构\",\"492\":\"v-c4b8f44c#编写规则\",\"493\":\"v-c4b8f44c#指令汇总\",\"494\":\"v-0eb001f6\",\"495\":\"v-0eb001f6#hello-world容器样例\",\"496\":\"v-0eb001f6#centos容器样例\",\"497\":\"v-59734a21\",\"498\":\"v-59734a21#macos安装\",\"499\":\"v-59734a21#windows安装\",\"500\":\"v-59734a21#linux安装\",\"501\":\"v-59734a21#docker官方安装教程\",\"502\":\"v-19a7f746\",\"503\":\"v-19a7f746#docker是什么\",\"504\":\"v-19a7f746#docker能干什么\",\"505\":\"v-19a7f746#docker和普通虚拟机的区别\",\"506\":\"v-19a7f746#学习docker之前-需要什么基础\",\"507\":\"v-1b70cad2\",\"508\":\"v-1b70cad2#什么是docker镜像、容器、仓库\",\"509\":\"v-1b70cad2#镜像、容器、仓库之间的关系\",\"510\":\"v-1b70cad2#docker镜像\",\"511\":\"v-1b70cad2#镜像列表\",\"512\":\"v-1b70cad2#查找镜像\",\"513\":\"v-1b70cad2#拉取镜像\",\"514\":\"v-1b70cad2#删除镜像\",\"515\":\"v-1b70cad2#更新镜像\",\"516\":\"v-1b70cad2#生成镜像\",\"517\":\"v-1b70cad2#镜像标签\",\"518\":\"v-1b70cad2#镜像导入和导出\",\"519\":\"v-1b70cad2#docker容器\",\"520\":\"v-1b70cad2#容器启动\",\"521\":\"v-1b70cad2#容器查看\",\"522\":\"v-1b70cad2#容器再启动\",\"523\":\"v-1b70cad2#容器停止和重启\",\"524\":\"v-1b70cad2#后台模式与进入\",\"525\":\"v-1b70cad2#容器导出和导入\",\"526\":\"v-1b70cad2#强制删除容器\",\"527\":\"v-1b70cad2#清理停止的容器\",\"528\":\"v-1b70cad2#容器别名及操作\",\"529\":\"v-1b70cad2#容器错误日志\",\"530\":\"v-1b70cad2#docker仓库\",\"531\":\"v-de108d8e\",\"532\":\"v-de108d8e#登录和退出\",\"533\":\"v-de108d8e#推送镜像\",\"534\":\"v-67ba3c2b\",\"535\":\"v-67ba3c2b#运行一个web应用\",\"536\":\"v-67ba3c2b#查看web应用容器\",\"537\":\"v-67ba3c2b#自定义网络端口映射\",\"538\":\"v-67ba3c2b#查看端口映射信息\",\"539\":\"v-67ba3c2b#停止web应用容器\",\"540\":\"v-67ba3c2b#重启web应用容器\",\"541\":\"v-67ba3c2b#删除web应用容器\",\"542\":\"v-5b613c4a\",\"543\":\"v-5b613c4a#为什么要写这个系列\",\"544\":\"v-62aaa642\",\"545\":\"v-5facdd69\",\"546\":\"v-1a784dda\",\"547\":\"v-4a889bdf\",\"548\":\"v-4a889bdf#windows版\",\"549\":\"v-4a889bdf#ctrl\",\"550\":\"v-4a889bdf#alt\",\"551\":\"v-4a889bdf#shift\",\"552\":\"v-4a889bdf#ctrl-alt\",\"553\":\"v-4a889bdf#ctrl-shift\",\"554\":\"v-4a889bdf#alt-shift\",\"555\":\"v-4a889bdf#ctrl-shift-alt\",\"556\":\"v-4a889bdf#其他\",\"557\":\"v-4a889bdf#mac版\",\"558\":\"v-6c683669\",\"559\":\"v-157f1d36\",\"560\":\"v-157f1d36#注释\",\"561\":\"v-157f1d36#命名规范\",\"562\":\"v-157f1d36#数据类型\",\"563\":\"v-157f1d36#运算符\",\"564\":\"v-157f1d36#条件语句\",\"565\":\"v-157f1d36#if语句\",\"566\":\"v-157f1d36#switch语句\",\"567\":\"v-157f1d36#循环语句\",\"568\":\"v-157f1d36#for循环\",\"569\":\"v-157f1d36#while循环\",\"570\":\"v-157f1d36#do-while循环\",\"571\":\"v-157f1d36#类和对象\",\"572\":\"v-157f1d36#属性和方法\",\"573\":\"v-57af2dac\",\"574\":\"v-57af2dac#面向对象三个特性\",\"575\":\"v-57af2dac#封装\",\"576\":\"v-57af2dac#继承\",\"577\":\"v-57af2dac#多态\",\"578\":\"v-57af2dac#类和对象\",\"579\":\"v-57af2dac#概述\",\"580\":\"v-57af2dac#内部类\",\"581\":\"v-57af2dac#创建对象\",\"582\":\"v-57af2dac#属性\",\"583\":\"v-57af2dac#方法\",\"584\":\"v-57af2dac#方法的分类\",\"585\":\"v-57af2dac#方法的调用\",\"586\":\"v-57af2dac#方法的重载和重写\",\"587\":\"v-57af2dac#可变参数\",\"588\":\"v-57af2dac#构造方法\",\"589\":\"v-57af2dac#接口和抽象类\",\"590\":\"v-57af2dac#接口\",\"591\":\"v-57af2dac#抽象类\",\"592\":\"v-57af2dac#接口和抽象类的区别\",\"593\":\"v-733e6662\",\"594\":\"v-733e6662#概述\",\"595\":\"v-733e6662#层次结构\",\"596\":\"v-733e6662#异常基础\",\"597\":\"v-733e6662#异常关键字\",\"598\":\"v-733e6662#异常声明\",\"599\":\"v-733e6662#异常抛出\",\"600\":\"v-733e6662#异常捕获\",\"601\":\"v-733e6662#异常自定义\",\"602\":\"v-391d5b93\",\"603\":\"v-391d5b93#下载-jdk\",\"604\":\"v-391d5b93#安装jdk\",\"605\":\"v-391d5b93#配置环境变量\",\"606\":\"v-391d5b93#windows\",\"607\":\"v-391d5b93#macos\",\"608\":\"v-391d5b93#环境检测\",\"609\":\"v-4cf67fee\",\"610\":\"v-4cf67fee#是什么\",\"611\":\"v-4cf67fee#jdk\",\"612\":\"v-4cf67fee#jre\",\"613\":\"v-4cf67fee#jvm\",\"614\":\"v-4cf67fee#什么关系\",\"615\":\"v-ffb970b6\",\"616\":\"v-724d33df\",\"617\":\"v-0c2ad8d4\",\"618\":\"v-0c2ad8d4#介绍\",\"619\":\"v-0c2ad8d4#使用\",\"620\":\"v-0c2ad8d4#arraylist实现\",\"621\":\"v-0c2ad8d4#底层存储\",\"622\":\"v-0c2ad8d4#构造方法\",\"623\":\"v-0c2ad8d4#add方法\",\"624\":\"v-0c2ad8d4#get方法\",\"625\":\"v-0c2ad8d4#set方法\",\"626\":\"v-0c2ad8d4#remove方法\",\"627\":\"v-0c2ad8d4#自动扩容\",\"628\":\"v-16722c46\",\"629\":\"v-6ce7b6da\",\"630\":\"v-5a85e730\",\"631\":\"v-4ad44c69\",\"632\":\"v-591229dc\",\"633\":\"v-591229dc#windows\",\"634\":\"v-591229dc#macos\",\"635\":\"v-431d90ac\",\"636\":\"v-431d90ac#开始之前\",\"637\":\"v-431d90ac#项目介绍\",\"638\":\"v-431d90ac#代码仓库\",\"639\":\"v-431d90ac#参考资料\",\"640\":\"v-431d90ac#最后\",\"641\":\"v-2ea65610\",\"642\":\"v-2ea65610#创建子模块\",\"643\":\"v-2ea65610#开启组件扫描\",\"644\":\"v-2ea65610#使用注解定义bean\",\"645\":\"v-2ea65610#数据注入\",\"646\":\"v-2ea65610#autowired注入\",\"647\":\"v-2ea65610#resource注入\",\"648\":\"v-2ea65610#spring全注解开发\",\"649\":\"v-1e38e0b7\",\"650\":\"v-1e38e0b7#创建子模块\",\"651\":\"v-7fc2ecf2\",\"652\":\"v-4d4cd2de\",\"653\":\"v-4d4cd2de#参考资料\",\"654\":\"v-53cb8d26\",\"655\":\"v-53cb8d26#场景模拟\",\"656\":\"v-53cb8d26#代理模式\",\"657\":\"v-53cb8d26#静态代理\",\"658\":\"v-53cb8d26#动态代理\",\"659\":\"v-53cb8d26#aop概念及相关术语\",\"660\":\"v-53cb8d26#概述\",\"661\":\"v-53cb8d26#相关术语\",\"662\":\"v-53cb8d26#基于注解的aop\",\"663\":\"v-53cb8d26#技术说明\",\"664\":\"v-53cb8d26#准备工作\",\"665\":\"v-53cb8d26#创建切面类并配置\",\"666\":\"v-53cb8d26#各种通知\",\"667\":\"v-53cb8d26#切入点表达式语法\",\"668\":\"v-53cb8d26#重用切入点表达式\",\"669\":\"v-53cb8d26#获取通知的相关信息\",\"670\":\"v-53cb8d26#环绕通知\",\"671\":\"v-53cb8d26#切面的优先级\",\"672\":\"v-53cb8d26#基于xml的aop\",\"673\":\"v-53cb8d26#准备工作-1\",\"674\":\"v-53cb8d26#实现\",\"675\":\"v-5a9eefa2\",\"676\":\"v-5a9eefa2#aot概述\",\"677\":\"v-5a9eefa2#jit与aot的区别\",\"678\":\"v-5a9eefa2#graalvm\",\"679\":\"v-5a9eefa2#native-image\",\"680\":\"v-b9412328\",\"681\":\"v-b9412328#通过validator接口实现\",\"682\":\"v-b9412328#bean-validation注解实现\",\"683\":\"v-b9412328#基于方法实现校验\",\"684\":\"v-b9412328#实现自定义校验\",\"685\":\"v-76e3364c\",\"686\":\"v-76e3364c#i18n概述\",\"687\":\"v-76e3364c#java国际化\",\"688\":\"v-76e3364c#spring6国际化\",\"689\":\"v-76e3364c#messagesource接口\",\"690\":\"v-76e3364c#使用spring6国际化\",\"691\":\"v-7ca5f40b\",\"692\":\"v-7ca5f40b#ioc容器\",\"693\":\"v-7ca5f40b#ioc控制反转\",\"694\":\"v-7ca5f40b#依赖注入\",\"695\":\"v-7ca5f40b#ioc容器在spring中的实现\",\"696\":\"v-11375dfa\",\"697\":\"v-11375dfa#整合junit5\",\"698\":\"v-11375dfa#搭建子模块\",\"699\":\"v-11375dfa#引入依赖\",\"700\":\"v-11375dfa#添加配置文件\",\"701\":\"v-11375dfa#添加java类\",\"702\":\"v-11375dfa#测试\",\"703\":\"v-5da3c0ba\",\"704\":\"v-5da3c0ba#resources概述\",\"705\":\"v-5da3c0ba#resource接口\",\"706\":\"v-5da3c0ba#resource的实现类\",\"707\":\"v-5da3c0ba#urlresource访问网络资源\",\"708\":\"v-5da3c0ba#classpathresource-访问类路径下资源\",\"709\":\"v-5da3c0ba#filesystemresource-访问文件系统资源\",\"710\":\"v-5da3c0ba#servletcontextresource\",\"711\":\"v-5da3c0ba#inputstreamresource\",\"712\":\"v-5da3c0ba#bytearrayresource\",\"713\":\"v-5da3c0ba#resource类图\",\"714\":\"v-5da3c0ba#resourceloader-接口\",\"715\":\"v-5da3c0ba#resourceloader-概述\",\"716\":\"v-5da3c0ba#使用演示\",\"717\":\"v-5da3c0ba#resourceloader-总结\",\"718\":\"v-5da3c0ba#resourceloaderaware-接口\",\"719\":\"v-5da3c0ba#使用resource-作为属性\",\"720\":\"v-5da3c0ba#应用程序上下文和资源路径\",\"721\":\"v-5da3c0ba#概述\",\"722\":\"v-5da3c0ba#applicationcontext实现类指定访问策略\",\"723\":\"v-5da3c0ba#使用前缀指定访问策略\",\"724\":\"v-485b73f2\",\"725\":\"v-485b73f2#spring-是什么\",\"726\":\"v-485b73f2#spring-framework的特点\",\"727\":\"v-485b73f2#spring-模块组成\",\"728\":\"v-366a426c\",\"729\":\"v-366a426c#jdbctemplate\",\"730\":\"v-366a426c#准备工作\",\"731\":\"v-366a426c#实现curd\",\"732\":\"v-366a426c#事务概念\",\"733\":\"v-366a426c#事务基本概念\",\"734\":\"v-366a426c#编程式事务\",\"735\":\"v-366a426c#声明式事务\",\"736\":\"v-366a426c#基于注解的声明式事务\",\"737\":\"v-366a426c#准备工作-1\",\"738\":\"v-366a426c#测试无事务情况\",\"739\":\"v-366a426c#加入事务\",\"740\":\"v-366a426c#transactional注解标识的位置\",\"741\":\"v-366a426c#事务属性-只读\",\"742\":\"v-366a426c#事务属性-超时\",\"743\":\"v-366a426c#事务属性-回滚策略\",\"744\":\"v-366a426c#事务属性-隔离级别\",\"745\":\"v-366a426c#事务属性-传播行为\",\"746\":\"v-366a426c#全注解配置事务\",\"747\":\"v-366a426c#基于xml的声明式事务\",\"748\":\"v-366a426c#场景模拟\",\"749\":\"v-366a426c#修改spring配置文件\",\"750\":\"v-395adc3d\",\"751\":\"v-395adc3d#创建子模块\",\"752\":\"v-395adc3d#获取bean\",\"753\":\"v-395adc3d#依赖注入\",\"754\":\"v-395adc3d#set注入\",\"755\":\"v-395adc3d#构造器注入\",\"756\":\"v-395adc3d#数据赋值\",\"757\":\"v-395adc3d#特殊值赋值\",\"758\":\"v-395adc3d#对象类型属性赋值\",\"759\":\"v-395adc3d#数组类型属性赋值\",\"760\":\"v-395adc3d#集合类型属性赋值\",\"761\":\"v-395adc3d#p命名空间\",\"762\":\"v-395adc3d#引入外部属性文件\",\"763\":\"v-395adc3d#bean的作用域\",\"764\":\"v-395adc3d#bean生命周期\",\"765\":\"v-395adc3d#factorybean\",\"766\":\"v-395adc3d#基于xml自动装配\",\"767\":\"v-5cc68e42\",\"768\":\"v-5cc68e42#章节分布\",\"769\":\"v-5cc68e42#参考资料\",\"770\":\"v-4bbcf4f8\",\"771\":\"v-6f3dd303\",\"772\":\"v-77d179d8\",\"773\":\"v-77d179d8#_2-1-按分布范围分类\",\"774\":\"v-77d179d8#_2-2-按传输技术分类\",\"775\":\"v-77d179d8#_2-3-按拓扑结构分类\",\"776\":\"v-77d179d8#_2-4-按使用者分类\",\"777\":\"v-77d179d8#_2-5-按交换技术分类\",\"778\":\"v-77d179d8#_2-6-按传输介质分类\",\"779\":\"v-33201e36\",\"780\":\"v-33201e36#_1-1-计算机网络的概念\",\"781\":\"v-33201e36#_1-1-1-广义观点\",\"782\":\"v-33201e36#_1-1-2-资源共享观点\",\"783\":\"v-33201e36#_1-1-3-用户透明性观点\",\"784\":\"v-33201e36#_1-2-计算机网络的组成\",\"785\":\"v-33201e36#_1-2-1-从组成部分上看\",\"786\":\"v-33201e36#_1-2-2-从工作方式上看\",\"787\":\"v-33201e36#_1-2-3-从功能组成上看\",\"788\":\"v-33201e36#_1-3-计算机网络的功能\",\"789\":\"v-33201e36#_1-3-1-数据通信\",\"790\":\"v-33201e36#_1-3-2-资源共享\",\"791\":\"v-33201e36#_1-3-3-分布式处理\",\"792\":\"v-33201e36#_1-3-4-提高可靠性\",\"793\":\"v-33201e36#_1-3-5-负载均衡\",\"794\":\"v-3d008037\",\"795\":\"v-27d387b4\",\"796\":\"v-41c16c2a\",\"797\":\"v-d90a0794\",\"798\":\"v-a94a8cca\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2,12],\"2\":[2,32],\"3\":[1,25],\"4\":[1,4],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1],\"9\":[1,3],\"10\":[2],\"11\":[1],\"12\":[1],\"13\":[1],\"14\":[1],\"15\":[1,1],\"16\":[2,14],\"17\":[1,55],\"18\":[3,46],\"19\":[1,54],\"20\":[1],\"21\":[2],\"22\":[1,14],\"23\":[2,18],\"24\":[2,33],\"25\":[2,37],\"26\":[2,43],\"27\":[2,8],\"28\":[1,28],\"29\":[1,30],\"30\":[2,5],\"31\":[1,37],\"32\":[1,11],\"33\":[2],\"34\":[1,35],\"35\":[1,51],\"36\":[2],\"37\":[1,49],\"38\":[1,170],\"39\":[1,85],\"40\":[1,1],\"41\":[1,1],\"42\":[1,1],\"43\":[1],\"44\":[1],\"45\":[1],\"46\":[2],\"47\":[1,3],\"48\":[1,3],\"49\":[1,33],\"50\":[1,3],\"51\":[1,21],\"52\":[2,50],\"53\":[2],\"54\":[2,3],\"55\":[1,31],\"56\":[1,15],\"57\":[1,27],\"58\":[1,38],\"59\":[2],\"60\":[1,49],\"61\":[1,8],\"62\":[1,4],\"63\":[3,27],\"64\":[3,27],\"65\":[3,30],\"66\":[4,14],\"67\":[1,1],\"68\":[3,12],\"69\":[5,10],\"70\":[3,20],\"71\":[3,6],\"72\":[3,3],\"73\":[5,6],\"74\":[3,14],\"75\":[1,49],\"76\":[1,24],\"77\":[3,18],\"78\":[2,37],\"79\":[2],\"80\":[1],\"81\":[1,15],\"82\":[1,18],\"83\":[1,15],\"84\":[1,26],\"85\":[2,17],\"86\":[3,18],\"87\":[2,23],\"88\":[1,41],\"89\":[2],\"90\":[2],\"91\":[1,6],\"92\":[1,11],\"93\":[1,10],\"94\":[1,12],\"95\":[1,18],\"96\":[1,18],\"97\":[1,19],\"98\":[1,22],\"99\":[1,22],\"100\":[1,26],\"101\":[1,10],\"102\":[1,18],\"103\":[1,6],\"104\":[1,3],\"105\":[2],\"106\":[1,29],\"107\":[1,10],\"108\":[1,11],\"109\":[1],\"110\":[1,10],\"111\":[1,35],\"112\":[1,1],\"113\":[2],\"114\":[1],\"115\":[1,10],\"116\":[1,17],\"117\":[1,21],\"118\":[1,10],\"119\":[1,8],\"120\":[1,16],\"121\":[1,8],\"122\":[1,5],\"123\":[1,38],\"124\":[1,17],\"125\":[1,14],\"126\":[1,41],\"127\":[1,14],\"128\":[1,51],\"129\":[1,36],\"130\":[1],\"131\":[1,61],\"132\":[1,23],\"133\":[1,20],\"134\":[1,44],\"135\":[2,16],\"136\":[1,36],\"137\":[2],\"138\":[1,16],\"139\":[1],\"140\":[1,10],\"141\":[1,20],\"142\":[1,23],\"143\":[1],\"144\":[1,17],\"145\":[2,21],\"146\":[2,54],\"147\":[2,42],\"148\":[1,34],\"149\":[1,14],\"150\":[1],\"151\":[1,4],\"152\":[2],\"153\":[2],\"154\":[2],\"155\":[1,21],\"156\":[1,9],\"157\":[1,30],\"158\":[1],\"159\":[1,30],\"160\":[1,31],\"161\":[1,34],\"162\":[2],\"163\":[1],\"164\":[1,15],\"165\":[1,36],\"166\":[1,25],\"167\":[1],\"168\":[1,17],\"169\":[1,10],\"170\":[2],\"171\":[2],\"172\":[1,22],\"173\":[1,28],\"174\":[2],\"175\":[1,14],\"176\":[1,22],\"177\":[1],\"178\":[1,23],\"179\":[1,74],\"180\":[1,24],\"181\":[1,14],\"182\":[1,20],\"183\":[1,16],\"184\":[1,15],\"185\":[1],\"186\":[1,16],\"187\":[1,17],\"188\":[1,17],\"189\":[1,45],\"190\":[1],\"191\":[1,25],\"192\":[1,30],\"193\":[1,23],\"194\":[1,23],\"195\":[1,23],\"196\":[1,8],\"197\":[1,32],\"198\":[1,46],\"199\":[2],\"200\":[1],\"201\":[1,11],\"202\":[1,15],\"203\":[1,17],\"204\":[1,46],\"205\":[2],\"206\":[1,32],\"207\":[1,51],\"208\":[1,17],\"209\":[1,10],\"210\":[2],\"211\":[1,17],\"212\":[1,34],\"213\":[1,16],\"214\":[2],\"215\":[1,9],\"216\":[1,8],\"217\":[1],\"218\":[1,5],\"219\":[1,7],\"220\":[1,4],\"221\":[1,10],\"222\":[1,11],\"223\":[1,41],\"224\":[1],\"225\":[1,11],\"226\":[1,4],\"227\":[2],\"228\":[1,31],\"229\":[1,51],\"230\":[1,31],\"231\":[1,78],\"232\":[2],\"233\":[1,31],\"234\":[1,31],\"235\":[1],\"236\":[1,36],\"237\":[1,16],\"238\":[1,39],\"239\":[1,29],\"240\":[2],\"241\":[1,19],\"242\":[1,43],\"243\":[1],\"244\":[1,33],\"245\":[1,34],\"246\":[1,28],\"247\":[1,10],\"248\":[1,23],\"249\":[1,20],\"250\":[1],\"251\":[1,15],\"252\":[1,21],\"253\":[1,21],\"254\":[1,20],\"255\":[1,26],\"256\":[1,31],\"257\":[2,6],\"258\":[1,25],\"259\":[1,23],\"260\":[1,18],\"261\":[1,33],\"262\":[2,1],\"263\":[1],\"264\":[1,10],\"265\":[1,5],\"266\":[1,14],\"267\":[1,8],\"268\":[1,26],\"269\":[2],\"270\":[2],\"271\":[1,15],\"272\":[1,28],\"273\":[1,15],\"274\":[1,36],\"275\":[1,43],\"276\":[1,34],\"277\":[1,29],\"278\":[1,24],\"279\":[2],\"280\":[2],\"281\":[2,20],\"282\":[1,46],\"283\":[1,63],\"284\":[1,38],\"285\":[1,46],\"286\":[2],\"287\":[2],\"288\":[2,13],\"289\":[1,15],\"290\":[1,76],\"291\":[1,47],\"292\":[1,21],\"293\":[1,57],\"294\":[2],\"295\":[1,17],\"296\":[2,19],\"297\":[2,86],\"298\":[2,26],\"299\":[2,46],\"300\":[2,16],\"301\":[1],\"302\":[1,62],\"303\":[1,46],\"304\":[1,30],\"305\":[2],\"306\":[1,60],\"307\":[2,72],\"308\":[2,73],\"309\":[2,95],\"310\":[1,7],\"311\":[3,39],\"312\":[3,27],\"313\":[1,34],\"314\":[1],\"315\":[1],\"316\":[1],\"317\":[1],\"318\":[1],\"319\":[1],\"320\":[2,29],\"321\":[1,129],\"322\":[1,84],\"323\":[1,30],\"324\":[2,8],\"325\":[1],\"326\":[1,24],\"327\":[1,21],\"328\":[1,37],\"329\":[1,33],\"330\":[1,31],\"331\":[1],\"332\":[1,17],\"333\":[1,74],\"334\":[1,15],\"335\":[1,5],\"336\":[1,96],\"337\":[2],\"338\":[2],\"339\":[1,19],\"340\":[1,23],\"341\":[1,86],\"342\":[1,40],\"343\":[1,75],\"344\":[1,24],\"345\":[1,58],\"346\":[1,87],\"347\":[1,42],\"348\":[1,30],\"349\":[2,48],\"350\":[2],\"351\":[1,18],\"352\":[1,6],\"353\":[1,82],\"354\":[2,65],\"355\":[3,65],\"356\":[1,51],\"357\":[1,31],\"358\":[1,31],\"359\":[2],\"360\":[1,39],\"361\":[1,42],\"362\":[3,81],\"363\":[2,32],\"364\":[2],\"365\":[1,20],\"366\":[1,41],\"367\":[1,31],\"368\":[1,21],\"369\":[1],\"370\":[1,13],\"371\":[1,29],\"372\":[1,43],\"373\":[1,8],\"374\":[1,42],\"375\":[1,44],\"376\":[1,13],\"377\":[2,15],\"378\":[2,87],\"379\":[2,39],\"380\":[2,34],\"381\":[2,36],\"382\":[2,59],\"383\":[2,48],\"384\":[2,11],\"385\":[1,8],\"386\":[1,24],\"387\":[3,111],\"388\":[1,22],\"389\":[1,12],\"390\":[1,8],\"391\":[1,7],\"392\":[1,17],\"393\":[1,17],\"394\":[1,18],\"395\":[2,29],\"396\":[2,25],\"397\":[2,15],\"398\":[1,65],\"399\":[1,38],\"400\":[1,47],\"401\":[2,53],\"402\":[2],\"403\":[1,49],\"404\":[1,18],\"405\":[1,28],\"406\":[1,74],\"407\":[1,79],\"408\":[1,81],\"409\":[1,66],\"410\":[1,47],\"411\":[1,6],\"412\":[1,42],\"413\":[1,18],\"414\":[1,16],\"415\":[1,6],\"416\":[2],\"417\":[1,42],\"418\":[1,24],\"419\":[1,49],\"420\":[1,37],\"421\":[1,70],\"422\":[2],\"423\":[1,120],\"424\":[1,124],\"425\":[2],\"426\":[1],\"427\":[1,47],\"428\":[1,75],\"429\":[1,26],\"430\":[1,21],\"431\":[1],\"432\":[1,38],\"433\":[1,10],\"434\":[1,162],\"435\":[1,10],\"436\":[2],\"437\":[1,42],\"438\":[1,75],\"439\":[1,59],\"440\":[1,110],\"441\":[1,26],\"442\":[1,8],\"443\":[1,40],\"444\":[1,60],\"445\":[1,34],\"446\":[1,40],\"447\":[1],\"448\":[1,20],\"449\":[1,102],\"450\":[1,62],\"451\":[1,11],\"452\":[1,15],\"453\":[1,12],\"454\":[1,20],\"455\":[1,21],\"456\":[2,65],\"457\":[1,58],\"458\":[1,98],\"459\":[2],\"460\":[1,34],\"461\":[1,47],\"462\":[1,39],\"463\":[1,23],\"464\":[1,167],\"465\":[2],\"466\":[1,34],\"467\":[1,47],\"468\":[1,45],\"469\":[1,45],\"470\":[1,19],\"471\":[1,51],\"472\":[1,22],\"473\":[2],\"474\":[1,60],\"475\":[1,71],\"476\":[1,37],\"477\":[2,7],\"478\":[1,24],\"479\":[1,38],\"480\":[1,59],\"481\":[1,19],\"482\":[1,72],\"483\":[1,69],\"484\":[2,10],\"485\":[1,27],\"486\":[1,14],\"487\":[1,39],\"488\":[2],\"489\":[2,20],\"490\":[1,51],\"491\":[1,11],\"492\":[1,6],\"493\":[1,83],\"494\":[2,30],\"495\":[2,14],\"496\":[1,21],\"497\":[2],\"498\":[1,59],\"499\":[1,57],\"500\":[1,13],\"501\":[1,16],\"502\":[2],\"503\":[2,36],\"504\":[2,55],\"505\":[1,23],\"506\":[2,16],\"507\":[4,7],\"508\":[4,33],\"509\":[3,26],\"510\":[1,13],\"511\":[1,15],\"512\":[1,45],\"513\":[1,20],\"514\":[1,31],\"515\":[1,53],\"516\":[1],\"517\":[1,23],\"518\":[1,28],\"519\":[1,6],\"520\":[1,17],\"521\":[1,6],\"522\":[1,16],\"523\":[1,7],\"524\":[1,22],\"525\":[1,24],\"526\":[1,20],\"527\":[1,8],\"528\":[1,19],\"529\":[1,36],\"530\":[1,24],\"531\":[2,19],\"532\":[1,11],\"533\":[1,15],\"534\":[2,8],\"535\":[1,38],\"536\":[1,19],\"537\":[1,46],\"538\":[1,11],\"539\":[1,17],\"540\":[1,12],\"541\":[1,10],\"542\":[2],\"543\":[2,22],\"544\":[2],\"545\":[1],\"546\":[2,4],\"547\":[1],\"548\":[1],\"549\":[1,138],\"550\":[1,75],\"551\":[1,59],\"552\":[3,56],\"553\":[3,97],\"554\":[3,38],\"555\":[4,14],\"556\":[1,36],\"557\":[1],\"558\":[2],\"559\":[2],\"560\":[1,11],\"561\":[1,15],\"562\":[1,48],\"563\":[1,29],\"564\":[1],\"565\":[1,20],\"566\":[1,21],\"567\":[1],\"568\":[1,15],\"569\":[1,6],\"570\":[2,12],\"571\":[1,13],\"572\":[1,42],\"573\":[2,9],\"574\":[1,4],\"575\":[1,23],\"576\":[1,35],\"577\":[1,51],\"578\":[1],\"579\":[1,51],\"580\":[1,94],\"581\":[1,88],\"582\":[1,22],\"583\":[1,34],\"584\":[1,18],\"585\":[1,25],\"586\":[1,29],\"587\":[1,29],\"588\":[1,21],\"589\":[1,17],\"590\":[1,42],\"591\":[1,26],\"592\":[1,41],\"593\":[2,4],\"594\":[1,11],\"595\":[1,78],\"596\":[1],\"597\":[1,27],\"598\":[1,24],\"599\":[1,32],\"600\":[1,132],\"601\":[1,24],\"602\":[2],\"603\":[2,17],\"604\":[1,18],\"605\":[1],\"606\":[1,10],\"607\":[1,11],\"608\":[1,14],\"609\":[4],\"610\":[2],\"611\":[1,25],\"612\":[1,17],\"613\":[1,18],\"614\":[2,20],\"615\":[2],\"616\":[2],\"617\":[3],\"618\":[1,14],\"619\":[1,45],\"620\":[1],\"621\":[1,53],\"622\":[1,86],\"623\":[1,142],\"624\":[1,28],\"625\":[1,33],\"626\":[1,110],\"627\":[1,111],\"628\":[2],\"629\":[2,1],\"630\":[1,22],\"631\":[1,57],\"632\":[1],\"633\":[1,8],\"634\":[1,168],\"635\":[1],\"636\":[1,34],\"637\":[1,3],\"638\":[1,9],\"639\":[1,16],\"640\":[1,7],\"641\":[2,27],\"642\":[1,62],\"643\":[1,101],\"644\":[1,38],\"645\":[1],\"646\":[2,153],\"647\":[2,150],\"648\":[1,27],\"649\":[2,25],\"650\":[1,241],\"651\":[2,110],\"652\":[1,1],\"653\":[1,25],\"654\":[2],\"655\":[1,55],\"656\":[1,34],\"657\":[1,44],\"658\":[1,87],\"659\":[1],\"660\":[1,15],\"661\":[1,85],\"662\":[1],\"663\":[1,31],\"664\":[1,77],\"665\":[1,157],\"666\":[1,29],\"667\":[1,48],\"668\":[1,36],\"669\":[1,59],\"670\":[1,41],\"671\":[1,13],\"672\":[1],\"673\":[1,1],\"674\":[1,48],\"675\":[2],\"676\":[1],\"677\":[1,109],\"678\":[1,66],\"679\":[2,38],\"680\":[2,29],\"681\":[1,113],\"682\":[2,128],\"683\":[1,88],\"684\":[1,83],\"685\":[2],\"686\":[1,12],\"687\":[1,97],\"688\":[1],\"689\":[1,14],\"690\":[1,110],\"691\":[2,32],\"692\":[1],\"693\":[1,43],\"694\":[1,22],\"695\":[1,58],\"696\":[2,29],\"697\":[1],\"698\":[1,2],\"699\":[1,45],\"700\":[1,149],\"701\":[1,19],\"702\":[1,41],\"703\":[2],\"704\":[1,15],\"705\":[1,80],\"706\":[1,14],\"707\":[1,70],\"708\":[2,69],\"709\":[2,66],\"710\":[1,13],\"711\":[1,16],\"712\":[1,5],\"713\":[1,1],\"714\":[2],\"715\":[2,18],\"716\":[1,39],\"717\":[2,32],\"718\":[2,109],\"719\":[2,120],\"720\":[1],\"721\":[1,14],\"722\":[1,14],\"723\":[1,70],\"724\":[2],\"725\":[3,41],\"726\":[2,53],\"727\":[2,91],\"728\":[2],\"729\":[1,7],\"730\":[1,148],\"731\":[1,107],\"732\":[1],\"733\":[1,52],\"734\":[1,30],\"735\":[1,20],\"736\":[1],\"737\":[1,118],\"738\":[1,43],\"739\":[1,71],\"740\":[2,5],\"741\":[2,49],\"742\":[2,69],\"743\":[2,44],\"744\":[2,52],\"745\":[2,127],\"746\":[1,78],\"747\":[1],\"748\":[1,1],\"749\":[1,93],\"750\":[2],\"751\":[1,15],\"752\":[1,123],\"753\":[1,31],\"754\":[1,93],\"755\":[1,71],\"756\":[1],\"757\":[1,63],\"758\":[1,90],\"759\":[1,53],\"760\":[1,149],\"761\":[1,56],\"762\":[1,137],\"763\":[1,88],\"764\":[1,136],\"765\":[1,434],\"766\":[1,81],\"767\":[1],\"768\":[1,4],\"769\":[1,16],\"770\":[2],\"771\":[2],\"772\":[2],\"773\":[3,15],\"774\":[2],\"775\":[3],\"776\":[3],\"777\":[3],\"778\":[3],\"779\":[3],\"780\":[2,6],\"781\":[2,3],\"782\":[3,13],\"783\":[3,8],\"784\":[3],\"785\":[3,26],\"786\":[3,8],\"787\":[4,12],\"788\":[3],\"789\":[3,8],\"790\":[4,9],\"791\":[3,4],\"792\":[4,2],\"793\":[4,11],\"794\":[2],\"795\":[2],\"796\":[2],\"797\":[2],\"798\":[1]},\"averageFieldLength\":[1.3441802252816006,34.85759698107733],\"storedFields\":{\"0\":{\"h\":\"编程学习知识库\"},\"1\":{\"h\":\"是什么？\",\"t\":[\"该项目主要记录了本人在计算机技术学习道路上的收获和总结，自己对知识的学习笔记和总结，在步入职场以后也会记录自己在工作中遇到的各种问题，以及最后的解决方案，不仅如此还会记录自己在学习生活中的一些感想感悟，一些自己的思考和想法。\",\"随着时间的变迁，在不同的人生阶段对于同一个事物的看法是不同的，故此所有的知识点也仅代表了当前时刻自己对知识的掌握，会不断对知识进行迭代更新，以便于形成自己的知识体系。\"]},\"2\":{\"h\":\"为什么？\",\"t\":[\"提示\",\"目前在互联网上有很多大佬开源了他们的学习笔记，做的堪称完美，那么为什么不去直接使用他们整理好的学习笔记呢？为什么要反复造一些质量并不高的轮子呢？\",\"结合自己的想法\",\"做笔记其实并不是需要一步到位，十分完美且科学，如果以做出完美的笔记为目的，那么各类官方文档是不是更为权威呢？所有的技术和知识点笔记都是基于官方文档展开编写的，也不见得这些笔记没有价值。\",\"自己写总结的目的是为了记录自己对知识点的掌握程度，在未来的发展过程中不断的巩固，从而形成一个自己熟悉且较为完备的知识体系。盖好一栋大厦的关键在于打好地基，但后期的维护和补丁也不可或缺，做笔记并不是目的，目的是为了掌握知识点。\",\"更好的记忆与吸收知识\",\"知识只有被系统性的归纳起来，才能建立起知识体系，碎片化、零散化地去学习，会让自己陷入一种自我麻痹且极度自信的状态，会让你产生一种所有知识都懂假象，随便提起来一些知识点也都能说上两嘴，但是不能深究，一旦深入一点，就好像缓存穿透一般，所有的刨根问底都造成了真实伤害。\"]},\"3\":{\"h\":\"参考与鸣谢\",\"t\":[\"本项目中的内容除了自己的日常学习、工作总结，也不乏来源于互联网，并非所有内容都是本人原创，但也绝不是简单的复制粘帖，本人根据互联网上的资料加上本人对知识的理解，总结的一份有自己思考成分的笔记。\",\"在对参考的部分，会给出参考的地址，方便自己或者读者进行知识追溯，也希望其他人在对本人文章进行参考时，也加上文章的来源，保证读者能够对知识点进行刨根问题，追究源头。\",\"也希望读者朋友们保持一个批判性思维，本人所写的所有内容也并非100%正确，可能也会有对知识的误解和遗漏、错误等情况，希望读者们不吝赐教，能够指出文章中一些能够完美，但时并未做到完美的点，也能够后续的读者展现出更高质量的文章，非常感谢大家的支持！\"]},\"4\":{\"h\":\"联系我\",\"t\":[\"目前知识星球还在建设之中，加我微信免费拉你进星球，我的微信号：codermast888\"]},\"5\":{\"h\":\"关于\"},\"6\":{\"h\":\"数据库\"},\"7\":{\"h\":\"开发工具\"},\"8\":{\"h\":\"Java\"},\"9\":{\"h\":\"项目篇\",\"t\":[\"瑞吉外卖【已废弃】\",\"苍穹外卖\"]},\"10\":{\"h\":\"Spring 系列\"},\"11\":{\"h\":\"作者相关\"},\"12\":{\"h\":\"心路历程\"},\"13\":{\"h\":\"网站更新\"},\"14\":{\"h\":\"计算机网络\"},\"15\":{\"h\":\"TCP三次握手和四次挥手图文详解\",\"t\":[\"tcp连接\"]},\"16\":{\"h\":\"什么是TCP连接？\",\"t\":[\"TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议是同一层内另一个重要的传输协议。在因特网协议族中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。\"]},\"17\":{\"h\":\"三次握手\",\"t\":[\"三次握手是发生在TCP的连接过程中的，具体的步骤如下：\",\"客户端向服务端发起连接请求，发送请求报文段，将SYN同步位置为1，并且选择一个初始序列号seq=x，此时客户端由CLOSED(连接关闭)状态变为SYN-SENT(同步已发送状态)\",\"服务端接收到客户端发来的连接请求，此时同意进行连接时，向客户端发送确认报文段并且将SYN同步位和ACK都置为1，确认号ack=x+1，并且为自己也选一个初始序列号seq=y，确认报文段不携带数据，但是仍要占用一个序号，发送报文段的同时为该TCP连接分配对应的缓存和变量。此时服务端从LISTEN(监听)状态转变为SYN-RCVD(同步收到)状态。\",\"此时客户端接受到服务端发来的确认报文段，为了表示自己成功接受到报文段，还需要向服务端发送一个报文段，此时报文段的ACK位置为1，seq = x + 1，ack = y + 1，这里确认报文段也不携带数据，但是也要占用一个序号，此时发送报文段的同时为该TCP连接分配对应的缓存和变量。此时客户端从SYN-SENT(同步发送状态)转变为ESTABLISHED(已连接状态)。\",\"此时连接建立，TCP连接提供的是全双工信道，双方都可以进行数据的发送。此时服务端从SYN-RVCD(同步收到)状态转变为ESTABLISHED(已连接状态)。\",\"由于服务端的资源是在第二次握手时创建的，而客户端的资源是在第三次握手时创建的。这就使得服务器容易遭受SYN洪范攻击，即收到大量的连接请求而占用资源，导致正常的连接请求无法响应或者缓慢响应。\"]},\"18\":{\"h\":\"为什么需要三次握手而不是两次？或者四次？\",\"t\":[\"我们知道TCP连接是可靠的，但是网络信道并不可靠，即发送的数据有可能存在丢失或者延迟发送的可能，那么我们必须建立一套完整的机制保证数据能够可靠发送。\",\"假如是两次握手时，即客户端发送连接请求，服务端接受连接请求。这两次握手，那么就存在当客户端发送的连接请求报文段阻塞时，客户端久久未收到来自服务端的确认报文段，以为报文段丢失，则进行超时重传，再发一个连接请求报文段，如若第二次服务端接收到了请求，则做出响应，同意连接，发送确认报文段，并且建立连接。而此时网络信道恢复，第一次发送的报文段，成功传输到了服务端，服务端以为客户端建立了新的连接请求，则再次发送确认报文段，再次建立连接。而客户端收到重复的确认报文段以为是失效报文段，不以理睬。则现在客户端只有一个连接，服务端却有两个连接，让服务端的资源白白浪费。\",\"如果网络信道非常差，可能客户端发送很多请求以后，才能成功连接一次，但突然恢复以后，服务端又会收到大量的连接请求，会创建更多的连接，浪费更多的资源。\",\"如果是四次握手，那么对比于三次握手，肯定是更加的安全和可靠，但是三次握手已经足够保证连接可靠，四次握手将会导致连接时间变长，连接过程更加复杂，则浪费更多的资源。\",\"4次及4次以上，同理即可。\"]},\"19\":{\"h\":\"四次挥手\",\"t\":[\"四次挥手是发生在TCP的连接释放过程中，具体的步骤如下：\",\"在客户端传送完数据以后，需要进行连接的释放，此时由客户端发送连接释放报文段，将FIN位置为1，表示请求连接断开，序号seq= u，u为此前传输数据包的报文段的序号 + 1，并且将客户端的TCP连接断开，则此时客户端就不能够再发送数据，但是服务端还可以向客户端发送数据，FIN报文段即使不携带任何数据，也要消耗掉一个序号。\",\"服务端收到来自客户端的连接释放报文段，表示同意断开连接，则立刻发送确认报文段，将ACK位置为1，表示同意断开连接，序号seq = v，v为服务端最后一次传输成功的报文段的序号 + 1，ack = u + 1，连接释放报文段也要消耗一个序号。此时仅仅只有客户端向服务端方向的连接断开，但是TCP连接是全双工的，服务端还可以向客户端发送数据，客户端也可以接受到数据。\",\"若服务端还有数据未完成传输，则可以继续进行传输数据，待数据传输完成以后，向客户端发送连接释放报文段，将FIN置为1，ACK置为1，seq = w，w为服务端成功传输最后一个数据包的序号 + 1，ack = u + 1，连接释放报文段也要占用一个序号。此时将服务端到客户端方向的连接断开。\",\"客户端收到来自服务端的连接释放报文段，需要做出回应，发送确认报文段，将其ACK位置为1，确认号ack = w + 1，seq = u + 1。此时TCP连接还未释放，需要经过时间等待计时器设置的时间后，客户端才进入连接关闭状态。\",\"小结\",\"综上所述，TCP连接的3次握手和4次挥手归根结底是在保证连接可靠的情况下尽可能的减少资源的浪费。\"]},\"20\":{\"h\":\"计算机组成原理\"},\"21\":{\"h\":\"2.算法复杂度问题\"},\"22\":{\"h\":\"时间复杂度\",\"t\":[\"这里主要总结数据结构中时间复杂度的计算方法，在学习过程中，参考了B站的数据结构——时间复杂度计算这个视频，可以在看完视频后，再阅读本文，效果更佳。\",\"根据循环的层次不同，分为三个类别：\",\"单层循环\",\"两层循环\",\"多层循环\",\"这里一一进行说明。\"]},\"23\":{\"h\":\"1.单层循环\",\"t\":[\"解决思路\",\"列出循环次数 t 以及每轮循环的变化值。\",\"找到 t 与 i 的关系\",\"确定循环的停止条件。\",\"联立两式，解方程。\",\"写结果。\",\"单层循环相对来讲是比较简单的，但是这里还是想整理成方法论，在做题过程中，不容易出错。下面我们来具体举例说明。\"]},\"24\":{\"h\":\"例子1：简单\",\"t\":[\"int func(int n){ int i = 0; while (i < n){ i ++; } return i; } \",\"我们根据方法论，具体操作如下：\",\"列出循环次数 t 以及每轮循环的变化值。\",\"t\",\"0\",\"1\",\"2\",\"3\",\"...\",\"k\",\"i\",\"0\",\"1\",\"2\",\"3\",\"...\",\"n - 1\",\"找到 t 与 i 的关系\",\"此时 t 和 i 的关系式为 i = t\",\"确定循环的停止条件。\",\"循环结束的条件为，i = n\",\"联立两式，解方程。\",\"联立即可得到 t = n\",\"写结果\",\"即一共循环了 n 次\"]},\"25\":{\"h\":\"例子2：中等难度\",\"t\":[\"int func(int n){ int i = n * n; while (i != 1){ i /= 2; } return i; } \",\"同样，我们根据方法论的步骤进行解答：\",\"列出循环次数 t 以及每轮循环的变化值。\",\"t\",\"0\",\"1\",\"2\",\"3\",\"...\",\"k\",\"i\",\"n2\",\"2n2​\",\"4n2​\",\"8n2​\",\"...\",\"2kn2​\",\"找到 t 与 i 的关系\",\"i = 2kn2​\",\"确定循环的停止条件。\",\"当 i = 1 时退出循环\",\"联立两式，解方程。\",\"i = 2kn2​ = 1 , 解得 k = 2log2​n\",\"写结果。\",\"那么对应的时间复杂度就是 O(log2​n)\"]},\"26\":{\"h\":\"例子3：较难\",\"t\":[\"int func(int n){ int i = 0; int sum = 0; while (sum < n){ sum += ++i; // 这里实际上就可以拆分为两条语句。 // 1. ++i; 这里是先 ++ 再返回。 // 2. sum = sum + i; } return i; } \",\"列出循环次数 t 以及每轮循环的变化值。\",\"t\",\"0\",\"1\",\"2\",\"3\",\"...\",\"T\",\"i\",\"0\",\"1\",\"2\",\"3\",\"...\",\"I\",\"sum\",\"0\",\"1\",\"3\",\"6\",\"...\",\"t=0∑I​\",\"找到 t 与 i 的关系\",\"t = i\",\"确定循环的停止条件。\",\"sum >= n\",\"联立两式，解方程。\",\"t=0∑k​=n=2i∗(i+1)​，解得i=2−1±1+8n​​\",\"写结果。\",\"t = i，则对应的时间复杂度为 O(n21​)\"]},\"27\":{\"h\":\"2.两层循环\",\"t\":[\"解题思路\",\"列出外层循环中 i 的变化量。\",\"列出内层语句的执行次数。\",\"求和，写结果。\"]},\"28\":{\"h\":\"例子1\",\"t\":[\"int func(int n,int m){ for(int i = 0;i < n;i ++){ for(int j = 0;j < m;j ++){ arr[i][j] = 0; } } return n * m; } \",\"列出外层循环中 i 的变化量。\",\"和步骤2合并一起\",\"列出内层语句的执行次数。\",\"i\",\"0\",\"1\",\"2\",\"3\",\"...\",\"n - 1\",\"j\",\"m\",\"m\",\"m\",\"m\",\"...\",\"m\",\"求和，写结果。\",\"一共执行的次数T = [(n - 1) - 0 + 1] * m = n * m;\",\"对应的时间复杂度为 O(nm)\"]},\"29\":{\"h\":\"例子2\",\"t\":[\"int func(int n){ for(int i = 0;i < n;i ++){ for(int j = 0;j < i;j ++){ arr[i][j] = 0; } } return n; } \",\"列出外层循环中 i 的变化量。\",\"和步骤2合并一起\",\"列出内层语句的执行次数。\",\"i\",\"0\",\"1\",\"2\",\"3\",\"...\",\"n - 1\",\"j\",\"0\",\"1\",\"2\",\"3\",\"...\",\"i\",\"求和，写结果。\",\"一共执行的次数 $ T = \\\\frac {n * [0 + (n - 1)]} {2} $\",\"则对应的时间复杂度 O(n2)\"]},\"30\":{\"h\":\"3.三层循环\",\"t\":[\"解题思路\",\"方法1: 抽象为计算三维体积\",\"方法2: 列式求和\"]},\"31\":{\"h\":\"例子\",\"t\":[\"int func(int n){ for(int i = 1;i <= n;i ++){ for(int j = 1;j <= i;j++){ for(int k = 1;k <= j;k++){ arr[i][j][k] = 0; } } } return n; } \",\"第一种方法我目前也没有理解，具体是怎么做的。\",\"计算体积\",\"体积公式 V=31​s∗h\",\"第二种方法:\",\"i=1∑n​j=1∑i​k=1∑j​1=i=1∑n​j=1∑i​j=i=1∑n​2i(i+1)​=21​(i=1∑n​i2+i=1∑n​i)=21​(6n(n+1)(2n+1)​+2n(n+1)​)=6n3+3n2+2n​\",\"则对应的时间复杂度为 O(n3)\"]},\"32\":{\"h\":\"空间复杂度\",\"t\":[\"空间复杂度是很容易判断的，这里主要对递归操作进行说明。\",\"每次递归时，调用一次递归函数，则为 O(n)\",\"每次递归时，调用两次递归函数，则为 O(n2)\",\"......\",\"以此类推即可。\"]},\"33\":{\"h\":\"1.数据结构的基本概念\"},\"34\":{\"h\":\"基本概念\",\"t\":[\"数据：数据是信息的载体，是描述客观事物属性的数、字符及所能输入到计算机中并能被计算机程序识别和处理的符号的集合。\",\"数据元素：是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。如类实例化的一个对象就是数据元素，不可分割。\",\"数据对象：数据对象是具有相同性质的数据元素的集合，是数据的一个子集。即同属于一个类的对象实例。\",\"数据类型：数据类型是一个值的集合和定义在此集合上的一组操作的总称。\",\"原子类型：其值不可再分的数据类型。————基本数据类型。\",\"结构类型：其值可以在分解为若干变量的数据类型。————对象实例内的各个属性值。\",\"抽象数据类型：抽象数据组织及与之相关的操作。————仅仅定义，没有实现。如栈、队列的定义。\",\"数据结构：是相互之间存在的一种或多种特定关系的数据元素的集合。在任何时候，数据都不是独立存在的，他们存在着某种关系。\"]},\"35\":{\"h\":\"数据结构三要素\",\"t\":[\"数据结构包含三个要素，分别为：逻辑结构、存储结构、数据的运算。\",\"数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的视线依赖于所采用的存储结构。\",\"逻辑结构：是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。主要分为 线性结构 和 非线性结构 两种。\",\"集合：结构中元素同属于同一个集合，别无其他关系。\",\"线性结构：结构中的数据元素之间只存在一对一的关系。\",\"树形结构：结构中的数据元素之间存在一对多的关系。\",\"图状结构或网状结构：结构中的数据元素之间存在多对多的关系。\",\"存储结构：是指数据结构在计算机中的表示，也称为物理结构。主要的存储结构有：顺序存储、链式存储、索引存储、散列存储。\",\"顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。\",\"链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，只要求逻辑相邻，借助指针存储地址来表示元素之间的逻辑关系。\",\"索引存储：在存储元素信息时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式为 （关键字、地址）。\",\"散列存储：根据元素的关键字直接计算出该元素的存储位置，又称为哈希 Hash 存储。\",\"数据的运算：施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。\"]},\"36\":{\"h\":\"3.线性表\"},\"37\":{\"h\":\"线性表定义和操作\",\"t\":[\"线性表\",\"线性表是具有相同数据类型的n个数据元素的有限集序列，其中n为表长，当n=0时线性表是一个空表。若用L命名线性表，其一般表示为：L = ( a1 ,a2 ,...,ai ,ai+1 ,...,an )\",\"线性表的基本操作：\",\"InitList(&L):初始化表，构造一个空的线性表。\",\"Length(L):求表长，返回线性表L的长度，即L中元素的个数。\",\"LocateElem(L,e):按值查找操作，在表L中查找具有给定关键字值的元素。\",\"GetElem(L,i):按位查找操作。获取表L中第i个位置的数据元素的值。\",\"ListInsert(&L,i,e):插入操作，在表L中的第i个位置上插入指定的元素e.\",\"ListDelete(&L,i,&e):删除操作，删除表L中的第i个位置的元素，并用e返回删除元素的值。\",\"PrintList(L):输出操作，按前后顺序输出线性表L的所有元素值。\",\"Empty(L):判空操作，若L表为空，则返回True，否则返回false。\",\"DestroyList(&L):销毁操作，销毁线性表，并释放线性表L所占用的内存空间。\"]},\"38\":{\"h\":\"顺序表\",\"t\":[\"顺序表\",\"线性表的顺序结构又称为顺序表，他是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理上也相邻。\",\"线性表的顺序存储类型描述：\",\"ElemType 是线性表的元素类型\",\"#define MaxSize 50 // 定义线性表的最大容量 typedef struct{ ElemType data[MaxSize]; // 顺序表的元素 int length; // 顺序表当前的长度 }SqList; // 顺序表的类型定义 \",\"顺序表的特点\",\"顺序表中元素的逻辑顺序和实际的物理顺序相同，所以插入和删除操作需要移动大量元素。\",\"顺序表中第一个元素存储在线性表的起始位置，第 i 个元素的存储位置后面紧接着存储的是第 i + 1 个元素，称 i 为元素 ai 在线性表中的位序。\",\"顺序表最重要的特点是支持随机访问，即通过首地址和元素需要可在 O(1) 时间内找到指定的元素。\",\"通常情况下使用数组来表述线性表的顺序存储结构。\",\"顺序表的存储密度高，每个结点只存储数据元素。\",\"注意\",\"线性表中元素的位序是从 1 开始的，而数组中元素的下标是从 0 开始的。\",\"顺序表上基本操作的实现：\",\"说明\",\"这里实现了顺序表的插入、删除、按值查询、按序号查询操作的算法。\",\"插入操作\",\"在顺序表 L 的第 i 个位置插入新元素 e 。若 i 的位置不合法，则返回 fasle，表示插入失败。否则将第 i 个元素及其后的所有元素依次往后移动一个位置，腾出一个空位置插入新元素 e，顺序表长度增加 1 ，插入成功，返回 true。\",\"bool ListInsert(SqList &L, int i, ElemType e){ // 判断 i 的范围是否合法 if (i < 1 || i >= L.length){ return false; } // 当存储空间已满时，则无法插入 if (L.length >= MaxSize){ return false; } // 将第 i 个元素及之后的元素后移 for (int j = L.length; j >= i; j--){ L.data[j] = L.data[j - 1]; } // 在位置 i 处放入 e L.data[i - 1] = e; // 线性表长度加 1 L.length ++; return true; } \",\"最好情况：在表头插入（即 i = n + 1），元素后移语句将不执行，时间复杂度为 O(1)\",\"最坏情况：在表头插入（即 i = 1），元素后移语句将执行 n 次，时间复杂度为 O(n)\",\"平均情况：假设 pi​ 是在第 i 个位置上插入的一个结点的概率，则在长度为 n 的线性表中插入一个结点时，所需要移动结点的平均次数为 i=1∑n+1​pi​(n−i+1)=i=1∑n+1​n+11​∗(n−i+1)=n+11​i=1∑n+1​(n−i+1)=n+11​2n(n+1)​=2n​ ，则平均时间复杂度为 O(n)\",\"删除操作\",\"删除顺序表 L 中第 i 个位置的元素，用引用变量 e 返回。\",\"bool ListDelete(SqList &L, int i, ElemType &e){ // 判断 i 的位置是否合法 if (i < 1 || i >= L.length){ return false; } // 将被删除的元素赋值给 e e = L.data[i - 1]; // 将第 i 个位置后的元素前移 for (int j = i; j < L.length; j ++){ L.data[j - 1] = L.data[j]; } // 线性表长度 减1 L.length --; return true; } \",\"最好情况：删除表尾元素，则无需移动元素，时复杂度为 O(1)\",\"最坏情况：删除表头元素，则需要移动除表头元素以外的所有元素，时间复杂度为 O(n)\",\"平均情况：假设 pi​ 是删除第 i 个位置结点的概率，则在长度为 n 的线性表中删除一个结点时，所需要移动结点的平均次数为 i=1∑n​pi​(n−i)=i=1∑n​n1​∗(n−i)=n1​i=1∑n​(n−i)=n1​2n(n−1)​=2n−1​ ，则平均时间复杂度为 O(n)\",\"按值查询\",\"在顺序表 L 中查找第一个元素值等于 e 的元素，返回其位序。如果没有找到，则返回 0。\",\"需要注意的是，位序是从 1 开始的，而索引是从 0 开始的。\",\"int LocateElem(SqList &L, ElemeType e){ int i; for (i = 0; i < L.length; i ++){ if (L.data[i] == e){ return i + 1; } } return 0; } \",\"最好情况：查找的元素就在第一个，则只需要比较一次，时间复杂度为 O(1)\",\"最坏情况：查找的元素在最后一个，需要将所有的元素都进行对比，时间复杂度为 O(n)\",\"平均情况：假设 pi​ 是在第 i 个位置上插入的一个结点的概率，则在长度为 n 的线性表中查找值为 e 的元素需要比较的平均次数为 i=1∑n​pi​∗i=i=1∑n​n1​∗i=n1​2n(n+1)​=2n+1​，则平均时间复杂度为 O(n)\",\"按序号查询\",\"在顺序表 L 中查找位序为 i 个元素的值。\",\"需要注意的是，位序是从 1 开始的，而索引是从 0 开始的。\",\"int getByIndex(SqList &L,int i){ if (i <= 0 || i > L.length){ return -1; } return L.data[i - 1]; } \",\"因为顺序表支持随机访问，所以这里通过位序或者索引进行查找的最好、最坏和平均复杂度都是 O(1) 。\"]},\"39\":{\"h\":\"单链表\",\"t\":[\"单链表\",\"线性表的链式存储成为单链表，他是通过一组任意的存储单元来存储线性表中的数据元素。通过节点中存储后续节点的指针来进行连接。\",\"单链表中节点类型的描述\",\"typedef struct LNode{ // 定义单链表节点类型 ElemeType data; // 数据域 struct LNode *next; // 指针域 }LNode, *LinkList; \",\"单链表的特点\",\"可以存储大量数据，解决了顺序表需要大量连续存储单元的缺点\",\"存储数据域，还存储指针域，浪费了存储空间\",\"单链表元素离散的分布在存储空间中，是非随机存取的存储结构\",\"通常头指针来标示一个单链表，为了方便操作，在第一个实际节点之间附加一个头结点\",\"单链表上基本操作的实现\",\"头插法建立单链表\",\"该方法从一个空表开始，生成新结点，并将读取到的数据存放到新节点的数据域中，然后将新节点插入到当前链表的表头，即头结点之后。\",\"LinkList List_HeadInsert(LinkList &L){ // 逆向建立单链表 LNode *s; int x; L = (LinkList)malloc(sizeof(LNode));// 创建头结点 L->next = NULL; // 初始化为空链表 scanf(\\\"%d\\\",&x); // 输入结点的值 while (x != 9999) { // 输入 9999 表示结束 s = (LNode*)malloc(sizeof(LNode)); // 创建新节点 s->data = x; // 赋值 s->next = L->next; // 赋指针 L->next = s; // 将新节点插入表中，L为头指针 scanf(\\\"%d\\\",&x); // 读取下一个值 } return L; } \",\"每个结点插入的时间为 O(1) ，则当单链表长为 n 时，总时间复杂度为 O(n)\",\"尾插法建立单链表\",\"按序号查找结点值\",\"按值查找表节点\",\"插入结点操作\",\"对某一节点进行前插操作\",\"删除节点操作\",\"求表长操作\",\"int *GetListLen(LinkList L){ int length = 0; for (Node i = L; i = L.next ; i != null){ length ++; } return length; } \"]},\"40\":{\"h\":\"双链表\",\"t\":[\"双链表\"]},\"41\":{\"h\":\"循环链表\",\"t\":[\"循环链表\"]},\"42\":{\"h\":\"静态链表\",\"t\":[\"静态链表\"]},\"43\":{\"h\":\"顺序表与链表的比较和选择\"},\"44\":{\"h\":\"数据结构\"},\"45\":{\"h\":\"计算机操作系统\"},\"46\":{\"h\":\"MySQL基础 - 约束\"},\"47\":{\"h\":\"概念\",\"t\":[\"约束是作用于表中字段上的规则，用于限制存储在表中的数据。\"]},\"48\":{\"h\":\"目的\",\"t\":[\"为了保证数据库中数据的正确、有效性和完整性。\"]},\"49\":{\"h\":\"分类\",\"t\":[\"约束\",\"描述\",\"关键字\",\"非空约束\",\"限制该字段的数据不能为null\",\"NOT NULL\",\"唯一约束\",\"保证该字段的所有数据都是唯一，不重复的\",\"UNIQUE\",\"主键约束\",\"主键是一行数据的唯一标识，要求非空且唯一\",\"PRIMARY KEY\",\"默认约束\",\"保存数据时，如果未指定该字段的值，则赋予该默认值\",\"DEFULT\",\"条件约束\",\"保证字段值满足指定的条件\",\"CHECK\",\"外键约束\",\"用来让两张表的数据之间建立连接，保证数据的一致性和完整性\",\"FOREIGN KEY\",\"注意\",\"约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。\"]},\"50\":{\"h\":\"外键约束\",\"t\":[\"其他5种约束的适用方法较为简单，这里仅对外键约束做详细介绍。\"]},\"51\":{\"h\":\"语法\",\"t\":[\"添加外键\",\"-- 建表时添加外键 CREATE TABLE 表名( 字段名 数据类型, ... [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名) ); -- 建表后添加外键 ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名); \",\"删除外键\",\"ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; \"]},\"52\":{\"h\":\"删除/更新行为\",\"t\":[\"添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除/更新行为。具体的删除/更新行 为有以下几种:\",\"行为\",\"说明\",\"NO ACTION\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与RESTRICT一致)默认行为\",\"RESTRICT\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与NO ACTION一致)默认行为\",\"CASCADE\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。\",\"SET NULL\",\"当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。\",\"SET DEFAULT\",\"父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)\",\"ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名 (主表字段名) ON UPDATE CASCADE ON DELETE CASCADE; \"]},\"53\":{\"h\":\"MySQL运维 - 分库分表\"},\"54\":{\"h\":\"MySQL基础 - 函数\",\"t\":[\"函数\",\"函数是一段可以直接被另一段程序调用的程序或者代码。\"]},\"55\":{\"h\":\"字符串函数\",\"t\":[\"MySQL中内置了很多的字符串函数，常用的几个如下所示:\",\"函数\",\"功能\",\"CONCAT(S1,S2,...,Sn)\",\"字符串拼接，将S1、S2、...、Sn按照顺序拼接成一个字符串\",\"LOWER(str)\",\"将字符串str全部转成小写\",\"UPPER(str)\",\"将字符串str全部转成大写\",\"LPAD(str,n,pad)\",\"左填充，用字符串pad对str的左边进行填充，达到n个字符串长度\",\"RPAD(str,n,pad)\",\"右填充，用字符串pad对str的右边进行填充，达到n个字符串长度\",\"TRIM(str)\",\"去掉字符串头部和尾部的空格\",\"SUBSTRING(str,start,len)\",\"返回字符串str从start位置开始的len个长度的字符串\"]},\"56\":{\"h\":\"数值函数\",\"t\":[\"函数\",\"功能\",\"CEIL(x)\",\"向上取整\",\"FLOOR(x)\",\"向下取整\",\"MOD(x,y)\",\"x对y取模，x%y\",\"RAND()\",\"返回0～1之间的随机数\",\"ROUND(x,y)\",\"求参数x的四舍五入值，保留y位小数\"]},\"57\":{\"h\":\"日期函数\",\"t\":[\"函数\",\"功能\",\"CURDATE()\",\"返回当前日期\",\"CURTIME()\",\"返回当前时间\",\"NOW()\",\"返回当前日期和时间\",\"YEAR(date)\",\"获取指定日期date的年份\",\"MONTH(date)\",\"获取指定日期date的月份\",\"DAY(date)\",\"获取指定日期date的天数\",\"DATE_ADD(date,INTERVAL expr type)\",\"返回一个日期/时间值加上一个时间间隔expr后的时间值\",\"DATEDIFF(date1,date2)\",\"返回起始时间date1和结束时间 date2 之间相差的天数\"]},\"58\":{\"h\":\"流程函数\",\"t\":[\"流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率。\",\"函数\",\"功能\",\"IF(value,t,f)\",\"如果value为true，则返回t，否则返回f\",\"IFNULL(value1,value2)\",\"如果value1不为null，则返回value1，否则返回value2\",\"CASE WHEN [val1] THEN [res1] WHEN [val2] THEN [res2]... ELSE [defult] END\",\"如果val1为true，则返回res1，如果val2为true，则返回res2，...，否则返回defult\",\"CASE [expr] WHEN [val1] THEN [res1] WHEN [val2] THEN [res2] ELSE [defult] END\",\"如果expr的值等于val1，返回res1，expr的值等于val2，返回res2，...，否则返回defult\"]},\"59\":{\"h\":\"MySQL进阶 - InnoDB存储引擎\"},\"60\":{\"h\":\"逻辑存储结构\",\"t\":[\" InnoDB引擎的存储结构主要包含5个部分：\",\"表空间Tablespace\",\"主要是MySQL中的ibd文件，一个MySQL实例可以对应多个表空间，用于存储记录、索引等数据。表空间用来管理多个Segment段。\",\"段Segment\",\"段分为数据段(Leaf node segment)、索引段(Non-leaf node segment)、回滚段(Rollback segment)，InnoDB是索引组织表，数据段就是B+树的叶子结点，索引段即为B+树的非叶子结点。段用来管理多个Extent区。\",\"区Extent\",\"区是表空间中的单元结构。每个区的大小为1M。默认情况下，InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页。\",\"页Page\",\"页是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。为了保证页的连续性，InnoDB存储引擎每次从磁盘申请4-5个区。\",\"行Row\",\"InnoDB存储引擎数据是按行进行存放的。\",\"字段解释\",\"Trx_id：每次对某条记录产生改动时，都会把对应的事务id赋值给trx_id隐藏列。\",\"Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。\",\"这个字段在后面的MVCC版本控制时会使用到。\"]},\"61\":{\"h\":\"架构\",\"t\":[\"MySQL5.5版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特征，在日常开发中使用非常广泛。下面是InnoDB架构图。\",\"InnoDB架构\"]},\"62\":{\"h\":\"内存结构\",\"t\":[\"内存结构\",\"上图为InnoDB的内存架构，由图可知，主要分为三个部分\"]},\"63\":{\"h\":\"Buffer Pool 缓冲池\",\"t\":[\"缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池中没有所需数据，再从磁盘加载并且缓存），然后再以一定的频率刷新到磁盘，从而减少磁盘IO，加快处理速度。\",\"缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：\",\"free page：空闲Page，未被使用。\",\"clean page：被使用的Page，但是数据并未被修改过。\",\"dirty page：脏页，脏Page，被使用过的Page，数据被修改过，页中数据与磁盘中数据产生了不一致。\"]},\"64\":{\"h\":\"Change Buffer 更改缓冲区\",\"t\":[\"更改缓冲区（针对于非唯一的二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer 中，在未来数据被读取时，再将数据恢复到 Buffer Pool 中，再将合并后的数据写回磁盘内。\",\"Change Buffer 的意义是什么？\",\"与聚集索引不同，二级索引通常情况下是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。\",\"有了Change Buffer 以后，我们可以在缓冲池中进行合并处理，减少磁盘IO。\"]},\"65\":{\"h\":\"Log Buffer 日志缓冲区\",\"t\":[\"日志缓冲区，用来保存要写入到磁盘中的Log日志数据（redo log、undo log），默认大小为16MB，日志缓冲区中的数据会定期刷新到磁盘中。如果需要更新、插入或者删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。\",\"参数\",\"innodb_log_buffer_sie：缓冲区大小\",\"innodb_flush_log_at_trx_commit：日志刷新到磁盘时机\",\"该参数有三个值，默认为 1\",\"0 : 每秒将日志写入并刷新到磁盘一次。\",\"1 : 日志在每次事务提交时写入并刷新到磁盘。\",\"2 : 日志在每次事务提交后写入，并每秒刷新到磁盘一次。\"]},\"66\":{\"h\":\"Adaptive Hash Index 自适应哈希索引\",\"t\":[\"自适应哈希索引，用于优化对Buffer Pool 数据的查询，InnoDB存储引擎会监控对表上各索引页的查询，如果观察到哈希索引可以提升速度，则建立哈希索引，称之为自适应哈希索引。\",\"自适应哈希索引无需人工干预，是系统根据情况自动完成的。\",\"参数\",\"adaptive_hash_index\"]},\"67\":{\"h\":\"磁盘结构\",\"t\":[\"磁盘结构\"]},\"68\":{\"h\":\"System Tablespace 系统表空间\",\"t\":[\"系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。（在MySQL5.x版本中还包含InnoDB数据字典、undo log等）\",\"参数\",\"innodb_data_file_path\"]},\"69\":{\"h\":\"File-Pre-Table Tablespaces 独立表空间\",\"t\":[\"每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。\",\"参数\",\"innodb_file_pre_table 默认打开，为ON，即每张表都有独立的空间\"]},\"70\":{\"h\":\"General Tablespaces 通用表空间\",\"t\":[\"通用表空间需要通过 CREATE TABLETABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。\",\"创建表空间\",\"CREATE TABLESPACE tablespace_name ADD DATAFILE 'file_name' ENGINE = 'engine_name'; \",\"创建表并且指定表空间\",\"CREATE TABLE table_name(...) TABLESPACE tablespace_name; \"]},\"71\":{\"h\":\"Undo Tablespaces 撤销表空间\",\"t\":[\"撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小为16MB），用于存储undo log日志。\"]},\"72\":{\"h\":\"Temporary Tablespaces 临时表\",\"t\":[\"InnoDB使用会话临时表和全局临时表空间。存储用户创建的临时表等数据。\"]},\"73\":{\"h\":\"Double Write Buffer Files 双写缓冲区\",\"t\":[\"双写缓冲区，InnoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。\"]},\"74\":{\"h\":\"Redo Log 重做日志\",\"t\":[\"重做日志是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲以及重做日志文件，前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复使用。\",\"以循环方式写入重做日志文件，涉及两个文件\",\"ib_logfile0\",\"ib_logfile1\"]},\"75\":{\"h\":\"后台线程\",\"t\":[\"后台线程的作用就是将InnoDB缓冲池 Buffer Poll 中的数据，在合适的时间内刷新到磁盘。\",\"后台线程主要有四类：\",\"Master Thread\",\"核心后台线程，主要负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。\",\"IO Thread\",\"在InnoDB存储引擎中，使用了大量的AIO来处理IO请求，这样可以极大的提高数据库的性能，而IO Thread主要负责这些IO请求的回调。\",\"线程类型\",\"默认个数\",\"职责\",\"Read Thread\",\"4\",\"负责读操作\",\"Write Thread\",\"4\",\"负责写操作\",\"Log Thread\",\"1\",\"负责将日志缓冲区刷新到磁盘\",\"Insert Buffer Thread\",\"1\",\"负责将写缓冲区内容刷新到磁盘\",\"Purge Thread\",\"主要用于回收事务已经提交了的 undo log ，在事务提交之后，undo log 可能不用了，就用它来回收。\",\"Page Cleaner Thread\",\"协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。\"]},\"76\":{\"h\":\"事务原理\",\"t\":[\"事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体向系统提交或撤销操作请求，即这些操作要么同时成功要么同时失败。\",\"事务特性 ACID\",\"原子性 Atomicity : 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\",\"一致性 Consistency : 事务完成时，必须使所有的数据都保持一致性。\",\"隔离性 Isolation : 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\",\"持久性 Durablity : 事务一旦提交或回滚，它对数据库中数据的改变就是永久的。\"]},\"77\":{\"h\":\"Redo Log 重做日志\",\"t\":[\"重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。\",\"该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo logo file），前者是在内存中，后者是在磁盘中。\",\"当事务提交之后会把所有的修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。\",\"数据操作流程\"]},\"78\":{\"h\":\"Undo Log\",\"t\":[\"回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚 和 MVCC（多版本并发控制），是用来实现事务的原子性。\",\"Undo Log和Redo Log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，Undo Log中会记录一条对应的insert记录，反之 亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rolback时，就可以从Undo Log中的逻辑记录读取到相应的内容并进行回滚。\",\"Undo Log销毁：undo Log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。\",\"Undo Log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的rollback segment 回滚段中，内部包含 1024 个undo log segment。\"]},\"79\":{\"h\":\"MySQL进阶 - MVCC多版本并发控制\"},\"80\":{\"h\":\"概念介绍\"},\"81\":{\"h\":\"MVCC\",\"t\":[\"MVCC全称为Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐藏字段、undo log 日志、readView。\"]},\"82\":{\"h\":\"当前读\",\"t\":[\"读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如： select ... lock in share mode （共享锁），select ... for update 、insert、delete（排他锁）都是一种当前读。\"]},\"83\":{\"h\":\"快照读\",\"t\":[\"简单的select语句（不加锁）就是快照读，快照读读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。\",\"Read Commit：每次select，都生成一个快照读。\",\"Repeated Read：开启事务后第一个select语句才是快照读的地方。\",\"Serializable：快照读会退化为当前读。\"]},\"84\":{\"h\":\"实现原理\",\"t\":[\"记录中的隐藏字段分别为：DB_TRX_ID、DB_ROLL_PTR、DB_ROW_ID。\",\"隐藏字段\",\"含义\",\"DB_TRX_ID\",\"最近修改事务的ID，记录插入这条记录或最后一次修改该记录的事务ID\",\"DB_ROLL_PTR\",\"回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本\",\"DB_ROW_ID\",\"隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段\",\"ibd2sdi指令\",\"ibd2sdi指令可以查看ibd文件，语法如下：\",\"ibd2sdi 'filename.ibd'\"]},\"85\":{\"h\":\"Undo Log\",\"t\":[\"回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。\",\"当insert的时候，产生的 undo log 日志只在回滚时需要，在事务提交后，可以被立即删除。\",\"而update、delete的时候，产生的 undo log 日志不仅在回滚时需要，在快照读时也需要，不会立刻被删除。\"]},\"86\":{\"h\":\"Undo Log 版本链\",\"t\":[\"在并发访问的情况下，有多个事务需要对同一个数据进行操作，此时则在Undo Log 中记录下每一次操作的原数据，作为事务在未提交情况下回滚的依据。\",\"不同事务或者相同事务对同一条数据记录进行操作，会导致该记录的 Undo Log 生成一条记录版本链条，链表的头部是最新的旧数据，链表的尾部是最早的旧数据。\",\"具体的事务回滚，不单单依赖Undo Log，还依靠ReadView。Undo Log记录事务回滚的数据，ReadView决定回滚到哪个链条节点。\"]},\"87\":{\"h\":\"ReadView 读视图\",\"t\":[\"Read View 读视图是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交）ID。\",\"ReadView中包含了4个核心字段：\",\"字段\",\"含义\",\"m_ids\",\"当前活跃的事务ID集合，即当前还未提交的事务ID集合\",\"min_trx_id\",\"最小活跃事务ID\",\"max_trx_id\",\"预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）\",\"creator_trx_id\",\"ReadView创建者的事务ID\"]},\"88\":{\"h\":\"版本链数据访问规则\",\"t\":[\"trx_id 代表的是当前的事务ID：\",\"trx_id == creator_trx_id : 可以访问该版本\",\"trx_id < min_trx_id : 可以访问该版本\",\"trx_id > max_trx_id : 不可以访问该版本\",\"min_trx_id <= trx_id <= max_trx_id : 如果 trx_id 不在 m_ids 中是可以访问该版本的，即事务已经提交了\",\"注意\",\"不同的隔离级别，生成ReadView的时机不同：\",\"Read Commited : 在事务中每一次执行快照读时生成ReadView\",\"Repeatable Read : 仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView\",\"MVCC-实现原理\",\"特性\",\"实现方式\",\"原子性\",\"Undo Log\",\"持久性\",\"Redo Log\",\"一致性\",\"Undo Log + RedoLog\",\"隔离性\",\"MVCC + 锁\"]},\"89\":{\"h\":\"MySQL运维 - 主从复制\"},\"90\":{\"h\":\"MySQL基础 - 多表查询\"},\"91\":{\"h\":\"多表关系\",\"t\":[\"提示\",\"在正式学习数据库的多表查询之前，我们需要了解到需要多表查询的场景，以及有哪些多表查询的情况，也就是数据表之间的关系。\"]},\"92\":{\"h\":\"一对一\",\"t\":[\"一对一关系是我们比较常见的关系，比如数据表A中的一条值对应数据表B中的一条值，这种情况经常用于多表的拆分。例如将最常用的字段抽取出来，使得提高查询的效率。\",\"实现\",\"在任意一方加入外键，关联另外一方的主键，并且设置唯一约束(UNIQUE)。\"]},\"93\":{\"h\":\"一对多\",\"t\":[\"一对多的关系也可以看作多对一，就看你是从那个视角去看待这段关系。例如，一个部门下有多个员工，但是一个员工只能属于一个部门，这种关系就是一对多关系。\",\"实现\",\"在多的一方建立外键，指向的一的一方的主键。\"]},\"94\":{\"h\":\"多对多\",\"t\":[\"这种关系也是我们经常遇到的一种关系，如学生和课程之间的关系，一个学生可以选择多门课程，而一门课程中也可以有多个学生，这就是一种多对多的关系.\",\"实现\",\"这种关系的实现相对来说较为复杂，需要我们建立一张中间表，这张中间表的字段最少包含了两个外键，关联了两方多的主键，从而确保多对多的关系。\"]},\"95\":{\"h\":\"多表查询\",\"t\":[\"多表查询是指从多张数据表中查询数据。然而在多表查询之前，我们首先需要了解一个简单的概念：笛卡尔积。\",\"笛卡尔积\",\"笛卡尔积是指在数学中，两个集合A和B的所有组合情况。在多表查询时，需要消除无效的笛卡尔积。\",\"例如，我们在连接查询的时候，不指定条件列表，则查询出来的数据是两张表的笛卡尔积组合。即按行将两张表排列组合，一共有 表a的行数 * 表b的行数 个值。\"]},\"96\":{\"h\":\"内连接\",\"t\":[\"相当于查询数据表A、B之间的交集部分。内连接分为两种类型\",\"内连接\",\"隐式内连接\",\"SELECT 字段列表 FROM 表1,表2 WHERE 条件列表; \",\"显示内连接\",\"SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件...; \"]},\"97\":{\"h\":\"外连接\",\"t\":[\"外连接有两种情况，左外连接和右外连接。\",\"左外连接：查询左表的所有数据，以及两张表交集部分的数据。\",\"左外连接\",\"SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 连接条件...; \",\"右外连接：查询右表的所有数据，以及两张表交集部分的数据。\",\"右外连接\",\"SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 连接条件...; \"]},\"98\":{\"h\":\"自连接\",\"t\":[\"自连接顾名思义就是自己连接自己，当前表与自身的连接查询，是通过将一张表复制成两张，将这两张表进行连接查询，自连接查询必须使用表别名。\",\"SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件列表 ...; \",\"注意\",\"自连接是不区分左连接和右连接的，因为两张表的是完全相同的，无论将哪张表放在左边，其结果都是相同的。\",\"自连接可以是内连接，也可以是外连接查询。\"]},\"99\":{\"h\":\"联合查询\",\"t\":[\"对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。\",\"SELECT 字段列表 FROM 表1 表2 ... UNION [ALL] SELECT 字段列表 FROM 表A 表B ...; \",\"注意\",\"对于联合查询而言，多张表的列数必须保持一致，字段类型也需要保持一致。\",\"union all 会讲全部的数据直接合并在一起，而 union 会将数据合并后去重。\"]},\"100\":{\"h\":\"子查询\",\"t\":[\"子查询又称为嵌套查询，即在SQL语句中嵌套使用SELECT语句，一次SELECT的返回集又称为了另外一个SELECT的数据集。\",\"SELECT * FROM table1 WHERE column1 = ( SELECT column1 FROM table2 ); \",\"提示\",\"子查询的外部可以是INSERT、DELETE、UPDATE、SELECT操作中的任意一个。\",\"根据子查询的结果不同，分为：\",\"标量子查询（子查询的结果为单个值）\",\"列子查询（子查询的结果为一列）\",\"行子查询（子查询的结果为一行）\",\"表子查询（子查询的结果为多行多列）\"]},\"101\":{\"h\":\"标量子查询\",\"t\":[\"标量子查询指的是子查询的返回的结果是一行一列的一个值，如数字、字符串、日期等简单的形式。\",\"常用的操作符号：=、!=、>、>=、 < 、<=\"]},\"102\":{\"h\":\"列子查询\",\"t\":[\"列子查询指的是子查询的返回结果是一列，可以是多行的数据集。\",\"常用的操作符： IN、NOT IN、ANY、SOME、ALL\",\"操作符\",\"描述\",\"IN\",\"在指定的集合范围之内，多选一\",\"NOT IN\",\"不在指定的集合范围内\",\"ANY\",\"子查询的返回列表中，有任意一个满足即可\",\"SOME\",\"与ANY等同，使用SOME的地方均可以使用ANY\",\"ALL\",\"子查询的返回列表的所有值都必须满足\"]},\"103\":{\"h\":\"行子查询\",\"t\":[\"行子查询指的是子查询返回的结果是一行，可以是多列的数据集。\",\"常用的操作符：=、!= 、IN、NOT IN\"]},\"104\":{\"h\":\"表子查询\",\"t\":[\"表子查询指的是子查询返回的结果是多行多列的数据集。\",\"常用的操作符：IN\"]},\"105\":{\"h\":\"MySQL基础 - 基础概念\"},\"106\":{\"h\":\"基本概念\",\"t\":[\"区别\",\"在学习MySQL之前，我们需要明确一些基本概念，以便于后续的理解和学习。\",\"数据库\",\"数据库是存储数据的仓库，数据是有组织的进行存储。简写为DataBase （DB）\",\"数据库管理系统\",\"操纵和管理数据库的大型软件系统。简写为DataBase Management System （DBMS）\",\"SQL\",\"操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。又叫架构话查询语言，Structured Query Language（SQL）\",\"MySQL\",\"由瑞典MySQL AB公司开发的一款关系型数据库管理系统（Relational DataBase Management System RDBMS），属于Oracle旗下。\"]},\"107\":{\"h\":\"MySQL的安装\",\"t\":[\"提示\",\"直接在MySQL官方网站，根据自己的操作系统下载安装即可。\",\"MySQL官方下载地址：https://www.mysql.com/downloads/\"]},\"108\":{\"h\":\"MySQL版本\",\"t\":[\"社区版 MySQL Community Server\",\"免费\",\"不提供技术支持\",\"商业版 MySQL Enterprise Edition\",\"收费\",\"提供专业技术支持\"]},\"109\":{\"h\":\"数据库类型\"},\"110\":{\"h\":\"关系型数据库\",\"t\":[\"建立在关系模型基础上，由多张相互连接的二维表组成的数据库。\",\"特点\",\"使用表存储数据，格式统一，便于维护\",\"使用SQL语言操作，标准统一，使用方便。\"]},\"111\":{\"h\":\"非关系型数据库\",\"t\":[\"分布式的、非关系型的、不保证遵循ACID原则的数据存储系统。最常见的解释就是NoSQL，non-relational或者Not only SQL。非关系型可以分为以下几种类型：\",\"键值(Key-Value)存储数据库\",\"注\",\"主要有：Tokyo Cabinet/Tyrant， Redis， Voldemort， Oracle BDB\",\"列存储数据库\",\"注\",\"主要有：Cassandra， HBase， Riak\",\"文档型数据库\",\"注\",\"主要有：CouchDB， MongoDb\",\"图形(Graph)数据库\",\"注\",\"主要有：Neo4J， InfoGrid， Infinite Graph\"]},\"112\":{\"h\":\"MySQL数据模型\",\"t\":[\"MySQL数据模型\"]},\"113\":{\"h\":\"MySQL进阶 - 索引\"},\"114\":{\"h\":\"索引概述\"},\"115\":{\"h\":\"概念\",\"t\":[\"索引是帮助MySQL的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式饮用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。\"]},\"116\":{\"h\":\"优缺点\",\"t\":[\"优点\",\"提高数据检索的效率，降低数据库的IO成本\",\"通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\",\"缺点\",\"索引列也是要占用空间的\",\"索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率降低。\",\"注意\",\"索引是一种典型的使用空间换时间的例子。\"]},\"117\":{\"h\":\"索引结构\",\"t\":[\"MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种：\",\"索引结构\",\"描述\",\"Hash索引\",\"底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询\",\"R-tree\",\"空间索引是MyISAM引擎的一个特殊索引，主要用于地理空间数据类型，通常使用较少\",\"Full-text\",\"是一种通过建立倒排索引，快速匹配文档的方式，类似于Lucene,Solr,Es\"]},\"118\":{\"h\":\"二叉树\",\"t\":[\"二叉树\",\"缺点\",\"使用二叉树做索引结构，顺序插入时，会退化成为一个链表，查询性能大大降低。大量数据的情况下，层级较深，检索速度慢。\"]},\"119\":{\"h\":\"红黑树\",\"t\":[\"红黑树\",\"缺点\",\"红黑树虽然解决了退化为单链表的这种现象，但是其本质上仍然是二叉树，在大量数据的情况下，层级较深，检索速度还是很慢。\"]},\"120\":{\"h\":\"B树\",\"t\":[\"B树(B-Tree)又称为多路平衡查找树，一般是以阶树来衡量B树，以其最大度数作为B树的阶数，一棵n阶B树的节点最多能存储n-1个数据，n个指针。\",\"B树\",\"小知识\",\"树的度数指的是一个节点的子节点个数。\",\"B树随着数据的插入或者删除会自动进行节点的裂变和合并，这里的具体细节可以去学习数据结构中的B树。\",\"B树知识点\",\"// todo 待更新B树\"]},\"121\":{\"h\":\"B+树\",\"t\":[\"B+树是B树的一个变种，基本的结构和节点的变化规律不变，仅在非叶子结点中存储索引，在叶子结点中存储数据。并且在叶子结点中，相邻的叶子结点会有一个单向的指针连接，形成一个单向链表。\",\"B+树\"]},\"122\":{\"h\":\"优化的B+树\",\"t\":[\"MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上增加了一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。\",\"MySQL优化的B+树\"]},\"123\":{\"h\":\"Hash\",\"t\":[\"哈希索引就是采用一定的Hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\",\"是哈希结构，那么就不可避免的会出现哈希碰撞（哈希冲突），即多个键值对映射到了同一个槽位上，此时就产生了哈希碰撞，可以通过构建链表来解决。\",\"知识点\",\"解决哈希碰撞的方法有很多，如：拉链法、开放寻址法、再哈希法、建立公共溢出区等方法进行解决。\",\"哈希索引的特点：\",\"hash索引只能用于对等比较（== ， in） ，不支持范围查找(between , > , < , ...)\",\"无法利用索引完成排序操作。\",\"查询效率高，通常只需要一次检索就可以了，效率通常要高于B+Tree索引。\",\"存储引擎支持\",\"在MySQL中，支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的。其他引擎不支持。\",\"自适应hash就是InnoDB存储引擎根据我们的查询条件，在指定的条件下会自动的将B+树索引构建成hash索引。\"]},\"124\":{\"h\":\"思考\",\"t\":[\"思考题\",\"为什么InnoDB存储引擎选择使用B+树索引结构？\",\"相对于二叉树，在相同数据规模的情况下，B+树具有更少的层级，查询速度更快\",\"对于B树，无论是叶子结点还是非叶子结点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要保存大量数据，只能增加树的高度，导致性能降低。\",\"对于Hash索引，B+树支持范围匹配和排序操作。\"]},\"125\":{\"h\":\"存储引擎支持\",\"t\":[\"索引\",\"InnoDB\",\"MyISAM\",\"Memory\",\"B+Tree索引\",\"✅\",\"✅\",\"✅\",\"Hash索引\",\"❌\",\"❌\",\"✅\",\"R-Tree索引\",\"❌\",\"✅\",\"❌\",\"Full-text索引\",\"5.6版本以后✅\",\"✅\",\"❌\"]},\"126\":{\"h\":\"索引分类\",\"t\":[\"索引主要分为4个类型：主键索引、唯一索引、常规索引、全文索引\",\"分类\",\"含义\",\"特点\",\"关键字\",\"主键索引\",\"针对于表中主键创建的索引\",\"默认自动创建，只能有一个\",\"PRIMARY\",\"唯一索引\",\"避免同一个表中某数据列中的值重复\",\"可以有多个\",\"UNIQUE\",\"常规索引\",\"快速定位特定数据\",\"可以有多个\",\"全文索引\",\"全文索引查找的是文本中的关键词，而不是比较索引中的值\",\"可以有多个\",\"FULLTEXT\",\"在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：\",\"分类\",\"含义\",\"特点\",\"聚集索引\",\"将数据和索引的存储放到了一块，索引结构的叶子结点保存了行数据\",\"必须有，而且只能有一个\",\"二级索引\",\"将数据和索引分开存储，索引结构的叶子结点关联的是对应的主键\",\"可以存在多个\",\"聚集索引的选取规则：\",\"如果存在主键，主键索引就是聚集索引\",\"如果不存在主键，将使用第一个唯一UNIQUE索引作为聚集索引。\",\"如果没有主键，也没有合适的唯一索引，那么InnoDB引擎就会生成一个rowid作为隐藏的聚集索引。\"]},\"127\":{\"h\":\"回表查询\",\"t\":[\"回表查询\",\"我们在对数据的查询时，通常会给定查询条件，而当我们的查询条件并不是聚集索引中的值，而是二级索引中的值，这时候的查询过程为：\",\"先通过筛选条件在二级索引中查找对应的记录值，找到记录值的id；\",\"使用记录值的id再在聚集索引中查询，得到数据的记录值。\",\"这个过程我们就叫做回表查询，虽然只执行了一条查询语句，但是实际的底层在B+树内查询了两次。\"]},\"128\":{\"h\":\"思考题\",\"t\":[\"以下SQL语句中，那个执行效率更高？为什么？\",\"select * from user where id = 10; select * from user where name = 'Mast'; \",\"备注：id为主键，name字段创建的有索引。\",\"答案\",\"第一条SQL使用id查询的效率更高，因为id是主键，而主键会建立聚集索引，聚集索引中查询直接就能够得到数据的记录值。而使用name字段查询，虽然建立有索引，但是其为二级索引，查询后的值为该字段对应的id值，此时还需要通过id值在聚集索引中查询，有回表查询，查询了两次B+树，而第一条SQL只查询了一次B+树。\",\"InnoDB主键索引的B+Tree高度为多高呢？\",\"答案\",\"假设： 一行数据大小为1K=1024B=1024字节，一页中能存储16行这样的数据，InnoDB的指针占用6个字节的空间，主键即使为bigint，占用8个字节。\",\"高度为2时： n * 8 + (n + 1) * 6 = 16 * 1024 解得：n = 1170\",\"所以一共能存储 1171 * 16 = 18736 个数据\",\"高度为3时： 1171 * 1171 * 16 = 21939856 个数据\"]},\"129\":{\"h\":\"索引语法\",\"t\":[\"创建索引\",\"CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name(index_col_name,...); \",\"在表 table_name 中创建名为index_name 的索引。\",\"注意\",\"[UNIQUE | FULLTEXT]是可选项，分别为创建唯一索引和全文索引，如果都不选的话，则创建的是常规索引。一个索引可以关联多个字段。\",\"根据索引关联字段的个数，可以讲索引分为两种类型：\",\"单列索引：索引列表只有一个字段。\",\"联合索引：又叫组合索引，即索引列表有多个字段。\",\"查看索引\",\"SHOW INDEX FROM table_name; \",\"查看指定表的索引。\",\"删除索引\",\"DROP INDEX index_name ON table_name; \",\"删除表 table_name 名为 index_name 的索引。\"]},\"130\":{\"h\":\"索引使用\"},\"131\":{\"h\":\"索引失效场景\",\"t\":[\"最左前缀法则 如果索引了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）。\",\"举个简单的例子，如为 mail(5)、tel(6)、username(7)三个字段建立联合索引，括号内为长度，则在使用的时候根据 mail -> tel -> username 这个顺序来判断是否走索引。\",\"查询条件的顺序为：mail - tel - username，则走索引，长度为 5 + 6 + 7 = 18\",\"查询条件的顺序为：mail - username - tel，则走索引，但长度为 5\",\"查询条件的顺序为：tel - username - mail，则不走索引，长度为NULL ......以此类推，满足最左前缀法则，哪里不满足，则从哪里断开，可以根据索引长度来判断\",\"范围查询 联合索引中，出现范围查（> ，<），范围查询右侧的列索引失效。\",\"索引列运算 不要在索引列上进行运算操作，索引将失效。\",\"字符串类型不加引号 在字符串类型字段上使用时，不加引号，索引将失效。\",\"模糊查询 如果仅仅是尾部模糊匹配，索引不会失效。如果是开头模糊匹配，则索引失效。\",\"or连接的条件 用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被使用到。\",\"数据分布影响 如果MySQL评估使用索引比全表更慢，则不会使用索引。\"]},\"132\":{\"h\":\"SQL提示\",\"t\":[\"SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化的目的。\",\"use index 建议使用索引\",\"explain select * from tb_user use index(idx_user_pro) where profession = '软件工程'; \",\"ignore index 忽略索引\",\"explain select * from tb_user ignore index(idx_user_pro) where profession = '软件工程'; \",\"force index 强制索引\",\"explain select * from tb_user force index(idx_user_pro) where profession = '软件工程'; \"]},\"133\":{\"h\":\"覆盖索引\",\"t\":[\"尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到），减少select *\",\"即尽量保证所需要的数据在使用索引内包含，保证所需要的所有数据都能够通过索引查询到。即保证返回的字段，能通过索引直接查到，不回表查询。\",\"小贴士\",\"using index condition:查找使用了索引，但是需要回表查询数据。\",\"using where;using index：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据。\"]},\"134\":{\"h\":\"前缀索引\",\"t\":[\"当字段类型为字符串（varchar，text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\",\"语法\",\"create index idx_xxxx on table_name(column(n)); \",\"前缀长度 可以根据索引的选择性来决定，而选择性是指不重复的索引值(基数)和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\",\"select count(distinct email) / count(*) from tb_user; select count(distanct substring((email,1,5) / count(*) from tb_user; \"]},\"135\":{\"h\":\"单列/联合索引\",\"t\":[\"单列索引：即一个索引值包含了单个列\",\"联合索引：即一个索引值包含了多个列 在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。\",\"小知识\",\"有时候即便我们创建了联合索引，MySQL也不一定就会使用，在多联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询。\"]},\"136\":{\"h\":\"索引设计原则\",\"t\":[\"针对于数据量较大，且查询比较频繁的表建立索引。\",\"针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。\",\"尽量选择区分度较高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。\",\"如果是字符串类型和字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。\",\"尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。\",\"要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改茶的效率。\",\"如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引更有效地用于查询。\"]},\"137\":{\"h\":\"MySQL进阶 - 锁\"},\"138\":{\"h\":\"介绍\",\"t\":[\"锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。\"]},\"139\":{\"h\":\"全局锁\"},\"140\":{\"h\":\"介绍\",\"t\":[\"全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。\",\"其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。\"]},\"141\":{\"h\":\"一致性数据备份\",\"t\":[\"加锁\",\"flush tables with read lock; \",\"备份\",\"mysqldump -uroot -p1234 tb_user > tb_user.sql; \",\"注意：这并不是一条SQL语句！而是一条Shell脚本！\",\"解锁\",\"unlock tables; \"]},\"142\":{\"h\":\"特点\",\"t\":[\"数据库中加全局锁，是一个比较重的操作，存在以下问题：\",\"如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就完全停止。\",\"如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。\",\"在InnoDB引擎中，我们可以在备份时加上参数 --single-transaction参数来完成不加锁的一致性数据备份。\",\"mysaldump --single-transaction -uroot -p1234 tb_user > tb_user.sql \"]},\"143\":{\"h\":\"表级锁\"},\"144\":{\"h\":\"介绍\",\"t\":[\"表级锁，每次操作锁住整张表。锁定力度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。\",\"对于表级锁，主要分为以下三种类型：\",\"表锁\",\"元数据锁（meta data lock，MDL）\",\"意向锁\"]},\"145\":{\"h\":\"1.表锁\",\"t\":[\"分类 对于表锁，又可以分为两类：\",\"表共享读锁（read lock）\",\"表独占写锁（write lock）\",\"语法\",\"加锁：\",\"lock tables 表名 ... read/write \",\"释放锁\",\"unlock tables / 客户端断开连接 \",\"注意\",\"读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的读。\"]},\"146\":{\"h\":\"2.元数据锁\",\"t\":[\"MDL加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与DDL冲突，保证读写的正确性。\",\"在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁（排他）。\",\"对应SQL\",\"锁类型\",\"说明\",\"lock table xxx read / write\",\"SHARED_READ_ONLY / SHARED_NO_READ_WRITE\",\"select 、 select ... lock in share mode\",\"SHARED_READ\",\"与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE\",\"insert 、 update 、delete 、 select ... for update\",\"SHARED_WRITE\",\"与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE\",\"alter table ...\",\"EXCLUSIVE\",\"与其他的MDL都互斥\",\"查看元数据锁：\",\"select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadate_locks; \"]},\"147\":{\"h\":\"3.意向锁\",\"t\":[\"为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。\",\"意向共享锁（IS）：\",\"select ... lock in share mode ``` 与表锁共享锁 read 兼容，与表锁排他锁 write 互斥。 2. 意向排他锁（IX）： ```sql insert、update、delete、select ... for update \",\"与表锁共享锁 read 及排他锁 write 都互斥。意向锁之间不会互斥。\",\"通过以下SQL，查看意向锁及行锁的加锁情况。\",\"select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks; \"]},\"148\":{\"h\":\"行级锁\",\"t\":[\"行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发程度高。主要应用在InnoDB存储引擎中。\",\"InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：\",\"行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。\",\"间隙锁（Gap Lock）：锁定索引记录间隙（不包含该记录值），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。\",\"临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。\"]},\"149\":{\"h\":\"行锁\",\"t\":[\"InnoDB实现了以下两种类型的行锁：\",\"共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。\",\"排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。\",\"兼容和互斥\",\"只有共享锁和共享锁之间是兼容的，其余全是冲突的。\",\"可以将共享看作是只读。\"]},\"150\":{\"h\":\"间隙锁\"},\"151\":{\"h\":\"临键锁\",\"t\":[\"相关信息\",\"// todo:有点繁琐，暂未理解\"]},\"152\":{\"h\":\"MySQL运维 - 日志\"},\"153\":{\"h\":\"MySQL进阶 - MySQL管理\"},\"154\":{\"h\":\"MySQL进阶 - 触发器\"},\"155\":{\"h\":\"介绍\",\"t\":[\"触发器是于表有关的数据库对象，指在insert、update、delete之前或者之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以与协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。\",\"使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。\",\"举例\",\"语句级触发：执行一次SQL，触发器会触发一次，无论影响多少行。 行级触发：如一个SQL语句更新了3行数据，则触发器会触发三次。\"]},\"156\":{\"h\":\"类型\",\"t\":[\"触发器类型\",\"NEW和OLD\",\"INSERT型触发器\",\"NEW表示将要或者已经新增的数据\",\"UPDATE型触发器\",\"OLD表示修改之前的数据，NEW表示将要或已经修改后的数据\",\"DELETE型触发器\",\"OLD表示将要或者已经删除的数据\"]},\"157\":{\"h\":\"语法\",\"t\":[\"创建\",\"MySQL目前只支持行级触发器\",\"CREATE TRIGGER trigger_name BEFORE/AFTER INSERT/UPDATE/DELETE ON tbl_name FOR EACH ROW -- 行级触发器 BEGIN -- 触发器语句 trigger_stmt; END; \",\"查看\",\"SHOW TRIGGERS; \",\"删除\",\"-- 如果没有指定schema_name，默认为当前数据库 DROP TRIGGER [schema_name.]trigger_name; \"]},\"158\":{\"h\":\"案例\"},\"159\":{\"h\":\"插入触发器\",\"t\":[\"CREATE TRIGGER user_insert_trigger AFTER INSERT ON user FOR EACH ROW BEGIN -- user表中数据插入时，则向日志表中插入一条数据 INSERT INTO user_logs(id,operate_type,excute_sql) VALUE (null,\\\"INSERT\\\",concat(\\\"SQL:INSERT INTO user(id,username,password) VALUE (\\\",new.id,\\\",\\\",new.username,\\\",\\\",new.password,\\\")\\\")); END; \"]},\"160\":{\"h\":\"更新触发器\",\"t\":[\"CREATE TRIGGER user_update_trigger AFTER UPDATE ON user FOR EACH ROW BEGIN -- user表中数据更新时，则向日志表中插入一条数据 INSERT INTO user_logs(id,operate_type,excute_sql) VALUE (null,\\\"UPDATE\\\",concat(\\\"SQL:INSERT INTO user(id,username,password) VALUE (\\\",new.id,\\\",\\\",new.username,\\\",\\\",new.password,\\\")\\\")); END; \"]},\"161\":{\"h\":\"删除触发器\",\"t\":[\"CREATE TRIGGER user_delete_trigger AFTER DELETE ON user FOR EACH ROW BEGIN -- user表中数据删除时，则向日志表中插入一条数据 INSERT INTO user_logs(id,operate_type,excute_sql) VALUE (null,\\\"DELETE\\\",concat(\\\"SQL:INSERT INTO user(id,username,password) VALUE (\\\",new.id,\\\",\\\",new.username,\\\",\\\",new.password,\\\")\\\")); END; \",\"小知识\",\"在触发器内所执行的SQL中，我们可以使用NEW和OLD两个关键字来调用执行后和执行前的数据。\"]},\"162\":{\"h\":\"MySQL进阶 - 视图\"},\"163\":{\"h\":\"介绍和基本语法\"},\"164\":{\"h\":\"介绍\",\"t\":[\"视图View是一种虚拟存在的表，视图中的数据并不在数据库中实际存在，行和列数据来自定义视图中使用的表，并且是在使用视图时动态生成的。\",\"简单的来说，视图不保存数据，只是保存了查询的SQL逻辑，不保存查询的结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。\",\"简单理解\",\"可以理解为给SQL语句设置别名，我们在使用的时候可以直接使用别名进行子查询、联合查询等操作。\"]},\"165\":{\"h\":\"操作语法\",\"t\":[\"创建\",\"CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; \",\"查询\",\"-- 查看创建视图语句 SHOW CREATE VIEW 视图名称; -- 查看视图数据 SELECT * FROM 视图名称; \",\"视图就是一张逻辑SQL查询的临时表，我们可以直接按照表的操作来操作视图。\",\"修改\",\"-- 方法一：和创建视图一致，但是需要保证OR REPLACE关键字，说明是替换原来的视图 CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方法二 ALTER VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; \",\"删除\",\"DROP VIEW [IF EXISTS] 视图名称 [,视图名称...]; \"]},\"166\":{\"h\":\"检查选项\",\"t\":[\"当使用WITH CHECK OPTION 子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插入、删除 更新，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，他还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，MySQL提供了两个选项：CASCADED、LOCAL，默认值为CASCADED。\",\"CASCADED会强制检查当前视图和其依赖的视图的筛选条件。\",\"LOCAL会检查当前视图，并且检查定义检查条件的依赖的视图。\",\"简单理解\",\"可以简单的理解为CASCADED是强制检查所有相关的视图，无论是否定义，而LOCAL只会检查定义检查条件的视图。\"]},\"167\":{\"h\":\"更新及作用\"},\"168\":{\"h\":\"视图的更新\",\"t\":[\"要使视图可以更新，视图中的行与基础表中的行之间必须存在一对一的关系，如果视图包含了以下任意一项，则该视图就不可更新：\",\"聚合函数或者窗口函数(SUM()、MIN()、MAX()、COUNT()等)；\",\"DISTINCT\",\"GROUP BY\",\"HAVING\",\"UNION 或者 UNION ALL\"]},\"169\":{\"h\":\"视图的作用\",\"t\":[\"简单\",\"视图不仅可以简化用户对数据的理解，也可以简化他们的操作，那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的查询条件。\",\"安全\",\"数据库可以授权，但是不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据。\"]},\"170\":{\"h\":\"MySQL运维 - 读写分离\"},\"171\":{\"h\":\"MySQL 数据库\"},\"172\":{\"h\":\"学习目录\",\"t\":[\"基础篇 \",\"MySQL基础\",\"SQL基础语法\",\"函数\",\"约束\",\"多表查询\",\"事务\",\"进阶篇 \",\"存储引擎\",\"索引\",\"SQL优化\",\"视图\",\"存储过程\",\"触发器\",\"锁\",\"InnoDB引擎\",\"MySQL管理\",\"运维篇 \",\"日志\",\"主从复制\",\"分库分表\",\"读写分离\"]},\"173\":{\"h\":\"参考资料\",\"t\":[\"博主在学习MySQL数据库时参考的了黑马程序员出品的《MySQL从入门到精通 从mysql安装到mysql高级、mysql优化全囊括》的系列课程，这里在此对黑马开源教学视频，表示感谢。\",\"视频地址\",\"https://www.bilibili.com/video/BV1Kr4y1i7ru\",\"除了参考视频教程外，还阅读了《MySQL必知必会》这本工具书。书的PDF资料在这里下载。\",\"PDF下载\",\"链接: https://pan.baidu.com/s/1qThvvyOXlFioEi09GIlM6w?pwd=nrtj\",\"提取码: nrtj\"]},\"174\":{\"h\":\"MySQL基础 - SQL基础语法\"},\"175\":{\"h\":\"通用语法\",\"t\":[\"SQL语句可以单行或者多行书写，以分号结尾。\",\"SQL语句可以使用空格/缩进符来增强语句的可读性。\",\"MySQL数据库的SQL语言不区分大小写，关键字建议使用大写。\",\"注释\",\"注释\",\"单行注释：-- 注释内容 或者 # 注释内容(MySQL特有的语法)\",\"多行注释：使用/* 注释内容 */\"]},\"176\":{\"h\":\"SQL分类\",\"t\":[\"DDL\",\"Data Definition Language 数据定义语言，用来定义数据库对象（数据库、数据表、字段）\",\"DML\",\"Data Manipulation Language 数据操作语言，用来对数据库表中的数据进行增删改\",\"DQL\",\"Data Query Language 数据查询语言，用来对数据库中的数据进行查询操作\",\"DCL\",\"Data Control Language 数据控制语言，用来创建数据库用户、控制数据表的访问权限\"]},\"177\":{\"h\":\"DDL语句\"},\"178\":{\"h\":\"数据库操作\",\"t\":[\"查询\",\"查询所有数据库\",\"SHOW DATABASES; \",\"查询当前数据库\",\"SELECT DATABASE(): \",\"创建\",\"CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFULT CHARSET 字符集] [COLLATE 排序规则]; \",\"删除\",\"DROP DATABASE [IF EXISTS] 数据库名; \",\"使用\",\"USE 数据库名; \"]},\"179\":{\"h\":\"数据表操作\",\"t\":[\"查询\",\"查询当前数据库的所有表\",\"SHOW TABLES; \",\"查询表结构\",\"DESC 表名; \",\"查询指定表的建表语句\",\"SHOW CREATE TABLE 表名; \",\"创建\",\"CREATE TABLE 表名( 字段1 字段1类型 [COMMENT 字段1注释], 字段2 字段2类型 [COMMENT 字段2注释], 字段3 字段3类型 [COMMENT 字段3注释], ...... 字段n 字段n类型 [COMMENT 字段n注释] )[COMMENT 表注释]; \",\"提示\",\"[]代表可选参数，并且最后一个字段后没有逗号，最后以分号结尾。\",\"删除\",\"删除表\",\"DROP TABLE [IF EXISTS]表名； \",\"删除指定数据表，并且重新创建该表\",\"TRUNCATE TABLE 表名; \",\"说明\",\"删除数据表后，会讲数据表内的所有数据清空。这里的功能可以看作，将数据表内的所有数据全部清空。但是实际上的操作流程是将表删除，然后重新创建。而DELETE * FROM 表名语句能够将所有的数据清空，但是例如字段自增的序号和建立的一些索引等是不会被清除的。\",\"修改\",\"修改表名\",\"ALTER TABLE 旧表名 RENAME [TO] 新表名; \",\"提示\",\"这里的[TO]是可有可无的，没有也不会对SQL语句造成歧义，影响功能，写上以后会使SQL的可读性更高。\",\"修改表字符集\",\"ALTER TABLE 表名 [DEFAULT] CHARACTER SET 字符集名 [DEFAULT] COLLATE 校对规则名; \",\"表内字段修改\",\"说明\",\"由于对表字段的修改，也可以归纳为字段操作，且其操作较多，就将其全部归纳到字段操作里。即下一小节。\"]},\"180\":{\"h\":\"字段操作\",\"t\":[\"添加字段\",\"ALTER TABLE 表名 ADD 字段名 字段数据类型(长度)[COMMENT 字段注释][约束]; \",\"删除字段\",\"ALTER TABLE 表名 DROP 字段名; \",\"修改字段\",\"修改数据类型\",\"ALTER TABlE 表名 MODIFY 字段名 新数据类型(长度); \",\"修改字段名称和字段类型\",\"ALTER TABlE 表名 CHANGE 旧字段名 新字段名 数据类型(长度)[COMMENT 字段注释][约束]; \"]},\"181\":{\"h\":\"DML语句\",\"t\":[\"说明\",\"理论上讲DML数据操作语言，应该包含增、删、改、查4个部分，但是由于数据查询的操作使用频繁，且种类繁多，我们将其抽取出来，单独作为一个章节，为DQL进行说明，这里就只了解增、删、改这三个操作。\"]},\"182\":{\"h\":\"添加数据\",\"t\":[\"给指定字段添加数据\",\"INSERT INTO 表名 (字段1,字段2,...,字段n) VALUES (值1,值2,...,值n); \",\"给全部字段添加数据\",\"INSERT INTO 表名 VALUES (值1,值2,...,值n); \",\"批量添加数据\",\"-- 指定字段添加数据 INSERT INTO 表名 (字段1,字段2,...,字段n) VALUES (值1,值2,...,值n),...,(值1,值2,...,值n); -- 全部字段添加数据 INSERT INTO 表名 VALUES (值1,值2,...,值n),...,(值1,值2,...,值n); \",\"注意\",\"插入数据时指定的字段顺序需要于值的顺序是一一对应的\",\"字符串和日期型数据应该包含在引号之中\",\"插入的数据大小，应该在字段数据类型的规定范围以内\"]},\"183\":{\"h\":\"修改数据\",\"t\":[\"UPDATE 表名 SET 字段名1 = 值1,字段名2 = 值2,.... [WHERE 条件]; \",\"危险警告\",\"涉及的数据的修改时，需要严格谨慎检查自己的SQL语句，这里修改数据的筛选条件可有可无，但是没有筛选条件时则会修改整张表的所有数据。\"]},\"184\":{\"h\":\"删除数据\",\"t\":[\"DELETE FROM 表名 [WHERE 条件]; \",\"危险警告\",\"涉及的数据的删除时，和前面的数据修改相同，需要严格谨慎检查自己的SQL语句，这里删除数据的筛选条件可有可无，但是没有筛选条件时则会删除整张表的所有数据。\",\"DELETE语句只能按行删除数据，不能只删除某一个字段的值，不过可以使用UPDATE语句来进行修改。\"]},\"185\":{\"h\":\"DQL语句\"},\"186\":{\"h\":\"DQL语法\",\"t\":[\"SELECT 字段列表 FROM 表名 WHERE 条件列表 GROUP BY 分组字段列表 HAVING 分组后条件列表 ORDER BY 排序字段列表 LIMIT 分页参数 \"]},\"187\":{\"h\":\"查询类型\",\"t\":[\"基本查询\",\"条件查询（WHERE）\",\"聚合查询（count、max、min、avg、sum）\",\"分组查询（GROUP BY）\",\"排序查询（ORDER BY）\",\"分页查询（LIMIT）\"]},\"188\":{\"h\":\"基本查询\",\"t\":[\"查询多个字段\",\"-- 指定字段 SELECT 字段1,字段2,字段3,... FROM 表名; -- 所有字段 SELECT * FROM 表名; \",\"设置别名\",\"SELECT 字段1 [AS 别名1],字段2 [AS 别名2],... FROM 表名; \",\"去除重复记录\",\"SELECT DISTINCT 字段列表 FROM 表名; \"]},\"189\":{\"h\":\"条件查询\",\"t\":[\"语法\",\"SELECT 字段列表 FROM 表名 WHERE 条件列表; \",\"条件\",\"运算符\",\"功能\",\">\",\"大于\",\">=\",\"大于等于\",\"<\",\"小于\",\"<=\",\"小于等于\",\"<>或者!=\",\"不等于\",\"BETWEEN...AND...\",\"在某个范围之内,包含临界值\",\"IN(...)\",\"在in之后的列表中，多选之\",\"LIKE 占位符\",\"模糊匹配(_匹配单个字符，%匹配任意个字符)\",\"IS NULL\",\"是否为NULL\",\"AND 或者 &&\",\"并且(同时成立)\",\"OR 或者 ||\",\"或者(成立任意一个即可)\",\"NOT 或者 !\",\"非，不是\"]},\"190\":{\"h\":\"聚合查询\"},\"191\":{\"h\":\"聚合函数\",\"t\":[\"介绍 将一列数据作为一个整体，进行纵向计算\",\"常见的聚合函数\",\"函数\",\"功能\",\"count\",\"统计数量\",\"max\",\"最大值\",\"min\",\"最小值\",\"avg\",\"平均值\",\"sum\",\"求和\",\"语法\",\"SELECT 聚合函数(字段列表) FROM 表名; \",\"注意\",\"null值不参与所有聚合函数运算。\"]},\"192\":{\"h\":\"分组查询\",\"t\":[\"语法\",\"SELECT 字段列表 FROM 表名 [WHERE 条件列表] GROUP BY 分组字段名 [HAVING 分组后的过滤条件]; \",\"WHERE 和 HAVING 区别 执行时机不同：where是分组之前进行过滤，不符合where条件的不参与分组，而having是在分组之后进行过滤。 判断条件不同：where不能对聚合函数进行判断，而having可以。\",\"注意\",\"执行顺序：where > 聚合函数 > having\",\"分组以后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\"]},\"193\":{\"h\":\"排序查询\",\"t\":[\"语法\",\"SELECT 字段列表 FROM 表名 ORDER BY 字段1 [排序方式1],字段2 [排序方式2],...; \",\"排序方式\",\"ASC : 升序(默认值)\",\"DESC : 降序\",\"提示\",\"如果是多字段排序，只有当第一个字段的值相同时，才会根据第二个字段比较，以此类推。\"]},\"194\":{\"h\":\"分页查询\",\"t\":[\"语法\",\"SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数; \",\"注意\",\"起始索引从0开始，起始索引 = (查询的页码 - 1) * 每页显示的记录数\",\"分页查询是数据库的方言，不同的数据库拥有不同的语法实现，MySQL中使用的是LIMIT子句实现\",\"如果查询的是第一页数据，起始索引可以省略，直接简写为LIMIT 查询记录数，如LIMIT 10。\"]},\"195\":{\"h\":\"执行顺序\",\"t\":[\"SELECT -- 5 字段列表 FROM -- 1 表名 WHERE -- 2 条件列表 GROUP BY-- 3 分组字段列表 HAVING -- 4 分组后条件列表 ORDER BY-- 6 排序字段列表 LIMIT -- 7 分页参数 \"]},\"196\":{\"h\":\"DCL语句\",\"t\":[\"DCL全称为Data Control Language(数据控制语言)，用来管理数据库 用户，控制数据库的访问权限。\"]},\"197\":{\"h\":\"用户控制\",\"t\":[\"查询用户\",\"USE mysql; SELECT * FROM user; \",\"创建用户\",\"CREATE USER '用户名'@'主机名' IDENTIFIED BY ‘密码’; \",\"删除用户\",\"DROP USER ‘'用户名'@'主机名'; \",\"修改用户\",\"ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY ‘新密码’; \",\"注意\",\"在MySQL数据库中，所有的用户信息和用户权限信息都存储于mysql数据库内的表中。\",\"主机名可以使用 % 通配。\",\"这类SQL开发人员操作的比较少，通常是DBA(Database Adminstrator数据库管理员)使用\"]},\"198\":{\"h\":\"权限控制\",\"t\":[\"MySQL中定义了很多种权限，但是常用的就以下几种：\",\"权限\",\"说明\",\"ALL、ALL PRIVILEGES\",\"所有权限\",\"SELECT\",\"查询数据权限\",\"INSERT\",\"插入数据权限\",\"UPDATE\",\"更新数据权限\",\"DELETE\",\"删除数据权限\",\"ALTER\",\"修改表权限\",\"DROP\",\"删除数据库/数据表权限\",\"CREATE\",\"创建数据库/数据表权限\",\"查询权限\",\"SHOW GRANTS FOR '用户名'@'主机名'; \",\"授予权限\",\"GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名'; \",\"撤销权限\",\"REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名'; \",\"提示\",\"多个权限之间，使用逗号分隔\",\"授权时，数据库名和表名可以使用 * 进行通配，代表所有。\"]},\"199\":{\"h\":\"MySQL进阶 - SQL优化\"},\"200\":{\"h\":\"insert优化\"},\"201\":{\"h\":\"批量插入\",\"t\":[\"insert into table_name values (values_list...); \",\"一次性可以插入多个数据，来减少多次请求带来的性能消耗，但是一次性插入的数据量不建议超过500-1000条。\"]},\"202\":{\"h\":\"手动提交事务\",\"t\":[\"start transaction; insert into table_name values (values_list1...); insert into table_name values (values_list2...); insert into table_name values (values_list3...); commit; \",\"在多次数据插入时，可以手动开启事务，将数据分组提交。\"]},\"203\":{\"h\":\"主键顺序插入\",\"t\":[\"主键乱序：8 5 3 6 9 4 2 1 7 10 主键有序：1 2 3 4 5 6 7 8 9 10 \",\"提示\",\"主键有序插入比主键乱序插入的速度要快，这是由于MySQL底层的数据结构造成的，我们在下一章节的主键优化里详细说明。\"]},\"204\":{\"h\":\"大批量数据插入\",\"t\":[\"如果一次性需要插入大量的数据，使用insert语句插入的性能不高，此时可以使用MySQL提供的load指令进行插入。\",\"load指令可以将文件内的数据，一次性加载进数据库内。\",\"具体操作如下：\",\"-- 客户端连接服务端时，加上参数 --local-infile mysql --local-infile -u root -p -- 设置全局参数为local_infile = 1，开启从本地加载文件导入数据库的开关 set global local_infile = 1; -- 执行load指令，将准备好的数据加载到数据表内 load data local infile 'file_path' into table `table_name` fields terminated by 'split_char' lines terminated by 'line_break'; \",\"参数说明\",\"file_path : 存储数据文件的路径地址\",\"table_name : 要插入数据的数据表名称\",\"split_char : 行内数据字段分隔符号\",\"line_break : 换行分隔符，即以什么标准判断数据行之间的分隔。\"]},\"205\":{\"h\":\"primery key优化\"},\"206\":{\"h\":\"数据的组织方式\",\"t\":[\"在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（index organized table IOT）。\",\"而InnoDB存储引擎中，默认的聚集索引就是主键索引。\",\"逻辑存储结构\",\"参数说明\",\"TableSpace：表空间，内存储的是segment段\",\"Segment：段，其存储的是extent区\",\"Extent：区，其存储的是page页【固定1M】\",\"Page：页，其内存储的是row行【固定16k】\",\"Row：行，其内存储的是数据行\",\"这里的Extent和Page的空间大小是固定的，每个Extent区占据1M，每个Page页占据16K，则一个extent内包含了64个page\"]},\"207\":{\"h\":\"页分裂\",\"t\":[\"页可以为空，也可以填充一半，也可以填充100%。每个页包含了 2 - N 行数据，如果一行的数据过大，会行溢出，根据主键排序。\",\"我们分别从 主键顺序插入 和 主键乱序插入 这两个角度来探究这个问题：\",\"主键顺序插入 主键顺序插入数据，由于数据在页内存储会根据主键排序，那么此时所有的数据在页内都会顺序排列，页内剩余空间不足时，则开启下一个页，尽可能的保证了空间的利用率。也不存在数据的移动问题。\",\"主键乱序插入 同理，数据按主键排序，那么在主键乱序插入一组数据以后，此时页内的数据是有序的，但是如果下一次想要插入的数据主键不为最大值，那么此时需要将数据插入到页中，而不是直接添加到页尾，则此时需要进行数据的移动。\",\"主键乱序插入\",\"先开启一个新的数据页，page3\",\"将page1中50%的位置，将后半段数据移动到page3\",\"将主键为50的这行数据，插入到page3的末尾。\",\"由于要保证page之间有序，还需要调整页间指针的方向，调整为 page1 -> page3 -> page2\",\"此时则完成了数据的插入。\",\"小知识\",\"我们将这种页面分裂的现象，叫做页分裂。那么在插入时会伴随页分裂，则相同的在数据删除时，就会出现页合并。\"]},\"208\":{\"h\":\"页合并\",\"t\":[\"当删除一行记录时，实际上并没有将记录值物理删除，只是记录被标记（flaged）为删除并且他的空间变得允许被其他记录值重新声明。当页中删除的记录达到MERGE_THRESHOLD(默认为页的50%)，innoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用。\",\"小贴士\",\"MERGE_THRESHOLD：合并页的阀值，可以自己设置，在创建表或者创建索引时指定。\"]},\"209\":{\"h\":\"主键设计原则\",\"t\":[\"满足业务需求的情况下，尽量降低主键的长度。\",\"插入数据时，尽量使用顺序插入，选择使用AUTO_INCREMENT自增主键。\",\"尽量不要使用UUID做主键或者是其他自然主键，如身份证号。\",\"业务操作时避免对主键的修改。\"]},\"210\":{\"h\":\"order by优化\"},\"211\":{\"h\":\"查询类别\",\"t\":[\"Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫做FileSort排序。\",\"Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为Using index，不需要额外排序，操作效率较高。\",\"对于满足排序列表的索引，在order by查询时是直接通过索引进行查询，是Using index，而不满足排序列表的索引则会通过全表扫描，是Using filesort\"]},\"212\":{\"h\":\"举例说明\",\"t\":[\"举个简单的例子：\",\"select id,age,name from tb_name order by age; \",\"在没有建立任何索引的情况下，这条SQL是通过全表扫描进行查询的，但是如果对age字段建立索引，则再进行查询时，是通过索引查询的，Using index。\",\"这里也是满足索引的最左前缀法则，即只要从左往右开始，有字段存在符合的索引，则就可以通过索引进行查询，如果全部都能通过索引则仅为Using index，否则为Using index和Using filesort并存。\",\"注意\",\"建立索引时也会区分字段的排序规则，有ASC和DESC两种，默认为ASC。\",\"如果存在和排序列表中相符合或者完全相反的索引，那么都是可以使用索引进行查询的，完全相同时则无可厚非，直接进行查询即可，而完全相反时只需要反向扫描即可。\"]},\"213\":{\"h\":\"注意事项\",\"t\":[\"根据排序字段建立合适的索引，多字段排序时，也是遵循最最前缀法则的。\",\"尽量使用覆盖索引。\",\"多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC、DESC）。\",\"如何不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小sort_buffer_size（默认为256k）。\"]},\"214\":{\"h\":\"group by优化\"},\"215\":{\"h\":\"查询类型\",\"t\":[\"Using index : 使用索引，直接使用索引对相关的信息进行查询。\",\"Using temporary : 使用中间表，需要通过建立中间临时表对所需要的数据进行查询，效率相对较低。\"]},\"216\":{\"h\":\"注意事项\",\"t\":[\"在分组操作时，可以通过索引来提高效率。\",\"分组操作时，索引的使用也是满足最左前缀法则的。\",\"尽量建立联合索引，覆盖索引，避免回表查询。\"]},\"217\":{\"h\":\"limit优化\"},\"218\":{\"h\":\"优化场景\",\"t\":[\"对limit来讲，从越大数据开始的分页，耗时越长。需要对此优化。\"]},\"219\":{\"h\":\"举例说明\",\"t\":[\"如：返回 2000000 - 200010的数据，其他数据全部丢弃，此时查询的代价就比较大。\"]},\"220\":{\"h\":\"优化思路\",\"t\":[\"一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。\"]},\"221\":{\"h\":\"count优化\",\"t\":[\"MyISAM引擎把一个表的总行数存在了磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高。\",\"但是对于InnoDB引擎，它count(*)的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。\"]},\"222\":{\"h\":\"优化思路\",\"t\":[\"自己计数，不通过InnoDB引擎提供的计数方式进行计算。\",\"例如\",\"我们在使用Redis时，将数据量的存储起来，对于数据的变动，维护好这个存储的变量即可。\",\"也可以建立相关的表，于使用Redis类似，维护好数据表内的数据即可。\"]},\"223\":{\"h\":\"count的用法\",\"t\":[\"count()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是Null，累计值就加1，否则不加，最后返回累计值。\",\"count(*) InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。\",\"count(主键)\",\"InnoDB引擎会遍历整张表，把每一行的主键ID值都取出来，返回给服务层。服务层拿到主键以后，直接按行进行累加（主键不可能为null）\",\"count(字段) 没有not null约束：innoDB引擎会遍历整张表，把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。\",\"有not null约束：InnoDB引擎会遍历整张表，把每一行的字段值都取出来，返回给服务层，直接按行进行累加。\",\"count(1) InnoDB引擎遍历整张表，但不取值，服务层对于返回的每一行，放一个数字“1”进去，直接按行进行累加。\",\"效率排行\",\"count(字段) < count(主键 id) < count(1) ≈ count(*)\",\"尽量使用count(*)\"]},\"224\":{\"h\":\"update优化\"},\"225\":{\"h\":\"注意事项\",\"t\":[\"InnoDB引擎中的行锁是针对索引加的锁，不是针对记录值加的锁，并且该索引不能失效，否则会从行锁升级为表锁。\",\"提示\",\"所以在更新操作时，尽量使用主键、索引字段进行更新，以减少在并发环境下，造成的影响。\"]},\"226\":{\"h\":\"举例说明\",\"t\":[\"如未使用索引字段进行数据更新，则在筛选该数据记录值时会进行全表扫描，则会占用的是整张表的资源。\"]},\"227\":{\"h\":\"MySQL进阶 - SQL性能分析\"},\"228\":{\"h\":\"SQL执行频率\",\"t\":[\"MySQL客户端连接成功后，通过 SHOW [session | global] status 命令可以查看服务器状态信息。\",\"通过如下指令，可以查看当前数据库的INSERT、SELECT、UPDATE、DELETE操作的访问频次：\",\"SHOW GLOBAL STATUS LIKE \\\"Com_______\\\"; \",\"需要注意的是，这里一共有7个空格。\",\"这里查询完成以后就能够看到增删改查的执行次数。\",\"Com_insert：插入\",\"Com_update：更新\",\"Com_select：查询\",\"Com_delete：删除\",\"性能查询\",\"我们可以根据这个数据来判断我们主要对那些操作进行优化。\"]},\"229\":{\"h\":\"慢查询日志\",\"t\":[\"慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位：秒，默认10秒)的所有SQL语句的日志。\",\"MySQL中默认不开启慢查询日志，开启的话需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：\",\"-- 开启MySQL中的慢查询 slow_query_log = 1 -- 设置慢查询的 时间为2秒钟，SQL语句执行超过两秒，则会被视为慢查询，记录慢查询日志 long_query_time = 2 \",\"配置完毕以后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息/var/lib/mysql/localhost-slow.log\",\"功能\",\"慢查询日志主要就是为了记录那些查询时间较长的SQL语句，方便于我们的优化。\",\"前景提要\",\"通过慢查询日志，我们能够找到查询时间较低的SQL，但是有时候我们对于SQL已经优化到了极致，由于数据量的巨大，无法再压缩SQL的执行时间，或者有些SQL本应该很快执行完毕，但是仍耗费了很长时间，而耗费的时间又在我们慢日志统计时间的临界值，而这类SQL是非常需要我们进行优化的。这两种情况时，需要优化的没有被统计，而无法优化的又被统计到，那么此时慢查询就无法满足我们的需求，这时候就需要使用Profile分析。\"]},\"230\":{\"h\":\"Profile分析\",\"t\":[\"show profiles分析能够在做SQL优化时帮助我们了解时间都耗费到哪去了。通过have_profiling参数，能够看到当前MySQL是否支持profile操作：\",\"查看是否支持profile\",\"SELECT @@have_profiling; \",\"默认情况下profile是关闭的，可以通过 set 语句在 globle|session 级别开启profiling;\",\"开启profile\",\"set [session|globle] profile = 1; \",\"查看每一条执行过的SQL语句的耗时情况\",\"show profiles; \",\"查看指定query_id 的SQL语句各个阶段的耗时情况\",\"shwo profile for query query_id; \",\"查看指定query_id 的SQL语句的CPU的使用情况\",\"show profile cpu for query query_id; \"]},\"231\":{\"h\":\"explain执行计划\",\"t\":[\"前景提要\",\"前面我们了解的几种方法要么通过SQL的执行频率，要么通过SQL的执行时间来判断SQL是否需要优化，而这些方式并不能够真正的评判一条SQL的性能。\",\"explain 或者 desc 命令获取MySQL如何执行SELECT语句的信息，包括SELETC语句执行过程中表如何连接和连接的顺序。\",\"语法\",\"-- 直接在SELECT语句之前加上关键字 explain 或者 desc EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件列表; \",\"explain执行计划各字段的含义：\",\"id SELECT 查询的序列号，表示查询中执行 SELECT 子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，值越大，越先执行）。\",\"select_type 表示SELECT的类型，常见的取值有SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等。\",\"type【重要】 表示连接类型，性能由好到差的连接类型为：NULL、system、const、eq_ref、ref、range、index、all。\",\"possible_key 显示可能应用到这张表上的索引，一个或者多个。\",\"key 实际使用的索引，如果为NULL，则表示没有使用索引。\",\"key_len 表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，再不损失精度的前提下，长度越短越小。\",\"rows MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。\",\"filtered 表示查询返回结果的行数占需要的读取行数的百分比，filtered的值越大越好。\",\"extra\\n备注信息，一般为NULL。\"]},\"232\":{\"h\":\"MySQL进阶 - 存储引擎\"},\"233\":{\"h\":\"MySQL的体系结构\",\"t\":[\"MySQL的体系结构示意图\",\"连接层 连接层处于MySQL体系结构中的最上层，是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、以及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。\",\"服务层 服务层处于MySQL体系结构中的第二层，主要完成大多书的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有存储引擎的功能也在这一层实现，如 过程、函数等。\",\"引擎层\",\"引擎层处于MySQL体系结构中的第三层，真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。\",\"存储层 存储层位于MySQL结构体系的最底层，主要是将数据存储在文件系统之上，完成与存储引擎的交互。\"]},\"234\":{\"h\":\"存储引擎简介\",\"t\":[\"存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式，存储引擎是基于表的，而不是基于库的，所以存储引擎也可以被称为表的类型。\",\"也就是说，同一个数据库的不同表可以选择不同的存储引擎。\",\"查看支持的存储引擎\",\"SHOW ENGINES; \",\"存储引擎列表\",\"创建一张表并且指定引擎\",\"create table users( id int primary key auto_increment, username varchar(10) )engine=InnoDB \",\"该SQL代表的意思是：创建一张名为users的表，其中有id和username两个字段，并且设置存储引擎为InnoDB\"]},\"235\":{\"h\":\"存储引擎特点\"},\"236\":{\"h\":\"InnoDB\",\"t\":[\"介绍 InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5以后，InnoDB是默认的MySQL存储引擎。\",\"特点\",\"DML操作遵循ACID模型，支持事务\",\"行级锁，提高并发访问性能\",\"支持外键FOREIGN KEY约束，保证数据的完整性和正确性\",\"文件xxx.ibd：xxx代表的是数据表名，InnoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表架构(frm、sdi)、数据和索引。\",\"参数：innodb_file_per_table\",\"show variables like 'innodb_file_per_table'; \",\"优点：提供良好的事务管理、崩溃修复能力和并发控制。\",\"缺点：读写效率稍差，空间占用比较大。\"]},\"237\":{\"h\":\"MyISAM\",\"t\":[\"介绍 MyISAM是MySQL早期的默认存储引擎。\",\"特点\",\"不支持事务，不支持外键\",\"支持表锁，但不支持行锁\",\"访问速度快\",\"文件\",\"xxx.sdi：存储表结构信息\",\"xxx.MYD：存储数据\",\"xxx.MYI：存储索引\"]},\"238\":{\"h\":\"Memory\",\"t\":[\"介绍 Memory存储引擎的表数据存储在内存中，由于受到硬件问题、断电问题的影响，只能将这些表作为临时表或者缓存使用。\",\"特点\",\"存放在内存中，访问速度快\",\"支持Hash索引(\",\"文件 xxx.sdi：存储表结构信息，只有这一个，索引和数据均存储在内存中。\",\"特点\",\"InnoDB\",\"MyISAM\",\"Memory\",\"存储限制\",\"64TB\",\"有\",\"有\",\"事务安全\",\"支持\",\"-\",\"-\",\"锁机制\",\"行锁\",\"表锁\",\"表锁\",\"B+tree索引\",\"支持\",\"支持\",\"支持\",\"Hash索引\",\"-\",\"-\",\"支持\",\"全文索引\",\"支持\",\"支持\",\"-\",\"空间使用\",\"高\",\"低\",\"N/A\",\"内存使用\",\"高\",\"低\",\"中等\",\"批量插入速度\",\"低\",\"高\",\"高\",\"支持外键\",\"支持\",\"-\",\"-\"]},\"239\":{\"h\":\"存储引擎选择\",\"t\":[\"在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\",\"InnoDB : 是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。\",\"MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。\",\"Memory：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。但更多时候选择Redis数据库。\"]},\"240\":{\"h\":\"MySQL进阶 - 存储过程\"},\"241\":{\"h\":\"介绍\",\"t\":[\"存储过程是事先经过编译并且存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。\",\"存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用。\",\"个人理解\",\"这里我个人理解的是 类似于 编程语言中的函数，将一些语句封装起来，直接进行函数的调用即可。\",\"特点\",\"封装、复用\",\"可以接收参数，也可以返回数据\",\"减少网络交互，效率提升\"]},\"242\":{\"h\":\"基本语法\",\"t\":[\"创建\",\"CREATE PROCEDURE 存储过程名称([参数列表]) BEGIN -- SQL语句 END; \",\"注意\",\"在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。\",\"例如：delimiter $$ ，即定义为 $$ 为结束标识符。\",\"则此时不会以默认的 ; 为结束标识符，而是我们设置的$$，但是存储过程中的SQL语句，还是以 ; 为结束符号。\",\"调用\",\"CALL 名称([参数列表]); \",\"查看\",\"-- 查询指定数据库的存储过程及状态信息 SELECT * FROM INFORMATION_SCHEMA_ROUTINES WHERE ROUTINE_SCHEMA = 'xxx'； -- 查询某个存储过程的定义 SHOW CREATE PROCEDURE 存储过程名称; \",\"删除\",\"DROP PROCEDURE [IF EXISTS] 存储过程名称; \"]},\"243\":{\"h\":\"变量\"},\"244\":{\"h\":\"系统变量\",\"t\":[\"系统变量是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全面变量(GLOBAL)、会话变量(SESSION)。\",\"查看系统变量\",\"-- 查看所有系统变量 SHOW [SESSION | GLOBAL] VARIABLES; -- 可以通过LIKE模糊匹配的方式查找变量 SHOW [SESSION | GLOBAL] VARIABLES LIKE '.....'; -- 查看指定变量的值 SELECT @@[SESSION. | GLOBAL.]系统变量名; \",\"设置系统变量\",\"SET [SESSION | GLOBAL] 系统变量名 = 值; SET @@[SESSION. | GLOBAL.]系统变量名 = 值; \",\"注意\",\"如果没有指定SESSION | GLOBAL，默认是SESSION，会话变量。\",\"MySQL服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/my.cnf 中配置。\"]},\"245\":{\"h\":\"用户自定义变量\",\"t\":[\"用户自定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用\\\"@变量名\\\" 使用就可以。其作用域为当前的连接。\",\"赋值\",\"-- 使用SET SET @var_name = expr[,@var_name = expr]...; SET @var_name := expr[,@var_name := expr]...; -- 使用SELECT SELECT @var_anme := expr [,@var_name := expr]...; SELECT 字段名 INTO @var_name FROM 表名; \",\"提示\",\"在赋值时我们能看到有两种写法， = 和 := 。这两个实际上没有区别，但是在MySQL中，判断相等的运算符是 = 而不是 == ，这就容易造成混淆，所以推荐使用 :=\",\"使用\",\"SELECT @var_name; \",\"注意\",\"用户定义的变量无需对其进行声明或者初始化，只不过获取到的值为NULL\"]},\"246\":{\"h\":\"局部变量\",\"t\":[\"局部变量是根据需要定义的在局部生效的变量，访问之前，需要使用DECLARE声明，可以作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN......END块。\",\"声明\",\"DECLARE 变量名 变量类型 [DEFAULT ...]; \",\"变量类型就是数据库字段类型:INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。\",\"赋值\",\"SET 变量名 = 值; SET 变量名 := 值; SELECT 字段名 INTO 变量名 FROM 表名 ...; \"]},\"247\":{\"h\":\"IF判断\",\"t\":[\"语法\",\"IF 条件1 THEN ... ELSEIF 条件2 THEN -- 可选 ... ELSE -- 可选 ... END IF; \"]},\"248\":{\"h\":\"参数\",\"t\":[\"类型\",\"含义\",\"备注\",\"IN\",\"该类参数作为输入，也就是需要调用时传入值\",\"默认\",\"OUT\",\"该类参数作为输出，也就是该参数可以作为返回值\",\"INOUT\",\"既可以作为输入参数，也可以作为输出参数\",\"用法\",\"CREATE PROCEDURE 存储过程名称([IN/OUT/INOUT 参数名 参数类型]) BEGIN -- SQL语句 END; \"]},\"249\":{\"h\":\"case\",\"t\":[\"语法1\",\"CASE case_value WHEN when_value1 THEN statement_list1 [WHEN when_value2 THEN statement_list2] [ELSE statement_list] END CASE; \",\"语法2\",\"CASE WHEN search_condition1 THEN statement_list1 [WHEN search_condition2 THEN statement_list2] [ELSE statement_list] END CASE; \"]},\"250\":{\"h\":\"循环\"},\"251\":{\"h\":\"WHILE循环\",\"t\":[\"while循环时有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句，具体语法为：\",\"-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑 WHILE 条件 DO -- SQL逻辑 END WHILE; \"]},\"252\":{\"h\":\"REPEAT循环\",\"t\":[\"repeat是有条件的循环控制语句，当满足条件的时候推出循环。具体语法为：\",\"-- 先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环。 REPEAT SQL逻辑 UNTIL条件 END REPEAT; \",\"提示\",\"类似于编程语言中的 do ... while() 循环，但是repeat是满足条件则推出和do while刚好相反。\"]},\"253\":{\"h\":\"LOOP循环\",\"t\":[\"Loop实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。loop可以配合以下两个语句使用：\",\"LEAVE : 必须用在循环中，退出循环。\",\"ITERATE : 必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。\",\"[begin_lable:] LOOP SQL逻辑 END LOOP [end_lable]; -- 退出指定标记的循环体 LEAVE lable; -- 直接进入下一次循环 ITERATE lable; \",\"提示\",\"leave和iterate相当于编程语言中的 break和continue关键字的用法。\"]},\"254\":{\"h\":\"游标\",\"t\":[\"游标CURSOR是用来存储查询结果的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH和CLOSE，其语法如下：\",\"声明游标\",\"DECLEAR 游标名称 CURSOR FOR 查询语句; \",\"打开游标\",\"OPEN 游标名称; \",\"获取游标记录\",\"FETCH 游标名称 INTO 变量[,变量...]; \",\"关闭游标\",\"CLOSE 游标名称; \"]},\"255\":{\"h\":\"条件处理程序\",\"t\":[\"条件处理程序Handler可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：\",\"DECLARE handler_action HANDLER FOR condition_value [,condition_value] ... statement; \",\"handler_action \",\"CONTINUE:继续执行当前程序\",\"EXIT:终止执行当前程序\",\"condition_value \",\"SQLSTATE sqlstate_value:状态码，如02000\",\"SQLWARNING:所有以01开头的SQLSTATE代码的简写\",\"NOT FOUND:所有以02开头的SQLSTATE代码的简写\",\"SQLEXCEPTION:所有没有被SQLWARNING或者NOT FOUND捕获的SQLSTATE代码的简写\"]},\"256\":{\"h\":\"存储函数\",\"t\":[\"存储函数就是有返回值的存储过程，存储函数的参数只能是IN类型的，具体语法如下：\",\"CREATE FUNCTION 存储函数名称([参数列表]) RETURNS type [characteristic ...] BEGIN -- SQL语句 RETURN ...; END; \",\"characteristic说明：\",\"DETERMINSRIC：相同的输入参数总是产生相同的结果\",\"NO SQL：不包含SQL语句\",\"READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句、\",\"比较\",\"存储函数就是必须有返回值的存储过程，存储过程的范围 > 存储函数的范围。\",\"存储函数是通过函数调用，而存储过程是使用call调用\"]},\"257\":{\"h\":\"MySQL基础 - 事务\",\"t\":[\"事务是一组操作的集合，他是一个不可分隔的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要么同时失败。\"]},\"258\":{\"h\":\"事务操作\",\"t\":[\"查看/设置事务提交方式\",\"SELECT @@autocommit; SET @@autocommit = 0; \",\"说明\",\"这里的@@autocommit 属性的值有两种：\",\"1：则开启自动提交\",\"0：关闭自动提交，此时事务执行完毕时，需要我们使用指令进行提交。\",\"开启事务\",\"START TRANSACTION; -- 或者 BEGIN; \",\"提交事务\",\"COMMIT; \",\"回滚事务\",\"ROLLBACK; \"]},\"259\":{\"h\":\"事务的四大特性\",\"t\":[\"提示\",\"事务的ACID特性，是面试中经常被问到的一个知识点，也是实际业务中容易出错的一个点，需要认真学习。\",\"原子性(Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\",\"一致性(Consistency):事务完成时，必须使得所有的数据都保持一致状态。\",\"隔离性(Isolation):数据库提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\",\"持久性(Durability):事务一旦提交或者回滚，它对数据库中数据的改变就是永久的。\"]},\"260\":{\"h\":\"事务并发问题\",\"t\":[\"在单线程环境下，对数据库的任何操作都是安全的。但是在并发环境下，对数据库进行事务操作，可能会产生一系列的问题。\",\"问题\",\"描述\",\"脏读\",\"一个事务读到另外一个事务还没有提交的数据。\",\"不可重复读\",\"一个事务先后读取同一条记录，但是两次读取的数据不一致\",\"幻读\",\"一个事务按照指定条件查询数据时，没有对应的数据记录值，但是在插入操作时，又发现数据已经存在。删除现象也是如此\"]},\"261\":{\"h\":\"事务的隔离级别\",\"t\":[\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"Read Uncommitted(读未提交)\",\"✅\",\"✅\",\"✅\",\"Read Committed(读已提交)\",\"❌\",\"✅\",\"✅\",\"Repeatable Read\",\"❌\",\"❌\",\"✅\",\"Serializable(串行化)\",\"❌\",\"❌\",\"❌\",\"查看事务的隔离级别\",\"SELECT @@TRANSACTION_ISOLATION; \",\"设置事务的隔离级别\",\"SET [Session|Global] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE} \",\"注意\",\"事务的隔离级别越高，数据的安全性也越高，但是性能越低。\"]},\"262\":{\"h\":\"Redis 数据库\",\"t\":[\"Redis\"]},\"263\":{\"h\":\"大纲\"},\"264\":{\"h\":\"Redis入门\",\"t\":[\"Redis入门 - Redis概念和基础\",\"Redis入门 - 基础通用指令\",\"Redis入门 - 5种基本数据类型\",\"Redis入门 - 3种特殊数据类型\",\"Redis入门 - 发布订阅\",\"Redis入门 - 事务\",\"Redis入门 - Lua脚本\",\"Redis入门 - Redis Stream\"]},\"265\":{\"h\":\"Redis客户端\",\"t\":[\"Redis客户端 - Jdies快速入门\",\"Redis客户端 - Jedis连接池\",\"Redis客户端 - SpringDataRedis\",\"Redis客户端 - RedisSerializer\"]},\"266\":{\"h\":\"Redis进阶\",\"t\":[\"Redis进阶 - 缓存问题\",\"Redis进阶 - Redis持久化\",\"Redis进阶 - Redis主从\",\"Redis进阶 - Redis哨兵\",\"Redis进阶 - Redis分片集群\",\"Redis进阶 - JVM进程缓存\",\"Redis进阶 - Lua语法\",\"Redis进阶 - 多级缓存\",\"Redis进阶 - 缓存同步\",\"Redis进阶 - 键值设计\",\"Redis进阶 - 批处理优化\",\"Redis进阶 - 服务端优化\",\"Redis进阶 - 集群最佳实践\"]},\"267\":{\"h\":\"Redis原理\",\"t\":[\"Redis原理 - RedisObject对象机制\",\"Redis原理 - 数据结构的底层实现\",\"Redis原理 - 五种数据类型的底层结构关系\",\"Redis原理 - IO详解\",\"Redis原理 - Redis网络模型\",\"Redis原理 - 通信协议RESP\",\"Redis原理 - 内存策略\"]},\"268\":{\"h\":\"参考资料\",\"t\":[\"菜鸟教程\",\"博主在使用Redis数据库时，经常查阅菜鸟教程编写的《Redis教程》系列文档，这里表示感谢。\",\"文档地址\",\"https://www.runoob.com/redis/\",\"黑马程序员\",\"博主在学习Redis数据库时参考的了黑马程序员出品的《Redis入门到实战教程》的系列课程，这里在此对黑马开源教学视频，表示感谢。\",\"视频地址\",\"https://www.bilibili.com/video/BV1cr4y1671t\",\"Java全栈知识体系\",\"视频地址\",\"https://www.pdai.tech/\"]},\"269\":{\"h\":\"Redis进阶 - 批处理优化\"},\"270\":{\"h\":\"Redis进阶 - 缓存问题\"},\"271\":{\"h\":\"缓存\",\"t\":[\"缓存就是数据交换的缓冲区（Cache），是存储数据的临时地方，一般读写性能比较高。\",\"例如\",\"内存是硬盘的缓存\",\"cache 是内存的缓存\",\"作用\",\"降低后端负载\",\"提高读写效率，降低响应时间\",\"成本\",\"数据一致性成本\",\"代码维护成本\"]},\"272\":{\"h\":\"缓存穿透\",\"t\":[\"缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。如请求不存在的数据，则 Redis 缓存中不存在，数据库中也不存在，频繁请求，造成资源的浪费。\",\"解决方案\",\"缓存空对象 \",\"优点：实现简单，维护方便\",\"缺点：1. 额外的内存消耗。 2. 可能造成短期的不一致\",\"布隆过滤 \",\"优点：内存占用小，没有多余的key\",\"缺点：1. 实现复杂 2. 存在误判可能\",\"增强ID的复杂度，避免被猜测ID规律\",\"做好数据的基础格式校验\"]},\"273\":{\"h\":\"缓存雪崩\",\"t\":[\"缓存雪崩是指在同一时间段内，大量的缓存 Key 同时失效或者 Redis 服务宕机，导致瞬间大量请求到达数据库，带来巨大压力。\",\"解决方案\",\"给不同的 Key 的TTL添加随机值\",\"利用 Redis 集群提高服务的可用性\",\"给缓存业务添加降级限流操作\",\"给业务添加多级缓存\"]},\"274\":{\"h\":\"缓存击穿\",\"t\":[\"缓存击穿问题也叫热点 key 问题，就是一个被高并发访问并且缓存重建业务较复杂的 key 突然失效，无数的请求访问会在瞬间给数据库带来巨大的冲击。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库，导致请求数据库的总量比较大。\",\"解决方案\",\"互斥锁 \",\"查询缓存，未命中\",\"获取锁，再更新缓存\",\"更新完以后，释放锁\",\"逻辑过期\",\"解决方案\",\"优点\",\"缺点\",\"互斥锁\",\"1. 没有额外的内存消耗 2. 保证一致性 3. 实现简单\",\"1. 线程需要等待，性能受影响 2. 可能有死锁风险\",\"逻辑过期\",\"线程无需等待，性能较好\",\"1. 不保证一致性 2. 有额外内存消耗 3. 实现复杂\"]},\"275\":{\"h\":\"缓存污染\",\"t\":[\"缓存污染问题指的是缓存中一些只会被访问一次或者几次的数据，被访问完以后，再也不会被访问到，但这部分数据依然留在缓存中，占用缓存空间。\",\"缓存污染会随着数据的持续增加而逐渐显露，随着服务的不断运行，缓存中会存在大量的永远不会被访问的数据。然而缓存空间是有限的，如果缓存写满了，再往缓存中存储数据时就会有额外的性能开销，影响 Redis 的性能。这部分开销主要是指往缓存中写数据时判断缓存淘汰策略，根据淘汰策略去选择要淘汰的数据，然后进行删除操作。\",\"最大缓存设置多少\",\"系统的设计选择是一个权衡的过程：大容量缓存是能带来性能加速的收益，但是成本也会更高，而小容量缓存不一定就起不到加速访问的效果。一般来说，我会建议把缓存容量设置为总数据量的 15% 到 30%，兼顾访问性能和内存空间开销。对于 Redis 来说，一旦确定了缓存最大容量，比如 4GB，你就可以使用下面这个命令来设定缓存的大小了：\",\"CONFIG SET maxmemory 4gb \",\"不过，缓存被写满是不可避免的, 所以需要数据淘汰策略。\",\"缓存淘汰策略\",\"具体的放到下一个小节来说\"]},\"276\":{\"h\":\"缓存更新策略\",\"t\":[\"内存淘汰\",\"超时剔除\",\"主动更新\",\"说明\",\"不用自己维护，利用 Redis 的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存\",\"给缓存数据添加TTL时间，到期后自动删除缓存。下次查询时更新缓存。\",\"编写业务逻辑，在修改数据库的同时，更新缓存。\",\"一致性\",\"差\",\"一般\",\"好\",\"维护成本\",\"无\",\"低\",\"高\",\"业务场景：\",\"低一致性需求：数据的变化频率低，使用内存淘汰机制。例如：店铺类型的查询缓存。\",\"高一致性需求：数据经常发生改变，主动更新，并以超时剔除作为兜底方案。例如：店铺详情查询的缓存。\"]},\"277\":{\"h\":\"主动更新策略\",\"t\":[\"Cache Aside Pattern：由缓存的调用者，在更新数据库的同时更新缓存。\",\"Read/Write Through Pattern：缓存和数据库整合为一个服务，由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题。\",\"Write Behind Caching Pattern：调用者只操作缓存，由其他线程异步的将缓存数据持久化到数据库，保证最终一致。\",\"一般情况下都使用第一种方法，可控性更高。\",\"在操作缓存时，数据库发生修改则直接删除对应的缓存，待查询时再创建缓存。\",\"单体系统，将缓存和数据库操作放在同一个事务内。\",\"分布式系统，使用TCC等分布式事务方案。\",\"先操作数据库，在删除缓存。\"]},\"278\":{\"h\":\"缓存淘汰策略\",\"t\":[\"Redis 一共支持 8 种淘汰策略\",\"noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键。\",\"allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键。\",\"volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键。\",\"allkeys-random：加入键的时候如果过限，从所有key随机删除。\",\"volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐。\",\"volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键。\",\"volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键。\",\"allkeys-lfu：从所有键中驱逐使用频率最少的键。\"]},\"279\":{\"h\":\"Redis进阶 - 缓存同步\"},\"280\":{\"h\":\"Redis进阶 - 集群最佳实践\"},\"281\":{\"h\":\"Redis进阶 - JVM进程缓存\",\"t\":[\"传统缓存的问题\",\"传统的缓存策略一般是请求到达 Tomcat 后，先查询 Redis ，如果未命中则查询数据库，存在下面的问题：\",\"请求要经过 Tomcat 处理，Tomcat 的性能成为整个系统的瓶颈\",\"Redis 缓存失效时，会对数据库产生冲击\",\"多级缓存方案\",\"多级缓存就是充分利用请求处理的每个环节，分别添加缓存，减轻 Tomcat 压力，提升服务性能：\"]},\"282\":{\"h\":\"本地进程缓存\",\"t\":[\"缓存在日常开发中起着至关重要的作用，由于是存储在内存汇总，数据的读取速度是非常快的，能大量减少对数据库的访问，减少数据库的压力。我们把缓存分为两类：\",\"分布式缓存：例如 Redis\",\"优点：存储容量更大、可靠性更好、可以再集群间共享\",\"缺点：访问缓存有网络开销\",\"场景：缓存数据量较大、可靠性要求较高、需要在集群间共享\",\"进程本地缓存：例如 HashMap、GuavaCache\",\"优点：读取本地内存，没有网络开销，速度更快\",\"缺点：存储容量有限、可靠性能较低、无法共享\",\"场景：性能要求较高，缓存数据量较小\",\"Caffeine 是一个基于 Java8 开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前 Spring 内部的缓存使用的就是 Caffeine。\",\"Github 地址：https://github.com/ben-manes/caffeine\"]},\"283\":{\"h\":\"Caffeine\",\"t\":[\"Caffeine 是一个基于 Java8 开发的提供了近乎最佳命中率的高性能的缓存库。\",\"缓存和 ConcurrentMap 有点相似，但还是有所区别。最根本的区别是 ConcurrentMap 将会持有所有加入到缓存当中的元素，直到它们被从缓存当中手动移除。但是，Caffeine 的缓存 Cache 通常会被配置成自动驱逐缓存中元素，以限制其内存占用。在某些场景下，LoadingCache 和AsyncLoadingCache 因为其自动加载缓存的能力将会变得非常实用。\",\"Caffeine 提供了灵活的构造器去创建一个拥有下列特性的缓存：\",\"自动加载元素到缓存当中，异步加载的方式也可供选择\",\"当达到最大容量的时候可以使用基于就近度和频率的算法进行基于容量的驱逐\",\"将根据缓存中的元素上一次访问或者被修改的时间进行基于过期时间的驱逐\",\"当向缓存中一个已经过时的元素进行访问的时候将会进行异步刷新\",\"key 将自动被弱引用所封装\",\"value 将自动被弱引用或者软引用所封装\",\"驱逐(或移除)缓存中的元素时将会进行通知\",\"写入传播到一个外部数据源当中\",\"持续计算缓存的访问统计指标\",\"为了提高集成度，扩展模块提供了 JSR-107 JCache 和 Guava 适配器。 JSR-107 规范了基于 Java 6 的 API，在牺牲了功能和性能的代价下使代码更加规范。\",\"Guava 的 Cache 是 Caffeine 的原型库并且 Caffeine 提供了适配器以供简单的迁移策略。\",\"原文地址\",\"https://github.com/ben-manes/caffeine/wiki/Home-zh-CN\"]},\"284\":{\"h\":\"Caffeine示例\",\"t\":[\"@Test void testCaffeine(){ // 1.创建缓存对象 Cache<String,String> cache = Caffeine.newBuilder().build(); // 2.存数据 cache.put(\\\"username\\\",\\\"codermast\\\"); // 3.1取数据，不存在则返回 Null String username = cache.getIfPresent(\\\"username\\\"); System.out.println(\\\"username = \\\" + username); // 3.2取数据，不存在则从数据库查询 String username2 = cache.get(\\\"username\\\",key -> { // 这里写的是去数据库查询的业务逻辑 // ... return \\\"Hello World!\\\"; }); System.out.println(\\\"username2 = \\\" + username2); } \"]},\"285\":{\"h\":\"Caffeine缓存驱逐策略\",\"t\":[\"Caffeine 提供了三种缓存驱逐策略：\",\"基于容量：设置缓存的数量上限，使用 LRU 规则选择\",\"// 创建缓存对象 Cache<String,String> cache = Caffeine.newBuilder() .maximumSize(1) // 设置缓存大小上限为 1 .build(); \",\"基于时间：设置缓存的有效时间\",\"// 创建缓存对象 Cache<String,String> cache = Caffeine.newBuilder() .expireAfterWrite(Duration.ofSeconds(10)) // 设置缓存有效期为 10 s，从最后一次写入操作开始计时 .build(); \",\"基于引用：设置缓存为软引用或者弱引用，利用 GC 来回收缓存数据。性能较差，不建议使用。\",\"在默认情况下，当一个缓存元素过期的时候，Caffeine 不会自动立即将其清理和驱逐。而是在一次读或者写操作后，或者在空闲时间完成对失效数据的驱逐。\",\"注释\",\"JVM 进程缓存和 Redis 缓存，本质上都是对数据的缓存，目的都是为了加速数据的读取。\"]},\"286\":{\"h\":\"Redis进阶 - 键值设计\"},\"287\":{\"h\":\"Redis进阶 - Lua语法\"},\"288\":{\"h\":\"初识 Lua\",\"t\":[\"Lua 是一种轻量小巧的脚本语言，用标准的 C 语言编写并以源代码形式开放，其设计的目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。\",\"官网：https://www.lua.org/\"]},\"289\":{\"h\":\"快速入门\",\"t\":[\"在 Linux 虚拟机的任意目录下，新建一个 hello.lua 文件\",\"touch hello.lua \",\"添加下面的内容\",\"print(\\\"Hello World!\\\") \",\"运行\",\"lua hello.lua \",\"运行结果\",\"Hello World! \"]},\"290\":{\"h\":\"变量\",\"t\":[\"在正式了解变量之前，需要先对 Lua 中的数据类型有个简单的了解，下面是 Lua 语言中的一些数据类型。\",\"数据类型\",\"描述\",\"nil\",\"这个最简单，只有值 nil 属于该类型，表示一个无效值（在条件表达式中相当于 false）\",\"boolean\",\"包含两个数：false 和 true\",\"number\",\"表示双精度类型的实浮点数\",\"string\",\"字符串由一对双引号或者单引号来表示\",\"function\",\"由 C 或者 Lua 编写的函数\",\"table\",\"Lua 中的表（table）其实是一个 “关联数组” （associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过 “构造表达式” 来完成，最简单的构造表达式是 {} ，用来创建一个空表。\",\"Lua 声明变量的时候，并不需要指定数据类型：\",\"声明字符串：local str = 'hello'\",\"声明数字：local num = 21\",\"声明布尔类型：local flag = true\",\"声明数组 key 为索引的 table ：local arr = {'Java', 'Python' , 'Lua'}\",\"声明 table ，类似 Java 的 Map：local map = {name = 'Jack', age = 21}\",\"访问 table 的几种方式：\",\"角标访问(从 1 开始)：table[1]\",\"Key 访问： \",\"map['name']\",\"map.name\"]},\"291\":{\"h\":\"循环\",\"t\":[\"一组被重复执行的语句称之为循环体，能否继续重复，决定循环的终止条件。\",\"循环结构是在一定条件下反复执行某段程序的流程结构，被反复执行的程序被称为循环体。\",\"循环语句是由循环体及循环的终止条件两部分组成的。\",\"While循环：在判断条件为 true 时会重复执行循环体语句\",\"while(condition) do statements end \",\"For循环：可以重复执行指定语句，重复次数可在 for 语句中控制。\",\"for var=exp1,exp2,exp3 do <执行体> end \",\"泛型for循环：通过一个迭代器函数来遍历所有值\",\"a = {\\\"one\\\", \\\"two\\\", \\\"three\\\"} for i, v in ipairs(a) do print(i, v) end \",\"i是数组索引值，v是对应索引的数组元素值。ipairs是Lua提供的一个迭代器函数，用来迭代数组。\",\"Repeat循环：在条件进行判断前循环体都会执行一次，然后才进行条件判断。\",\"repeat statements until( condition ) \",\"类似于 do ... while ... 循环\"]},\"292\":{\"h\":\"条件\",\"t\":[\"在布尔表达式为 true 时会if中的代码块会被执行，在布尔表达式为 false 时，紧跟在 if 语句 end 之后的代码会被执行。\",\"Lua认为false和nil为假，true 和非nil为真。要注意的是Lua中 0 为 true。\",\"if(布尔表达式) then --[ 布尔表达式为 true 时执行该语句块 --] else --[ 布尔表达式为 false 时执行该语句块 --] end \"]},\"293\":{\"h\":\"函数\",\"t\":[\"optional_function_scope function function_name( argument1, argument2, argument3..., argumentn) function_body return result_params_comma_separated end \",\"optional_function_scope: 该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。\",\"function_name: 指定函数名称。\",\"argument1, argument2, argument3..., argumentn: 函数参数，多个参数以逗号隔开，函数也可以不带参数。\",\"function_body: 函数体，函数中需要执行的代码语句块。\",\"result_params_comma_separated: 函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。\",\"Lua函数可以返回多个结果值，比如string.find，其返回匹配串\\\"开始和结束的下标\\\"（如果不存在匹配串返回nil）。\",\"> s, e = string.find(\\\"www.runoob.com\\\", \\\"runoob\\\") > print(s, e) 5 10 \",\"Lua 函数可以接受可变数目的参数，和 C 语言类似，在函数参数列表中使用三点 ... 表示函数有可变的参数。\",\"资料\",\"https://www.runoob.com/lua/lua-tutorial.html\"]},\"294\":{\"h\":\"Redis进阶 - Redis主从\"},\"295\":{\"h\":\"搭建主从架构\",\"t\":[\"单节点 Redis 的并发能力是有上限的，要进一步提高 Redis 的并发能力，就需要搭建主从集群，实现读写分离。\",\"在 Redis 5.0 以前，从节点都叫做 slave，在 5.0 版本以后被称为 replica，本质上是一个东西。\"]},\"296\":{\"h\":\"1.集群结构\",\"t\":[\"我们搭建的主从集群结构如图：\",\"共包含三个节点，一个主节点，两个从节点。\",\"这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：\",\"IP\",\"PORT\",\"角色\",\"192.168.150.101\",\"7001\",\"master\",\"192.168.150.101\",\"7002\",\"slave\",\"192.168.150.101\",\"7003\",\"slave\"]},\"297\":{\"h\":\"2.准备实例和配置\",\"t\":[\"要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。\",\"创建目录\",\"我们创建三个文件夹，名字分别叫7001、7002、7003：\",\"# 进入/tmp目录 cd /tmp # 创建目录 mkdir 7001 7002 7003 \",\"恢复原始配置\",\"修改redis-6.2.4/redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。\",\"# 开启RDB # save \\\"\\\" save 3600 1 save 300 100 save 60 10000 # 关闭AOF appendonly no \",\"拷贝配置文件到每个实例目录\",\"然后将redis-6.2.4/redis.conf文件拷贝到三个目录中（在/tmp目录执行下列命令）：\",\"# 方式一：逐个拷贝 cp redis-6.2.4/redis.conf 7001 cp redis-6.2.4/redis.conf 7002 cp redis-6.2.4/redis.conf 7003 # 方式二：管道组合命令，一键拷贝 echo 7001 7002 7003 | xargs -t -n 1 cp redis-6.2.4/redis.conf \",\"修改每个实例的端口、工作目录\",\"修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在/tmp目录执行下列命令）：\",\"sed -i -e 's/6379/7001/g' -e 's/dir .\\\\//dir \\\\/tmp\\\\/7001\\\\//g' 7001/redis.conf sed -i -e 's/6379/7002/g' -e 's/dir .\\\\//dir \\\\/tmp\\\\/7002\\\\//g' 7002/redis.conf sed -i -e 's/6379/7003/g' -e 's/dir .\\\\//dir \\\\/tmp\\\\/7003\\\\//g' 7003/redis.conf \",\"修改每个实例的声明IP\",\"虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下：\",\"# redis实例的声明 IP replica-announce-ip 192.168.150.101 \",\"每个目录都要改，我们一键完成修改（在/tmp目录执行下列命令）：\",\"# 逐一执行 sed -i '1a replica-announce-ip 192.168.150.101' 7001/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7002/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7003/redis.conf # 或者一键修改 printf '%s\\\\n' 7001 7002 7003 | xargs -I{} -t sed -i '1a replica-announce-ip 192.168.150.101' {}/redis.conf \"]},\"298\":{\"h\":\"3.启动\",\"t\":[\"为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：\",\"# 第1个 redis-server 7001/redis.conf # 第2个 redis-server 7002/redis.conf # 第3个 redis-server 7003/redis.conf \",\"如果要一键停止，可以运行下面命令：\",\"printf '%s\\\\n' 7001 7002 7003 | xargs -I{} -t redis-cli -p {} shutdown \"]},\"299\":{\"h\":\"4.开启主从关系\",\"t\":[\"现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。\",\"有临时和永久两种模式：\",\"修改配置文件（永久生效）\",\"在redis.conf中添加一行配置：slaveof <masterip> <masterport>\",\"使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：\",\"slaveof <masterip> <masterport> \",\"：在5.0以后新增命令replicaof，与salveof效果一致。\",\"这里我们为了演示方便，使用方式二。\",\"通过redis-cli命令连接7002，执行下面命令：\",\"# 连接 7002 redis-cli -p 7002 # 执行slaveof slaveof 192.168.150.101 7001 \",\"通过redis-cli命令连接7003，执行下面命令：\",\"# 连接 7003 redis-cli -p 7003 # 执行slaveof slaveof 192.168.150.101 7001 \",\"然后连接 7001节点，查看集群状态：\",\"# 连接 7001 redis-cli -p 7001 # 查看状态 info replication \"]},\"300\":{\"h\":\"5.测试\",\"t\":[\"执行下列操作以测试：\",\"利用redis-cli连接7001，执行set num 123\",\"利用redis-cli连接7002，执行get num，再执行set num 666\",\"利用redis-cli连接7003，执行get num，再执行set num 888\",\"可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。\"]},\"301\":{\"h\":\"数据同步原理\"},\"302\":{\"h\":\"全量同步\",\"t\":[\"主从第一次同步是全量同步：\",\"master 是如何判断 slave 是不是第一次来同步数据？这里会用到两个很重要的概念：\",\"Replication ID：简称replid，是数据集的标记，id 一致则说明是同一数据集。每一个 master 都有位移的 replid，slave 则会继承 master 节点的 replid。\",\"Offset：偏移量，随着记录在 repl_baklog 中的数据增多而逐渐增大。slave 完成同步时也会记录当前同步的 offset。如果 slave 的 offset 小于 master 的 offset，说明 slave 数据落后于 master，需要更新。\",\"因此 slave 做数据同步，必须想 master 声明自己的 replication id 和 offset，master 才可以判断到底需要同步哪些数据。\",\"先判断 replication id 是否相同，再判断 offset 的大小关系。\",\"全量同步的流程\",\"slave 节点请求增量同步\",\"master 节点判断 replid，发现不一致，拒绝增量同步。\",\"master 将完整内存数据生成 RDB，发送 RDB到 slave\",\"slave 清空本地数据，加载master 的 RDB\",\"master 将 RDB 期间的命令记录在 repl_baklog，并持续将 log 中的命令发送给 slave\",\"slave 收到接受的命令，保持与 master 之间的同步。\"]},\"303\":{\"h\":\"增量同步\",\"t\":[\"主从第一次同步是全量同步，但如果 slave 冲去后同步，则执行增量同步。\",\"注意\",\"repl_baklog 大小有上限，写满以后会覆盖最早的数据。如果 slave 断开时间过久，导致数据被覆盖，则无法实现增量同步，只能再次全量同步。\",\"可以从以下几个方面来优化 Redis 主从集群：\",\"在 master 中配置 repl_diskless-sync yes 启用无磁盘复制，避免全量同步时的磁盘 IO。一般适用于网络带宽较大的情况下。\",\"Redis 单节点上的内存占用不要太大，减少 RDB 导致的过多磁盘 IO。\",\"适当提高 repl_baklog 的大小，发现 slave 宕机时尽快实现故障恢复，尽可能避免全量同步\",\"限制一个 master 上的 slave 节点数量，如果实在是太多 slave，则可以采用 主-从-从链式结构，减少 master 压力\"]},\"304\":{\"h\":\"总结\",\"t\":[\"简述全量同步和增量同步的区别？\",\"全量同步：master 将完整内存数据生成 RDB，发送 RDB 到 slave。后续命令则记录在repl_baklog，逐个发送给 slave。\",\"增量同步：slave 提交自己的 offset 到 master，master 获取 repl_baklog 中从 offset 之后的命令给 slave\",\"什么时候执行全量同步？\",\"slave 节点第一次连接 master 节点时。\",\"slave 节点断开时间太久，repl_baklog 中的 offset 已经被覆盖时\",\"什么时候执行增量同步？\",\"slave 节点断开又恢复，并且在 repl_baklog 中能找到 offset 时。\"]},\"305\":{\"h\":\"Redis进阶 - 多级缓存\"},\"306\":{\"h\":\"安装OpenResty\",\"t\":[\"在正式安装 OpenResty 之前，我们需要了解它是干什么的。\",\"OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。\",\"OpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。\",\"OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。\",\"OpenResty官网：https://openresty.org/cn/\"]},\"307\":{\"h\":\"1.安装\",\"t\":[\"首先你的Linux虚拟机必须联网\",\"安装开发库\",\"首先要安装OpenResty的依赖开发库，执行命令：\",\"yum install -y pcre-devel openssl-devel gcc --skip-broken \",\"安装OpenResty仓库\",\"你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum check-update 命令）。运行下面的命令就可以添加我们的仓库：\",\"yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo \",\"如果提示说命令不存在，则运行：\",\"yum install -y yum-utils \",\"然后再重复上面的命令\",\"安装OpenResty\",\"然后就可以像下面这样安装软件包，比如 openresty：\",\"yum install -y openresty \",\"安装opm工具\",\"opm是OpenResty的一个管理工具，可以帮助我们安装一个第三方的Lua模块。\",\"如果你想安装命令行工具 opm，那么可以像下面这样安装 openresty-opm 包：\",\"yum install -y openresty-opm \",\"目录结构\",\"默认情况下，OpenResty安装的目录是：/usr/local/openresty\",\"看到里面的nginx目录了吗，OpenResty就是在Nginx基础上集成了一些Lua模块。\",\"配置nginx的环境变量\",\"打开配置文件：\",\"vi /etc/profile \",\"在最下面加入两行：\",\"export NGINX_HOME=/usr/local/openresty/nginx export PATH=${NGINX_HOME}/sbin:$PATH \",\"NGINX_HOME：后面是OpenResty安装目录下的nginx的目录\",\"然后让配置生效：\",\"source /etc/profile \"]},\"308\":{\"h\":\"2.启动和运行\",\"t\":[\"OpenResty底层是基于Nginx的，查看OpenResty目录的nginx目录，结构与windows中安装的nginx基本一致：\",\"所以运行方式与nginx基本一致：\",\"# 启动nginx nginx # 重新加载配置 nginx -s reload # 停止 nginx -s stop \",\"nginx的默认配置文件注释太多，影响后续我们的编辑，这里将nginx.conf中的注释部分删除，保留有效部分。\",\"修改/usr/local/openresty/nginx/conf/nginx.conf文件，内容如下：\",\"#user nobody; worker_processes 1; error_log logs/error.log; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 8081; server_name localhost; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } } \",\"在Linux的控制台输入命令以启动nginx：\",\"nginx \",\"然后访问页面：http://192.168.150.101:8081，注意ip地址替换为你自己的虚拟机IP：\"]},\"309\":{\"h\":\"3.备注\",\"t\":[\"加载OpenResty的lua模块\",\"#lua 模块 lua_package_path \\\"/usr/local/openresty/lualib/?.lua;;\\\"; #c模块 lua_package_cpath \\\"/usr/local/openresty/lualib/?.so;;\\\"; \",\"common.lua\",\"-- 封装函数，发送http请求，并解析响应 local function read_http(path, params) local resp = ngx.location.capture(path,{ method = ngx.HTTP_GET, args = params, }) if not resp then -- 记录错误信息，返回404 ngx.log(ngx.ERR, \\\"http not found, path: \\\", path , \\\", args: \\\", args) ngx.exit(404) end return resp.body end -- 将方法导出 local _M = { read_http = read_http } return _M \",\"释放Redis连接API：\",\"-- 关闭redis连接的工具方法，其实是放入连接池 local function close_redis(red) local pool_max_idle_time = 10000 -- 连接的空闲时间，单位是毫秒 local pool_size = 100 --连接池大小 local ok, err = red:set_keepalive(pool_max_idle_time, pool_size) if not ok then ngx.log(ngx.ERR, \\\"放入redis连接池失败: \\\", err) end end \",\"读取Redis数据的API：\",\"-- 查询redis的方法 ip和port是redis地址，key是查询的key local function read_redis(ip, port, key) -- 获取一个连接 local ok, err = red:connect(ip, port) if not ok then ngx.log(ngx.ERR, \\\"连接redis失败 : \\\", err) return nil end -- 查询redis local resp, err = red:get(key) -- 查询失败处理 if not resp then ngx.log(ngx.ERR, \\\"查询Redis失败: \\\", err, \\\", key = \\\" , key) end --得到的数据为空处理 if resp == ngx.null then resp = nil ngx.log(ngx.ERR, \\\"查询Redis数据为空, key = \\\", key) end close_redis(red) return resp end \",\"开启共享词典：\",\"# 共享字典，也就是本地缓存，名称叫做：item_cache，大小150m lua_shared_dict item_cache 150m; \"]},\"310\":{\"h\":\"OpenResty快速入门\",\"t\":[\"这里我们使用 nginx 拦截 http 请求，处理后返回数据。\"]},\"311\":{\"h\":\"步骤1 修改nginx.conf文件\",\"t\":[\"在 nginx.conf 的 http 下面，添加对 OpenResty 的 Lua 模块支持\",\"# 加载 lua 模块 lua_package_path \\\"/usr/local/openresty/lualib/?.lua;;\\\"; # 加载 c 模块 lua_package_cpath \\\"/usr/local/openresty/lualib/?.so;;\\\"; \",\"在 nginx.conf 的 serevr 下面，添加对 /api/item 这个路径的监听：\",\"location /api/item { # 响应类型，这里返回 json default_type application/json # 响应数据由 lua/item.lua 这个文件来决定 content_by_lua_file lua/item.lua; } \"]},\"312\":{\"h\":\"步骤2 编写item.lua文件\",\"t\":[\"在 nginx 目录创建文件夹：lua\",\"mkdir lua \",\"在 lua 文件夹下，新建文件：item.lua\",\"touch lua/item.lua \",\"内容如下\",\"-- 返回假数据，这里的 ngx.say() 函数，就是写数据到 Response 中 ngx.say('{\\\"id\\\": 10001, \\\"name\\\" : \\\"Coder Mast\\\"}'); \",\"重新加载配置\",\"nginx -s reload \"]},\"313\":{\"h\":\"OpenResty获取请求参数\",\"t\":[\"OpenResty 提供了各种 API 用来获取不同类型的请求参数：\",\"参数格式\",\"参数示例\",\"参数解析代码示例\",\"路径占位符\",\"/item/1001\",\"请求头\",\"id:1001\",\"Get请求参数\",\"?id=1001\",\"Post表单参数\",\"id=1001\",\"Json参数\",\"{\\\"id\\\":1001}\",\"代码详情\",\"- 路径占位符 # 1. 正则表达式匹配： location ~ /item/(\\\\d+) { content_by_lua_file lua/item.lua; } \",\"-- 2. 匹配到的参数会存入 ngx.var 数组中，可以使用角标获取 lcoal id = ngx.var[1] \",\"请求头\",\"Get请求参数\",\"Post表单参数\",\"Json参数\"]},\"314\":{\"h\":\"封装Http请求工具\"},\"315\":{\"h\":\"向Tomcat发送http请求\"},\"316\":{\"h\":\"根据商品id对Tomcat集群负载均衡\"},\"317\":{\"h\":\"Redis缓存预热\"},\"318\":{\"h\":\"查询Redis\"},\"319\":{\"h\":\"Nginx本地缓存\"},\"320\":{\"h\":\"Redis进阶 - Redis持久化\",\"t\":[\"单点Redis的问题\",\"数据丢失问题：Redis 是内存存储，服务重启可能会丢失数据。通过实现 Redis 数据持久化解决。\",\"并发能力问题：单节点 Redis 并发能力虽然不错，但是也无法满足如 618 这样的高并发场景。搭建主从集群，实现读写分离解决。\",\"故障恢复问题：如果 Redis 宕机，则服务不可用，需要一种自动的故障恢复手段。利用 Redis 哨兵，实现健康检测和自动恢复。\",\"存储能力问题：Redis 基于内存，单点能存储的数据量难以满足海量数据需求。搭建分片集群，利用插槽机制实现动态扩容。\"]},\"321\":{\"h\":\"RDB持久化\",\"t\":[\"RDB 全称为 Redis Database Backup file （Redis 数据备份文件），也被叫做 Redis 数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当 Redis 实例故障重启后，从磁盘读取快照文件，恢复数据。\",\"快照文件称为 RDB 文件，默认是保存在当前运行目录。\",\"save命令：创建 RDB 快照，由 Redis 主进程来执行，会阻塞所有命令。RDB 是需要写入磁盘中，IO 操作较慢。\",\"bgsave命令：开启子进程执行 RDB ，避免主进程受到影响。\",\"Redis 停机时会执行一次 RDB 。\",\"默认情况下会在当前目录生成一个 dump.rdb 的文件，下一次启动 Redis 时，默认会加载这个文件，恢复 Redis 数据。\",\"Redis 内部有触发 RDB 的机制，可以在 redis.conf 文件中找到，格式如下：\",\"save 900 1 // 900 秒内，如果至少有 1 个 key 被修改，则执行 bgsave save 300 10 // 300 秒内，如果至少有 10 个 key 被修改，则执行 bgsave save 60 10000 // 60 秒内，如果至少有 10000 个 key 被修改，则执行 bgsave save \\\"\\\" // 表示禁用 RDB rdbcompression yes // 是否压缩，建议不开启，压缩也会消耗 CPU ，磁盘空间相对廉价 dbfilename dump.rdb // RDB 文件名称 dir ./ // 文件保存的路径目录 \",\"bgsave 开始时会 fork 主进程得到子进程，子进程共享主进程的内存数据。完成 fork 后读取内存数据并写入 RDB 文件。\",\"fork 过程是阻塞的，此时 Redis 无法响应客户端请求。fork 的速度是非常快的，因为 fork 只复制了对应的页表，而不是复制真实的数据，类似于只复制数据的索引。\",\"fork 采用的是 copy-on-write 技术：\",\"当主进程执行读操作时，访问共享内存\",\"当主进程执行写操作时，则会拷贝一份数据，执行写操作。\",\"极端情况\",\"当子进程写新的 RDB 文件时，此时主进程大量修改数据，则需要对数据进行拷贝，当主进程需要对所有的数据都进行修改时，则需要两倍原来的内存，故我们在配置 Redis 服务时，不能将所有的实际内存分配给 Redis ，需要预留一部分缓冲空间。\",\"RDB 方式 bgsave 的流程：\",\"fork 主进程得到一个子进程，共享内存空间\",\"子进程读取内存数据并写入新的 RDB 文件\",\"用新的 RDB 文件替换旧的 RDB 文件\",\"RDB 会在什么时候执行？save 60 1000代表什么含义？\",\"默认是在 Redis 服务停止时执行 RDB。\",\"save 60 10000代表60秒内至少执行 1000 次修改则触发 RDB\",\"RDB 的缺点？\",\"RDB 执行间隔时间长，两次 RDB 之间写入数据有丢失的风险\",\"fork 子进程、压缩、写出 RDB 文件都比较耗时\"]},\"322\":{\"h\":\"AOF持久化\",\"t\":[\"AOF 全称为 Append Only File（追加文件）。Redis 处理的每一个写命令都会记录在 AOF 文件，可以看做是命令日志文件。\",\"AOF 默认是关闭的，需要修改 redis.conf 配置文件来开启 AOF\",\"appendonly yes // 是否开启 AOF 功能，默认是关闭的 appendfilename \\\"appendonly.aof\\\" // AOF 的文件名称 \",\"AOF 的命令记录的频率也可以通过 redis.conf 文件来进行配置：\",\"appendfsync always // 表示每执行一次写命令，立刻记录到 AOF 文件中 appendfsync everysec // 写命令执行完先放入 AOF 缓冲区，然后每隔 1 秒将缓冲区数据写入到 AOF 文件，是默认方案 appendfsync no // 写命令执行完先放入 AOF 缓冲区，由操作系统决定何时将缓冲区内容写回磁盘 \",\"配置项\",\"刷盘时机\",\"优点\",\"缺点\",\"Always\",\"同步刷盘\",\"可靠性高，几乎不丢数据\",\"性能影响大\",\"everysec\",\"每秒刷盘\",\"性能适中\",\"最多丢失1秒数据\",\"no\",\"操作系统控制\",\"性能最好\",\"可靠性差，可能丢失大量数据\",\"AOF 是记录命令，AOF 文件会比 RDB 文件大很多。而且 AOF 会记录对同一个 key 的 多次写操作，但只有最后一次写操作才有意义。通过执行 bgrewriteaof 命令，可以让 AOF 文件执行重写功能，用最少的命令达到相同效果。\",\"Redis 也会在触发阈值时自动去重写 AOF 文件。阈值也可以在 redis.conf 中配置：\",\"auto-aof-rewrite-percentage 100 // AOF 文件比上次文件增长多少百分比，则触发重写 auto-aof-rewrite-min-size 64mb // AOF 文件体积最小多大以上才触发重写 \"]},\"323\":{\"h\":\"RDB与AOF对比\",\"t\":[\"RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会结合两者来使用。\",\"持久化方式\",\"数据完整性\",\"文件大小\",\"宕机恢复速度\",\"数据恢复优先级\",\"系统资源占用\",\"使用场景\",\"RDB\",\"定时对整个内存做快照\",\"不完整，两次备份之间会丢失\",\"会有压缩，文件体积小\",\"很快\",\"低，因为数据完整性不如AOF\",\"高，大量CPU和内存消耗\",\"AOF\",\"记录每一次执行的命令\",\"相对完整，取决于刷盘策略\",\"记录命令，文件体积很大\",\"慢\",\"高，因为数据完整性更高\",\"低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源\"]},\"324\":{\"h\":\"Redis进阶 - Redis哨兵\",\"t\":[\"思考\",\"slave 节点宕机恢复以后可以找 master 节点同步数据，那么 master 节点宕机怎么办？\"]},\"325\":{\"h\":\"哨兵的作用和工作原理\"},\"326\":{\"h\":\"哨兵的作用\",\"t\":[\"Redis 提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下：\",\"监控：Sentinel 会不断检查您的 master 和 slave 是否按照预期工作\",\"自动故障恢复：如果 master 故障，Sentinel 会将一个 slave 提升为 master 。当故障实例恢复后也以新的 master 为主\",\"通知：Sentinel 充当 Redis 客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给 Redis 的客户端\"]},\"327\":{\"h\":\"服务状态监控\",\"t\":[\"Sentinel 基于心跳机制监测服务状态，每隔 1 秒向集群的每个实例发送 ping 命令：\",\"主观下线：如果某 Sentinel 节点发现某实例未在规定时间响应，则认为该实例主观下线。\",\"客观下线：若超过指定数量（quorum）的 sentinel 都认为该实例主观下线，则该实例客观下线。quorum 值最好超过 Sentinel 实例数量的一半。\"]},\"328\":{\"h\":\"选举新的master\",\"t\":[\"一旦发现master 故障，sentinel 需要在 slave 中选择一个作为新的 master ，选择依据是这样：\",\"首先会判断 slave 节点与 master 节点断开的时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该 slave 节点\",\"然后判断 slave 节点的 slave-priority值，越小优先级越高，如果是 0 则永不参与选举\",\"如果 slave-prority 一样，则判断 slave 节点的 offset 值，越大则说明数据越新，优先级越高\",\"最后是判断 slave 节点的运行 id 大小，越小优先级越高\"]},\"329\":{\"h\":\"实现故障转移\",\"t\":[\"当选中了其中一个 slave 为新的 master 后（例如slave1），故障转移的步骤如下：\",\"sentinel 给备选的 slave1 节点发送 slaveof no one 命令，让该节点成为 master\",\"sentinel 给所有其他 slave 发送 slaveof 192.168.150.101 7002 命令，让这些 slave 成为新 master 的从节点，开始从新的 master 上同步数据。\",\"最后 sentinel 将故障节点标记为 slave，当故障节点恢复后会自动成为新的 master 的 slave 节点\"]},\"330\":{\"h\":\"小结\",\"t\":[\"Sentinel 的三个作用是什么？\",\"监控\",\"故障转移\",\"通知\",\"Sentinel 如何判断一个 Redis 实例是否健康？\",\"每隔 1 秒发送一次 ping 命令，如果超过一定时间没有相向则认为是主观下线\",\"如果大多数 sentinel 都认为实例主观下线，则判定服务下线\",\"故障转移步骤有哪些？\",\"首先选定一个 slave 作为新的 master，执行 slaveof no one\",\"然后让所有节点都执行 slaveof 新master\",\"修改故障节点配置，添加 slaveof 新master\"]},\"331\":{\"h\":\"搭建哨兵集群\"},\"332\":{\"h\":\"集群结构\",\"t\":[\"这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：\",\"三个sentinel实例信息如下：\",\"节点\",\"IP\",\"PORT\",\"s1\",\"192.168.150.101\",\"27001\",\"s2\",\"192.168.150.101\",\"27002\",\"s3\",\"192.168.150.101\",\"27003\"]},\"333\":{\"h\":\"准备实例和配置\",\"t\":[\"要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。\",\"我们创建三个文件夹，名字分别叫s1、s2、s3：\",\"# 进入/tmp目录 cd /tmp # 创建目录 mkdir s1 s2 s3 \",\"然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：\",\"port 27001 sentinel announce-ip 192.168.150.101 sentinel monitor mymaster 192.168.150.101 7001 2 sentinel down-after-milliseconds mymaster 5000 sentinel failover-timeout mymaster 60000 dir \\\"/tmp/s1\\\" \",\"port 27001：是当前sentinel实例的端口\",\"sentinel monitor mymaster 192.168.150.101 7001 2：指定主节点信息 \",\"mymaster：主节点名称，自定义，任意写\",\"192.168.150.101 7001：主节点的ip和端口\",\"2：选举master时的quorum值\",\"然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中（在/tmp目录执行下列命令）：\",\"# 方式一：逐个拷贝 cp s1/sentinel.conf s2 cp s1/sentinel.conf s3 # 方式二：管道组合命令，一键拷贝 echo s2 s3 | xargs -t -n 1 cp s1/sentinel.conf \",\"修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：\",\"sed -i -e 's/27001/27002/g' -e 's/s1/s2/g' s2/sentinel.conf sed -i -e 's/27001/27003/g' -e 's/s1/s3/g' s3/sentinel.conf \"]},\"334\":{\"h\":\"启动\",\"t\":[\"为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：\",\"# 第1个 redis-sentinel s1/sentinel.conf # 第2个 redis-sentinel s2/sentinel.conf # 第3个 redis-sentinel s3/sentinel.conf \",\"启动后：\"]},\"335\":{\"h\":\"测试\",\"t\":[\"尝试让master节点7001宕机，查看sentinel日志：\",\"查看7003的日志：\",\"查看7002的日志：\"]},\"336\":{\"h\":\"RedisTemplate连接集群\",\"t\":[\"在 Sentinel 集群监管下的 Redis 主从集群，其节点会因为自动故障转移而发生变化，Redis 的客户端必须感知这种变化，及时更新连接信息。Spring 的 RedisTemplate 底层利用 lettuce 实现了节点的感知和自动切换。\",\"引入 pom 文件\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> \",\"配置文件\",\"spring: redis: sentinel: master: mymaster nodes: - 192.168.127.101:27001 - 192.168.127.101:27002 - 192.168.127.101:27003 \",\"修改配置类，实现读写分离\",\"这个方法写在项目启动类中。\",\"// 常规写法 @Bean public LettuceClientConfigurationBuilderCustomizer lettuceClientConfigurationBuilderCustomizer(){ return clientConfigurationBuilder -> clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED); } // 匿名内部类的简写 @Bean public LettuceClientConfigurationBuilderCustomizer lettuceClientConfigurationBuilderCustomizer(){ @Override public void customize(LettuceClientConfiguration.LettuceClientConfigurationbuilder clientConfigurationBuilder){ clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED); } } \",\"控制器 Controller 类\",\"@RestController public class RedisController { @Autowired private StringRedisTemplate stringRedisTemplate; @GetMapping(\\\"/set/{key}/{value}\\\") public String setKey(@PathVariable(\\\"key\\\") String key, @PathVariable(\\\"value\\\") String value){ stringRedisTemplate.opsForValue().set(key, value); return \\\"success\\\"; } @GetMapping(\\\"/get/{key}\\\") public String getKey(@PathVariable(\\\"key\\\")String key) { String value = stringRedisTemplate.opsForValue().get(key); return value; } } \",\"测试访问\",\"添加：http://localhost:8080/set/name/codermast/\",\"查询：http://localhost:8080/get/name/\"]},\"337\":{\"h\":\"Redis进阶 - 服务端优化\"},\"338\":{\"h\":\"Redis进阶 - Redis分片集群\"},\"339\":{\"h\":\"搭建分片集群\",\"t\":[\"主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：\",\"海量数据存储问题\",\"高并发写的问题\",\"使用分片集群可以解决上述问题，分片集群特征：\",\"集群中有多个 master，每个 master 保存不同数据\",\"每个 master 都可以有多个 slave 节点\",\"master 之间通过 ping 监测彼此健康状态\",\"客户端请求可以访问集群任意节点，最终都会被转发到正确节点\"]},\"340\":{\"h\":\"集群结构\",\"t\":[\"分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下：\",\"这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：\",\"IP\",\"PORT\",\"角色\",\"192.168.150.101\",\"7001\",\"master\",\"192.168.150.101\",\"7002\",\"master\",\"192.168.150.101\",\"7003\",\"master\",\"192.168.150.101\",\"8001\",\"slave\",\"192.168.150.101\",\"8002\",\"slave\",\"192.168.150.101\",\"8003\",\"slave\"]},\"341\":{\"h\":\"准备实例和配置\",\"t\":[\"删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：\",\"# 进入/tmp目录 cd /tmp # 删除旧的，避免配置干扰 rm -rf 7001 7002 7003 # 创建目录 mkdir 7001 7002 7003 8001 8002 8003 \",\"在/tmp下准备一个新的redis.conf文件，内容如下：\",\"port 6379 # 开启集群功能 cluster-enabled yes # 集群的配置文件名称，不需要我们创建，由redis自己维护 cluster-config-file /tmp/6379/nodes.conf # 节点心跳失败的超时时间 cluster-node-timeout 5000 # 持久化文件存放目录 dir /tmp/6379 # 绑定地址 bind 0.0.0.0 # 让redis后台运行 daemonize yes # 注册的实例ip replica-announce-ip 192.168.150.101 # 保护模式 protected-mode no # 数据库数量 databases 1 # 日志 logfile /tmp/6379/run.log \",\"将这个文件拷贝到每个目录下：\",\"# 进入/tmp目录 cd /tmp # 执行拷贝 echo 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf \",\"修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：\",\"# 进入/tmp目录 cd /tmp # 修改配置文件 printf '%s\\\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t sed -i 's/6379/{}/g' {}/redis.conf \"]},\"342\":{\"h\":\"启动\",\"t\":[\"因为已经配置了后台启动模式，所以可以直接启动服务：\",\"# 进入/tmp目录 cd /tmp # 一键启动所有服务 printf '%s\\\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-server {}/redis.conf \",\"通过ps查看状态：\",\"ps -ef | grep redis \",\"发现服务都已经正常启动：\",\"如果要关闭所有进程，可以执行命令：\",\"ps -ef | grep redis | awk '{print $2}' | xargs kill \",\"或者（推荐这种方式）：\",\"printf '%s\\\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-cli -p {} shutdown \"]},\"343\":{\"h\":\"创建集群\",\"t\":[\"虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。\",\"我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。\",\"Redis5.0之前\",\"Redis5.0之前集群命令都是用redis安装包下的src/redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。\",\"# 安装依赖 yum -y install zlib ruby rubygems gem install redis \",\"然后通过命令来管理集群：\",\"# 进入redis的src目录 cd /tmp/redis-6.2.4/src # 创建集群 ./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 \",\"Redis5.0以后\",\"我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下：\",\"redis-cli --cluster create --cluster-replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 \",\"命令说明：\",\"redis-cli --cluster或者./redis-trib.rb：代表集群操作命令\",\"create：代表是创建集群\",\"--replicas 1或者--cluster-replicas 1 ：指定集群中每个master的副本个数为1，此时节点总数 ÷ (replicas + 1) 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master\",\"运行后的样子：\",\"这里输入yes，则集群开始创建：\",\"通过命令可以查看集群状态：\",\"redis-cli -p 7001 cluster nodes \"]},\"344\":{\"h\":\"测试\",\"t\":[\"尝试连接7001节点，存储一个数据：\",\"# 连接 redis-cli -p 7001 # 存储数据 set num 123 # 读取数据 get num # 再次存储 set a 1 \",\"结果悲剧了：\",\"集群操作时，需要给redis-cli加上-c参数才可以：\",\"redis-cli -c -p 7001 \",\"这次可以了：\"]},\"345\":{\"h\":\"散列插槽\",\"t\":[\"Redis 会把每一个 master 节点映射到 0~16383 共 16384 个插槽（hash slot）上，查看集群信息时就能看到：\",\"数据 key 不是与节点绑定，而是与插槽绑定。Redis 会根据 key 的有小部分计算插槽值，分两种情况：\",\"key 中包含 {} ，且{}中至少包含 1 个字符，{}中的部分是有效部分\",\"key 中不包含 {}，整个 key 都是有效部分\",\"::: 例如 key 是 num，那么就根据 num 计算，如果是 {itcast}num，则根据 itcast 计算。计算方式是利用 CRC16 算法得到一个 hash 值，然后对 16384 取余，得到的结果就是 slot 值。 :::\",\"Redis如何判断某个 key 应该在哪个实例？\",\"将 16384 个插槽分配到不同的实例\",\"根据 key 的有效部分计算哈希值，对 16384 取余\",\"余数作为插槽，寻找插槽所在实例即可\",\"如何将同一类数据固定的保存在同一个 Redis 实例？\",\"这一类数据使用相同的有效部分，例如 key 都以 { typeid } 为前缀\"]},\"346\":{\"h\":\"集群伸缩\",\"t\":[\"集群伸缩就是集群节点能够动态的增加和减少，并且在集群伸缩的同时，也伴随着槽位及槽位中数据在节点之间的移动。\",\"redis-cli --cluster 提供了很多操作集群的命令，可以通过redis-cli --cluster help指令查看。\",\"向集群中添加一个新 master 节点，并存储 num = 1000 ：\",\"启动一个新的 Redis 实例，端口为 7004\",\"# 创建实例目录 mkdir 7004 # 创建 redis 服务 sed -i s/6379/7004/g 7004/redis.conf # 运行 redis 服务 redis-server 7004/redis.conf \",\"添加 7004 到之前的集群，并作为一个 master 节点\",\"redis-cli --cluster add-node 192.168.150.101:7004 192.168.150.101:7001 \",\"给 7004 节点分配插槽，使得 num 这个 key 可以存储到 7004 实例\",\"# 重新分片 redis-cli --cluster reshard 192.168.150.101:7001 # 移动 3000 个插槽 How many slots do you want to move (from 1 to 16384)? 3000 # 接收插槽的 ID What is the receiving node ID? 「这里输入 7001 的 ID 即可」 # 使用 done 结束 # 是否确认移动 Do you want to proceed with the proposed rehard plan (yes/no)? yes \"]},\"347\":{\"h\":\"故障转移\",\"t\":[\"当集群中有一个 master 宕机会发生什么？\",\"首先是该实例与其他实例失去连接\",\"然后是疑似宕机\",\"最后是确定下线，自动提升一个 slave 为新的 master\",\"这里选取 slave 的方式是根据 offset 偏移量和 id 进行筛选\",\"数据迁移\",\"利用 cluster failover 命令可以手动让集群中的某个 master 宕机，切换到执行 cluster failover 命令的这个 slave 节点，实现无感知的数据迁移。具体的流程如下：\",\"手动的 Failover 支持三种不同模式：\",\"缺省：默认的流程\",\"force：省略的对 offset 的一致性校验\",\"takeover：直接执行第 5 步，忽略数据一致性、忽略 master 状态和其他 master 的意见\"]},\"348\":{\"h\":\"RedisTemplate访问分片集群\",\"t\":[\"RedisTemplate 底层同样基于 lettuce 实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：\",\"引入 redis 的 starter 依赖\",\"配置分片集群地址\",\"配置读写分离\",\"与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下:\",\"spring: redis: cluster: nodes: # 指定分片集群的每一个节点信息 - 192.168.150.101:7001 - 192.168.150.101:7002 - 192.168.150.101:7003 - 192.168.150.101:8001 - 192.168.150.101:8002 - 192.168.150.101:8003 \"]},\"349\":{\"h\":\"Redis客户端 - Jedis连接池\",\"t\":[\"Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们使用Jedis连接池代替Jedis的直接连接方式。\",\"配置Jedis连接池\",\"public class JedisConnectionFactory{ private static final JedisPool jedisPool; static { JedisPoolConfig jedisPollConfig = new JedisPoolConfig(); // 最大连接，这里设置为 8 jedisPollConfig.setMaxTotal(8); // 最大空闲连接，这里设置为 8 jedisPollConfig.setMaxIdle(8); // 最小空闲连接，这里设置为 0 jedisPollConfig.setMaxIdle(0); // 设置最长等待时间，单位 ms jedisPollConfig.setMaxWaitMillis(200); jedisPool = new JedisPool(jedisPoolConfig,\\\"192.168.100.100\\\",6379,1000,\\\"codermast\\\"); } // 获取Jedis对象 public static Jedis getJedis(){ return jedisPool.getResource(); } } \",\"注意\",\"在单线程环境中可以不使用Jedis连接池，但是多线程环境下必须使用Jedis连接池，并且使用Jedis连接池较为可靠，我们不必关注与资源的获取和释放等问题，可以将注意力集中于业务逻辑上。\"]},\"350\":{\"h\":\"Redis客户端 - Jdies快速入门\"},\"351\":{\"h\":\"简介\",\"t\":[\"Jedis is a Java client for Redis designed for performance and ease of use.\",\"Jedis是Redis 的 Java 客户端，专为性能和易用性而设计。\"]},\"352\":{\"h\":\"官方地址\",\"t\":[\"Jedis的官方地址：https://github.com/redis/jedis\"]},\"353\":{\"h\":\"快速入门\",\"t\":[\"新建一个Maven工程并引入以下依赖\",\"<!--引入Jedis依赖--> <dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> <version>4.2.0</version> </dependency> <!--引入单元测试依赖--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter</artifactId> <version>5.8.2</version> <scope>test</scope> </dependency> \",\"编写测试类并与Redis建立连接\",\"private Jedis jedis; @BeforeEach //被该注解修饰的方法每次执行其他方法前自动执行 void setUp(){ // 1. 获取连接 jedis = new Jedis(\\\"192.168.230.88\\\",6379); // 2. 设置密码 jedis.auth(\\\"codermast\\\"); // 3. 选择库（默认是下标为0的库） jedis.select(0); } \",\"编写一个操作数据的方法（这里以操作String类型为例）\",\"@Test public void testString(){ // 1.往redis中存放一条String类型的数据并获取返回结果 String result = jedis.set(\\\"url\\\", \\\"https://www.codermast.com\\\"); System.out.println(\\\"result = \\\" + result); // 2.从redis中获取一条数据 String url = jedis.get(\\\"url\\\"); System.out.println(\\\"url = \\\" + url); } \",\"最后编写一个释放资源的方法\",\" @AfterEach //被该注解修饰的方法会在每次执行其他方法后执行 void tearDown(){ // 1.如果jedis被使用过，则释放资源 if (jedis != null){ jedis.close(); } } \",\"执行testString()方法后测试结果。\",\"result = OK url = https://www.codermast.com \"]},\"354\":{\"h\":\"Redis客户端 - RedisSerializer\",\"t\":[\"前景回顾\",\"在上一篇中，我们实现了一个简单的案例，操作一个 String 类型的数据，插入了一个 name = codermast 的数据到Redis。\",\"使用redis-cli客户端连接对应的Redis服务器后，按道理来讲get name这个指令的返回结果应该是 codermast\",\"redis-cli客户端查看\",\"返回的结果是无，这是为什么呢？使用可视化工具查看一下，看看到底数据是否存储在Redis服务器中。\",\"使用可视化工具查看\",\"可以明显的看到，所存储的 key 之前加上了一段字符，但是从代码中看，存储的 key 为 \\\"name\\\"，但是实际存储的 key 是 \\\\xac\\\\xed\\\\x00\\\\x05t\\\\x00\\\\x04name，而且里面的 value 也做了同样的处理 \\\\xac\\\\xed\\\\x00\\\\x05t\\\\x00\\\\x09codermast\",\"出现这种现象的原因是什么呢？这是因为 RedisTemplate 在底层将数据序列化处理以后，才存储到 Redis 服务器中。\",\"RedisTemplate 可以接收任意 Object 作为值写入 Redis ，只不过在写入之前会把 Object 序列化成为字节形式，默认是采用 JDK 序列化，得到的结果就如图所示。\",\"缺点\",\"可读性差\",\"资源占用高\",\"既然这样可读性又差，资源占用又高，那么如何解决这些问题呢？我们可以通过自定义 RedisTemplate 序列化的方式来解决。\"]},\"355\":{\"h\":\"编写一个 RedisConfig 配置类\",\"t\":[\"@Configuration public class RedisTemplate{ @Bean public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory){ // 1.创建RedisTemplate对象 RedisTemplate<String ,Object> redisTemplate = new RedisTemplate<>(); // 2.设置连接⼯⼚ redisTemplate.setConnectionFactory(factory); // 3.创建序列化对象 StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new GenericJackson2JsonRedisSerializer(); // 4.设置 key 和 hashKey 采⽤ String 的序列化⽅式 redisTemplate.setKeySerializer(stringRedisSerializer); redisTemplate.setHashKeySerializer(stringRedisSerializer); // 5.设置 value 和 hashValue 采⽤ json的 序列化⽅式 redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer); redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer); return redisTemplate; } } \",\"注意\",\"我们自定义的配置类中，使用到了 Jackson 序列化类，所以在使用之前需要导入 jackson-datebind 这个依赖项。\",\"<!-- jackson-databind 依赖 --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency> \"]},\"356\":{\"h\":\"自定义序列化方式\",\"t\":[\"自定义的序列化方式也加进去了对引用类型的序列化，我们来实际测试一下。\",\"编写一个 User 类\",\"@Data public User{ Integer age; String name; } \",\"类中属性需要给出 set 和 get方法\",\"将 User 对象存储至 Redis\",\"@Test void testObject(){ User user = new User(); user.setAge(18); user.setName(\\\"codermast\\\"); // 插入一条 Object 类型的数据 redisTemplate.opsForValue().set(\\\"user\\\",user); // 获取一条 Object 类型的数据 User user_coder = (User)redisTemplate.opsForValue().get(\\\"user\\\"); System.out.println(user_coder); } \",\"虽然 JSON 的序列化方式可以满足我们存储对象的需求，为了在反序列化时知道对象的类型，将对象的类路径地址也序列化进 JSON 结果中，存入 Redis ，会带来额外的资源消耗。\",\"针对如图所示的特殊情况，类路径地址比我们真实的数据内容还大，造成了极大的资源浪费。\"]},\"357\":{\"h\":\"优化自定义序列化\",\"t\":[\"为了节省内存空间，通常情况下不会使用 JSON 序列化器来处理 Value ，而是统一使用 String 序列化器，要求只能存储 String 类型的 key 和 value。当要存储 Java 对象时，手动完成对象的序列化和反序列化。\",\"Spring 默认提供了一个 StringRedisTemplate 类，它的 key 和 value 的序列化方式默认就是 String 方式，省去了我们自定义的 RedisTemplate 的过程。\",\"现在在存储数据之前需要进行手动序列化，在获取数据以后，需要手动反序列化对象。\"]},\"358\":{\"h\":\"小结\",\"t\":[\"RedisTemplate 的两种序列化实践方案\",\"方案一 \",\"自定义RedisTemplate\",\"修改RedisTemplate 的序列化器为 GenericJackson2JsonRedisSerializer\",\"方案二 \",\"使用 StringRedisTemplate\",\"写入 Redis 之前，将对象手动序列化为 JSON\",\"读取数据以后，将 JSON 手动反序列化为对象\",\"提示\",\"上述仅说明了操作 String 类型的数据，操作 Hash、List、Set、SortedSet类型时，使用对应的 ops 对象即可操作。\"]},\"359\":{\"h\":\"Redis客户端 - SpringDataRedis\"},\"360\":{\"h\":\"介绍\",\"t\":[\"SpringData 是 Spring 中操作数据的模块，包含对各种数据库的集成，其中对 Redis 的集成模块就叫做 SpringDataRedis，官网地址：https://spring.io/prohects/spring-data-redis\",\"提供了对不同 Redis 客户端的整合 （Lettuce 和 Jedis）\",\"提供了 RedisTemplate 统一 API 来操作Redis\",\"支持 Redis 的发布订阅模型\",\"支持 Redis 哨兵和 Redis 集群\",\"支持基于 Lettuce 的响应式编程\",\"支持基于 JDK、JSON、字符串、Spring对象的数据序列化和反序列化\",\"支持基于 Redis 的 JDKCollection 实现\"]},\"361\":{\"h\":\"操作API\",\"t\":[\"SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作API封装到了不同的类型中：\",\"API\",\"返回值类型\",\"说明\",\"redisTemplate.opsForValue()\",\"ValueOperations\",\"操作String类型数据\",\"redisTemplate.opsForHash()\",\"HashOperations\",\"操作Hash类型数据\",\"redisTemplate.opsForList()\",\"ListOperations\",\"操作List类型数据\",\"redisTemplate.opsForSet()\",\"SetOperations\",\"操作Set类型数据\",\"redisTemplate.opsForZSet()\",\"ZSetOperations\",\"操作SortedSet类型数据\",\"redisTemplate\",\"通用命令\",\"使用说明\",\"我们在操作对应的 Redis 数据时，根据数据类型的不同获取对应的操作对象，如操作 String 类型时，则调用 redisTemplate.opsForValue() 方法，获取一个 ValueOperations 对象，来操作 String 类型的数据。\"]},\"362\":{\"h\":\"Spring Boot 中使用\",\"t\":[\"引入依赖\",\"<!--Redis依赖--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <!--连接池依赖--> <dependency> <groupId>org.apache.commons<groupId> <artifactId>commons-pool2</artifactId> </dependency> \",\"配置文件\",\"spring : redis : host : 192.168.100.100 port : 6379 password : codermast lettuce : pool : max-active : 8 # 最大的连接数 max-idle : 8 # 最大空闲连接 min-idle : 0 # 最小空闲连接 max-wait : 100 # 连接等待时间 \",\"获取 RedisTemplate 对象\",\"@Autowired private RedisTemplate redisTemplate; \",\"在 Spring Boot 框架中，使用自动注入获取对象\",\"编写测试类\",\"@SpringBootTest public class RedisTest { @Autowired private RedisTemplate redisTemplate; @Test void testString(){ // 插入一条 String 类型的数据 redisTemplate.opsForValue().set(\\\"name\\\",\\\"codermast\\\"); // 获取一条 String 类型的数据 Object name = redisTemplate.opsForValue().get(\\\"name\\\"); System.out.println(\\\"我的名字是：\\\" + name); } } \",\"运行查看结果\",\"我的名字是：codermast \"]},\"363\":{\"h\":\"Redis入门 - 基础通用指令\",\"t\":[\"在正式介绍Redis数据结构及其操作指令之前，我们需要先掌握一些最基础的通用指令。\",\"这些都是Redis操作过程中的一些常见指令\",\"指令\",\"描述\",\"keys\",\"查看符合模板的所有key，不建议在⽣产环境设备上使⽤\",\"del\",\"删除⼀个指定的key\",\"esists\",\"判断key是否存在\",\"expire\",\"给⼀个key设置有效期，有效期到期时该key会被⾃动删除\",\"ttl\",\"查看⼀个KEY的剩余有效期\",\"quit\",\"退出\",\"shutdown\",\"关闭服务器\",\"select [0-15]\",\"选择指定的数据库\",\"help指令\",\"可以通过 help [command]可以查看⼀个命令的具体⽤法！\",\"例如查看set指令的帮助文档：help set\"]},\"364\":{\"h\":\"Redis入门 - Redis概念和基础\"},\"365\":{\"h\":\"什么是NoSQL\",\"t\":[\"NoSQL，泛指非关系型的数据库。\",\"NoSQL最常见的解释是 \\\"non-relational\\\"， 很多人也说它是\\\"Not Only SQL\\\"\",\"NoSQL仅仅是一个概念，泛指非关系型的数据库\",\"区别于关系数据库，它们不保证关系数据的ACID特性\",\"NoSQL是一项全新的数据库革命性运动，提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入\",\"常见的NoSQL数据库有：Redis、MemCache、MongoDB等\"]},\"366\":{\"h\":\"NoSQL与SQL\",\"t\":[\"SQL\",\"NoSQL\",\"数据结构\",\"结构化\",\"非结构化\",\"数据关联\",\"关联\",\"无关联\",\"查询方式\",\"SQL查询\",\"非SQL查询\",\"事务特性\",\"ACID\",\"BASE\",\"存储方式\",\"磁盘\",\"内存\",\"扩展性\",\"垂直\",\"水平\",\"使用场景\",\"1.数据结构固定2.相关业务对数据安全性、一致性要求较高\",\"1.数据结构不固定 2.对一致性、安全性要求不高 3.对性能要求高\",\"NoSQL数据库的常见种类\",\"键值类型（Redis）\",\"文档类型（MongoDB）\",\"列类型（HBase）\",\"Graph类型（Neo4j）\"]},\"367\":{\"h\":\"认识Redis\",\"t\":[\"Redis诞生于2009年，全称为 Remote Dictionary Server，远程字典服务器，是一个基于内存的键值型的NoSQL数据库。\",\"Redis特征\",\"键值型（Key-Value），value支持多种不同的数据结构，功能丰富。\",\"单线程，每个命令具备原子性。Redis6.0开始对网络请求启用多线程，但是对命令的执行依然是单线程。\",\"低延迟，速度快（、IO多路复用、良好的编码）\",\"支持数据持久化\",\"支持主从集群、分片集群\",\"支持多语言客户端（C语言、Java、C++、Python等）\"]},\"368\":{\"h\":\"安装Redis\",\"t\":[\"由于Redis的作者仅编写了Linux环境下的版本，且在生产环境时大多数使用的Linux系统，故我们在Centos操作系统内进行安装。\",\"安装Redis\",\"yum install redis \",\"Redis安装\",\"其他安装\",\"除了上述安装方式以外还有很多安装方式，这里不再赘述。各种环境的安装方式，可以参考Redis官方的安装文档，地址：https://redis.io/docs/getting-started/installation/\"]},\"369\":{\"h\":\"Redis启动的三种方式\"},\"370\":{\"h\":\"前台启动\",\"t\":[\"安装完Redis以后，在任意目录下输入redis-server命令即可启动Redis。\",\"前台启动Redis\",\"前台启动Redis后，就是如上界面，此时命令终端会一直响应Redis服务，而无法进行其他操作，要进行其他指令操作时，则必须关闭Redis服务，很不方便，此时我们可以使用后台启动。\"]},\"371\":{\"h\":\"后台启动\",\"t\":[\"如果要让Redis以后台方式启动，则必须修改Redis配置文件，配置文件所在目录就是Redis安装目录。\",\"修改Redis配置文件redis.conf文件中的配置项。\",\"# 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0 bind 0.0.0.0 # 守护进程，修改为yes后即为后台运行 daemonize yes # 密码，设置后访问Redis必须输入密码，此时密码即为 codermast requirepass codermast \",\"此时启动Redis时需要加上配置文件，即可后台启动redis。\",\"redis-server redis.conf \",\"Redis后台启动\"]},\"372\":{\"h\":\"开机启动\",\"t\":[\"要实现开机启动，需要配置一个系统服务文件\",\"vi /etc/systemd/system/redis.service \",\"将以下内容作为文件内容：\",\"[Unit] Description=redis-server After=network.target [Service] Type=forking ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf PrivateTmp=true [Install] WantedBy=multi-user.target \",\"重载系统服务\",\"systemctl daemon-reload \",\"开启redis开机自启动\",\"systemctl enable redis \",\"操作Redis指令\",\"启动：systemctl start redis\",\"停止：systemctl stop redis\",\"重启：systemctl restart redis\",\"查看状态：systemctl status redis\"]},\"373\":{\"h\":\"Redis客户端\",\"t\":[\"Redis本身仅有一个基于命令行的客户端，但是这种方式在我们使用过程中不太直观，所以市面上就出现了很多的客户端，但主要分为三种类型：命令行客户端、图形化客户端、编程语言客户端。\"]},\"374\":{\"h\":\"命令行客户端\",\"t\":[\"Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：\",\"redis-cli [options] [commonds] \",\"这里options为选项，commonds为命令，加上[]为可选项。这也是一种常见的文档编写规范。\",\"Redis命令行连接\",\"注意\",\"这里要注意的是，在使用redis-cli客户端连接redis服务时，需要保证redis服务是开启的，无论是在远程连接或者本地连接，这是新手阶段容易忽视的一点。\",\"其中常见的options有：\",\"h 127.0.0.1：指定要连接的redis节点的IP地址，默认是127.0.0.1\",\"p 6379：指定要连接的redis节点的端口，默认是6379\",\"a 132537：指定redis的访问密码\",\"其中的commonds就是Redis的操作命令，例如：\",\"ping：与redis服务端做心跳测试，服务端正常会返回pong\",\"不指定commond时，会进入redis-cli的交互控制台。\"]},\"375\":{\"h\":\"图形化客户端\",\"t\":[\"图形化客户端，顾名思义就是通过可视化的软件，来对redis数据库进⾏操作。 图形化界⾯的客户端种类很多，可以选择⾃⼰喜欢的⼀款就可以，这⾥我选择的是Another Redis Desktop Manager这款，⽀持Mac、Linux、Windows系统，更重要的是还免 费。\",\"笔者的电脑系统为macos，故就演示Mac环境下的图形化客户端，windows系统下的客户端种类很多，网络上的资源也很多，这里就不赘述。\",\"Redis图形化客户端-Another redis desktop manager\",\"Github地址：https://github.com/qishibo/AnotherRedisDesktopManager/releases/tag/v1.5.9\",\"Gitee地址：https://gitee.com/qishibo/AnotherRedisDesktopManager/releases/tag/v1.5.8\",\"相关信息\",\"对于Github访问慢的⽤户，可以直接在国内的Gitee中下载安装，⼀般来说两者都没有什么差别，唯⼀的区别就在于Github上的更新⽐较及时。\"]},\"376\":{\"h\":\"编程语言客户端\",\"t\":[\"编程语言客户端也有很多种，如Java语言的Jedis客户端，Go语言的Go-Redis客户端等。\",\"具体的可以参考Redis官方提供的文档，地址：https://redis.io/docs/clients/\",\"几个Java语言的客户端展示。\",\"Java语言的Redis客户端\"]},\"377\":{\"h\":\"Redis入门 - 5种基本数据类型\",\"t\":[\"说明\",\"在我们平常的业务中基本只会使用到Redis的基本数据类型（String、List、Hash、Set、Sorted Set），特殊类型（Geo、Bitmap、Hyperloglog）类型只有在特殊的业务场景下会使用到，通常只需要掌握基本数据类型即可，特殊类型作为了解即可。\"]},\"378\":{\"h\":\"String 字符串\",\"t\":[\"String类型，也就是字符串类型，是Redis中最简单的存储类型。String 类型是二进制安全的。意思是 redis 的 String 可以包含任何数据。比如jpg图片或者序列化的对象。\",\"其value是字符串，不过根据字符串的格式不同，又可以分为3类：\",\"string：普通字符串\",\"int：整数类型，可以做自增、自减操作\",\"float：浮点类型，可以做自增、自减操作\",\"不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.\",\"String类型的常见操作命令：\",\"命令\",\"描述\",\"SET\",\"添加或者修改已经存在的一个String类型的键值对\",\"GET\",\"根据key获取String类型的value\",\"MSET\",\"批量添加多个String类型的键值对\",\"MGET\",\"根据多个key获取多个String类型的value\",\"INCR\",\"让一个整型的key自增1\",\"INCRBY\",\"让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2\",\"INCRBYFLOAT\",\"让一个浮点类型的数字自增并指定步长\",\"SETNX\",\"添加一个String类型的键值对，前提是这个key不存在，否则不执行\",\"SETEX\",\"添加一个String类型的键值对，并且指定有效期\",\"Redis的key中虽然没有目录结构，但是允许有多个单词形成层级结构，多个单词之间用” ：“隔开，一般情况下使用的格式为：项目名:业务名:类型:id。\",\"这个格式并非固定，也可以根据自己的需求来删除或添加词条。\",\"举例说明\",\"例如我们的项目名称叫 myblog ，有user和product两种不同类型的数据，我们可以这样定义key：\",\"user相关的key：myblog:user:1\",\"product相关的key：myblog:product:1\",\"如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储\",\"KEY\",\"VALUE\",\"myblog:user:1\",\"{“id”:1, “name”: “Jack”, “age”: 21}\",\"myblog:product:1\",\"{“id”:1, “name”: “小米11”, “price”: 4999}\"]},\"379\":{\"h\":\"Hash 哈希\",\"t\":[\"Hash类型，也叫散列，又可以成为哈希类型。其value是一个无序字典，类似于Java中的HashMap结构。\",\"Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD\",\"Hash类型的数据\",\"Hash的常见命令有：\",\"命令\",\"描述\",\"HSET key field value\",\"添加或者修改hash类型key的field的值\",\"HGET key field\",\"获取一个hash类型key的field的值\",\"HMSET\",\"hmset 和 hset 效果相同 ，4.0之后hmset可以弃用了\",\"HMGET\",\"批量获取多个hash类型key的field的值\",\"HGETALL\",\"获取一个hash类型的key中的所有的field和value\",\"HKEYS\",\"获取一个hash类型的key中的所有的field\",\"HVALS\",\"获取一个hash类型的key中的所有的value\",\"HINCRBY\",\"让一个hash类型key的字段值自增并指定步长\",\"HSETNX\",\"添加一个hash类型的key的field值，前提是这个field不存在，否则不执行\"]},\"380\":{\"h\":\"List 列表\",\"t\":[\"Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。\",\"特征也与LinkedList类似：\",\"有序\",\"元素可以重复\",\"插入和删除快\",\"查询速度一般\",\"常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.\",\"命令\",\"描述\",\"LPUSH key element …\",\"向列表左侧插入一个或多个元素\",\"LPOP key\",\"移除并返回列表左侧的第一个元素，没有则返回nil\",\"RPUSH key element …\",\"向列表右侧插入一个或多个元素\",\"RPOP key\",\"移除并返回列表右侧的第一个元素\",\"LRANGE key star end\",\"返回一段角标范围内的所有元素\",\"BLPOP和BRPOP\",\"与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil\",\"双端队列示意图\"]},\"381\":{\"h\":\"Set 集合\",\"t\":[\"Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征\",\"无序\",\"元素不可重复\",\"查找快\",\"支持交集、并集、差集等功能\",\"命令\",\"描述\",\"SADD key member …\",\"向set中添加一个或多个元素\",\"SREM key member …\",\"移除set中的指定元素\",\"SCARD key\",\"返回set中元素的个数\",\"SISMEMBER key member\",\"判断一个元素是否存在于set中\",\"SMEMBERS\",\"获取set中的所有元素\",\"SINTER key1 key2 …\",\"求key1与key2的交集\",\"SDIFF key1 key2 …\",\"求key1与key2的差集\",\"SUNION key1 key2 …\",\"求key1和key2的并集\",\"tip 交集、差集、并集图示\"]},\"382\":{\"h\":\"SortedSet 有序集合\",\"t\":[\"Redis的SortedSet又可以成为Zset，是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。\",\"SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。\",\"SortedSet具备下列特性：\",\"可排序\",\"元素不重复\",\"查询速度快\",\"因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。\",\"SortedSet的常见命令有\",\"命令\",\"描述\",\"ZADD key score member\",\"添加一个或多个元素到sorted set ，如果已经存在则更新其score值\",\"ZREM key member\",\"删除sorted set中的一个指定元素\",\"ZSCORE key member\",\"获取sorted set中的指定元素的score值\",\"ZRANK key member\",\"获取sorted set 中的指定元素的排名\",\"ZCARD key\",\"获取sorted set中的元素个数\",\"ZCOUNT key min max\",\"统计score值在给定范围内的所有元素的个数\",\"ZINCRBY key increment member\",\"让sorted set中的指定元素自增，步长为指定的increment值\",\"ZRANGE key min max\",\"按照score排序后，获取指定排名范围内的元素\",\"ZRANGEBYSCORE key min max\",\"按照score排序后，获取指定score范围内的元素\",\"ZDIFF、ZINTER、ZUNION\",\"求差集、交集、并集\",\"注意\",\"所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可\"]},\"383\":{\"h\":\"Redis入门 - 发布订阅\",\"t\":[\"Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。\",\"此种模式下，消息发布者和订阅者不进行直接通信，发布者客户端向指定的频道（channel） 发布消息，订阅该频道的每个客户端都可以收到该消息，\",\"Redis 客户端可以订阅任意数量的频道。\",\"下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：\",\"当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：\",\"Redis发布订阅命令：\",\"订阅一个或多个频道：subscribe channel1 [channel2 ... ]\",\"退订一个或多个频道：unsubscribe [channel [channel ...]]\",\"订阅给定模式频道：psubscribe pattern [pattern ...]\",\"退订给定模式频道：punsubscribe [pattern [pattern ...]]\",\"发布命令：publish channel message\",\"查看订阅与发布系统状态：pubsub subcommand [argument [argument ...]]\"]},\"384\":{\"h\":\"Redis入门 - Lua脚本\",\"t\":[\"Redis 脚本使用 Lua 解释器来执行脚本。 Redis 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 EVAL。\"]},\"385\":{\"h\":\"语法\",\"t\":[\"Eval 命令的基本语法如下：EVAL script numkeys key [key ...] arg [arg ...]\"]},\"386\":{\"h\":\"脚本命令\",\"t\":[\"执行Lua脚本：EVAL script numkeys key [key ...] arg [arg ...]\",\"将脚本添加到脚本缓存，但不执行：SCRIPT LOAD script\",\"从脚本缓存中移除所有脚本：SCRIPT FLUSH\",\"杀死当前正在运行的 Lua 脚本：SCRIPT KILL\",\"查看指定的脚本是否已经被保存在缓存当中：SCRIPT EXISTS script [script ...]\",\"根据给定的 sha1 校验码，执行缓存在服务器中的脚本：EVALSHA sha1 numkeys key [key ...] arg [arg ...] \"]},\"387\":{\"h\":\"Redis入门 - Redis Stream\",\"t\":[\"Redis Stream 是 Redis 5.0 版本新增加的数据结构。\",\"Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。\",\"简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。\",\"而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。\",\"Redis Stream 的结构如下所示，它有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容：\",\"每个 Stream 都有唯一的名称，它就是 Redis 的 key，在我们首次使用 xadd 指令追加消息时自动创建。\",\"上图解析：\",\"Consumer Group ：消费组，使用 XGROUP CREATE 命令创建，一个消费组有多个消费者(Consumer)。\",\"last_delivered_id ：游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。\",\"pending_ids ：消费者(Consumer)的状态变量，作用是维护消费者的未确认的 id。 pending_ids 记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符）。\",\"消息队列相关命令：\",\"XADD - 添加消息到末尾\",\"XTRIM - 对流进行修剪，限制长度\",\"XDEL - 删除消息\",\"XLEN - 获取流包含的元素数量，即消息长度\",\"XRANGE - 获取消息列表，会自动过滤已经删除的消息\",\"XREVRANGE - 反向获取消息列表，ID 从大到小\",\"XREAD - 以阻塞或非阻塞方式获取消息列表\",\"消费者组相关命令：\",\"XGROUP CREATE - 创建消费者组\",\"XREADGROUP GROUP - 读取消费者组中的消息\",\"XACK - 将消息标记为\\\"已处理\\\"\",\"XGROUP SETID - 为消费者组设置新的最后递送消息ID\",\"XGROUP DELCONSUMER - 删除消费者\",\"XGROUP DESTROY - 删除消费者组\",\"XPENDING - 显示待处理消息的相关信息\",\"XCLAIM - 转移消息的归属权\",\"XINFO - 查看流和消费者组的相关信息；\",\"XINFO GROUPS - 打印消费者组的信息；\",\"XINFO STREAM - 打印流信息\"]},\"388\":{\"h\":\"XADD\",\"t\":[\"使用 XADD 向队列添加消息，如果指定的队列不存在，则创建一个队列，XADD 语法格式：\",\"XADD key ID field value [field value ...]\",\"key ：队列名称，如果不存在就创建\",\"ID ：消息 id，我们使用 * 表示由 redis 生成，可以自定义，但是要自己保证递增性。\",\"field value ： 记录。\"]},\"389\":{\"h\":\"XTRIM\",\"t\":[\"使用 XTRIM 对流进行修剪，限制长度， 语法格式：\",\"XTRIM key MAXLEN [~] count\",\"key ：队列名称\",\"MAXLEN ：长度\",\"count ：数量\"]},\"390\":{\"h\":\"XDEL\",\"t\":[\"使用 XDEL 删除消息，语法格式：\",\"XDEL key ID [ID ...]\",\"key：队列名称\",\"ID ：消息 ID\"]},\"391\":{\"h\":\"XLEN\",\"t\":[\"使用 XLEN 获取流包含的元素数量，即消息长度，语法格式：\",\"XLEN key\",\"key：队列名称\"]},\"392\":{\"h\":\"XRANGE\",\"t\":[\"使用 XRANGE 获取消息列表，会自动过滤已经删除的消息 ，语法格式：\",\"XRANGE key start end [COUNT count]\",\"key ：队列名\",\"start ：开始值， - 表示最小值\",\"end ：结束值， + 表示最大值\",\"count ：数量\"]},\"393\":{\"h\":\"XREVRANGE\",\"t\":[\"使用 XREVRANGE 获取消息列表，会自动过滤已经删除的消息 ，语法格式：\",\"XREVRANGE key end start [COUNT count]\",\"key ：队列名\",\"end ：结束值， + 表示最大值\",\"start ：开始值， - 表示最小值\",\"count ：数量\"]},\"394\":{\"h\":\"XREAD\",\"t\":[\"使用 XREAD 以阻塞或非阻塞方式获取消息列表 ，语法格式：\",\"XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]\",\"count ：数量\",\"milliseconds ：可选，阻塞毫秒数，没有设置就是非阻塞模式\",\"key ：队列名\",\"id ：消息 ID\"]},\"395\":{\"h\":\"XGROUP CREATE\",\"t\":[\"使用 XGROUP CREATE 创建消费者组，语法格式：\",\"XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]\",\"key ：队列名称，如果不存在就创建\",\"groupname ：组名。\",\"$ ： 表示从尾部开始消费，只接受新消息，当前 Stream 消息会全部忽略。\",\"从头开始消费:\",\"XGROUP CREATE mystream consumer-group-name 0-0 从尾部开始消费:\",\"XGROUP CREATE mystream consumer-group-name $\"]},\"396\":{\"h\":\"XREADGROUP GROUP\",\"t\":[\"使用 XREADGROUP GROUP 读取消费组中的消息，语法格式：\",\"XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]\",\"group ：消费组名\",\"consumer ：消费者名。\",\"count ： 读取数量。\",\"milliseconds ： 阻塞毫秒数。\",\"key ： 队列名。\",\"ID ： 消息 ID。XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystream >\"]},\"397\":{\"h\":\"Redis入门 - 3种特殊数据类型\",\"t\":[\"说明\",\"在我们平常的业务中基本只会使用到Redis的基本数据类型（String、List、Hash、Set、Sorted Set），特殊类型（Geo、Bitmap、Hyperloglog）类型只有在特殊的业务场景下会使用到，通常只需要掌握基本数据类型即可，特殊类型作为了解即可。\"]},\"398\":{\"h\":\"GEO类型\",\"t\":[\"GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常⻅操作。\",\"geoadd：添加地理位置的坐标。\",\"geopos：获取地理位置的坐标。\",\"geodist：计算两个位置之间的距离。\",\"georadius：根据⽤户给定的经纬度坐标来获取指定范围内的地理位置集合。\",\"georadiusbymember：根据储存在位置集合⾥⾯的某个地点获取指定范围内的地理位置集合。\",\"geohash：返回⼀个或多个位置对象的 geohash 值。\",\"命令\",\"描述\",\"GEOHASH key member [member ...]\",\"返回⼀个或多个位置元素的 Geohash 表示\",\"GEOPOS key member [member ...]\",\"从key⾥返回所有给定位置元素的位置（经度和纬度）\",\"GEODIST key member1 member2 [m|km|ft|mi]\",\"返回两个给定位置之间的距离\",\"GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\",\"以给定的经纬度为中⼼， 找出某⼀半径内的元素\",\"GEOADD key longitude latitude member [longitude latitude member ...]\",\"将指定的地理空间位置（纬度、经度、名称）添加到指定的key中\",\"GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]\",\"找出位于指定范围内的 元素，中⼼点是由给定的位置元素决定\"]},\"399\":{\"h\":\"Bitmap类型\",\"t\":[\"从本质上来说，bitmap不是⼀种数据类型，本质是字符串key-value，但是其可以对位进⾏操作。也可以将bitmap想象成⼀个只能存储0、1的整型数组，可以随时对任意⼀位进⾏运算。下标在bitmap中成为偏移量。\",\"命令\",\"描述\",\"setbit\",\"设置Bitmaps中某个偏移量的值（0或1）(offset:偏移量从0开始)\",\"getbit\",\"获取Bitmaps中某个偏移量的值（偏移量不存在，也是返回0）\",\"bitcount[start end]\",\"统计字符串被设置为1的bit数。\",\"bitop and(or/not/xor) [key…]\",\"bitop是⼀个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（⾮） 、 xor（异或） 操作并将结果保存在destkey中。\"]},\"400\":{\"h\":\"Hyperloglog类型\",\"t\":[\"Redis HyperLogLog 是⽤来做基数统计的算法，HyperLogLog 的优点是，在输⼊元素的数量或者体积⾮常⾮常⼤时，计算基数所需的空间总是固定 的、并且是很⼩的。\",\"在 Redis ⾥⾯，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对⽐。\",\"但是，因为 HyperLogLog 只会根据输⼊元素来计算基数，⽽不会储存输⼊元素本身，所以HyperLogLog 不能像集合那样，返回输⼊的各个元素。\",\"命令\",\"描述\",\"pfadd <element> [element ...]\",\"将所有元素添加到指定HyperLogLog数据结构中。如果执⾏命令后HLL估计的近似基数发⽣变化，则返回1，否则返回0。\",\"pfcount [key ...]\",\"计算HLL的近似基数，可以计算多个HLL，⽐如⽤HLL存储每天的UV，计算⼀周的UV可以使⽤7天的UV合并计算即可\",\"pfmerge [sourcekey ...]\",\"将⼀个或多个HLL合并后的结果存储在另⼀个HLL中，⽐如每⽉活跃⽤户可以使⽤每天的活跃⽤户来合并计算可得\"]},\"401\":{\"h\":\"Redis入门 - 事务\",\"t\":[\"Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：\",\"批量操作在发送 EXEC 命令前被放入队列缓存。\",\"收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。\",\"在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。\",\"一个事务从开始到执行会经历以下三个阶段：\",\"开始事务。\",\"命令入队。\",\"执行事务。\",\"单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。\",\"事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。\",\"Redis事务命令\",\"开始事务：multi\",\"执行事务：exec\",\"取消事务：discard\",\"监视一个(或多个) key：watch key [key ...]\",\"监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\",\"取消监视：unwatch\",\"取消 WATCH 命令对所有 key 的监视。\",\"注意\",\"Redis的事务和MySQL的事务是不同的，MySQL的事务要么全部执行，要么全部不执行。而Redis仅仅是一组命令的顺序执行集合，事务不会回滚，也不会随着报错而停止。\"]},\"402\":{\"h\":\"Redis原理 - IO详解\"},\"403\":{\"h\":\"用户空间与内核空间\",\"t\":[\"任何Linux 系统的发行版，其系统内核都是 Linux 。我们的应用都需要通过 Linux 内核与硬件交互。\",\"为了避免用户应用导致冲突甚至内核崩溃，用户应用与内核是分离的：\",\"内存的寻址空间划分为两部分：内核空间、用户空间\",\"32 位的操作系统，寻址地址就为 0 ~ 232\",\"用户空间内只能执行受限的指令（Ring3），而且不能直接调用系统资源，必须通过内核提供的接口访问\",\"内核空间可以执行特权命令（Ring0），调用一切系统资源\",\"当进程运行在用户空间时称为用户态，运行在内核空间时称为内核态。\",\"Linux 系统为了提高 IO 效率，会在用户空间和内核空间都加入缓冲区：\",\"写数据时，要把用户缓冲数据拷贝到内核缓冲区，然后写入设备\",\"读数据是，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区\",\"5种IO模型\",\"阻塞 IO（Blocking IO）\",\"非阻塞 IO（Nonblocking IO）\",\"IO 多路复用（IO Multiplexing）\",\"信号驱动 IO（Signal Driven IO）\",\"异步 IO（Asynchronous IO）\"]},\"404\":{\"h\":\"阻塞IO\",\"t\":[\"顾名思义，阻塞 IO 就是在等待数据和拷贝数据到用户空间两个阶段过程中都必须阻塞等待。\",\"用户线程发出 IO 请求\",\"内核会去查看数据是否准备就绪，如果没有准备就绪那么就会一直等待，而用户线程就会处于阻塞状态，用户线程处于阻塞状态\",\"当数据准备就绪以后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除阻塞状态\",\"可以看到，阻塞IO模型中，用户进程在两个阶段都是阻塞状态。\"]},\"405\":{\"h\":\"非阻塞IO\",\"t\":[\"非阻塞 IO 的 recvfrom 操作会立即返回结果，而不是阻塞用户进程。\",\"等待数据阶段，如果数据没有就绪，则立刻返回 EWOULDBLOCK。这个过程用户进程是非阻塞的，但是用户进程会一直发起请求，忙轮训，直到内核处理才开始停止轮训。\",\"数据就绪以后，再将数据从内核中拷贝至用户空间。这个阶段用户进程是阻塞的。\",\"可以看到，非阻塞 IO 模型中，用户进程在第一个阶段是非阻塞的，在第二个阶段是阻塞的。虽然是非阻塞的，但是性能并没有得到提高，而且忙等机制会导致 CPU 空转，CPU 使用率暴增。\"]},\"406\":{\"h\":\"IO多路复用\",\"t\":[\"无论是阻塞 IO 还是非阻塞 IO，用户应用在一阶段都是需要调用 recvfrom 来获取数据，差别在于无数据时的处理方式：\",\"如果调用 recvfrom 时，恰好没有数据，阻塞 IO 会使进程阻塞，非阻塞 IO 会使CPU空转，均无法发挥 CPU 的作用。\",\"如果调用 recvfrom 时，恰好有数据，则用户进程可以直接进入第二阶段，读取并处理数据\",\"比如服务端处理客户端Socket 请求时，在单线程情况下，只能依次处理每一个 Socket，如果正在处理 socket 恰好未就绪（数据不可读或者不可写），线程就会被阻塞，所有其它客户端 socket 都必须等待，性能自然很差。\",\"文件描述符（File Descriptor）：简称FD，是一个从 0 开始递增的无符号整数，用来关联 Linux 中的一个文件。在 Linux 中一切皆文件，例如常规文件、视频、硬件设备等，当然也包括网络套接字（Socket）\",\"IO多路复用：是利用单个线程来同时监听多个 FD ，并在某个 FD 可读、可写时得到通知，从而避免无效的等待，充分利用 CPU 资源。\",\"实现 IO 多路复用的技术有三种方式：\",\"select\",\"poll\",\"epoll\",\"差异：\",\"select 和 poll 只会通知用户进程有FD就绪，但是不确定是那个 FD，需要用户进程逐个遍历 FD 来确认\",\"epoll 会通知用户进程 FD 就绪的同时，把已就绪的 FD 写入用户空间，直接能定位到就绪的 FD\"]},\"407\":{\"h\":\"SELECT\",\"t\":[\"select 是 Linux 中最早的 I/O 多路复用的实现方案：\",\"// 定义类型别名 __fd_mask，本质是 long int typedef long int __fd_mask; /* fd_set 记录要监听的fd集合，及其对应状态 */ typedef struct { // fds_bits是long类型数组，长度为 1024/32 = 32 // 共1024个bit位，每个bit位代表一个fd，0代表未就绪，1代表就绪 __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS]; // ... } fd_set; // select函数，用于监听多个fd的集合 int select( int nfds,// 要监视的fd_set的最大fd + 1 fd_set *readfds,// 要监听读事件的fd集合 fd_set *writefds,// 要监听写事件的fd集合 fd_set *exceptfds, // 要监听异常事件的fd集合 // 超时时间，nulT-永不超时;0-不阻塞等待;大于0-固定等待时间 struct timeval *timeout ); \",\"具体流程如下：\",\"用户空间中创建 fd_set rfds\",\"假如要监听 fd = 1，2，5\",\"用户空间中执行 selec(5 + 1, rfds, null, null, 3)\",\"将用户空间中创建的 fd_set rfds 数组拷贝到内核空间中\",\"内核空间中遍历拷贝后的 fd_set rfds 数组\",\"如果没有就绪，则将该位置的 fd 设置为0。\",\"select模式存在的问题：\",\"需要将整个fd_set从用户空间拷贝到内核空间，select结束还要再次拷贝回用户空间\",\"select无法得知具体是哪个fd就绪，需要遍历fd_set\",\"fd_set监听的fd数量不能超过1024、\"]},\"408\":{\"h\":\"POLL\",\"t\":[\"poll 模式对 select 模式做了简单改进，但是性能提升并不明显，部分关键代码如下：\",\"// pollfd 中的事件类型 #define POLLIN //可读事件 #define POLLOUT //可写事件 #define POLLERR //错误事件 #define POLLNVAL //fd未打开 // pollfd结构 struct pollfd{ int fd; // 要监听的 fd *short int events; // 要监听的事件类型:读、写、异常 short int revents; // 实际发生的事件类型 } // poll函数 int poll( struct pollfd xfds, // pollfd数组，可以自定义大小 nfds_t nfds, // 数组元素个数 int timeout // 超时时间 ); \",\"IO 流程：\",\"创建 pollfd 数组，向其中添加关注的fd 信息，数组大小自定义\",\"调用 poll 函数，将 pollfd 数组拷贝到内核空间，转链表存储，无上限\",\"内核遍历 fd ，判断是否就绪\",\"数据就绪或超时后，拷贝 pollfd 数组到用户空间，返回就绪 fd 数量 n\",\"用户进程判断 n 是否大于 0\",\"大于 0 则遍历 pollfd 数组，找到就绪的 fd\",\"与 SELECT 比较：\",\"select 模式中的 fd_set 大小固定值为 1024 ，而 pollfd 在内核中采用链表，理论上是无限的\",\"监听的 FD 越多，每次遍历消耗的时间也越久，性能反而会下降\"]},\"409\":{\"h\":\"EPOLL\",\"t\":[\"epoll 模式是对 select 和 poll 模式的改进， 提供了三个函数：\",\"struct eventpoll{ //... struct rb_root rbr; // 一颗红黑树，记录要监听的fd struct list_head rdlist; // 一个链表，记录就绪的 FD //... } // 1.会在内核创建eventpolL结构体，返回对应的句柄epfd int epoll create(int size); // 2.将一个FD添加到epol的红黑树中，并设置ep_poli_calLback // calTback触发时，就把对应的FD加入到rdlist这个就绪列表中 int epoll _ctl( int epfd, // epoll实例的句柄 int op, // 要执行的操作，包括：ADD、MOD、DEL int fd, // 要监听的 FD struct epoll_event *event // 要监听的事件类型: 读、写、异常等 ); // 3.检查rdlist列表是否为空，不为空则返回就绪的FD的数量 int epoll wait( int epfd, // eventpoll 实例的句柄 struct epoll_event *events, // 空event 数组，用于接收就绪的 FD int maxevents, // events 数组的最大长度 int timeout // 超时时间，-1永不超时;0不阻塞;大于0为阻塞时间 ); \"]},\"410\":{\"h\":\"事件通知机制\",\"t\":[\"当 FD 有数据可读时，我们调用 epoll_wait 就可以得到通知，但是时间通知的模式有两种：\",\"LevelTriggered：简称 LT。当 FD 有数据可读时，会重复通知多次，直至数据处理完成。是 epoll 的默认模式。\",\"EdgeTriggered：简称 ET。当 FD 有数据可读时，只会通知一次，不管数据是否被处理完成\",\"举个例子\",\"假设一个客户端 Socket 对应的 FD 已经注册到了 epoll 实例中\",\"客户端 Socket 发送了 2kb 的数据\",\"服务端调用 epoll_wait ，得到通知说 FD 就绪\",\"服务端从 FD 读取了 1kb 的数据\",\"回到步骤三（再次调用 epoll_wait ，形成循环）\",\"结论\",\"ET 模式避免了 LT 模式可能出现的惊群现象\",\"ET 模式最好结合非阻塞 IO 读取 FD 数据，相比 LT 会复杂一些\"]},\"411\":{\"h\":\"WEB服务流程\",\"t\":[\"基于 epoll 模式的 web 服务的基本流程图：\"]},\"412\":{\"h\":\"总结\",\"t\":[\"select 模式的存在的三个问题：\",\"能监听的 FD 最大不超过 1024 个\",\"每次 select 都需要把所有要监听的 FD 都拷贝到内核空间\",\"每次都要遍历所有 FD 来判断就绪状态\",\"poll 模式的问题：\",\"poll 利用链表解决了 select 中监听 FD 上限的问题，但是依然要遍历所有的 FD ，如果监听较多，性能会下降\",\"epoll 模式中如何解决这些问题:\",\"基于 epoll 实例中的红黑树保存要监听的 FD ，理论上无上限，而且增删改查效率都非常高，性能不会随监听的 FD 数量增多而产生显著的下降\",\"每个 FD 只需要执行一次 epoll_ctl 添加到红黑树，以后每次 epoll_wait 无需传递任何参数，无需重复拷贝 FD 到内核空间\",\"内核会将就绪的 FD 直接拷贝到用户空间的指定位置，用户进程无需遍历所有 FD 就能知道就绪的 FD 是谁\"]},\"413\":{\"h\":\"信号驱动IO\",\"t\":[\"信号驱动 IO 是与内核建立 SIGIO 的信号关联并设置回调，当内核有 FD 就绪时，会发出 SIGIO 信号通知用户，期间用户应用可以执行其他业务，无需阻塞等待。\",\"当有大量 IO 操作时，信号较多，SIGIO 处理函数不能及时处理可能导致信号队列溢出。\",\"而且内核空间与用户空间的频繁信号交互性能也较低。\"]},\"414\":{\"h\":\"异步IO\",\"t\":[\"异步 IO 的整个过程都是非阻塞的，用户进程调用完异步 API 后就可以去做其他事情，内核等待数据就绪并拷贝到用户空间后才会递交信号，通知用户进程。\",\"在异步 IO 模型中，用户进程在两个阶段都是非阻塞的状态。\",\"异步 IO 模型虽然很简单，但是在高并发的访问下，内核中会处理大量请求，容易导致内核崩溃。\"]},\"415\":{\"h\":\"同步和异步\",\"t\":[\"IO 操作是同步还是异步，关键看数据在内核空间与用户空间的拷贝过程（数据读写的IO操作），也就是阶段二是同步还是异步：\"]},\"416\":{\"h\":\"Redis原理 - 五种数据类型的底层结构关系\"},\"417\":{\"h\":\"字符串对象String\",\"t\":[\"String 是 Redis 中最常见的数据存储类型。\",\"其基本编码方式是 RAW ，基于简单动态字符串（SDS）实现，存储上限为 512 MB。\",\"如果存储的 SDS 长度小于 44 字节，则会采用 EMBSTR 编码，此时 object head 与 SDS 是一段连续空间。申请内存时只需要调用一次内存分配函数，效率更高。\",\"如果存储的字符串是整数型，并且大小在 LONG_MAX 范围内，则会采用INT 编码：直接将数据保存在 RedisObject 的 ptr 指针位置（刚好 8 字节），不再需要 SDS 了。\"]},\"418\":{\"h\":\"列表对象List\",\"t\":[\"Redis 的 List 结构类似一个双端链表，可以从首、尾操作列表中的元素：\",\"在 3.2 版本之前，Redis 采用 ZipList 和LinkedList 来实现 List，当元素数量小于512并且元素大小小于 64 字节时，采用 ZipList 编码，超过则采用 LinkedList 编码\",\"在 3.2 版本之后，Redis 统一采用 QuickList 来实现List\"]},\"419\":{\"h\":\"哈希对象Hash\",\"t\":[\"哈希对象的键是一个字符串类型，值是一个键值对集合。\",\"哈希对象的编码可以是 ziplist 或者 hashtable；对应的底层实现有两种, 一种是ziplist, 一种是dict。\",\"哈希结构与 Redis 中的 Zset 非常类似：\",\"都是键值存储\",\"都需求根据键获取值\",\"键必须唯一\",\"因此 Hash 底层采用的编码与 Zset 基本一致，只需要把排序有关的 SkipList 去掉即可：\",\"Hash 结构默认采用了 ZipList 编码，用以节省内存。ZipList 中相邻的两个 entry 分别保存 field 和 value\",\"当数据量较大时 Hash 结构会转换为 HT 编码，也就是 Dict ，触发条件有两个：\",\"ZipList 中的元素数量超过了 hash-max-ziplist-entries（默认512）\",\"ZipList 中的任意 entry 大小超过了 hash-max-ziplist-value（默认64字节）\"]},\"420\":{\"h\":\"集合对象Set\",\"t\":[\"Set 是 Redis 中的单列集合，满足下列特点：\",\"不保证有序\",\"保证元素唯一（可以判断元素是否存在）\",\"求交集、并集、差集\",\"Set 是 Redis 中的集合，不一定确保元素有序，可以满足元素唯一、查询效率要求极高。\",\"为了查询效率和唯一性，set 采用 HT 编码（Dict）。Dict 中的 key 用来存储元素，value 统一为 null\",\"当存储的所有数据都是整数，并且元素数量不超过set-max-intset-entries时，Set 会采用 IntSet 编码，以节省内存。每一次插入数据时都会判断数据是否为整数。\"]},\"421\":{\"h\":\"有序集合对象ZSet\",\"t\":[\"ZSet 也就是 SortedSet ，其中每一个元素都需要指定一个score 值和 member 值。\",\"可以根据score 值排序\",\"member 必须唯一\",\"可以根据 member 查询分数\",\"因此，ZSet 底层数据结构必须满足键值存储、键必须唯一、可排序这几个需求。\",\"SkipList：可以排序，并且可以同时存储 score 和 ele 值（member）。可以实现排序功能\",\"HT(Dict)：可以键值存储，并且可以根据 key 找 value。可以实现快速访问功能\",\"为了同时实现排序和快速访问的功能，实际上的 ZSet 底层同时使用了两种结构，但由于编码方式只能写一种，这里写的是 OBJ_ENCODING_SKIPLIST\",\"当元素数量不多时，HT 和 SkipList 的优势不明显，而且更耗费内存。因此 ZSet 还采用 ZipList 结构来节省内存，不过需要同时满足连个条件：\",\"元素数量小于 zset_max_ziplist_entries，默认值 128\",\"每个元素都小于 zset_max_ziplist_value字节，默认值 64\",\"ZipList 本身没有排序功能，也没有键值对的概念，因此需要有 zset 通过编码实现：\",\"ZipList 是连续内存，因此 score 和 element 是紧挨在一起的两个 entry ，element在前，score 在后。\",\"score 越小越接近队首，score 越大越接近队尾，按照 score 值升序排列\"]},\"422\":{\"h\":\"Redis原理 - 通信协议RESP\"},\"423\":{\"h\":\"RESP协议\",\"t\":[\"Redis 是一个 CS 架构的软件，通信一般分两步（不包括pipeline 和 PubSub）：\",\"客户端（client）向服务端（server）发送一条命令\",\"服务端解析并执行命令，返回响应结果给客户端\",\"因此客户端发送命令的格式、服务端响应结果的格式必须有一个规范，这个规范就是通信协议。\",\"CS架构\",\"CS架构一般指服务器-客户机。 服务器-客户机，即Client-Server(C/S)结构。C/S结构通常采取两层结构。服务器负责数据的管理，客户机负责完成与用户的交互任务。\",\"百度百科-CS架构\",\"而在 Redis 中采用的是 RESP 协议（Redis Sericlization Protocol）协议：\",\"Redis 1.2 版本引入了 RESP 协议\",\"Redis 2.0 版本中成为与 Redis 服务端通信的标准，成为 RESP 2\",\"Resis 6.0 版本中，从 RESP2 升级到了 RESP3 协议，增加了更多数据类型并且支持 6.0 的新特性——客户端缓存\",\"但是目前，默认使用的还是 RESP2 协议，也是我们需要重点掌握的协议。\",\"在 RESP 中，通过首字节的字符来区分不同数据类型，常用的数据类型包括5种：\",\"单行字符串：首字节是 ‘+’，后面跟上单行字符串，以CRLF（\\\"\\\\r\\\\n\\\"）结尾，例如返回“OK”：\\\"+OK\\\\r\\\\n\\\"\",\"错误(Errors)：首字节是 '-'，与单行字符串格式一样，只是字符串是异常信息，例如：\\\"-Error message\\\\r\\\\n\\\"\",\"数值：首字节是 ':' ，后面跟上数字格式的字符串，以 CRLF 结尾。例如：\\\":10\\\\r\\\\n\\\"\",\"多行字符串：首字节是 '$'，表示二进制安全的字符串，最大支持 512 MB \",\"如果大小为0，则代表空字符串：\\\"$0\\\\r\\\\n\\\\r\\\\n\\\"\",\"如果大小为-1，则代表不存在：\\\"$-1\\\\r\\\\n\\\"\",\"这种方式通过记录字符串长度，来达到存储特殊字符的字符串的目的。例如存储 hello字符串，底层存储为：\\\"$5\\\\r\\\\nhello\\\\r\\\\n\\\"\",\"数组：首字节是 '*'，后面跟上数组元素个数，再跟上元素，元素数据类型不限，可以是上述所有类型，还可以是数组。例如：\",\"*4\\\\r\\\\n $3\\\\r\\\\nset\\\\r\\\\n $4\\\\r\\\\nname\\\\r\\\\n $6\\\\r\\\\n小鹏\\\\r\\\\n *2\\\\r\\\\n$3\\\\r\\\\nage\\\\r\\\\n:10\\\\r\\\\n \",\"中文字符，一个占3个字节。\"]},\"424\":{\"h\":\"自定义客户端\",\"t\":[\"基于 Socket 自定义 Redis 客户端。\",\"class MyRedisClient{ static Socket s; static PrintWriter writer; static BufferedReader reader; public static void main(String[] args) { try { // 1.建立连接 String host = \\\"127.0.0.1\\\"; int port = 6379; s = new Socket(host, port); // 2.获取输出流、输入流 writer = new PrintWriter(new OutputStreamWriter(s.getOutputStream(), StandardCharsets.UTF_8)); reader = new BufferedReader(new InputStreamReader(s.getInputStream(), StandardCharsets.UTF_8)); // 3.发出请求 // 3.1.获取授权 auth codermast sendRequest(\\\"auth\\\", \\\"codermast\\\"); Object obj = handleResponse(); System.out.println(\\\"obj = \\\" + obj); // 3.2.set name 小鹏 sendRequest(\\\"set\\\", \\\"name\\\", \\\"小鹏\\\"); // 4.解析响应 obj = handleResponse(); System.out.println(\\\"obj = \\\" + obj); // 3.2.set name 小鹏 sendRequest(\\\"get\\\", \\\"name\\\"); // 4.解析响应 obj = handleResponse(); System.out.println(\\\"obj = \\\" + obj); // 3.2.set name 小鹏 sendRequest(\\\"mget\\\", \\\"name\\\", \\\"num\\\", \\\"msg\\\"); // 4.解析响应 obj = handleResponse(); System.out.println(\\\"obj = \\\" + obj); } catch (IOException e) { e.printStackTrace(); } finally { // 5.释放连接 try { if (reader != null) reader.close(); if (writer != null) writer.close(); if (s != null) s.close(); } catch (IOException e) { e.printStackTrace(); } } } private static Object handleResponse() throws IOException { // 读取首字节 int prefix = reader.read(); // 判断数据类型标示 switch (prefix) { case '+': // 单行字符串，直接读一行 return reader.readLine(); case '-': // 异常，也读一行 throw new RuntimeException(reader.readLine()); case ':': // 数字 return Long.parseLong(reader.readLine()); case '$': // 多行字符串 // 先读长度 int len = Integer.parseInt(reader.readLine()); if (len == -1) { return null; } if (len == 0) { return \\\"\\\"; } // 再读数据,读len个字节。我们假设没有特殊字符，所以读一行（简化） return reader.readLine(); case '*': return readBulkString(); default: throw new RuntimeException(\\\"错误的数据格式！\\\"); } } private static Object readBulkString() throws IOException { // 获取数组大小 int len = Integer.parseInt(reader.readLine()); if (len <= 0) { return null; } // 定义集合，接收多个元素 List<Object> list = new ArrayList<>(len); // 遍历，依次读取每个元素 for (int i = 0; i < len; i++) { list.add(handleResponse()); } return list; } // set name 小鹏 private static void sendRequest(String ... args) { writer.println(\\\"*\\\" + args.length); for (String arg : args) { writer.println(\\\"$\\\" + arg.getBytes(StandardCharsets.UTF_8).length); writer.println(arg); } writer.flush(); } } \"]},\"425\":{\"h\":\"Redis原理 - 数据结构的底层实现\"},\"426\":{\"h\":\"动态字符串SDS\"},\"427\":{\"h\":\"基本概念\",\"t\":[\"Redis 中保存的 Key 是字符串，Value 往往是字符串或者字符串的集合。可见字符串是 Redis 中最常见的一种数据结构。\",\"Redis 是使用 C 语言来编写的，C 语言中也有字符串，但是 Redis 中并没有直接使用 C 语言的字符串，这是因为 C 语言中字符串存在着很多的问题：\",\"获取字符串长度需要进行运算\",\"非二进制安全，不能包含特殊字符\",\"因为C字符串以空字符作为字符串结束的标识，而对于一些二进制文件（如图片等），内容可能包括空字符串，因此C字符串无法正确存取；而所有 SDS 的API 都是以处理二进制的方式来处理 buf 里面的元素，并且 SDS 不是以空字符串来判断是否结束，而是以 len 属性表示的长度来判断字符串是否结束。\",\"不可修改，C 语言的字符串实质为字符数组，以\\\\0结尾。\",\"为了解决以上问题，Redis 自己构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称为SDS\"]},\"428\":{\"h\":\"底层实现\",\"t\":[\"SDS 在 Redis 中的实现在 /src/sds.h、/src/sds.c 文件中，具体的核心实现如下：\",\"/* Note: sdshdr5 is never used, we just access the flags byte directly. * However is here to document the layout of type 5 SDS strings. */ struct __attribute__ ((__packed__)) sdshdr5 { unsigned char flags; /* 3 lsb of type, and 5 msb of string length */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr8 { uint8_t len; /* used */ uint8_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr16 { uint16_t len; /* used */ uint16_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr32 { uint32_t len; /* used */ uint32_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; struct __attribute__ ((__packed__)) sdshdr64 { uint64_t len; /* used */ uint64_t alloc; /* excluding the header and null terminator */ unsigned char flags; /* 3 lsb of type, 5 unused bits */ char buf[]; }; \",\"标识符对应信息\",\"标识信息\",\"对应值\",\"SDS_TYPE_5\",\"0\",\"SDS_TYPE_8\",\"1\",\"SDS_TYPE_16\",\"2\",\"SDS_TYPE_32\",\"3\",\"SDS_TYPE_64\",\"4\",\"例如，一个包含字符串name的sds结构如下：\"]},\"429\":{\"h\":\"内存预分配\",\"t\":[\"SDS 之所以叫做动态字符串，是因为其具备动态扩容的能力，例如一个内容为 “hi” 的 SDS\",\"假如我们要给 SDS 追加一段字符串 “,Amy” ，这里因为空间不够，需要申请新的内存空间：\",\"如果新字符串小于 1M ，则新空间扩展后字符串长度的两倍 + 1\",\"如果新字符串大于 1M ，则新空间为扩展后字符串长度 + 1M + 1。称为内存预分配\",\"优点\",\"获取字符串长度的时间复杂度为 O(1)\",\"支持动态扩容\",\"减少内存分配次数\",\"二进制安全，字符串可存储特殊字符\"]},\"430\":{\"h\":\"SDS小结\",\"t\":[\"Redis的字符串表示为 SDS ，而不是 C 字符串（以\\\\0结尾的char*）， 它是 Redis 底层所使用的字符串表示，它被用在几乎所有的 Redis 模块中。可以看如下对比：\",\"一般来说，SDS 除了保存数据库中的字符串值以外，SDS 还可以作为缓冲区（buffer）：包括 AOF 模块中的AOF缓冲区以及客户端状态中的输入缓冲区。\"]},\"431\":{\"h\":\"整数集IntSet\"},\"432\":{\"h\":\"基本概念\",\"t\":[\"IntSet 是 Redis 中 Set 集合类型的一种实现方式，基于整数数组来实现，并且具备长度可变、有序等特征。\",\"当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis 就会使用整数集合作为集合键的底层实现。\",\"为了方便查找，Redis 会将 IntSet 中所有的整数按照升序依次保存在 contents 数组中，结构图如下\",\"现在数组中每个数字都保存在 int16_t 的范围内，因此采用的编码方式为 INTSET_ENC_INT16，每部分占用的字节大小为：\",\"encoding：4 字节\",\"length：4 字节\",\"contents：2 字节 * 3 = 6 字节\",\"共计 4 + 4 + 6 = 16 字节\"]},\"433\":{\"h\":\"底层实现\",\"t\":[\"typedef struct intset { uint32_t encoding; uint32_t length; int8_t contents[]; } intset; \"]},\"434\":{\"h\":\"数组扩容\",\"t\":[\"当在一个 int8 类型的整数集合中添加一个 int16 类型的数据元素，那么整个整数集合中的元素都会升级为 int16 类型，内存不够时还会进行扩容。具体的步骤如下：\",\"根据新元素的数据类型，改变编码方式。按照新的编码方式及元素的个数进行数组扩容\",\"倒序依次将数组中的元素拷贝到扩容后的正确位置。倒序是为了防止正序拷贝时的数据覆盖，不会产生数据丢失。\",\"把待添加的元素放入数组末尾\",\"修改 encoding 信息，并将length + 1，维护好各项属性\",\"底层实现\",\"插入元素\",\"代码详情\",\"/* Insert an integer in the intset */ intset *intsetAdd(intset *is, int64_t value, uint8_t *success) { // 获取当前值编码 uint8_t valenc = _intsetValueEncoding(value); // 要插入的位置 uint32_t pos; if (success) *success = 1; // 判断编码是不是超过了当前 intset 的编码 if (valenc > intrev32ifbe(is->encoding)) { // 超出编码，需要升级 return intsetUpgradeAndAdd(is,value); } else { // 在当前 intset 中查找值与 value 一样的元素的角标 pos if (intsetSearch(is,value,&pos)) { // 如果找到了，则无需插入，直接结束并返回失败 if (success) *success = 0; return is; } // 数组扩容 is = intsetResize(is,intrev32ifbe(is->length)+1); // 移动数组中 pos 之后的元素到 pos + 1，给新元素腾出空间 if (pos < intrev32ifbe(is->length)) intsetMoveTail(is,pos,pos+1); } // 插入新元素 _intsetSet(is,pos,value); is->length = intrev32ifbe(intrev32ifbe(is->length)+1); return is; } \",\"数组扩容\",\"代码详情\",\"/* Upgrades the intset to a larger encoding and inserts the given integer. */ static intset *intsetUpgradeAndAdd(intset *is, int64_t value) { // 当前 intset 编码 uint8_t curenc = intrev32ifbe(is->encoding); // 新编码 uint8_t newenc = _intsetValueEncoding(value); // 元素个数 int length = intrev32ifbe(is->length); // 判断元素是大于 0 还是，小于 0。小于 0 插入队首，大于 0 插入队尾。 int prepend = value < 0 ? 1 : 0; // 重置编码为新编码 is->encoding = intrev32ifbe(newenc); // 重置数组大小 is = intsetResize(is,intrev32ifbe(is->length)+1); // 倒序遍历，逐个搬运元素到新的位置，_intsetGetEncoding按照旧编码方式查找旧元素 while(length--) // _intsetSet按照新编码方式插入新元素 _intsetSet(is,length+prepend,_intsetGetEncoded(is,length,curenc)); // 插入新元素，prepend 决定是插入队首，还是队尾 if (prepend) _intsetSet(is,0,value); else _intsetSet(is,intrev32ifbe(is->length),value); // 修改数组长度 is->length = intrev32ifbe(intrev32ifbe(is->length)+1); return is; } \",\"数组查询\",\"代码详情\",\"/* Search for the position of \\\"value\\\". Return 1 when the value was found and * sets \\\"pos\\\" to the position of the value within the intset. Return 0 when * the value is not present in the intset and sets \\\"pos\\\" to the position * where \\\"value\\\" can be inserted. */ static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) { int min = 0, max = intrev32ifbe(is->length)-1, mid = -1; int64_t cur = -1; /* The value can never be found when the set is empty */ if (intrev32ifbe(is->length) == 0) { if (pos) *pos = 0; return 0; } else { /* Check for the case where we know we cannot find the value, * but do know the insert position. */ if (value > _intsetGet(is,max)) { if (pos) *pos = intrev32ifbe(is->length); return 0; } else if (value < _intsetGet(is,0)) { if (pos) *pos = 0; return 0; } } while(max >= min) { mid = ((unsigned int)min + (unsigned int)max) >> 1; cur = _intsetGet(is,mid); if (value > cur) { min = mid+1; } else if (value < cur) { max = mid-1; } else { break; } } if (value == cur) { if (pos) *pos = mid; return 1; } else { if (pos) *pos = min; return 0; } } \",\"思考\",\"在添加数据时会进行扩容操作，那么在删除数据时会进行缩容操作吗？那么如果删除掉刚加入的int16类型时，会不会做一个降级操作呢？\",\"答案：不会。主要还是减少开销的权衡。\"]},\"435\":{\"h\":\"IntSet小结\",\"t\":[\"IntSet 可以看做是特殊的整数数组，具备一些特点：\",\"Redis 会确保 IntSet 中的元素唯一、有序\",\"具备类型升级机制，可以节省内存空间\",\"底层采用二分查找方式来查询\"]},\"436\":{\"h\":\"字典/哈希表Dict\"},\"437\":{\"h\":\"基本概念\",\"t\":[\"Dict Dict 由三部分组成，分别是：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）\",\"哈希算法\",\"Redis 计算哈希值和索引值方法如下：\",\"使用字典设置的哈希函数，计算键 key 的哈希值hash = dict->type->hashFunction(key);\",\"使用哈希表的sizemask属性和第一步得到的哈希值，计算索引值index = hash & dict->ht[x].sizemask;\",\"哈希冲突\",\"哈希冲突（Hash Collision）是指在使用哈希表存储数据时，两个或多个不同的键（Key）被哈希函数映射到同一个位置的情况。这种情况会导致数据的存储和查找变得复杂，因此需要采取一些措施来解决哈希冲突。\",\"Dict 中解决哈希冲的方法是 链地址法。\",\"其他办法\",\"除了链地址法解决哈希冲突以外，还可以使用开放地址法、在哈希法、建立公共溢出区等方法解决。\"]},\"438\":{\"h\":\"底层实现\",\"t\":[\"哈希表\",\"typedef struct dictht{ // entry 数组 // 数组中保存的是指向 entry 的指针 dictEntry **table; // 哈希大小 unsigned long size; // 哈希表大小的掩码，总等于 size - 1 unsigned long sizemask; // entry 个数 unsigned long used; } dictht; \",\"哈希节点\",\"typedef struct dictEntry { void *key; // 键 union { void *val; uint64_t u64; int64_t s64; double d; } v; // 值 // 下一个 Entry 的指针 struct dictEntry *next; } dictEntry; \",\"当我们向 Dict 添加键值对时，Redis 首先根据 key 计算出 hash 值（h），然后利用 h & sizemask 来计算元素应该存储到数组中的哪个索引位置。\",\"字典\",\"typedef struct dict{ // dict 类型，内置不同的 hash 函数 dictType *type; // 私有数组，在做特殊 hash 运算时使用 void *privdata; // 一个Dict包含两个哈希表，其中一个是当前数据，另一个一般是空，rehash时使用 dictht ht[2]; // rehash 的进度，-1 表示未进行 long rehashidx; // rehash是否暂停，1则暂停，0则继续] int16_t pauserehash; }dict; \"]},\"439\":{\"h\":\"扩容收缩\",\"t\":[\"当哈希表保存的键值对太多或者太少时，就要通过 rehash(重新散列）来对哈希表进行相应的扩展或者收缩。\",\"扩容\",\"Dict 中的 HashTable 就是数组结合单向链表的实现，当集合中元素较多时，必然导致哈希冲突增多，链表过长，则查询效率会大大降低。\",\"Dict在每次新增键值对时都会检查负载因子，满足以下两种情况时会触发哈希表扩容：\",\"哈希表的 LocalFactor >= 1，并且服务器没有执行 BGSAVE 或者 BGREWRITEAOF 等后台进程。\",\"哈希表的 LocalFactor > 5，无论是否在执行BGSAVE 命令或者 BGREWRITEAOF 命令。\",\"负载因子\",\"负载因子 = 哈希表已保存节点数量 / 哈希表大小。\",\"收缩\",\"Dict 除了扩容以外，每次删除元素时，也会对负载因子做检查，当 LocalFactor < 0.1 时，会做哈希收缩。\",\"扩容收缩的具体步骤如下：\",\"如果执行扩展操作，会基于原哈希表创建一个大小等于 ht[0].used*2n 的哈希表（也就是每次扩展都是根据原哈希表已使用的空间扩大一倍创建另一个哈希表）。相反如果执行的是收缩操作，每次收缩是根据已使用空间缩小一倍创建一个新的哈希表。\",\"重新利用哈希算法，计算索引值，然后将键值对放到新的哈希表位置上。\",\"所有键值对都迁徙完毕后，释放原哈希表的内存空间。\"]},\"440\":{\"h\":\"ReHash\",\"t\":[\"不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的 size 和 sizemask 变化，而 key 的查询与 sizemask 有关。因此必须对哈希表中的每一个 key 重新计算索引，插入新的哈希表，这个过程称为 rehash。具体的步骤如下。\",\"计算新hash表的realesize，值取决于当前要做的是扩容还是收缩： \",\"如果是扩容，则新size为第一个大于等于dict.ht[O].used + 1的 2n\",\"如果是收缩，则新size为第一个大于等于dict.ht[O].used的2n (不得小于4)\",\"按照新的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]\",\"设置dict.rehashidx=0，标示开始rehash\",\"将 dict.ht[O] 中的每一个dictEntry都rehash到dict.ht[1]\",\"将 dict.ht[1] 赋值给dict.ht[O]，给 dict.ht[1] 初始化为空哈希表，释放原来的dict.ht[O]的内存\",\"Dict的 rehash 并不是一次性完成的，如果 Dict 中包含数百万的 entry ，要在一次 rehash 完成，极有可能导致主线程阻塞。因此 Dict 的 rehash 是分多次、渐进式的完成，因此称为渐进式 rehash。\",\"计算新hash表的realesize，值取决于当前要做的是扩容还是收缩：\",\"如果是扩容，则新size为第一个大于等于dict.ht[O].used + 1的 2n\",\"如果是收缩，则新size为第一个大于等于dict.ht[O].used的2n (不得小于4)\",\"按照新的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]\",\"设置dict.rehashidx=0，标示开始rehash\",\"每次执行新增、查询、修改、删除操作时，都检查一下dict.rehashidx是否大于-1，如果是则将dict.ht[0].table[rehashid]的entry链表rehash到dictht[1]，并且将rehashidx++。直至dict.ht[0]的所有数据都rehash到dict.ht[1]\",\"将 dict.ht[1] 赋值给dict.ht[O]，给 dict.ht[1] 初始化为空哈希表，释放原来的dict.ht[O]的内存\",\"将rehashidx赋值为-1，代表rehash结束\",\"在rehash过程中，新增操作，则直接写入ht[1]，查询、修改和删除则会在dict,ht[0]和dict.ht[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空\",\"什么叫渐进式 rehash？\",\"也就是说扩容和收缩操作不是一次性、集中式完成的，而是分多次、渐进式完成的。如果保存在Redis中的键值对只有几个几十个，那么 rehash 操作可以瞬间完成，但是如果键值对有几百万，几千万甚至几亿，那么要一次性的进行 rehash，势必会造成 Redis 一段时间内不能进行别的操作。所以 Redis 采用渐进式 rehash，这样在进行渐进式 rehash 期间，字典的删除查找更新等操作可能会在两个哈希表上进行，第一个哈希表没有找到，就会去第二个哈希表上进行查找。但是进行增加操作，一定是在新的哈希表上进行的。\",\"可以简单的理解为慢慢的将旧的哈希表，慢慢迁移到新的哈希表中。\"]},\"441\":{\"h\":\"Dict小结\",\"t\":[\"Dict的结构\",\"类似java的HashTable，底层是数组加链表来解决哈希冲突\",\"Dict包含两个哈希表，ht[0]平常用，ht[1]用来rehash\",\"Dict的伸缩\",\"当LoadFactor大于5或者LoadFactor大于1并且没有子进程任务时，Dict扩容\",\"当LoadFactor小于0.1时，Dict收缩\",\"扩容大小为第一个大于等于used + 1的2n\",\"收缩大小为第一个大于等于used的2n\",\"Dict采用渐进式rehash，每次访问Dict时执行一次rehash\",\"rehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表\"]},\"442\":{\"h\":\"压缩列表ZipList\",\"t\":[\"ZipList 可以看做一种特殊的双端链表，由一系列特殊编码的连续内存块组成。可以在任意一端压入弹出操作，并且该操作的时间复杂度为 O(1)。\"]},\"443\":{\"h\":\"ZipListEntry\",\"t\":[\"ZipList 中的Entry 并不像普通链表那样记录前后节点的指针，因为记录两个指针要占用 16 个字节，浪费内存，而是采用了如下的结构：\",\"为什么ZipList特别省内存\",\"理解了 ZipList 的 Entry 结构，就很容易理解 ZipList 为什么节省内存。\",\"ziplist 节省内存是相对于普通的list来说的，如果是普通的数组，那么它每个元素占用的内存是一样的且取决于最大的那个元素（很明显它是需要预留空间的）\",\"所以 ziplist 在设计时就很容易想到要尽量让每个元素按照实际的内容大小存储，所以增加 encoding 字段，针对不同的 encoding 来细化存储大小\",\"这时候还需要解决的一个问题是遍历元素时如何定位下一个元素呢？在普通数组中每个元素定长，所以不需要考虑这个问题；但是 ziplist 中每个 data 占据的内存不一样，所以为了解决遍历，需要增加记录上一个元素的 length，所以增加了 prelen 字段。\"]},\"444\":{\"h\":\"Encoding编码\",\"t\":[\"ZipListEntry 中的 Encoding 编码分为字符串和整数两种类型：\",\"字符串：Encoding 是以 \\\"00\\\"、\\\"01\\\"、\\\"10\\\" 开头，则 content 为字符串类型\",\"|00pppppp| ：此时encoding长度为1个字节，该字节的后六位表示entry中存储的string长度，因为是6位，所以entry中存储的string长度不能超过63；\",\"|01pppppp|qqqqqqqq| 此时encoding长度为两个字节；此时encoding的后14位用来存储string长度，长度不能超过16383；\",\"|10000000|qqqqqqqq|rrrrrrrr|ssssssss|ttttttt| 此时encoding长度为5个字节，后面的4个字节用来表示encoding中存储的字符串长度，长度不能超过2^32 - 1;\",\"整数：Encoding 是以 \\\"11\\\" 开头，则 content 为整数类型，且 encoding 固定只占用 1 个字节。\",\"11000000：int16_t （2 bytes）\",\"11010000：int32_t （4 bytes）\",\"11100000：int64_t （8 bytes）\",\"11110000：24位有符号整数 （3 bytes）\",\"11111110：8 位有符号整数 （1 bytes）\",\"1111xxxx：直接在 xxxx 位置保存数值，范围从 0001~1101 减 1 后结果为实际值\",\"11111111 ： zlend\"]},\"445\":{\"h\":\"连锁更新问题\",\"t\":[\"ZipListEntry 节点中保存前一个节点的大小长度，前一个节点长度小于254字节，则使用一个字节保存这个长度，如果大于等于254字节，则使用 5 个字节来保存这个长度。那么当一个节点数据发生变化时，恰好从 254 字节以下变到 254 字节以上，那么 previous_entry_length 属性从1个字节变为5个字节，由于 ZipList 中 Entry 节点是连续存在的，则需要将后续的所有节点进行移动。如果后续空间不足，还需要申请新的空间等问题。\",\"ZipList 这种特殊情况下产生的连续多次空间扩展操作称之为 连锁更新 。新增删除都可能导致连锁更新的发生。ZipList 也不预留内存空间, 并且在移除结点后, 也是立即缩容, 这代表每次写操作都会进行内存分配操作.\"]},\"446\":{\"h\":\"ZipList小结\",\"t\":[\"压缩列表ZipList 可以看做一种连续内存空间的“双端链表”。\",\"列表的节点之间并不是通过指针连接的，而是记录上一个节点和本节点长度来寻址，内存占用较低。\",\"如果列表数据较多，导致链表过长，可能会影响查询效率。查询时只能进行遍历，O(n)\",\"增或者删较大数据时有可能发生连续更新问题。\",\"思考\",\"ZipList 虽然节省内存，但是申请内存必须是连续空间，如果内存占用较多，申请内存的效率很低。怎么办？\",\"为了缓解这个问题，我们必须限制 ZipList 的长度和 Entry 大小。\",\"我们要存储大量数据，超出了 ZipList 最佳的上限该怎么办？\",\"我们可以创建多个 ZipList 来分片存储数据。\",\"数据拆分存储以后比较分散，不方便管理和查找，这多个 ZipList 如何建立联系？\",\"Redis3.2版本引入了新的数据结构 QuickList ，它是一个双端链表，只不过链表中的每个节点都是一个 ZipList 。\"]},\"447\":{\"h\":\"快速列表QuickList\"},\"448\":{\"h\":\"基本概念\",\"t\":[\"QuickList 这个结构是 Redis3.2 版本后新加的, 之前的版本是 list(即 LinkedList)， 用于 String 数据类型中。\",\"QuickList 是一种以 ZipList 为结点的双端链表结构。 从宏观上看，QuickList是一个双向链表，从微观上看，QuickList 的每一个节点都是一个 ZipList。\",\"QuickList示意图\"]},\"449\":{\"h\":\"底层实现\",\"t\":[\"quicklistNote\",\"代码详情\",\"typedef struct quicklistNode { struct quicklistNode *prev; struct quicklistNode *next; unsigned char *entry; size_t sz; /* entry size in bytes */ unsigned int count : 16; /* count of items in listpack */ unsigned int encoding : 2; /* RAW==1 or LZF==2 */ unsigned int container : 2; /* PLAIN==1 or PACKED==2 */ unsigned int recompress : 1; /* was this node previous compressed? */ unsigned int attempted_compress : 1; /* node can't compress; too small */ unsigned int dont_compress : 1; /* prevent compression of entry that will be used later */ unsigned int extra : 9; /* more bits to steal for future usage */ } quicklistNode; \",\"quicklistLZF\",\"代码详情\",\"typedef struct quicklistLZF { size_t sz; /* LZF size in bytes*/ char compressed[]; } quicklistLZF; \",\"quicklistBookmark\",\"代码详情\",\"typedef struct quicklistBookmark { quicklistNode *node; char *name; } quicklistBookmark; \",\"quicklist\",\"代码详情\",\"typedef struct quicklist { quicklistNode *head; quicklistNode *tail; unsigned long count; /* total count of all entries in all listpacks */ unsigned long len; /* number of quicklistNodes */ signed int fill : QL_FILL_BITS; /* fill factor for individual nodes */ unsigned int compress : QL_COMP_BITS; /* depth of end nodes not to compress;0=off */ unsigned int bookmark_count: QL_BM_BITS; quicklistBookmark bookmarks[]; } quicklist; \",\"quicklistIter\",\"代码详情\",\"typedef struct quicklistIter { quicklist *quicklist; quicklistNode *current; unsigned char *zi; /* points to the current element */ long offset; /* offset in current listpack */ int direction; } quicklistIter; \",\"quicklistEntry\",\"代码详情\",\"typedef struct quicklistEntry { const quicklist *quicklist; quicklistNode *node; unsigned char *zi; unsigned char *value; long long longval; size_t sz; int offset; } quicklistEntry; \"]},\"450\":{\"h\":\"限制压缩\",\"t\":[\"限制\",\"为了避免 QuickList 中的每一个 ZipList 中 Entry 过多，Redis 提供了一个配置项：list-max-ziplist-size 来限制。\",\"如果值为正，则代表 ZipList 允许 Entry 个数的最大值\",\"如果值为负，则代表 ZipList 的最大内存大小，分为5种情况： \",\"-1 ：每个 ZipList 的内存占用不能超过 4 kb\",\"-2 ：每个 ZipList 的内存占用不能超过 8 kb\",\"-3 ：每个 ZipList 的内存占用不能超过 16 kb\",\"-4 ：每个 ZipList 的内存占用不能超过 32 kb\",\"-5 ：每个 ZipList 的内存占用不能超过 64 kb\",\"默认值为 -2 ，可以使用 config get list-max-ziplist-size命令查看。\",\"压缩\",\"除了控制 ZipList 的大小，QuickList 还可以对节点的 ZipList 做压缩。通过配置项 list-compress-depth 来控制。因为链表一般都是从首尾访问较多，所以首尾是不压缩的。这个参数是控制首尾不压缩的节点个数：\",\"0 ：特殊值，代表不压缩\",\"1 ：标示 QuickList 的首尾各有 1 个节点不压缩，中间节点压缩\",\"2 ：标示 QuickList 的首尾各有 2 个节点不压缩，中间节点压缩\",\"......依次类推\",\"默认值为0，可以使用config list-compress-depth命令查看\"]},\"451\":{\"h\":\"QuickList小结\",\"t\":[\"QuickList 是一个节点为 ZipList 的双端列表\",\"节点采用 ZipList ，解决了传统链表的内存占用问题\",\"控制 ZipList 大小，解决连续内存空间申请效率问题\",\"中间节点可以压缩，进一步节省了内存\"]},\"452\":{\"h\":\"跳表SkipList\",\"t\":[\"对于于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是 O(n)。比如查找12，需要7次查找。为了解决这个问题，我们可以给链表增加多级的索引指针，方便我们快速找到想要的节点。\"]},\"453\":{\"h\":\"基本概念\",\"t\":[\"SkipList （跳表）首先是链表，但是与传统的链表相比有些差异：\",\"SkipList 中的元素按照升序进行排列存储\",\"节点可能包含多个指针，指针的跨度不同，最多支持 32 级指针。\",\"几级指针代表一次横跨几个节点。\",\"SkipList内存结构\"]},\"454\":{\"h\":\"底层实现\",\"t\":[\"zskiplist\",\"typedef struct zskiplist { struct zskiplistNode *header, *tail; unsigned long length; int level; } zskiplist; \",\"zskiplistNode\",\"typedef struct zskiplistNode { sds ele; double score; struct zskiplistNode *backward; struct zskiplistLevel { struct zskiplistNode *forward; unsigned long span; } level[]; } zskiplistNode; \"]},\"455\":{\"h\":\"SkipList小结\",\"t\":[\"跳跃表是一个双向链表，每个节点都包含 score 和 ele 值\",\"节点按照 score 值排序，score 值一样则按照 ele 字典排序\",\"每个节点都可以包含多层指针，层数是 1 到 32 之间的随机数\",\"不同层指针到下一个节点的跨度不同，层级越高，跨度越大\",\"增删改查效率与红黑树基本一致，实现却更简单\"]},\"456\":{\"h\":\"Redis原理 - 内存策略\",\"t\":[\"Redis 本身是一个典型的 key-value 内存存储数据库，因此所有的 key、value 都保存在之前学习过的 Dict 结构中。不过在其 database 结构体中，有两个 Dict ：一个用来记录 key-value；另外一个用来记录 key-TTL\",\"typedef struct redisDb { dict *dict; // 存放所有 key 和 value 的地方 dict *expires; // 存放每一个 key 及其对应的 TTL 存活时间，只包含设置了 TTL 的 key dict *blocking_keys; dict *ready_keys; dict *watched_keys; int id; // Database ID ：0 ~ 15 long long avg_ttl; unsigned long expires_cursor; // expire 检查时在 dict 中抽样的索引位置 list *defrag_later; // 等待碎片整理的 key 列表 } redisDb; \",\"Redis 是如何知道一个 key 是否过期呢？\",\"答：利用两个 Dict 分别记录 key-value 和 key-ttl\",\"是不是 TTL 到期就立刻删除呢？\",\"答：并不是到期立刻删除，而是采用 惰性删除 和 周期删除。\"]},\"457\":{\"h\":\"删除策略\",\"t\":[\"定时删除：TTL 到期后，立刻删除对应的 key\",\"惰性删除：并不是在 TTL 到期后就立刻删除，而是在访问一个 key 的时候，检查该 key 的存活时间，如果已经过期，才执行删除。\",\"周期删除：是通过一个定时任务，周期性的抽样部分过期的 key，然后执行删除。执行周期有两种：\",\"Redis 会设置一个定时任务 serverCron()，按照 server.hz 的频率来执行过期 key 清理，模式为 SLOW，默认为 10\",\"Redis 的每个事情循环前会调用beforeSleep()函数，执行过期key清理，模式为FAST\",\"SLOW模式规则:\",\"执行频率受server.hz影响，默认为10，即每秒执行10次，每个执行周期100ms。\",\"执行清理耗时不超过一次执行周期的25%.\",\"逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期\",\"如果没达到时间上限 (25ms)并且过期key比例大于10%，再进行一次抽样，否则结束\",\"FAST模式规则 (过期key比例小于10%不执行)\",\"执行频率受beforeSleep()调用频率影响，但两次FAST模式间隔不低于2ms\",\"执行清理耗时不超过1ms\",\"逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期\",\"如果没达到时间上限 (1ms)并且过期key比例大于10%，再进行一次抽样，否则结束\"]},\"458\":{\"h\":\"淘汰策略\",\"t\":[\"内存淘汰就是当 Redis 内存使用达到设置的阈值时，Redis 主动挑选部分 key 删除以释放更多的内存的流程。Redis 会在处理客户端命令的方法 processCommand() 中尝试做内存淘汰。\",\"Redis 一共支持 8 种淘汰策略\",\"noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键。\",\"allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键。\",\"volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键。\",\"allkeys-random：加入键的时候如果过限，从所有key随机删除。\",\"volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐。\",\"volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键。\",\"volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键。\",\"allkeys-lfu：从所有键中驱逐使用频率最少的键。\",\"LRU(Least Recently Used)：最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。\",\"LFU(Least Frequently Used)：最少频率使用，会统计每个 key 的访问频率，值越小淘汰优先级越高。\",\"typedef struct redisObject( unsigned type:4;//对象类型 unsigned encoding:4;// 编码方式 unsigned lru:LRU_BITS; //LRU: 以秒为单位记录最近一次访问时间，长度24bit //LFU: 高16位以分钟为单位记录最近一次访问时间，低8位记录逻辑访问次数 int refcount; // 引用计数，计数为0则可以回收 void *ptr; // 数据指针，指向真实数据 ) robj; \",\"LRU 的访问次数之所以叫做逻辑访问次数，是因为并不是每次 key 被访问都计数，而是通过运算：\",\"生成 0 ~ 1 之间的随机数 R\",\"计算 1 / (旧次数 * lfu_log_factor + 1)，记录为 R，lfu_log_factor 默认为 10\",\"如果 R < P，则计数器 + 1，且最大不超过 255\",\"访问次数会随时间缩减，距离上一次访问时间每隔 lfu_decay_time 分钟（默认 1），计数器 -1\"]},\"459\":{\"h\":\"Redis原理 - Redis网络模型\"},\"460\":{\"h\":\"思考\",\"t\":[\"Redis 到底是单线程还是多线程？\",\"如果仅仅针对 Redis 的核心业务部分（命令处理部分），则是单线程\",\"如果针对 Redis 整体，那么就是多线程\",\"在 Redis 的版本迭代过程中，在两个重要的时间节点上引入了多线程的支持：\",\"Redis v4.0：引入多线程异步处理一些耗时较长的任务，例如异步删除命令 unlike\",\"Redis v6.0：在核心网络模型中引入多线程，进一步提高对多核 CPU 的利用率\",\"为什么Redis要选择单线程?\",\"抛开持久化不谈，Redis是纯内存操作，执行速度非常快，它的性能瓶颈是网络延迟而不是执行速度，因此多线程并不会带来巨大的性能提升。\",\"多线程会导致过多的上下文切换，带来不必要的开销\",\"引入多线程会面临线程安全问题，必然要引入线程锁这样的安全手段，实现复杂度增高，而且性能也会大打折扣\"]},\"461\":{\"h\":\"网络模型\",\"t\":[\"Redis 通过 IO 多路复用来提高网络性能，并且支持各种不同的多路复用实现，并且将这些实现进行封装，提供了统一的高性能事件库 API 库 AE：\",\"ae_epoll\",\"ae_evport\",\"ae_kqueue\",\"ae_select（通用）\",\"这是 Redis 中四种实现方式，根据不同的操作系统，选择不同的实现。\",\"具体的 API 主要有以下几个：\",\"aeApiCreate：创建多路复用程序，比如 epoll_create\",\"aeApiResize\",\"aeApiFree\",\"aeApiAddEvent：注册 FD ，比如 epoll_ctl\",\"aeApiDelEvent：删除 FD\",\"aeApiPoll：等待 FD 就绪，比如 epoll_wait\",\"aeApiName：select、poll\",\"ae_evport 实现方式中独有的API\",\"aeApiLookupPending\",\"aeApiAssociate\",\"在ae.c 文件中可以选择使用那种实现方式。\"]},\"462\":{\"h\":\"单线程网络模型\",\"t\":[\"Redis 6 以前的网络模型都是单线程的，Redis 单线程网络模型的整个过程：\",\"在 aeApiPoll 时，会判断是客户端可读还是服务端可读，调用不同的处理器\",\"当客户端 Client Socket 发起连接请求时，服务端 Server Socket 可读，触发连接应答处理器 tcpAccepthandler\",\"当客户端 Client Socket 发起命令时，客户端可读，触发命令请求处理器 readQueryFromClient\",\"当客户端可写时，会由命令回复处理器进行处理。\",\"核心\",\"本质上就是 IO 多路复用 + 事件派发 的应用。\",\"server socket 不断接收 client socket 的响应，然后根据事件类型的不同，派发给对应的处理器进行处理。\"]},\"463\":{\"h\":\"多线程网络模型\",\"t\":[\"Redis 6.0 版本中引入了多线程，目的是为了提高 IO 读写效率。因此在 解析客户端命令、 写响应结果 时采用了多线程。核心的命令执行、IO 多路复用模块依然是由主线程执行。\",\"通过对单线程网络模型的分析，主要的性能瓶颈在命令的读写处理和命令的响应输出两个方面。\",\"故Redis 在命令读处理和命令的响应两个部分引入了多线程。\",\"注意\",\"性能的瓶颈一般情况下都是 IO 的影响或者 网络请求 的影响。\"]},\"464\":{\"h\":\"底层实现\",\"t\":[\"main\",\"// server.c int main( int argc, char **argv ){ // ... // 初始化服务 initServer(); // ... // 开始监听事件循环 aeMain(server.el); // ... } \",\"initServer\",\"void initServer(void){ // ... // 内部会调用 aeApiCreate(eventLoop)，类似epoll_create server.el= aeCreateEventLoop(server.maxclients+CONFIG_FDSET_INCR); //... // 监听TCP端口，创建ServerSocket，并得到FD listenToPort(server.port,&server.ipfd) // ... // 注册 连接处理器，内部会调用 aeApiAddEvent(&server.ipfd)监听FD createSocketAcceptHandler(&server.ipfd，acceptTcpHandler) // 注册 ae_api_poll 前的处理器 aeSetBeforeSleepProc(server.el,beforeSleep); } \",\"aeMain\",\"void aeMain(aeEventloop*eventloop){ eventLoop->stop = 0; // 循环监听事件 while (!eventLoop->stop){ aeProcessEvents( eventLoop， AE_ALL_EVENTS | AE_CALL_BEFORE_SLEEP | AE_CALL_AFTER_SLEEP); } } \",\"aeProcessEvents\",\"int aeProcessEvents(aeEventLoop *eventLoop,int flags){ // ... 调用前置处理器 beforesleep eventLoop->beforesleep(eventLoop); // 等待FD就绪，类似 epoll_wait numevents = aeApiPoll(eventLoop，tvp); for (j = 0; j < numevents; j ++){ // 遍历处理就绪的 FD，调用对应的处理器 } } \",\"acceptTcpHandler\",\"void acceptTcpHandler( ... ){ // ... // 接收 socket 连接，获取 FD fd = accept(s,sa,len); // ... // 创建 connection ，关联 fd connection *conn = connCreateSocket(); conn.fd = fd; // ... // 内部调用 aeApiAddEvent(fd,READABLE) // 监听 socket 的FD读事件，并绑定读处理器readQueryFromClient connSetReadHandler(conn, readQueryFromClient); } \",\"readQueryFromClient\",\"void readQueryFromClient(connection *conn){ // 获取当前客户端，客户端中有缓冲区用来读和写 client *c = connGetPrivateData(conn); // 获取c->querybuf缓冲区大小 long int qblen = sdslen(c->querybuf); // 读取请求数据到 c->querybuf 缓冲区 connRead(c->conn，c->Guerybuf+qblen，readlen); // 解析缓冲区字符串，转为Redis命令参数存入 c->argv 数组 processInputBuffer(c); // ... // 处理 c->argv 中的命令 processCommand(c); } \",\"processCommand\",\"int processCommand(client *c) { // 根据命令名称，寻找命令对应的command，例如 setCommand c->cmd = c->lastcmd = lookupCommand(c->argv[0]->ptr); // ... // 执行command，得到响应结果，例如ping命令，对应pingCommand c->cmd->proc(c); // 把执行结果写出，例如ping命令，就返回\\\"pong\\\"给cLient // shared.pong是 字符串\\\"pong\\\"的SDS对象 addReply(c, shared.pong); } \",\"addReply\",\"void addReply(client *c，robj *obj) { // 尝试把结果写到 c-buf 客户端写缓存区 if (_addReplyToBuffer(c,obj->ptr,sdslen(obj->ptr)) != C_OK) // 如果c->buf写不下，则写到 c->reply，这是一个链表，容量无上限 _addReplyProtoToList(c,obj->ptr,sdslen(obj->ptr)); // 将客户端添加到server.clients_pending_write这个队列，等待被写出 listAddNodeHead(server.clients_pending_ write,c); } \"]},\"465\":{\"h\":\"Redis原理 - RedisObject对象机制\"},\"466\":{\"h\":\"为什么会设计RedisObject\",\"t\":[\"在 Redis 中，我们的操作都是使用指令进行，而这些的命令中，用于对键处理的命令占据一大部分。有些指令只能针对某些特定的类型，而有些指令却能够针对所有的类型。但是要正确实现这些命令，必须为不同类型的键设置不同的处理方式。比如删除一个列表键和删除一个字符串键的操作过程是不一样的，在底层就需要调用不同的视线方式。\",\"集合类型有字典和整数集合两种不同的底层实现方式，而用户在对集合进行操作时，并不想关心具体的底层实现是什么样的，只要 Redis 能根据自己的指令，完成对应的功能即可，比如对元素进行添加、删除等操作，具体的实现底层对用户来说是透明的，不可见的。\",\"所以 Redis 必须让每个键都带有类型信息, 并且带有其底层的编码方式，拥有这两个信息时，Redis 才能够准确无误的实现用户的指令。那么 RedisObject 对象起码就应该包含3个属性，类型信息、编码方式、实际数据。\"]},\"467\":{\"h\":\"RedisObject\",\"t\":[\"Redis 中的任意数据类型的键和值都会被封装为一个 RedisObject，也叫做 Redis 对象，在/src/server.h文件中实现如下：\",\"typedef struct redisObject { unsigned type:4; unsigned encoding:4; // 共有 11 种编码方式，占据 4 个比特位 unsigned lru:LRU_BITS; /* LRU 表示该对象最后一次被访问的时间，其占用 24 个 bit 位， 便于判断空闲时间太久的key */ int refcount; // 对象引用计数器，计数器为 0 则说明对象无人引用，可以被回收。 void *ptr; // 指针，指向数据的真实存储空间地址。一般为 8 个字节 } robj; \"]},\"468\":{\"h\":\"编码方式\",\"t\":[\"Redis 中会根据存储的数据类型不同，选择不同的编码方式，共包含 11 种不同类型：\",\"编号\",\"编码方式\",\"说明\",\"1\",\"OBJ ENCODING RAW\",\"raw编码动态字符串\",\"2\",\"OBJ ENCODING INT\",\"Long类型的整数的字符串\",\"3\",\"OBJ_ENCODING_HT\",\"hash表(字典dict)\",\"4\",\"OBJ ENCODING ZIPMAP\",\"已废弃\",\"5\",\"OBJ_ENCODING_LINKEDLIST\",\"双端链表\",\"6\",\"OBJ ENCODING ZIPLIST\",\"压缩列表\",\"7\",\"OBJ_ENCODING INTSET\",\"整数集合\",\"8\",\"OBJ ENCODING SKIPLIST\",\"跳表\",\"9\",\"OBJ_ENCODING EMBSTR\",\"embstr的动态字符串\",\"10\",\"OBJ_ENCODING QUICKLIST\",\"快速列表\",\"11\",\"OBJENCODING STREAM\",\"Stream流\"]},\"469\":{\"h\":\"数据类型\",\"t\":[\"Redis 中根据存储的数据类型不同，选择不同的编码方式。每种数据类型使用的编码方式如下：\",\"数据类型\",\"编码方式\",\"编号\",\"说明\",\"OBJ_STRING\",\"int、embstr、raw\",\"0\",\"字符串\",\"OBJ_LIST\",\"LinkedList和ZipList(3.2以前)、QuickList(3.2以后)\",\"1\",\"列表\",\"OBJ_SET\",\"intset、HT\",\"2\",\"集合\",\"OBJ_ZSET\",\"ZipList、HT、SkipList\",\"3\",\"有序集\",\"OBJ_HASH\",\"ZipList、HT\",\"4\",\"哈希表\",\"注意\",\"这里只有 5 种基本类型，而没有提到 3 种特殊类型，是因为这三种特殊类型的底层是使用OBJ_STRING来实现的，并没有新的底层实现方式。\"]},\"470\":{\"h\":\"命令处理\",\"t\":[\"通过前面的描述，Redis 在执行命令时，需要判断所执行的数据类型和编码方式，则 Redis 执行一个处理数据类型命令的时候，Redis 执行以下步骤：\",\"根据给定的key，在数据库字典中查找和他相对应的redisObject，如果没找到，就返回NULL\",\"检查redisObject的type属性和执行命令所需的类型是否相符，如果不相符，返回类型错误\",\"根据redisObject的encoding属性所指定的编码，选择合适的操作函数来处理底层的数据结构\",\"返回数据结构的操作结果作为命令的返回值\",\"比如现在执行LPOP命令：\"]},\"471\":{\"h\":\"对象共享\",\"t\":[\"Redis 一般会把一些常见的值放到一个共享对象中，这样可使程序避免了重复分配的麻烦，也节约了一些CPU时间。\",\"Redis预分配的值对象如下\",\"各种命令的返回值，比如成功时返回的OK，错误时返回的ERROR，命令入队事务时返回的QUEUE，等等\",\"包括0 在内，小于REDIS_SHARED_INTEGERS的所有整数（REDIS_SHARED_INTEGERS的默认值是10000）\",\"注意\",\"共享对象只能被字典和双向链表这类能带有指针的数据结构使用，只有指针才能够指向任意的地址。而整数集合和压缩列表这些只能保存字符串、整数等实际数据的类型，则无法共享。\",\"为什么redis不共享列表对象、哈希对象、集合对象、有序集合对象，只共享字符串对象？\",\"列表对象、哈希对象、集合对象、有序集合对象，本身可以包含字符串对象，复杂度较高。\",\"如果共享对象是保存字符串对象，那么验证操作的复杂度为O(1)\",\"如果共享对象是保存字符串值的字符串对象，那么验证操作的复杂度为O(N)\",\"如果共享对象是包含多个值的对象，其中值本身又是字符串对象，即其它对象中嵌套了字符串对象，比如列表对象、哈希对象，那么验证操作的复杂度将会是O(N的平方)\",\"如果对复杂度较高的对象创建共享对象，需要消耗很大的CPU，用这种消耗去换取内存空间，是不合适的。并且对象的复杂度过高，说明对象的个性较大，共性较少，则使用到该对象的次数和频率都会很低。\"]},\"472\":{\"h\":\"引用计数器\",\"t\":[\"RedisObject 中有 refcount 属性，为对象引用计数器，用于记录对象引用数量。\",\"当计数器为 0 时，则代表该对象没有被引用，则就不会再被使用，那么说明该对象可以被删除销毁。\",\"当新创建一个对象时，它的refcount属性被设置为1。\",\"当对一个对象进行共享时，Redis 将这个对象的 refcount 加一。\",\"当使用完一个对象后，或者消除对一个对象的引用之后，程序将对象的refcount减一。\"]},\"473\":{\"h\":\"Docker - 入门基础\"},\"474\":{\"h\":\"Docker架构\",\"t\":[\"Docker 使用的是客户端-服务端（C/S）架构模式，使用远程 API 来管理和创建 Docker 容器。\",\"Docker 客户端与 Docker 守护进程，负责构建、运行和 分发 Docker 容器。Docker 客户端和守护程序可以 在同一系统上运行，或者您可以将 Docker 客户端连接到远程 Docker 守护进程。Docker 客户端和守护程序使用 REST API 通过 UNIX 进行通信 套接字或网络接口。另一个 Docker 客户端是 Docker Compose， 这样，您就可以使用由一组容器组成的应用程序。\",\"Docker客户端：可以是基于命令行的 Docker 客户端，也可以是基于图形化界面的 Docker 应用。\",\"Docker服务端：一个运行 Docker 服务的机器，可以是本地主机，也可以是远程的服务器。\",\"Docker守护进程：Docker 守护程序 （） 侦听 Docker API 请求并管理 Docker 对象，例如映像、容器、网络和卷。守护进程也可以 与其他守护进程通信以管理 Docker 服务。\",\"Docker桌面：是指在 Windows、Mac、Linux环境中易于安装，可视化构建和共享容器的应用程序。\",\"Docker 的架构和 Redis 的几乎相同。\"]},\"475\":{\"h\":\"Docker镜像加速\",\"t\":[\"Docker 安装好之后，在使用时我们需要拉取 Docker 镜像，这些 Docker 镜像存储在国外的 DockerHub 中，在国内访问不稳定，故此 Docker 官方和国内许多服务商提供了国内的加速器服务。\",\"Docker官方：https://registry.docker-cn.com\",\"阿里云：https://help.aliyun.com/document_detail/60750.html\",\"网易：http://hub-mirror.c.163.com\",\"USTC：https://docker.mirrors.ustc.edu.cn\",\"七牛云：https://reg-mirror.qiniu.com\",\"这里以 Docker 官方提供的国内加速服务为样例，进行配置教程，其他服务商的配置同理。\",\"命令行配置\",\"对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\",\"之后重新启动服务\",\"sudo systemctl daemon-reload sudo systemctl restart docker \",\"可视化界面配置\",\"在设置中的 Docker Engine 内，插入如下配置即可。\",\"\\\"registry-mirrors\\\":[ \\\"https://registry.docker-cn.com\\\" ] \",\"插入，保存后，需要重启才能够生效。\",\"检查镜像是否生效\",\"docker info \",\"Registry Mirrors: https://registry.docker-cn.com/ \",\"只要出现如上的镜像链接，就是已经配置成功了。\"]},\"476\":{\"h\":\"样例剖析\",\"t\":[\"提示\",\"对上一节中的 centos 实例进行分析\",\"Docker 允许在容器内运行应用程序，使用 docker run 命令来在容器内运行一个应用程序。这里同样是个Hello World，不同在于它是在容器内部运行的。\",\"docker run centos:latest /bin/echo \\\"Hello World\\\" \",\"我们看下各个参数的含义：\",\"docker： Docker 的二进制执行文件。\",\"run： 与前面的 docker 组合来运行一个容器。\",\"centos:latest：指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\",\"/bin/echo \\\"Hello world\\\"： 在启动的容器里执行的命令以上命令。\",\"完整的意思可以解释为：Docker 以 centos 最新的（默认是latest) 镜像创建一个新容器，然后在容器里执行 bin/echo \\\"Hello world\\\"，然后输出结果。\"]},\"477\":{\"h\":\"Docker - Compose\",\"t\":[\"在部署应用时，常常使用到不止一个容器，那么在部署容器的时候就需要一个一个进行部署，这样的部署过程也相对来说比较繁琐复杂，也容易出问题，那么有没有一种更为简单的方法呢？\"]},\"478\":{\"h\":\"Compose简介\",\"t\":[\"Compose 是用于定义和运行多容器 Docker 应用程序的工具。Docker Compose 通过一个单独的 docker-compose.yml 模板文件（YAML格式）来定义一组相关联的应用容器，帮助我们实现多个相关联的 Docker 容器的快速部署。\",\"Compose 使用的三个步骤：\",\"使用 Dockerfile 定义应用程序的环境。\",\"使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\",\"最后，执行 docker-compose up 命令来启动并运行整个应用程序。\"]},\"479\":{\"h\":\"Compose安装\",\"t\":[\"Linux：执行以下指令即可安装（最新版替换V后面的版本号即可）\",\"$ sudo curl -L \\\"https://github.com/docker/compose/releases/download/v2.24.3/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose \",\"MacOS：Mac 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Mac 用户不需要单独安装 Compose。\",\"Windows：Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Windows 用户不需要单独安装 Compose。\"]},\"480\":{\"h\":\"Compose样例\",\"t\":[\"version : \\\"3.7\\\" services: app: image: node:18-alpine command: sh -c \\\"yarn install && yarn run dev\\\" ports: - 127.0.0.1:3000:3000 working_dir: /app volumes: - ./:/app web: image: nginx ports: - \\\"80:80\\\" db: image: postgres environment: POSTGRES_DB: example \",\"在该样例中我们定义了 3 个服务，app、web 和 db。\",\"app 服务使用到了 node:18-alpine 会执行一条 Shell 指令，并且进行了端口映射，配置了工作目录，配置了卷。\",\"web 服务使用到了 nginx 镜像，并将容器的 80 端口，映射到宿主机的 80 端口。\",\"db 服务使用了 postgres 镜像，并设置了一个环境变量。\",\"Docker Compose 的配置本质上就是把部署 Docker 容器的过程集中管理起来，方便用户部署和后续维护。核心就是将 Docker 命令转换为 Yaml 文件。\"]},\"481\":{\"h\":\"Compose基本命令\",\"t\":[\"使用Docker-Compose的常见命令包括：\",\"docker-compose up：启动并运行整个应用。\",\"docker-compose down：停止并移除容器、网络、卷和镜像。\",\"docker-compose build：构建或重建服务。\",\"docker-compose logs：查看服务的日志输出。 这些命令为 Docker-Compose 的日常使用提供了基础。\"]},\"482\":{\"h\":\"Compose文件结构\",\"t\":[\"理解docker-compose.yml\",\"docker-compose.yml文件是Docker-Compose项目的核心，它使用YAML格式来描述和配置您的应用服务。这个文件不仅定义了所使用的服务，还包括了这些服务的配置，例如使用的Docker镜像、端口映射、依赖关系、环境变量等。\",\"基本组件\",\"服务（Services）：服务代表一个容器。在docker-compose.yml中，您可以定义一个或多个服务，每个服务可以使用不同的镜像。\",\"网络（Networks）：Docker-Compose允许您定义和使用自己的网络。\",\"卷（Volumes）：卷用于数据持久化和共享数据。您可以定义一个卷，并将其挂载到一个或多个容器中。\",\"文件示例\",\"下面是一个更复杂的docker-compose.yml文件示例，其中包含了网络和卷的定义：\",\"version: '3' services: web: image: nginx ports: - \\\"80:80\\\" networks: - webnet db: image: postgres environment: POSTGRES_DB: example volumes: - db-data:/var/lib/postgresql/data networks: - webnet volumes: db-data: networks: webnet: \",\"在这个示例中，我们创建了一个名为webnet的网络，并且让web和db服务都连接到这个网络。我们还定义了一个卷db-data用于持久化数据库的数据。\",\"配置项解析\",\"环境变量（Environment）：可以设置环境变量，为服务配置必要的参数。\",\"端口映射（Ports）：将容器内的端口映射到宿主机的端口，以便外部访问。\",\"依赖关系（Depends On）：可以指定服务启动的顺序。\"]},\"483\":{\"h\":\"Compose高级应用\",\"t\":[\"网络配置\",\"在Docker-Compose中，您可以自定义网络来实现服务间的隔离或通信。例如，您可以创建一个只供数据库和后端服务使用的内部网络。以下是一个网络配置的例子：\",\"version: '3' services: web: image: nginx networks: - front-end api: image: my-api networks: - front-end - back-end db: image: postgres networks: - back-end networks: front-end: back-end: \",\"在这个配置中，web和api服务都连接到front-end网络，而db和api服务则连接到back-end网络。\",\"卷挂载和数据持久化 卷用于数据持久化和服务间共享数据。在Docker-Compose中，您可以定义卷并将其挂载到服务所需的位置。例如：\",\"version: '3' services: db: image: postgres volumes: - db-data:/var/lib/postgresql/data volumes: db-data: \",\"在这个例子中，我们定义了一个名为db-data的卷，并将其挂载到数据库服务的数据目录。\",\"环境变量和配置文件 Docker-Compose允许您通过环境变量或.env文件来配置服务。这使得您的配置更加灵活，也更适合不同的环境。例如：\",\"version: '3' services: web: image: nginx ports: - \\\"${WEB_PORT}:80\\\" \",\"您可以在.env文件中定义WEB_PORT变量，Docker-Compose会在运行时使用该值。\",\"扩展和复用配置\",\"通过使用extends关键字，您可以在多个项目中重用配置。这样，您可以为不同的环境（如开发、测试和生产）保持共同的基础配置，同时覆盖特定环境的设置。\",\"使用Docker-Compose进行部署\",\"虽然Docker-Compose主要用于开发环境，但它也可以用于生产环境的部署。通过适当的配置和环境准备，Docker-Compose可以作为一个简单的部署工具。\"]},\"484\":{\"h\":\"Docker - 容器互联\",\"t\":[\"在上一个章节中我们学习了 Docker 容器的端口映射，可以将 Docker 容器和本地以及网络中的端口进行连接起来。\",\"但端口映射并不是唯一把 Docker 连接到另一个容器的方法，Docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。\"]},\"485\":{\"h\":\"容器命名\",\"t\":[\"在创建一个容器的时候，Docker 会自动为其进行命名，也可以使用 --name 来自定义 Docker 容器的名称。\",\"创建时自定义名称\",\"docker run -d -P --name codermast training/webapp python app.py \",\"创建后修改名称\",\"docker rename focused_boyd codermast1 \",\"其中 focused_boyd 为原容器名，codermast1 为要自定义的名称。\"]},\"486\":{\"h\":\"创建网络\",\"t\":[\"docker network create -d bridge codermast-test-net \",\"-d：参数指定 Docker 网络类型，有 bridge、overlay。\"]},\"487\":{\"h\":\"连接容器\",\"t\":[\"创建一个容器并连接到该网络\",\"docker run -itd --name codermast_test_net1 --network codermast-test-net ubuntu:20.04 /bin/bash \",\"创建另一个容器并连接到该网络\",\"docker run -itd --name codermast_test_net2 --network codermast-test-net ubuntu:20.04 /bin/bash \",\"验证该网络下的两个容器建立了联系\",\"使用 ping 指令检测，在执行之前请确保安装了该指令工具，如果未安装，执行下列指令安装即可。\",\"apt-get update apt install iputils-ping \",\"这样，codermast_test_net1 容器和 codermast_test_net2 容器建立了互联关系。\",\"如果有多个容器之间需要互相连接，推荐使用 Docker Compose，在后续的章节中会进行详细说明，这里不再赘述。\"]},\"488\":{\"h\":\"Docker - Dockerfile\"},\"489\":{\"h\":\"什么是Dockerfile？\",\"t\":[\"DockerFile 是用于构建 Docker 镜像的文本文件。Docker 是一种容器化平台，允许开发者将应用程序及其依赖项打包到一个可移植的容器中，以确保在不同环境中的一致性和可移植性。\",\"DockerFile 包含一系列指令，这些指令描述了如何构建 Docker 镜像。每个指令都对应一个操作，例如安装软件包、设置环境变量、复制文件等。当 Docker 引擎读取 DockerFile 时，它会逐行执行其中的指令，以最终创建一个镜像。\"]},\"490\":{\"h\":\"示例说明\",\"t\":[\"在空目录下，新建一个名为 Dockerfile 的文件，并在其中添加如下内容。\",\"# 使用官方的基础镜像 FROM ubuntu:latest # 设置工作目录 WORKDIR /app # 复制当前目录下的所有文件到工作目录 COPY . . # 安装依赖 RUN apt-get update && apt-get install -y \\\\ python3 \\\\ python3-pip # 安装应用程序依赖 RUN pip3 install -r requirements.txt # 暴露应用程序的端口 EXPOSE 5000 # 定义启动命令 CMD [\\\"python3\\\", \\\"app.py\\\"] \",\"在上面的示例中：\",\"FROM 指定了基础镜像，即用作构建的起点的操作系统和环境。\",\"WORKDIR 设置了工作目录，即后续指令执行时的当前工作目录。\",\"COPY 将当前目录下的所有文件复制到容器的工作目录。\",\"RUN 执行命令，例如更新包列表、安装软件等。\",\"EXPOSE 声明应用程序将监听的端口。\",\"CMD 定义了容器启动时要执行的默认命令。\",\"通过编写 DockerFile，开发者可以将应用程序的构建过程和运行时环境的配置以代码的方式进行描述，实现了可重复、可移植和可自动化的容器化部署。\"]},\"491\":{\"h\":\"镜像结构\",\"t\":[\"Docker File 文件中的每条指令都会创建一个新的镜像层，当本地环境中已经下载好了某些镜像，那么会直接使用这些镜像，不会重复下载，提高了效率。\",\"但是过多的层也会导致镜像过大，可以适当进行简化，仅在关键部分进行分层。\"]},\"492\":{\"h\":\"编写规则\",\"t\":[\"每条保留字指令都必须为大写字母且后面要跟随至少一个参数\",\"指令顺序执行，遵循从上到下原则\",\"#表示注释\",\"每条指令都会创建一个新的镜像层，并对镜像进行提交\"]},\"493\":{\"h\":\"指令汇总\",\"t\":[\"FROM： 指定基础镜像，作为构建的起点。\",\"FROM ubuntu:latest \",\"WORKDIR： 设置工作目录，后续指令将在该目录下执行。\",\"WORKDIR /app \",\"COPY： 复制文件或目录到容器中。\",\"COPY . . \",\"ADD： 类似于COPY，还支持URL解压缩和tar文件自动解压。\",\"ADD https://example.com/file.tar.gz/app/ \",\"RUN： 执行命令，通常用于安装软件包、更新系统等。\",\"RUN apt-get update && apt-get install -y python3 \",\"ENV： 设置环境变量。\",\"ENV MY_VAR=value \",\"EXPOSE： 声明容器将监听的端口，但并不映射到主机。\",\"EXPOSE 80 \",\"CMD： 定义容器启动时要执行的默认命令。可以被覆盖。\",\"CMD [\\\"python\\\", \\\"app.py\\\"] \",\"ENTRYPOINT： 定义容器启动时要执行的默认命令。不可被覆盖，但可以追加参数。\",\"ENTRYPOINT [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"] \",\"VOLUME： 创建挂载点，用于持久化数据。\",\"VOLUME /data \",\"USER： 设置执行后续命令的用户或 UID。\",\"USER appuser \",\"ARG： 定义构建时的变量，可通过构建命令传递。\",\"ARG version=latest \",\"LABEL： 添加元数据，通常用于描述镜像。\",\"LABEL version=\\\"1.0\\\" description=\\\"My custom image\\\" author=\\\"codermast\\\" \",\"Docker File 指令官方文档\",\"https://docs.docker.com/engine/reference/builder/\"]},\"494\":{\"h\":\"Docker - HelloWorld\",\"t\":[\"提示\",\"在学习本小节之前，你必须确保你正确安装了 Docker，正确安装 Docker 是后续学习的前提，务必确保你已经成功安装。\",\"另外当你在学习本小节时，可能会出现你完全按照教程进行，但是运行结果并不与教程相符合的情况。这种情况不必担心，因为 Docker 镜像源默认是在海外，国内访问可能不够稳定，在后续的章节中会一一解决这些问题。\",\"在本章节中的所有关于 Docker 的专有名词，如 镜像、容器、仓库等，不理解属于正常情况，这些内容都会在后续中进行讲解。\",\"本小节的目的是为了让大家对 Docker 的运行有一个简单的认识，仅此而已。\",\"如未能成功运行，可先学习自本小节起的后续章节，学习完成后可回头做此学习案例。\"]},\"495\":{\"h\":\"Hello World容器样例\",\"t\":[\"拉取 hello-world 镜像\",\"docker pull hello-world:latest \",\"查看本地仓库是否有 hello-world 这个库\",\"docker images \",\"运行这个镜像的容器，即实例\",\"docker run hello-world \"]},\"496\":{\"h\":\"Centos容器样例\",\"t\":[\"在 Centos 环境下执行 /bin/echo \\\"Hello world\\\"指令\",\"拉取 Centos 镜像\",\"docker pull centos \",\"查看本地仓库是否有 Centos7 这个镜像\",\"docker images \",\"运行这个镜像的容器，即实例\",\"docker run centos /bin/echo \\\"Hello world\\\" \"]},\"497\":{\"h\":\"Docker - 安装\"},\"498\":{\"h\":\"MacOS安装\",\"t\":[\"1.使用 Homebrew 安装\",\"brew install docker \",\"安装成功\",\"如果你的电脑没有安装Docker，则会自动进行安装。\",\"已经安装\",\"如果你的电脑已经安装了Docker，就显示已经安装。\",\"提示\",\"由于涉及到应用的安装，系统会进行拦截，在这期间可能会需要输入电脑的密码，输入即可。\",\"2.手动下载安装\",\"手动下载的是 Docker 的桌面管理程序，安装打开后会自动检测系统当前的 Docker 环境。\",\"下载地址：https://docs.docker.com/desktop/install/mac-install/\",\"Docker官方提供了Intel、Apple芯片两种，选择自己电脑的版本下载即可。\",\"M系列芯片，就选择Apple芯片。如：M1、M2、M3系列\",\"Intel 系列芯片，就选择 Intel 芯片。如：i5、i3、i7系列\",\"下载好的文件为 Docker.dmg，双击打开即可。\",\"下载好的文件\",\"双击安装\",\"将 Docker 图标拖动至 Applications 文件夹，或者双击 Docker 图标即可进行安装。\"]},\"499\":{\"h\":\"Windows安装\",\"t\":[\"Docker 并不是一个通用的容器工具，它依赖于已存在并运行的 Linux 内核环境。\",\"Docker 实质上是在已经运行的 Linux 下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的 Linux 主机。\",\"因此，Docker 必须部署在 Linux 内核的系统上。如果其他系统想部署 Docker 就必须安装一个虚拟 Linux 环境。\",\"注\",\"博客园上这篇安装教程写的比较详细，Windows安装遇到问题的朋友可以参考一下。https://www.cnblogs.com/Can-daydayup/p/15468591.html\",\"下面的下载是 Docker 桌面管理程序的下载地址：\",\"官网下载：https://desktop.docker.com/win/main/amd64/Docker Desktop Installer.exe\",\"官网下载速度可能会比较慢，这里提供一个国内的下载镜像，速度会比较快。\",\"国内镜像：https://smartidedl.blob.core.chinacloudapi.cn/docker/20210926/Docker-win.exe\",\"注意\",\"博主目前只有一台 MacOS 的电脑，无法制作更详细的 Windows 平台下的安装教程，后续会更新。\"]},\"500\":{\"h\":\"Linux安装\",\"t\":[\"curl -fsSL https://test.docker.com -o test-docker.sh sudo sh test-docker.sh \",\"直接使用 Docker 官方提供的安装脚本安装即可。\"]},\"501\":{\"h\":\"Docker官方安装教程\",\"t\":[\"Docker Desktop For Windows ：https://docs.docker.com/desktop/install/windows-install/\",\"Docker Desktop For MacOS：https://docs.docker.com/desktop/install/mac-install/\",\"Docker Desktop For Linux：https://docs.docker.com/desktop/install/linux-install/\"]},\"502\":{\"h\":\"Docker - 简介\"},\"503\":{\"h\":\"Docker是什么？\",\"t\":[\"Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\",\"Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\",\"容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\",\"Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。\"]},\"504\":{\"h\":\"Docker能干什么？\",\"t\":[\"Docker是一种容器化平台，可用于打包、分发和运行应用程序及其依赖项。以下是Docker的一些主要功能和用途：\",\"容器化应用程序： Docker允许开发人员将应用程序及其所有依赖项打包到一个称为容器的独立单元中。这包括代码、运行时、系统工具、系统库等。容器可以在任何支持Docker的环境中运行，而不受环境差异的影响。\",\"跨平台性： Docker容器可以在不同的操作系统和云平台上运行，提供了更强大的跨平台性。无论是在开发、测试还是生产环境，都可以使用相同的容器。\",\"轻量级： Docker容器共享宿主操作系统的内核，因此它们相比于传统的虚拟机更加轻量级。这使得容器的启动速度更快，占用更少的系统资源。\",\"版本控制： Docker容器的镜像可以被版本控制，允许开发人员和运维团队轻松地追踪和回滚应用程序的版本。\",\"快速部署： Docker容器可以快速启动、停止和重新启动，提高了应用程序的部署速度。这对于微服务架构和持续集成/持续部署 (CI/CD) 策略非常有用。\",\"隔离性： Docker容器提供了进程级别的隔离，使得应用程序之间相互独立。这有助于避免由于一个应用程序的问题导致整个系统崩溃。\",\"资源优化： 多个Docker容器可以在同一台主机上并发运行，共享主机的资源。Docker通过优化资源使用，提高了系统的效率。\",\"生态系统： Docker拥有丰富的生态系统，包括Docker Hub，其中存储了大量的公共和私有Docker镜像，使得开发人员可以轻松共享和获取镜像。\",\"总体而言，Docker通过容器化技术提供了一种便捷、灵活且高效的方式来开发、打包和部署应用程序。\"]},\"505\":{\"h\":\"Docker和普通虚拟机的区别\",\"t\":[\"可以理解为普通虚拟机是在宿主机的物理环境上，将操作系统进行虚拟化，类似于提供一个整体的虚拟环境，你可以在这个环境内干任何想干的事，而 Docker 在宿主机的基础上，仅仅只虚拟化所指定的依赖项。\",\"虚拟机是在物理硬件层面对资源的隔离，而 Docker 是在操作系统的层面对所使用应用的隔离。\",\"故 Docker 在性能上大大高于普通虚拟机。\",\"虚拟机\",\"Docker\",\"隔离程度\",\"隔离操作系统\",\"隔离所需依赖\",\"资源利用率\",\"低\",\"高\",\"运行效率\",\"差\",\"好\",\"成本\",\"高\",\"低\"]},\"506\":{\"h\":\"学习Docker之前，需要什么基础\",\"t\":[\"在学习 Docker 之前，你需要掌握一些常用的 Linux 操作指令，至少认识一些常见的命令，能读懂即可。\",\"提示\",\"如果您对 Linux 操作指令不太熟悉，或者您想学习 Linux ，可以参考本站的 Linux 系列学习笔记。\",\"// TODO:Linux学习笔记\"]},\"507\":{\"h\":\"Docker - 镜像、容器、仓库\",\"t\":[\"提示\",\"这个章节涉及到 Docker 最核心的知识，也是在使用过程中最常使用到的，需要重点学习。\"]},\"508\":{\"h\":\"什么是Docker镜像、容器、仓库？\",\"t\":[\"Docker镜像：镜像是一个只读的模板，其中包含了创建 Docker 容器的说明，可以用来创建 Docker 容器。镜像可以包含操作系统、应用程序、依赖库、配置文件等。\",\"Docker容器：容器是代码的隔离环境。这意味着容器并不直接在操作系统上运行。容器是 Docker 镜像的一个运行实例，可以理解为一个轻量级的虚拟机，用面向对象的思想来看，其就是一个镜像的运行对象。容器包含了运行应用程序所需的所有组件，包括操作系统、应用程序、依赖库等。\",\"Docker仓库：仓库是用来存储和管理 Docker 镜像的地方，类似于代码仓库。Docker 官方提供了 Docker Hub 仓库，可以在其中存储和分享 Docker 镜像。用户也可以自建私有仓库来存储和管理自己的 Docker 镜像。\"]},\"509\":{\"h\":\"镜像、容器、仓库之间的关系\",\"t\":[\"Docker 镜像可以看做是一个静态模板，Docker 容器是对镜像的一个实例化，一个镜像可以实例化多个容器，这几个容器相互独立，互不影响。\",\"Docker 仓库就是存放 Docker 镜像的地方，严格意义上来说可以分为本地仓库和远程仓库，远程仓库由 Docker 官方维护，包含了几乎所有的 Docker 镜像，Docker 本地仓库只有你拉取的镜像。\",\"在使用 Docker 镜像创建对象之前，需要先拉取 Docker 镜像，这里的拉取通常是指从 Docker 官方仓库拉取。\",\"故使用 Docker 的基本步骤可以清晰的总结为：\",\"从仓库拉取 Docker 镜像\",\"使用 Docker 镜像实例化一个 Docker 容器\",\"运行 Docker 容器\"]},\"510\":{\"h\":\"Docker镜像\",\"t\":[\"当运行容器时，使用的 Docker 镜像不在本地仓库中，Docker 就会从默认的 Docker 仓库中下载该镜像。一般是从 Docker 官方提供的 Docker Hub 仓库中下载。\",\"下面来学习关于 Docker 镜像的相关操作。\"]},\"511\":{\"h\":\"镜像列表\",\"t\":[\"docker images \",\"REPOSITORY：表示镜像的仓库源\",\"TAG：镜像的标签, 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本\",\"IMAGE ID：镜像ID\",\"CREATED：镜像创建时间\",\"SIZE：镜像大小\"]},\"512\":{\"h\":\"查找镜像\",\"t\":[\"注意\",\"本小节以查找 Redis 镜像为例做演示说明，其他镜像的操作同理。\",\"在 Docker Hub查找\",\"使用 Docker Hub 中提供的查找功能：https://hub.docker.com/search?q=redis&type=image\",\"这里就已经找到了 Redis 的镜像信息\",\"可以查看 Redis 镜像的各种版本信息。\",\"使用 Docker Search查找\",\"docker search redis \",\"NAME: 镜像仓库源的名称\",\"DESCRIPTION: 镜像的描述\",\"OFFICIAL: 是否 docker 官方发布\",\"STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\",\"AUTOMATED: 自动构建。\",\"使用 Docker Desktop 查找\",\"直接在 Docker Desktop 中搜索即可。\"]},\"513\":{\"h\":\"拉取镜像\",\"t\":[\"拉取镜像即从 Docker 仓库中拉取 Docker 镜像，本质上就是从远程的仓库中下载镜像到本地。\",\"这里仍以 Redis 为样例进行编写，其他镜像的拉取同理。\",\"docker pull redis \",\"这里默认拉取的是 Redis 的最新版本，如果要是想拉取指定版本时可以进行如下执行，如拉取 redis7.0\",\"docker pull redis:7.0 \"]},\"514\":{\"h\":\"删除镜像\",\"t\":[\"这里我们演示删除之前下载的那个 Hello-World 镜像\",\"docker rmi hello-world \",\"这里如果使用了该镜像创建了容器，那么就会报错。\",\"如果出现这种情况，就说明我们使用了该镜像创建了容器，那么就必须先删除使用该镜像的所有容器，才能够删除该镜像。\",\"先查看 Docker 容器\",\"docker ps -a \",\"然后删除 Docker 容器\",\"docker rm 8c0dde3e3fb4 \",\"使用的是 Docker 容器的 ID 删除。\",\"删除 Docker 镜像\",\"docker rmi hello-world \",\"提示\",\"如果一个镜像创建了多个容器，那么在删除该镜像之前，必须删除所有使用该镜像的容器，才能够删除该镜像。\"]},\"515\":{\"h\":\"更新镜像\",\"t\":[\"Dokcer 镜像的更新就是在目前运行的 Docker 容器上进行修改，然后将更新后的 Docker 容器的所有内容，导出为一个 Docker 镜像，随后就可以使用该镜像创建 Docker 容器。\",\"先下载一个 Ubuntu20.04 镜像\",\"docker pull ubuntu:20.04 \",\"创建一个该镜像的容器\",\"docker run -t -i ubuntu:20.04 \",\"在该容器内运行 apt-get update 指令，更新 ubuntu 系统，更新后 exit 退出这个容器到我们本地的命令控制端。\",\"apt-get update \",\"提交容器副本\",\"docker commit -m=\\\"update ubuntu20.04\\\" -a=\\\"CoderMast\\\" 13999fa6f4f6 codermast/ubuntu:latest \",\"各个参数说明：\",\"-m: 提交的描述信息\",\"-a: 指定镜像作者\",\"13999fa6f4f6：容器 ID\",\"codermast/ubuntu:latest: 指定要创建的目标镜像名\",\"查看镜像列表\",\"docker images \",\"这里可以看到已经创建成功了，并且大小和之前的不一样了。\",\"使用该镜像创建一个容器\",\"docker run -t -i codermast/ubuntu:latest \"]},\"516\":{\"h\":\"生成镜像\"},\"517\":{\"h\":\"镜像标签\",\"t\":[\"我们可以使用 docker tag 命令为镜像添加一个新的标签。\",\"docker tag e650c5f208da codermast/ubuntu:v1 \",\"e650c5f208da：为镜像的 ID\",\"codermast/ubuntu:v1：Tag 名\",\"此时我们在创建 Docker 容器时，既可以使用 codermast/ubuntu:latest 也可以使用 codermast/ubuntu:v1。\",\"Tag 可以看做是给镜像起别名，其本质的镜像 ID 不变，具体底层就是同一个镜像的不同引用而已。\"]},\"518\":{\"h\":\"镜像导入和导出\",\"t\":[\"镜像导出\",\"docker save > codermast-ubuntu-latest.tar e650c5f208da \",\"codermast-ubuntu-latest.tar：要导出的文件名\",\"e650c5f208da：要导出的镜像 ID\",\"镜像导入\",\"在镜像导入之前，为了方便观察，先删除掉该镜像。\",\"docker load < codermast-ubuntu-latest.tar \",\"codermast-ubuntu-latest.tar：为要导入的文件名。\",\"注意\",\"若是只想备份images，使用save、load即可\",\"若是在启动容器后，容器内容有变化，需要备份，则使用export、import\"]},\"519\":{\"h\":\"Docker容器\",\"t\":[\"在上面的 Docker 镜像的相关操作中，我们或多或少的了解和学习了一些 Docker 容器的相关操作。\"]},\"520\":{\"h\":\"容器启动\",\"t\":[\"docker run -it codermast/ubuntu:latest /bin/bash \",\"-it 可以连写的，表示 -i -t\",\"-t: 在新容器内指定一个伪终端或终端。\",\"-i: 允许你对容器内的标准输入 (STDIN) 进行交互\",\"codermast/ubuntu:latest：镜像名称\"]},\"521\":{\"h\":\"容器查看\",\"t\":[\"docker ps -a \",\"-a 表示 all，即查看所有容器\"]},\"522\":{\"h\":\"容器再启动\",\"t\":[\"我们看到，刚才 codermast/ubuntu:latest 的实例d3a11e669e88 已经停止了Exited (0) 4 seconds ago，我们重启这个实例\",\"docker start d3a11e669e88 \"]},\"523\":{\"h\":\"容器停止和重启\",\"t\":[\"容器停止\",\"docker stop d3a11e669e88 \",\"容器重启\",\"docker restart d3a11e669e88 \"]},\"524\":{\"h\":\"后台模式与进入\",\"t\":[\"在使用 -d 参数创建容器时，容器启动后会进入后台，那么此时我们怎么进入容器呢？\",\"使用 `docker attach [容器ID]\",\"docker attach d3a11e669e88 \",\"docker exec -i -t [容器ID] /bin/bash\",\"docker exec -i -t d3a11e669e88 /bin/bash \",\"注意\",\"docker attach 在退出容器终端后，容器会停止运行。\",\"docker exec 在退出容器终端后，不会导致容器的停止。\",\"✅ 推荐大家使用 docker exec\"]},\"525\":{\"h\":\"容器导出和导入\",\"t\":[\"容器的导出\",\"docker export 246b23d5d5a5 > redis-latest-codermast.tar \",\"246b23d5d5a5：容器 ID\",\"redis-latest-codermast.tar：导出文件名\",\"容器的导入\",\"docker import redis-latest-codermast.tar codermast/redis:latest \",\"redis-latest-codermast.tar：配置文件名\",\"codermast/redis:latest：导入的镜像名称\",\"要注意的是，这里是对 Docker 容器进行导出，但是导出的结果是镜像的配置文件，通过该配置文件导入的也是 Docker 镜像。\"]},\"526\":{\"h\":\"强制删除容器\",\"t\":[\"我们知道，当容器在运行的时候是无法直接删除的，需要先将容器先停止运行，随后才能删除该容器，那么能不能直接删除正在运行中的容器呢？\",\"答案是可以的，我们只需要在其中加上 -f 的选项即可，代表 force 强制的意思。\",\"docker rm -f b234f112186d \",\"b234f112186d：为 正在运行 Docker 容器的 ID\"]},\"527\":{\"h\":\"清理停止的容器\",\"t\":[\"在容器停止运行后，并不会自动被删除，需要手动清除。该指令一次性清除所有的停止状态的容器。\",\"docker container prune \"]},\"528\":{\"h\":\"容器别名及操作\",\"t\":[\"上述对容器的操作都是针对容器 ID，这个 ID 是随机的，为了方便起见，我们可以设置一个自定义的 name 来进行操作。仅需在指令中设置 name 选项即可。\",\"docker run -d --name codermast-redis-001 redis:latest \",\"codermast-redis-001：自定义的名称\",\"redis:latest：镜像名称\"]},\"529\":{\"h\":\"容器错误日志\",\"t\":[\"docker logs ... \",\"实时查看docker容器名为user-uat的最后10行日志\",\"docker logs -f -t --tail 10 user-uat\",\"查看指定时间后的日志，只显示最后100行：\",\"docker logs -f -t --since=\\\"2024-01-14\\\" --tail=100 user-uat\",\"查看最近30分钟的日志:\",\"docker logs --since 30m user-uat\",\"查看某时间之后的日志：\",\"docker logs -t --since=\\\"2024-01-14T21:00:00\\\" user-uat\",\"查看某时间段日志：\",\"docker logs -t --since=\\\"2024-01-14T21:00:00\\\" --until \\\"2018-02-09T12:23:37\\\" user-uat\",\"将错误日志写入文件：\",\"docker logs -f -t --since=\\\"2024-01-14\\\" user-uat | grep error >> logs_error.txt\"]},\"530\":{\"h\":\"Docker仓库\",\"t\":[\"Docker 仓库是集中存放 Docker 镜像的地方。默认使用的仓库为 Docker Hub，也可以更改为自己的想使用的仓库。类似于 Github 的仓库，只不过 Github 管理的是代码，Docker Hub 管理的是 Docker 镜像。\",\"这里以 Docker Hub 为例进行说明。\",\"登录仓库\",\"docker login \",\"将准备好的镜像推送至仓库\",\"docker push codermast/redis:latest \",\"codermast/redis:latest：Docker 镜像名\"]},\"531\":{\"h\":\"Docker - 仓库管理\",\"t\":[\"仓库是集中存放资源的地方，代码仓库是存放代码的，那么Docker 中的仓库就是存放 Docker 镜像的。\",\"和 GitHub 类似，Docker Hub 是 Docker 官方维护的一个免费的公共仓库，不但可以下载需要的镜像，而且还可以上传自己的镜像。\",\"提示\",\"本文主要以 Docker Hub 为例子进行说明，其他仓库同理。\"]},\"532\":{\"h\":\"登录和退出\",\"t\":[\"在需要使用 Docker Hub 中管理自己的镜像时，需要先进行登录。\",\"登录\",\"docker login \",\"退出登录\",\"docker logout \"]},\"533\":{\"h\":\"推送镜像\",\"t\":[\"用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。\",\"docker tag ubuntu:20.04 codermast/ubuntu:20.04 docker push codermast/ubuntu:20.04 \",\"codermast 改为你的 username 便于管理\"]},\"534\":{\"h\":\"Docker - WEB应用实例\",\"t\":[\"在之前的章节中，仅对普通容器进行了演示，但在实际中常常使用到 Docker 容器中的 WEB 应用程序。\"]},\"535\":{\"h\":\"运行一个WEB应用\",\"t\":[\"拉取镜像\",\"docker pull training/webapp \",\"创建一个容器\",\"docker run -d -P training/webapp python app.py \",\"这里出现了警告信息，是因为我的电脑是 M1 芯片，是 ARM 架构，而所需要的平台是请求的映像的平台（linux/aamd64）与检测到的主机平台（linux/alm64/v8）不匹配，这里每个人的电脑环境不同，不必理会。\",\"-d:让容器在后台运行。\",\"-P:将容器内部使用的网络端口随机映射到我们使用的主机上。\",\"-p:是容器内部端口绑定到指定的主机端口。\",\"docker run -d -p 5001:5000 training/webapp python app.py \",\"即将本机的 5001 端口绑定到容器内部的 5000 端口上。\"]},\"536\":{\"h\":\"查看WEB应用容器\",\"t\":[\"docker ps \",\"我们看到这里增加了端口的映射，0.0.0.0:55000->5000/tcp，即将本地 IP 的 55000 端口，映射到了该 Docker 容器中的 5000 端口，即我们在本地访问 55000 端口，即可访问该 Docker 容器。\"]},\"537\":{\"h\":\"自定义网络端口映射\",\"t\":[\"在上面的例子中，使用 -p 参数映射到主机上的端口是随机的，下面我们对其进行端口的自定义操作。\",\"为了便于和前面创建的容器进行区分，我们再创建一个容器。\",\"docker run -d -p 55001:5000 training/webapp python app.py \",\"访问 localhost:55001\",\"补充\",\"端口映射既可以是本地端口映射，也可以是网络端口映射，即将 Docker 容器中的端口直接映射到某个指定的网络 IP 的端口。\",\"本地端口映射：5000/tcp -> 0.0.0.0:5001\",\"网络端口映射：5000/tcp -> 123.23.46.123:5001\",\"另外，这里的端口映射默认都是 TCP 端口，也可以指定为 UDP 端口，在端口后面加上 /udp 即可。\"]},\"538\":{\"h\":\"查看端口映射信息\",\"t\":[\"docker port focused_boyd 5000 \",\"该指令即查看名为 focused_boyd 的 Docker 容器的 5000 端口映射到什么位置。\"]},\"539\":{\"h\":\"停止WEB应用容器\",\"t\":[\"WEB 应用容器，本身就是一个 Docker 容器，使用 Docker 本身的停止命令即可。\",\"# 通过 Docker 容器名称停止 docker stop busy_hodgkin # 通过 Docker 容器 ID 停止 docker stop af9b91fa3cc6 \"]},\"540\":{\"h\":\"重启WEB应用容器\",\"t\":[\"# 通过 Docker 容器名称重启 docker restart busy_hodgkin # 通过 Docker 容器 ID 重启 docker restart af9b91fa3cc6 \"]},\"541\":{\"h\":\"删除WEB应用容器\",\"t\":[\"docker rm busy_hodgkin \",\"这里要注意，该指令是无法直接删除运行中的容器，想要直接删除需要加上 -f 选项\",\"docker rm -f busy_hodgkin \"]},\"542\":{\"h\":\"Docker 学习笔记\"},\"543\":{\"h\":\"为什么要写这个系列？\",\"t\":[\"众所周知，Docker的教程网络上非常多，也不乏有许多大佬，整理和总结的笔记都很优秀。但是对于我（一个Java后端开发人员）来说，目前市面上的Docker要么过于繁琐，要么过于精炼。过于繁琐学起来费时费力，过于精炼又不能达到我快速掌握 Docker 核心的目的，当然也不是说这些教程不好，只是针对我来说，并不是我所需求的，故此就开了 Docker 这个篇章。也顺便记录自己学习 Docker 的一些学习心得和笔记，希望能够帮到你。\"]},\"544\":{\"h\":\"Git 学习笔记\"},\"545\":{\"h\":\"Homebrew\"},\"546\":{\"h\":\"IDEA 使用教程\",\"t\":[\"本集合会更新一些 IDEA 常用的快捷键和一些好用的操作。\"]},\"547\":{\"h\":\"快捷键\"},\"548\":{\"h\":\"Windows版\"},\"549\":{\"h\":\"Ctrl\",\"t\":[\"快捷键\",\"功能\",\"Ctrl + F\",\"在当前文件进行文本查找 （必备）\",\"Ctrl + R\",\"在当前文件进行文本替换 （必备）\",\"Ctrl + Z\",\"撤销 （必备）\",\"Ctrl + Y\",\"删除光标所在行 或 删除选中的行 （必备）\",\"Ctrl + X\",\"剪切光标所在行 或 剪切选择内容\",\"Ctrl + C\",\"复制光标所在行 或 复制选择内容\",\"Ctrl + D\",\"复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）\",\"Ctrl + W\",\"递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围（必备）\",\"Ctrl + E\",\"显示最近打开的文件记录列表 （必备）\",\"Ctrl + N\",\"根据输入的 名/类名 查找类文件 （必备）\",\"Ctrl + G\",\"在当前文件跳转到指定行处\",\"Ctrl + J\",\"插入自定义动态代码模板 （必备）\",\"Ctrl + P\",\"方法参数提示显示 （必备）\",\"Ctrl + Q\",\"光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容\",\"Ctrl + U\",\"前往当前光标所在的方法的父类的方法 / 接口定义 （必备）\",\"Ctrl + B\",\"进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）\",\"Ctrl + K\",\"版本控制提交项目，需要此项目有加入到版本控制才可用\",\"Ctrl + T\",\"版本控制更新项目，需要此项目有加入到版本控制才可用\",\"Ctrl + H\",\"显示当前类的层次结构\",\"Ctrl + O\",\"选择可重写的方法\",\"Ctrl + I\",\"选择可继承的方法\",\"Ctrl + +\",\"展开代码\",\"Ctrl + -\",\"折叠代码\",\"Ctrl + /\",\"释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）\",\"Ctrl + [\",\"移动光标到当前所在代码的花括号开始位置\",\"Ctrl + ]\",\"移动光标到当前所在代码的花括号结束位置\",\"Ctrl + F1\",\"在光标所在的错误代码处显示错误信息 （必备）\",\"Ctrl + F3\",\"调转到所选中的词的下一个引用位置 （必备）\",\"Ctrl + F4\",\"关闭当前编辑文件\",\"Ctrl + F8\",\"在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点\",\"Ctrl + F9\",\"执行 Make Project 操作\",\"Ctrl + F11\",\"选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）\",\"Ctrl + F12\",\"弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选\",\"Ctrl + Tab\",\"编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口\",\"Ctrl + End\",\"跳到文件尾\",\"Ctrl + Home\",\"跳到文件头\",\"Ctrl + Space\",\"基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl +逗号 （必\",\"Ctrl + Delete\",\"删除光标后面的单词或是中文句 （必备）\",\"Ctrl +BackSpace\",\"删除光标前面的单词或是中文句 （必备）\",\"Ctrl +1,2,3...9\",\"定位到对应数值的书签位置 （必备）\",\"Ctrl + 左键单击\",\"在打开的文件标题上，弹出该文件路径 （必备）\",\"Ctrl + 光标定位按\",\"Ctrl 不要松开，会显示光标所在的类信息摘要\",\"Ctrl + 左方向键\",\"光标跳转到当前单词 / 中文句的左侧开头位置 （必备）\",\"Ctrl + 右方向键\",\"光标跳转到当前单词 / 中文句的右侧开头位置 （必备）\",\"Ctrl + 前方向键\",\"等效于鼠标滚轮向前效果 （必备）\",\"Ctrl + 后方向键\",\"等效于鼠标滚轮向后效果 （必备）\"]},\"550\":{\"h\":\"Alt\",\"t\":[\"Alt + ` 显示版本控制常用操作菜单弹出层 （必备） Alt + Q 弹出一个提示，显示当前类的声明 / 上下文信息 Alt + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备） Alt + F2 对于前面页面，显示各类浏览器打开目标选择弹出层 Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示 Alt + F7 查找光标所在的方法 / 变量 / 类被调用的地方 Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果 Alt + Home 定位 / 显示到当前文件的 Navigation Bar Alt + Enter IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备） Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备） Alt + 左方向键 切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备） Alt + 右方向键 按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备） Alt + 前方向键 当前光标跳转到当前文件的前一个方法名位置 （必备） Alt + 后方向键 当前光标跳转到当前文件的后一个方法名位置 （必备） Alt +1,2,3...9 显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）\"]},\"551\":{\"h\":\"Shift\",\"t\":[\"Shift + F1 如果有外部文档可以连接外部文档 Shift + F2 跳转到上一个高亮错误 或 警告位置 Shift + F3 在查找模式下，查找匹配上一个 Shift + F4 对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留 Shift + F6 对文件 / 文件夹 重命名 Shift + F7 在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法 Shift + F8 在 Debug 模式下，跳出，表现出来的效果跟 F9 一样 Shift + F9 等效于点击工具栏的 Debug 按钮 Shift + F10 等效于点击工具栏的 Run 按钮 Shift + F11 弹出书签显示层 （必备） Shift + Tab 取消缩进 （必备） Shift + ESC 隐藏当前 或 最后一个激活的工具窗口 Shift + End 选中光标到当前行尾位置 Shift + Home 选中光标到当前行头位置 Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备） Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备） Shift + 滚轮前后滚动 当前文件的横向滚动轴滚动 （必备）\"]},\"552\":{\"h\":\"Ctrl + Alt\",\"t\":[\"Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用 （必备） Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用 （必备） Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化 Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层 （必备） Ctrl + Alt + J 弹出模板选择窗口，将选定的代码加入动态模板中 Ctrl + Alt + H 调用层次 Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口 Ctrl + Alt + V 快速引进变量 Ctrl + Alt + Y 同步、刷新 Ctrl + Alt + S 打开 IntelliJ IDEA 系统设置 （必备） Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来 Ctrl + Alt + F11 切换全屏模式 Ctrl + Alt + Enter 光标所在行上空出一行，光标定位到新行 （必备） Ctrl + Alt + Home 弹出跟当前文件有关联的文件弹出层 Ctrl + Alt + Space 类名自动完成 Ctrl + Alt + 左方向键 退回到上一个操作的地方 （必备） Ctrl + Alt + 右方向键 前进到上一个操作的地方 （必备） Ctrl + Alt + 前方向键 在查找模式下，跳到上个查找的文件 Ctrl + Alt + 后方向键 在查找模式下，跳到下个查找的文件\"]},\"553\":{\"h\":\"Ctrl + Shift\",\"t\":[\"Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件 （必备） Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备） Ctrl + Shift + J 自动将下一行合并到当前行末尾 （必备） Ctrl + Shift + Z 取消撤销 （必备） Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备） Ctrl + Shift + N 通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备） Ctrl + Shift + U 对选中的代码进行大 / 小写轮流转换 （必备） Ctrl + Shift + T 对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备） Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板 （必备） Ctrl + Shift + V 弹出缓存的最近拷贝的内容管理器弹出层 Ctrl + Shift + E 显示最近修改的文件列表的弹出层 Ctrl + Shift + H 显示方法层次结构 Ctrl + Shift + B 跳转到类型声明处 （必备） Ctrl + Shift + I 快速查看光标所在的方法 或 类的定义 Ctrl + Shift + A 查找动作 / 设置 Ctrl + Shift + / 代码块注释 （必备） Ctrl + Shift + [ 选中从光标所在位置到它的顶部中括号位置 （必备） Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置 （必备） Ctrl + Shift + + 展开所有代码 （必备） Ctrl + Shift + - 折叠所有代码 （必备） Ctrl + Shift + F7 高亮显示所有该选中文本，按 Esc 高亮消失 （必备） Ctrl + Shift + F8 在 Debug 模式下，指定断点进入条件 Ctrl + Shift + F9 编译选中的文件 / 包 / Module Ctrl + Shift + F12 编辑器最大化 （必备） Ctrl + Shift + Space 智能代码提示 Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备） Ctrl + Shift +Backspace 退回到上次修改的地方 （必备） Ctrl + Shift +1,2,3...9 快速添加指定数值的书签 （必备） Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备） Ctrl + Shift + 左方向键 在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句（必备） Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备） Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备） Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）\"]},\"554\":{\"h\":\"Alt + Shift\",\"t\":[\"Alt + Shift + N 选择 / 添加 task （必备） Alt + Shift + F 显示添加到收藏夹弹出层 / 添加到收藏夹 Alt + Shift + C 查看最近操作项目的变化情况列表 Alt + Shift + I 查看项目当前文件 Alt + Shift + F7在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入 Alt + Shift + F9 弹出 Debug 的可选择菜单 Alt + Shift + F10 弹出 Run 的可选择菜单 Alt + Shift + 左键双击 选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备） Alt + Shift + 前方向键 移动光标所在行向上移动 （必备） Alt + Shift + 后方向键 移动光标所在行向下移动 （必备）\"]},\"555\":{\"h\":\"Ctrl + Shift + Alt\",\"t\":[\"Ctrl + Shift + Alt + V 无格式黏贴 （必备） Ctrl + Shift + Alt + N 前往指定的变量 / 方法 Ctrl + Shift + Alt + S 打开当前项目设置 （必备） Ctrl + Shift + Alt + C 复制参考信息\"]},\"556\":{\"h\":\"其他\",\"t\":[\"F2 跳转到下一个高亮错误 或 警告位置 （必备） F3 在查找模式下，定位到下一个匹配处 F4 编辑源 （必备） F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上 F11 添加书签 （必备） F12 回到前一个工具窗口 （必备） Tab缩进 （必备） ESC 从工具窗口进入代码文件窗口 （必备） 连按两次Shift 弹出 Search Everywhere 弹出层\"]},\"557\":{\"h\":\"Mac版\"},\"558\":{\"h\":\"Maven 学习笔记\"},\"559\":{\"h\":\"Java - 基础概念及语法\"},\"560\":{\"h\":\"注释\",\"t\":[\"单行注释\",\"// 单行注释 \",\"多行注释\",\"/* 多行注释 */ \",\"文档注释\",\"/* * 文档注释 * 通常包含 类、方法、字段的描述信息 */ \",\"小知识\",\"注释仅在编写阶段可见，编译后注释会被编译器完全去除。\"]},\"561\":{\"h\":\"命名规范\",\"t\":[\"局部变量命名：小驼峰命名法\",\"全局变量命名：小驼峰命名法\",\"常量命名：全部大写，蛇形命名法\",\"方法命名：小驼峰命名法\",\"类命名：大驼峰命名法\",\"命名要求\",\"不能以保留关键字为名称\",\"不能以数字开头\",\"不能以特殊字符开头\",\"严格区分大小写\",\"仅能包括合法的特殊字符\"]},\"562\":{\"h\":\"数据类型\",\"t\":[\"Java 中数据类型分 基础数据类型 和 引用数据类型 两种类型。\",\"其中基础数据类型主要有boolean(1B)、byte(1B)、char(2B)、short(2B)、int(4B)、long(8B)、float(8B)、double(16B)，最常见的引用数据类型就是 String 字符串类型和数组类型，自定义的类型多为引用数据类型。\",\"Java 给基本数据类型提供了对应的包装类，基本数据类型与其包装类型之间的赋值使用自动装箱和拆箱完成，例如：\",\"// 源代码 Integer a = 3; // 装箱 int b = a; // 拆箱 // 反编译 Integer a = Integer.valueOf(3); int b = a.intValue(); \",\"装箱拆箱\",\"拆箱：包装类型——>基础类型\",\"装箱：基础类型——>包装类型 所谓自动拆箱装箱，就是JDK帮我们在 基础类型 和 引用类型 之间进行转化，本质就是自动调一些方法。\"]},\"563\":{\"h\":\"运算符\",\"t\":[\"算术运算符：+、-、*、/、%、++、--等\",\"关系运算符：==、>=、<=、>、<、!=\",\"位运算符：&、|、^、~、<<、>>、>>>\",\"逻辑运算符：&&、||、!\",\"赋值运算符：=、+=、-=、*=、/=、%=、<<=、>>=、＆=、^=、|=\",\"其他运算符：instanceof、，\"]},\"564\":{\"h\":\"条件语句\"},\"565\":{\"h\":\"if语句\",\"t\":[\"if\",\"if (布尔表达式) { // 布尔表达式为真时，执行这里的语句 } \",\"if...else...\",\"if (布尔表达式) { // 布尔表达式为真时，执行这里的语句 } else { // 布尔表达式为否时，执行这里的语句 } \",\"if...else if...else\",\"if (布尔表达式 1) { // 布尔表达式 1的值为 true 执行这里的代码 } else if (布尔表达式 2){ // 如果布尔表达式 2的值为true执行这里的代码 } else if (布尔表达式 3){ // 如果布尔表达式 3的值为true执行这里的代码 ...... } else { // 如果以上布尔表达式都不为true执行这里的代码 } \",\"提示\",\"if 语句可以无限嵌套使用，if...else if...else...也可以无限个条件使用。\"]},\"566\":{\"h\":\"switch语句\",\"t\":[\"switch (表达式) { case value1 : // 表达式的值 == value1，则执行这里的语句 break; //可选 case value2 : // 表达式的值 == value2，则执行这里的语句 break; // case 语句无限使用 default : //可选 // 如果都不匹配的话，则执行这里的语句 } \",\"注意\",\"这里要注意的是，如果不在每个 case 语句中的最后一行写上 break 语句，那么执行完不会退出 switch 语句，而是从该位置继续往后执行。\"]},\"567\":{\"h\":\"循环语句\"},\"568\":{\"h\":\"for循环\",\"t\":[\"基本 for 循环\",\"for ( 初始化语句; 条件语句; 更新语句;) { // 这里是循环要执行的语句 } \",\"增强 for 循环\",\"for (ElemType elem : 集合){ // 这里是循环要执行的语句 } \",\"提示\",\"增强的 for 循环只适用于遍历集合。\"]},\"569\":{\"h\":\"while循环\",\"t\":[\"while (布尔表达式) { // 布尔表达式的值为 true，则循环执行这里的语句 } \"]},\"570\":{\"h\":\"do...while循环\",\"t\":[\"do { // 循环体内要执行的语句。 } while (布尔表达式) \",\"该循环执行时，会先执行一次循环体内的语句，然后才进行判断循环。\",\"关键字说明\",\"break; 退出当前循环\",\"continue; 继续当前循环\"]},\"571\":{\"h\":\"类和对象\",\"t\":[\"类：类是描述对象模板的蓝图，定义了对象的属性和方法。\",\"对象：对象是类的实例，是类的具体化。每个对象都有自己的属性值。\",\"举个简单的例子，动物可以看做一个类，一只小猫、一条小鱼、一匹马等就可以看做是动物的一个对象。\"]},\"572\":{\"h\":\"属性和方法\",\"t\":[\"属性：也称为字段或成员变量，是类中存储数据的变量。可以是基本数据类型，也可以是引用数据类型。分为类属性和对象属性。\",\"方法：对一段代码能够实现特定功能代码的封装。分为类方法和对象方法。语法如下：\",\"访问修饰符 关键字 返回值类型 方法名称 (参数列表){ // 方法内要执行的语句 } \",\"相关信息\",\"访问修饰符：default、public、protected、private\",\"非访问控制修饰符：final、abstract、static、synchronized\",\"类属性和类方法，是指其属于类，可以直接通过类名调用，也可以由对象引用调用，整个类共有，仅维护一份，类加载时初始化。需使用 static 关键字修饰。\",\"对象属性和对象方法，是指其属于对象，需要通过实例化对象的引用来调用，对象私有，每个对象内都维护一份，对象构建时初始化。\"]},\"573\":{\"h\":\"Java - 面向对象\",\"t\":[\"面向对象（Object-Oriented，OOP）是一种程序设计的编程范式，主要基于对象这个概念，将相关的数据和方法组织成一个整体看待，本质上是模拟现实中解决问题的过程。\"]},\"574\":{\"h\":\"面向对象三个特性\",\"t\":[\"面向对象的三大基本特征是：封装、继承、多态\"]},\"575\":{\"h\":\"封装\",\"t\":[\"封装是将对象的属性和方法封装在一个类的内部，对外部隐藏对象的具体实现细节。通过封装，对象的内部实现对外部是不可见的，只有公共接口对外部可见。仅能通过提供的公共接口来操作改对象。\",\"最常用的就是使用 private 关键字修饰，将一些数据进行隐藏，仅对外提供一些公共操作方法，让外部程序通过该类提供的方法来实现对内部信息的操作和访问。\",\"优点：安全性高、复用性强\",\"安全性：通过方法来控制成员变量的操作，提高了代码的安全性 复用性：把代码用方法进行封装，提高了代码的复用性​，降低了耦合性。\"]},\"576\":{\"h\":\"继承\",\"t\":[\"继承是指一个类通过继承从另外一个类中获取其属性和方法，子类可以继承父类的属性、重写父类的方法，从而减少代码量。这使得这两个类从逻辑上来说是父子关系，此时子类具有所有父类的属性和方法，同时也可以对这些属性和方法进行修改，以满足自身的需求。\",\"优点：提高代码复用性，维护性，实现代码共享。\",\"缺点：代码的耦合性较高，父类做出修改时，其所有子类都会受到影响。\",\"特点：子类可以拥有自身独有的属性和方法，即子类可对父类进行扩展，也可以自己实现父类的方法。\",\"注意：Java不支持多继承，但是支持多重继承，可以对接口的多实现。\",\"多继承、多重继承、多实现\",\"多继承：一个类一次性继承多个类。\",\"多重继承：一个类在继承另外一个类后，仍可被其他类继承。\",\"多实现：一个类可以一次性实现多个接口。\",\"子类的所有构造方法会默认先运行 super() ，即调用父类对应参数的构造方法。\"]},\"577\":{\"h\":\"多态\",\"t\":[\"多态是指同一行为具有多个不同的表现形式或者形态。例如同一个接口被不同的类实现，他们的实现方式不一定相同，所执行的过程也就会不相同。\",\"多态允许不同的对象对同一消息做出响应，提供了灵活性和可扩展性。多态的实现方式包括方法重载和方法重写。\",\"多态最常用的就是接口引用指向实现类对象，这样当之后程序需要更新时，仅需更新实现类，而表现类型不必更改，故不会影响到后面程序的执行。大大降低了程序的耦合度。\",\"向上转型：父类的引用指向了子类对象。编译看左边（调用子类特有属性或方法，编译不通过），运行看右边（运行时，优先调用子类方法）。\",\"Animal cat = new Cat(); \",\"在这个例子中，Animal 类型的引用 cat 指向了 Cat 类型的对象。编译过程中，如果发现通过该引用调用 Cat 类型对象的特有属性或方法，则会报错，在执行过程中，如果子类重写了父类方法，优先执行重写后的方法。没有重写，则执行父类对应方法。\",\"向下转型：子类引用指向父类对象。编译看右边，运行看右边。\",\"Animal animal = new Cat(); // 向上转型：子类->父类 animal.eat(); // 调用的是子类的方法 Cat cat = (Cat)animal; // 向下转型：父类->子类 cat.work(); // 调用的是子类的方法 \"]},\"578\":{\"h\":\"类和对象\"},\"579\":{\"h\":\"概述\",\"t\":[\"类：类是对象的模板，它定义了对象的属性和方法。类是对象的抽象，实际的对象是根据类的定义实例化而来的。\",\"对象：对象是类的实例，在程序中被抽象为具有属性和方法的实例。每个对象的属性和方法各自独立，互不影响。\",\"类是对象的抽象，对象是类的具体化。\",\"举个简单的例子，Person 可以看做一个类，而小明、小红、小张就是三个该类的对象。\",\"class Person{ String name; int age; public Person(String name,int age){ this.name = name; this.age = age; } public void eat(){ System.out.println(name + \\\"在吃饭...\\\"); } public void getAge(){ System.out.println(name + \\\"今年\\\" + age + \\\"岁了...\\\"); } } \",\"public class PersonTest { public static void main(String[] args) { // 创建 Person 类的对象 Person person1 = new Person(\\\"小明\\\", 18); Person person2 = new Person(\\\"小红\\\", 19); Person person3 = new Person(\\\"小张\\\", 20); person1.eat(); person2.eat(); person3.eat(); person1.age(); person2.age(); person3.age(); } } \"]},\"580\":{\"h\":\"内部类\",\"t\":[\"在 Java 中可以将一个类定义在另外一个类里面或者方法里面，这样的类就成为内部类。常见的内部类有：成员内部类、局部内部类、静态内部类、匿名内部类。\",\"成员内部类\",\"成员内部类是指，在类中嵌套的一种类，它具有访问外部类成员的权限，但由于其被嵌套在外部类中，必须先实例化外部类，才能通过外部类对象实例化内部类。\",\"内部内是可以访问外部类的成员变量的。\",\"class Person { String name = \\\"animal\\\"; class Cat{ int age = 3; public int getAge() { return age; } public String getName(){ return name; } } public static void main(String[] args) { Person person = new Person(); Person.Cat cat = person.new Cat(); System.out.println(cat.getAge()); System.out.println(cat.getName()); } } \",\"执行结果为：\",\"3 animal \",\"私有内部类\",\"如果不希望内部类被外部类访问，可以使用 private 或者 protected 关键字修饰，此时无法通过上述方式创建。\",\"局部内部类\",\"局部内部类是指定义在方法中或者作用域内的类，仅能在该作用域内生效。\",\"public class LocalInnerClass { public void localInnerClassTest(){ Cat cat = new Cat(); cat.getName(); } public static void main(String[] args) { class Cat{ String name = \\\"codermast\\\"; public String getName() { return name; } } Cat cat = new Cat(); System.out.println(cat.getName()); } } \",\"局部内部类类似于方法中的局部变量，不能有 public、private、protected以及 static 修饰。\",\"静态内部类\",\"静态内部类可以使用 static 关键字定义，静态内部类我们不需要创建外部类来访问，可以直接访问。\",\"public class StaticInnerClass { static class Dog{ String name = \\\"codermast\\\"; public String getName() { return name; } } public static void main(String[] args) { Dog dog = new Dog(); System.out.println(dog.getName()); } } \",\"注意\",\"静态内部类无法访问外部类的成员，只能访问外部类的静态属性。静态类本质上和静态方法类似，外部类的成员是属于对象的，而不是属于类的。\",\"匿名内部类\",\"匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为 Outter$1.class。\",\"一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。\",\"public class AnonymousInnerClass { private Runnable runnable = new Runnable() { @Override public void run() { System.out.println(\\\"running...\\\"); } }; public static void main(String[] args) { AnonymousInnerClass anonymousInnerClass = new AnonymousInnerClass(); anonymousInnerClass.runnable.run(); } } \",\"注意\",\"Java 中禁止在匿名内部类中修改外部局部变量，是因为Java对于匿名内部类传递变量的实现是基于构造器传参的，也就是说如果允许你在匿名内部类中修改值，你修改的是匿名内部类中的外部局部变量副本，最终并不会对外部类产生效果。\"]},\"581\":{\"h\":\"创建对象\",\"t\":[\"常用的创建对象有这几种方式：new、反射、clone()方法、反序列化。\",\"使用 new 关键字创建：最常见的创建方式\",\"Person person = new Person(); \",\"反射创建：通过反射机制，可以在运行时获取类的信息，动态创建对象。\",\"Class<?> clazz = Person.class; Person person = (Person) clazz.newInstance(); \",\"注意\",\"在 JDK1.9之后 newInstance() 方法已经弃用，该方法调用无参构造器，若是没有，则会报异常。\",\"可以使用 class.getDeclaredConstructor().newInstance()来调用。\",\"该方法会根据他的参数对该类的构造函数进行搜索并返回对应的构造函数，没有参数就返回该类的无参构造函数，然后再通过 newInstance 进行实例化。\",\"对象的clone()方法创建\",\"要实现克隆，类必须实现 Cloneable 接口，并重写 clone() 方法。这种方式可以实现对象的浅拷贝或深拷贝。\",\"public class Person implements Cloneable{ String name = \\\"codermast\\\"; @Override public Person clone() throws CloneNotSupportedException { return (Person) super.clone(); } public static void main(String[] args) throws CloneNotSupportedException { Person person = new Person(); Person clone = person.clone(); System.out.println(\\\"new 创建的 Person 对象 name = \\\" + person.name); System.out.println(\\\"clone 创建的 Person 对象 name = \\\" + clone.name); } } \",\"执行结果：\",\"new 创建的 Person 对象 name = codermast clone 创建的 Person 对象 name = codermast \",\"反序列化创建\",\"通过反序列化，可以将对象的状态从持久性存储中重新创建出来。需要让类实现 Serializable 接口，并使用 ObjectInputStream 类的 readObject()方法从文件或网络中反序列化对象。\",\"// 反序列化对象 try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\\\"person.ser\\\"))) { Person person4 = (Person) ois.readObject(); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } \"]},\"582\":{\"h\":\"属性\",\"t\":[\"属性又称为字段或成员变量，是类中存储数据的变量。可以是基本数据类型，也可以是引用数据类型。分为类属性和对象属性。\",\"类属性，是指其属于类，可以直接通过类名调用，也可以由对象引用调用，整个类共有，仅维护一份，类加载时初始化。需使用 static 关键字修饰。\",\"对象属性，是指其属于对象，需要通过实例化对象的引用来调用，对象私有，每个对象内都维护一份，对象构建时初始化。\"]},\"583\":{\"h\":\"方法\",\"t\":[\"方法是对一段代码能够实现特定功能代码的封装。定义一次，可以被多次调用。分为类方法和对象方法。方法的定义包括以下几个要素：\",\"访问修饰符：方法可以有访问修饰符，例如 public、private、protected 或默认（包内可见）。\",\"返回值类型：方法可以返回一个值，指定返回值的数据类型，不返回是使用 void。\",\"方法名：方法名是方法的标识符，用于在程序中调用方法。\",\"参数列表：方法可以接受零个或多个参数，参数用于向方法传递数据。\",\"方法体：方法体包含实际执行的代码块，实现方法的功能。\",\"方法的定义语法如下：\",\"访问修饰符 关键字 返回值类型 方法名称 (参数列表){ // 方法内要执行的语句 return 返回值; } \"]},\"584\":{\"h\":\"方法的分类\",\"t\":[\"按功能来分：构造方法、非构造方法。\",\"除了构造方法以外的方法，都是非构造方法。\",\"构造方法是指，没有返回值，且方法名和类名相同的方法。\",\"按归属来分：静态方法、对象方法。\",\"静态方法是属于类的方法，需要使用 static 关键字修饰。 对象方法是属于对象的方法，没有使用 static 关键字修饰。\"]},\"585\":{\"h\":\"方法的调用\",\"t\":[\"方法调用是程序执行的一个重要步骤，它使代码更具可重用性。\",\"同类中调用：可以直接使用方法名进行调用。\",\"int result = add(5, 3); \",\"其他类调用：比如指定是哪个类或者哪个对象的方法。\",\"int result = Math.max(5, 3); \",\"类方法调用：即静态方法的调用，直接通过类名调用。\",\"int result = Math.max(5, 3); \",\"对象方法调用：需要先构建拥有该方法的对象，然后通过该对象调用。\",\"Person person = new Person(); person.seeHello(); \"]},\"586\":{\"h\":\"方法的重载和重写\",\"t\":[\"方法的重载是指一个类中可以有多个方法具有相同的方法名，但这些方法的参数类型不同、个数不同、顺序不同。\",\"方法的重写是指在子类中可以有和父类方法名、参数列表完全相同的方法，在执行时优先调用。\",\"重载和重写的区别？\",\"方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\",\"重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\",\"重载与访问修饰符无关，重写不能比父类更严格。\",\"重载对返回类型没有特殊的要求，不能根据返回类型进行区分。\",\"构造方法可以重载，但是不能重写。\"]},\"587\":{\"h\":\"可变参数\",\"t\":[\"Java 5 以后引入了可变参数（Varargs），允许方法接受可变数量的参数。可变参数在方法的参数列表中使用省略号 ... 表示。\",\"public void getName(String ... names){ for (String name : names) { System.out.println(name); } } \",\"注意\",\"可变参数必须是方法的最后一个参数。例如void (int a,int... b)正确，而void (int... a,int b)会报错。\",\"一个方法最多只能有一个可变参数。\",\"可变参数在方法内部被当作数组处理。\"]},\"588\":{\"h\":\"构造方法\",\"t\":[\"构造方法是一种特殊的方法，与类同名，没有返回类型。每次创建对象时，都会默认执行一次构造方法。\",\"特点：\",\"与类同名，没有返回类型；\",\"构造方法在对象创建时执行，用于设置对象的初始状态。\",\"每个类都可以有一个或多个构造方法，但通常至少有一个默认构造方法（无参数）。\",\"默认构造方法：如果在类中没有明确定义任何构造方法，Java 会自动为该类提供一个默认的无参数构造方法。这个默认构造方法执行时不进行特定的初始化操作。\",\"重载：和普通方法一样，构造方法也支持重载，即在同一个类中可以定义多个同名但参数列表不同的构造方法。\"]},\"589\":{\"h\":\"接口和抽象类\",\"t\":[\"接口：对行为的抽象，如从唱、跳、Rap、篮球等行为中抽象出运动这种行为。接口使用 interface 关键字修饰。\",\"抽象类：对类的抽象，如从猫、狗、猪等类中抽象出动物类。抽象类使用 abstract 关键字修饰。\"]},\"590\":{\"h\":\"接口\",\"t\":[\"接口使用 interface 关键字修饰。\",\"接口没有构造方法。\",\"接口中的方法会被隐式的指定为 public abstract 方法，不能定义静态方法。\",\"接口中的变量会被隐式的指定为 public static final 变量，不能定义私有成员。因为是final所以也要显式赋初值。\",\"接口可以同时继承多个接口，类可以一次性实现多个接口。\",\"接口的实现类：除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。\",\"接口的新特性：默认方法和静态方法。 \",\"默认方法（default method） \",\"必须使用 defult 关键字修饰；\",\"定义了 default 的方法可以不被实现子类所实现，但只能被实现子类的对象调用；\",\"如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；\",\"静态方法（static method） \",\"允许使用 static 关键字修饰一个方法，并提供实现，称为接口静态方法。\",\"接口静态方法只能通过接口调用（接口名.静态方法名）。\"]},\"591\":{\"h\":\"抽象类\",\"t\":[\"抽象类可以包含抽象方法、具体方法、字段和构造方法。\",\"使用场景：\",\"建模共性行为：当多个类具有相同的行为，可以将这些行为提取到一个抽象类中，以便实现代码的重用。 规范子类：抽象类可以用于规定子类应该实现的一组方法，强制子类提供这些方法的实现。\",\"主要特征：\",\"抽象类不能被实例化只能被继承；\",\"包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；\",\"抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；\",\"一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；\",\"抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。\"]},\"592\":{\"h\":\"接口和抽象类的区别\",\"t\":[\"相同点\",\"接口和抽象类都不能被实例化。\",\"接口和抽象类都可以有抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法\",\"不同点\",\"接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。\",\"实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。\",\"接口强调特定功能的实现，而抽象类强调所属关系。\",\"接口只能定义静态常量（static final）；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不能指定具体的实现过程。\",\"接口里没有构造器，而抽象类可以包含构造器，但构造器并不是让其用来构造对象的，是提供给其子类调用这些构造器来完成初始化的。\",\"接口里不能包含初始化块,抽象类则可以包含初始化块（静态代码块和实例代码块）\"]},\"593\":{\"h\":\"Java - 异常\",\"t\":[\"上图中的继承关系，只罗列了常用的几个异常和错误，大体结构如此。\"]},\"594\":{\"h\":\"概述\",\"t\":[\"异常是程序中的一些错误，但并不是所有的错误都是异常，其中有些错误是可以处理的，有些是不可以处理的。异常主要分为：Error（错误） 和 Exception（异常）。\"]},\"595\":{\"h\":\"层次结构\",\"t\":[\"Throwable\",\"Throwable 是 Java 中所有错误与异常的超类，包含了两个子类：Error（错误）和 Exception（异常），通常情况下用于指示发生了异常情况。\",\"Error\",\"Error 类及其子类，是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\",\"此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。\",\"这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不应该去处理此类错误。按照 Java 惯例，我们是不应该实现任何新的 Error 子类的！\",\"Exception\",\"Exception 及其子类，是程序本身可以捕获并且处理的异常。Exception 主要分为两种类型：RuntimeException（运行时异常） 和 编译时异常（非运行时异常）。\",\"运行时异常：\",\"运行时异常都是 RuntimeException 类或其子类，这些异常是不检查异常，程序中可以对其进行捕获处理，也可以不做任何处理，这些异常一般都是因为程序逻辑错误，程序应该从逻辑角度尽可能避免这类异常的发生。\",\"运行时异常的特点是 Java 译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用 try-catch 语句捕获它，也没有用 throws 子句声明抛出它，也会编译通过。\",\"非运行时异常：\",\"非运行时异常是 RuntimeException 以外的异常，类型上都属于 Exception 类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如 IOException、SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。\"]},\"596\":{\"h\":\"异常基础\"},\"597\":{\"h\":\"异常关键字\",\"t\":[\"try – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。\",\"catch – 用于捕获异常。catch用来捕获try语句块中发生的异常。\",\"finally – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。\",\"throw – 用于抛出异常。\",\"throws – 用在方法签名中，用于声明该方法可能抛出的异常。\"]},\"598\":{\"h\":\"异常声明\",\"t\":[\"在 Java 中大部分的功能语句都是在方法中执行，如果方法内的某条语句可能会出现异常，但是并没有进行捕获处理，那么就需要将异常传递给上层处理，对该方法进行异常的声明。使用 throws 关键字声明，多个异常使用 , 隔开。用法如下：\",\"public static void main(String[] args) throws IOException, FileNotFoundException{ // main thread statemenets .... } \"]},\"599\":{\"h\":\"异常抛出\",\"t\":[\"在当前方法中抛出一个异常可以使用 throw 关键字，通常情况下，当代码执行到某个条件下无法继续正常执行时，可以使用 throw 关键字抛出异常，以告知调用者当前的程序状态。\",\"如下所示，当 num < 0 时，抛出一个 IllegalArgumentException 异常。\",\"public void checkNumber(int num) { if (num < 0) { throw new IllegalArgumentException(\\\"Number must be positive\\\"); } } \",\"大部分情况下都不需要手动抛出异常，因为Java的大部分方法要么已经处理异常，要么已声明异常。所以一般都是捕获异常或者再往上抛。\"]},\"600\":{\"h\":\"异常捕获\",\"t\":[\"在发生异常时不仅仅可以进行异常的声明，一些能够被处理的异常可以通过捕获进行处理，从而不交给上层。\",\"常见的异常捕获方式有：\",\"try-catch\",\"在一个 try-catch 代码块中，可以捕获多个异常，并且根据异常的不同类型，做出不同的处理方式。用法如下：\",\"try { // statement } catch (FileNotFoundException e) { // handle FileNotFoundException } catch (IOException e) { // handle IOException } \",\"同一个 catch 也可以捕获多种类型异常，用 | 隔开\",\"try { // statement } catch (FileNotFoundException e | UnknownHostException e) { // handle FileNotFoundException or UnknownHostException } catch (IOException e) { // handle IOException } \",\"try-catch-finally\",\"有时我们需要在捕获到异常并且处理结束后，关闭某些资源。这时可以使用 try-catch-finally 代码块。\",\"try { // statement } catch(Exception e) { // handle Exception } finally { // must excute statement } \",\"执行顺序：\",\"首先执行 try 代码块内的语句 \",\"发生异常时：执行完 catch 内的语句\",\"未发生异常时：跳过 catch 代码块\",\"最后执行 finally 内的语句\",\"注意\",\"这里要注意的是，try 代码块的执行过程中，一旦发生异常，转而执行 catch 内的代码，此时 try 发生异常之后的代码是不会被执行的。\",\"try-finally\",\"在特定的情况下，我们也可以直接使用 try-finally。try 块中引起异常，异常代码之后的语句不再执行，直接执行finally语句。 try块没有引发异常，则执行完try块就执行finally语句。\",\"try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。\",\"//以Lock加锁为例，演示try-finally ReentrantLock lock = new ReentrantLock(); try { //需要加锁的代码 } finally { lock.unlock(); //保证锁一定被释放 } \",\"finally遇见如下情况不会执行\",\"在前面的代码中用了System.exit()退出程序。\",\"finally语句块中发生了异常。\",\"程序所在的线程死亡。\",\"关闭CPU。\",\"try-with-resource\",\"finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。\",\"private static void tryWithResourceTest(){ try (Scanner scanner = new Scanner(new FileInputStream(\\\"c:/abc\\\"),\\\"UTF-8\\\")){ // code } catch (IOException e){ // handle exception } } \",\"Scanner\",\"public final class Scanner implements Iterator<String>, Closeable { // ... } public interface Closeable extends AutoCloseable { public void close() throws IOException; } \",\"try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。\"]},\"601\":{\"h\":\"异常自定义\",\"t\":[\"习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）。\",\"下面是一个简单的自定义异常类：\",\"public class MyException extends Exception { public MyException(){ } public MyException(String msg){ super(msg); } // ... } \",\"注意\",\"Java 中需要我们自定义的绝大多数都是 Exception，Error 一般不能自己解决，故不需要自定义。\"]},\"602\":{\"h\":\"Java - JDK下载与环境配置\"},\"603\":{\"h\":\"下载 JDK\",\"t\":[\"1. 官网下载\",\"Oracle官网\",\"https://www.oracle.com/cn/java/technologies/downloads/\",\"选择适配自己电脑的版本，点击下载即可。\",\"访问Oracle官网，找到该位置的Java\",\"点击此处的下载\",\"选择对应的版本下载\"]},\"604\":{\"h\":\"安装JDK\",\"t\":[\"打开下载好的安装包，点击下一步\",\"选择指定目录，点击下一步\",\"等待安装完成。\",\"注意：java这个时候我们只是安装好了JDK，但是并没有设置其环境变量，所以我们是没有办法使用命令行运行javac程序的。必须配置环境变量才能使用。\",\"使用 IDEA 中的集成配置\",\"选择一个项目并打开，打开项目结构设置，选择 JDK 下载即可。\"]},\"605\":{\"h\":\"配置环境变量\"},\"606\":{\"h\":\"Windows\",\"t\":[\"在电脑搜索栏搜索编辑环境变量\",\"选择环境变量\",\"选择系统变量中的PATH这一行，点击编辑\",\"点击新建\",\"输入刚才JDK的安装路径，直到bin目录为止\",\"点击确定，这个时候就已经配置成功了。\"]},\"607\":{\"h\":\"Macos\",\"t\":[\"提示\",\"参考本篇文章：https://blog.csdn.net/m0_51520179/article/details/131295356\"]},\"608\":{\"h\":\"环境检测\",\"t\":[\"在系统命令行中，任意位置处执行如下指令，均能获取到 Java 版本信息，说明配置成功。\",\"java -version \",\"注意\",\"在确保自己都是正确操作的情况下，仍无法正确执行，此时重启一下电脑，使配置项生效即可。\"]},\"609\":{\"h\":\"Java - JDK、JRE、JVM\"},\"610\":{\"h\":\"是什么？\"},\"611\":{\"h\":\"JDK\",\"t\":[\" JDK全称（Java Development Kit），根据其意思我们可以看出来其是Java开发时环境和所包含的配套元件，是整个JAVA的核心，包括了Java运行环境（Java Runtime Envirnment），一堆Java工具（javac/java/jdb等）和Java基础的类库。\",\" 这里要提一下javac，这个工具，其本质就是一个编译器，用来将程序员写好的Java代码编译成Class文件，这时候才能使用java命令进行运行，运行时是运行的编译好的Class文件，而不是我们写好的java文件。\",\" JDK包含了JRE和JVM，程序员在开发时候需要进行运行调试，这个时候就需要用到JRE和JVM进行程序的运行调试。\"]},\"612\":{\"h\":\"JRE\",\"t\":[\" JRE全称（Java Runtime Environment），很显然我们看到全称，就很容易的理解，它是Java运行时环境，包含了运行Java程序的所有配置工具，其中包括JVM。\",\" 用户在使用时，并不需要将我们写的Java文件进行编译，用户拿到的只是的打包好的jar包或者war包，本质上是Class文件，就不需要类似于javac编译器这种工具，只需要运行时的一些类库，和JVM即可。\"]},\"613\":{\"h\":\"JVM\",\"t\":[\" JVM全称（Java Virtual Machine），即为Java虚拟机，是Java将编译好的Class文件进行解释，解释成操作系统能够识别的字节码，然后进行执行。\",\" Java的一个特性就是一次编译，到处运行，就是基于JVM的，JVM就相当于一本字典，无论版本如何，字典内输出的内容都是相同的，无论在那种环境下，通过JVM解释的含义都是相同的，这就实现了一次编译，到处运行。\"]},\"614\":{\"h\":\"什么关系？\",\"t\":[\" JDK中包含了JRE和JVM，JRE中包含了JVM。三者的关系并不难懂，实质上根据需求来分析很容易。\",\" JDK是程序员编写时需要用到的，需要进行程序的调试，所以这里就必须包括编译运行的相关工具，还需要编写程序相关的工具。\",\" JRE是运行时环境，通常是用户进行使用，用户进行只是使用，并不会重新编写程序，更不会去调试，所以只需要进行运行就可以了，不需要相关的编译工具，需要相关的类库工具和JVM即可。\",\"  JVM是把Class文件进行解释的工具，是虚拟化出来的一个独立的机器，在程序运行时需要使用。\"]},\"615\":{\"h\":\"Java 基础知识\"},\"616\":{\"h\":\"ArrayList 源码解析\"},\"617\":{\"h\":\"Collection - ArrayList 源码解析\"},\"618\":{\"h\":\"介绍\",\"t\":[\"ArrayList 是 List 接口基于数组的一个实现类，故其是一个顺序集合，放入元素的顺序和实际存储的顺序是相同的，并且可以动态修改，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。\",\"ArrayList 继承了 AbstractList ，并实现了 List 接口。\"]},\"619\":{\"h\":\"使用\",\"t\":[\"ArrayList 位于 java.util 包下，语法格式如下：\",\"ArrayList<E> list = new ArrayList<>(); // 由于 ArrayList 是 List 接口的实现类，故常常这样使用 List<E> list = new ArrayList<>(); \",\"E : 代表想要存进 ArrayList 中的数据类型，只能是引用类型，想存基本数据类型时，使用其包装类即可。\",\"由于无法对 ArrayList 中的底层数组进行操作，想要操作时只能通过引用去调用对应的方法进行操作。常见的方法有：\",\"add()：增加一个元素\",\"addAll()：增加多个元素\",\"set()：修改元素\",\"remove()：删除一个元素\",\"get()：获取指定位置的元素\",\"toArray()：获取一个转换数组\",\"sort()：排序\",\"size()：计算大小\",\"isEmpty()：判断是否为空\"]},\"620\":{\"h\":\"ArrayList实现\"},\"621\":{\"h\":\"底层存储\",\"t\":[\"/** * The array buffer into which the elements of the ArrayList are stored. * The capacity of the ArrayList is the length of this array buffer. Any * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA * will be expanded to DEFAULT_CAPACITY when the first element is added. */ // non-private to simplify nested class access transient Object[] elementData; /** * The size of the ArrayList (the number of elements it contains). * * @serial */ private int size; \",\"由 ArrayList 的源码不难看出，其底层本质上还是一个数组，只不过提供了一些封装了各种操作该数组的方法，并且维护好了各项数据。\"]},\"622\":{\"h\":\"构造方法\",\"t\":[\"ArrayList 集合提供了三个构造方法：分别是 无参构造法、指定容量的构造法、指定内容的构造法。\",\"/** * Default initial capacity. */ private static final int DEFAULT_CAPACITY = 10; /** * Constructs an empty list with the specified initial capacity. * * @param initialCapacity the initial capacity of the list * @throws IllegalArgumentException if the specified initial capacity * is negative */ public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\\\"Illegal Capacity: \\\"+ initialCapacity); } } /** * Constructs an empty list with an initial capacity of ten. */ public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } /** * Constructs a list containing the elements of the specified * collection, in the order they are returned by the collection's * iterator. * * @param c the collection whose elements are to be placed into this list * @throws NullPointerException if the specified collection is null */ public ArrayList(Collection<? extends E> c) { Object[] a = c.toArray(); if ((size = a.length) != 0) { if (c.getClass() == ArrayList.class) { elementData = a; } else { elementData = Arrays.copyOf(a, size, Object[].class); } } else { // replace with empty array. elementData = EMPTY_ELEMENTDATA; } } \",\"默认容量\",\"由该部分的源码可以看出，初始化时如果未指定容量，则默认的容量大小为10；\"]},\"623\":{\"h\":\"add方法\",\"t\":[\"ArrayList 中提供了 4 个 add 方法，具体如下：\",\"方法名\",\"功能\",\"public boolean add(E e)\",\"实现的 List 接口内的 add 方法，添加并判断是否添加成功\",\"public void add(E e)\",\"添加元素 e 到列表的末尾\",\"public void add(int index, E element)\",\"添加元素 element 到数组的 index 位置\",\"public boolean addAll(Collection<? extends E> c)\",\"将指定集合 c 中的元素依次添加到列表的末尾\",\"public boolean addAll(int index, Collection<? extends E> c)\",\"将指定集合 c 中的元素依次添加到列表的 index 位置\",\"/** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return {@code true} (as specified by {@link Collection#add}) */ public boolean add(E e) { modCount++; add(e, elementData, size); return true; } public void add(int index, E element) { rangeCheckForAdd(index); checkForComodification(); root.add(offset + index, element); updateSizeAndModCount(1); } public void add(E e) { checkForComodification(); try { int i = cursor; ArrayList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = modCount; } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } /** * Appends all of the elements in the specified collection to the end of * this list, in the order that they are returned by the * specified collection's Iterator. The behavior of this operation is * undefined if the specified collection is modified while the operation * is in progress. (This implies that the behavior of this call is * undefined if the specified collection is this list, and this * list is nonempty.) * * @param c collection containing elements to be added to this list * @return {@code true} if this list changed as a result of the call * @throws NullPointerException if the specified collection is null */ public boolean addAll(Collection<? extends E> c) { Object[] a = c.toArray(); modCount++; int numNew = a.length; if (numNew == 0) return false; Object[] elementData; final int s; if (numNew > (elementData = this.elementData).length - (s = size)) elementData = grow(s + numNew); System.arraycopy(a, 0, elementData, s, numNew); size = s + numNew; return true; } /** * Inserts all of the elements in the specified collection into this * list, starting at the specified position. Shifts the element * currently at that position (if any) and any subsequent elements to * the right (increases their indices). The new elements will appear * in the list in the order that they are returned by the * specified collection's iterator. * * @param index index at which to insert the first element from the * specified collection * @param c collection containing elements to be added to this list * @return {@code true} if this list changed as a result of the call * @throws IndexOutOfBoundsException {@inheritDoc} * @throws NullPointerException if the specified collection is null */ public boolean addAll(int index, Collection<? extends E> c) { rangeCheckForAdd(index); Object[] a = c.toArray(); modCount++; int numNew = a.length; if (numNew == 0) return false; Object[] elementData; final int s; if (numNew > (elementData = this.elementData).length - (s = size)) elementData = grow(s + numNew); int numMoved = s - index; if (numMoved > 0) System.arraycopy(elementData, index, elementData, index + numNew, numMoved); System.arraycopy(a, 0, elementData, index, numNew); size = s + numNew; return true; } \"]},\"624\":{\"h\":\"get方法\",\"t\":[\"ArrayList 中 get 方法只有一种实现：public E get(int index) 获取指定下标的元素\",\"/** * Returns the element at the specified position in this list. * * @param index index of the element to return * @return the element at the specified position in this list * @throws IndexOutOfBoundsException {@inheritDoc} */ public E get(int index) { rangeCheck(index); return elementData(index); } \"]},\"625\":{\"h\":\"set方法\",\"t\":[\"set 方法的功能为，修改指定下标的元素为 element。\",\"/** * Replaces the element at the specified position in this list with * the specified element. * * @param index index of the element to replace * @param element element to be stored at the specified position * @return the element previously at the specified position * @throws IndexOutOfBoundsException {@inheritDoc} */ public E set(int index, E element) { rangeCheck(index); E oldValue = elementData(index); elementData[index] = element; return oldValue; } \"]},\"626\":{\"h\":\"remove方法\",\"t\":[\"ArrayList 中的 remove 方法有两个实现：\",\"public E remove(int index)：删除指定下标的元素\",\"public boolean remove(Object o)：删除第一个匹配成功的指定对象\",\"/** * Removes the element at the specified position in this list. * Shifts any subsequent elements to the left (subtracts one from their * indices). * * @param index the index of the element to be removed * @return the element that was removed from the list * @throws IndexOutOfBoundsException {@inheritDoc} */ public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } /** * Removes the first occurrence of the specified element from this list, * if it is present. If the list does not contain the element, it is * unchanged. More formally, removes the element with the lowest index * <tt>i</tt> such that * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> * (if such an element exists). Returns <tt>true</tt> if this list * contained the specified element (or equivalently, if this list * changed as a result of the call). * * @param o element to be removed from this list, if present * @return <tt>true</tt> if this list contained the specified element */ public boolean remove(Object o) { if (o == null) { for (int index = 0; index < size; index++) if (elementData[index] == null) { fastRemove(index); return true; } } else { for (int index = 0; index < size; index++) if (o.equals(elementData[index])) { fastRemove(index); return true; } } return false; } \"]},\"627\":{\"h\":\"自动扩容\",\"t\":[\"每次向数组中添加元素时，都会去检查添加元素的个数是否会超过当前数组的长度，如果超出，数组则会进行扩容，直到满足添加数据的需求为止。ArrayList 中的扩容是通过 ensureCapacity(int minCapacity) 方法，实际执行扩容的过程是通过调用 grow(int minCapacity) 方法来实现的。每次扩容后会变为原来容量的 1.5 倍。\",\"扩容过程为：\",\"当添加元素时，首先会检查当前数组的容量是否足够存放新元素。如果容量不够，则会执行扩容操作。\",\"扩容操作会创建一个新的数组，通常是原来容量的 1.5 倍大小。\",\"然后将原数组中的元素复制到新数组中。\",\"最后，将新数组设置为 ArrayList 的内部数组，以替代原来的数组。\",\"/** * Increases the capacity of this <tt>ArrayList</tt> instance, if * necessary, to ensure that it can hold at least the number of elements * specified by the minimum capacity argument. * * @param minCapacity the desired minimum capacity */ public void ensureCapacity(int minCapacity) { int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) // any size if not default element table ? 0 // larger than default for default empty table. It's already // supposed to be at default size. : DEFAULT_CAPACITY; if (minCapacity > minExpand) { ensureExplicitCapacity(minCapacity); } } private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } /** * Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument. * * @param minCapacity the desired minimum capacity */ private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity < 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } \"]},\"628\":{\"h\":\"Java 集合框架\"},\"629\":{\"h\":\"Java 面向对象\",\"t\":[\"待更新\"]},\"630\":{\"h\":\"后端环境搭建\",\"t\":[\"后端资料下载\",\"百度网盘\",\"下载链接: https://pan.baidu.com/s/1ISkop_BXuCCCWQTr3ynuRA?pwd=sbcw 提取码: sbcw\",\"导入项目\",\"下载解压以后，使用 IDEA 打开，然后导入 Maven 依赖即可。\"]},\"631\":{\"h\":\"数据库环境搭建\",\"t\":[\"修改数据库配置信息\",\"修改 sky-server/src/main/resources/application-dev.yml 文件内的数据库配置信息为自己的信息。\",\"driver-class-name: com.mysql.cj.jdbc.Driver host: localhost port: 3306 database: sky_take_out # 数据库名称 username: codermast # 数据库账号 password: 123456 # 数据库密码 \",\"导入数据信息\",\"执行 sky-sql/sky.sql 这个 SQL 文件内的 SQL 语句即可。\",\"这个 SQL 文件可以在该项目的 Github 仓库内找到，另外也可以在后端环境搭建章节中的资料下载中下载。\",\"这里再附上下载链接，和后端环境搭建中的下载文件是相同的。\",\"百度网盘\",\"下载链接: https://pan.baidu.com/s/1ISkop_BXuCCCWQTr3ynuRA?pwd=sbcw 提取码: sbcw\"]},\"632\":{\"h\":\"前端环境搭建\"},\"633\":{\"h\":\"Windows\",\"t\":[\"视频教程\",\"https://www.bilibili.com/video/BV1TP411v7v6/?p=5\"]},\"634\":{\"h\":\"MacOs\",\"t\":[\"前端资料下载\",\"前端资料\",\"下载地址：https://pan.baidu.com/s/1ga3Cy_CPANj7dTDLFni7mw?pwd=6cyn0 提取码: 6cyn\",\"点击上面的前端资料下载链接，即可下载。下载之后解压，解压完成以后的文件如下。\",\"安装 Nginx 服务\",\"在 MacOs 上安装 Nginx 服务，主要使用 Homebrew 工具进行安装。\",\"安装 brew\",\"/bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\\" \",\"使用 brew 安装 nginx\",\"brew install nginx \",\"配置 Nginx\",\"更改 nginx 配置文件\",\"vim /usr/local/etc/nginx/nginx.conf \",\"将其中的内容删除，然后替换为\",\"代码详情\",\"#user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; map $http_upgrade $connection_upgrade{ default upgrade; '' close; } upstream webservers{ server 127.0.0.1:8080 weight=90 ; #server 127.0.0.1:8088 weight=10 ; } server { listen 80; server_name localhost; location / { root html/sky; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # 反向代理,处理管理端发送的请求 location /api/ { proxy_pass http://localhost:8080/admin/; #proxy_pass http://webservers/admin/; } # 反向代理,处理用户端发送的请求 location /user/ { proxy_pass http://webservers/user/; } # WebSocket location /ws/ { proxy_pass http://webservers/ws/; proxy_http_version 1.1; proxy_read_timeout 3600s; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"$connection_upgrade\\\"; } } } \",\"将 sky 文件夹移动至 /usr/local/var/www 目录下\",\"可以使用如下指令打开对应的文件夹，然后拖动即可。\",\"open /usr/local/var/www \",\"启动 Nginx\",\"brew services start nginx \",\"访问项目\",\"访问 localhost:80 即可，默认为 80 端口，也可以直接访问 localhost\"]},\"635\":{\"h\":\"苍穹外卖\"},\"636\":{\"h\":\"开始之前\",\"t\":[\"在正式介绍项目之前，我想先说一下我为什么要写苍穹外卖的学习笔记。明明市面上已经有很多笔记，其中不乏特别优秀的，但为什么我还要造一些质量或许并不高的轮子呢？\",\"一方面，把学习中遇到的问题记录下来，方便了我自己的复盘和巩固。在项目编写时，可能并未意识到某些问题，然而在我们后续的复盘中常常会出现，当时明明是可以的，到底是哪里出现问题了？然后花费了大量的时间排查问题，尽管很多时候都是不显眼的小问题，相信很多人都和我有过相同的经历。故此将学习过程记录下来有利于我对项目的更深层次理解。\",\"另一方面，在学习苍穹外卖这个项目时，黑马程序员相关教程中提供的项目环境搭建使用的是 Windows 操作系统，提供的资料也是适配 Windows，但是本人所使用的电脑是 MacOs，在前端项目的部署过程中也遇到了很多困难，在解决这些问题的过程中我也花费了大量的时间和精力，在解决问题后，想到了很多人在学习该项目的时候，可能也会遇到和我相似的问题，于是便整理了我在学习中遇到的种种问题的解决方案。\",\"综上所述，本章节诞生。\"]},\"637\":{\"h\":\"项目介绍\",\"t\":[\"//TODO:待更新\"]},\"638\":{\"h\":\"代码仓库\",\"t\":[\"Github：https://github.com/CoderMast/Sky-take-out.git\"]},\"639\":{\"h\":\"参考资料\",\"t\":[\"黑马程序员\",\"视频教程：https://www.bilibili.com/video/BV1TP411v7v6\",\"资料文件：https://pan.baidu.com/s/1bjQsroxcwnNfg6jkHuspWQ?pwd=s5ru 提取码: s5ru\"]},\"640\":{\"h\":\"最后\",\"t\":[\"维护更新\",\"本章节会不断维护，本文章尚未提及，但在读者的实际学习中出现的问题，也欢迎大家在评论区交流，笔者看到也会尽量答复和解决。\"]},\"641\":{\"h\":\"Spring - 基于注解管理Bean\",\"t\":[\"从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。\",\"Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。\",\"Spring 通过注解实现自动装配的步骤如下：\",\"引入依赖\",\"开启组件扫描\",\"使用注解定义 Bean\",\"依赖注入\"]},\"642\":{\"h\":\"创建子模块\",\"t\":[\"在使用 注解 管理 Bean 之前，为了防止和之前的项目冲突，我们重新创建一个子模块，叫做 spring6-ioc-annotation ，并且引入 beans.xml 文件即可。\",\"创建 spring6-ioc-annotation\",\"引入配置文件 \",\"引入 beans.xml\",\"引入 log4j2.xml 模块日志\",\"添加依赖\",\" <dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.1.2</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.10.0</version> </dependency> <!--log4j2的依赖--> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.19.0</version> </dependency> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j2-impl</artifactId> <version>2.19.0</version> </dependency> </dependencies> \"]},\"643\":{\"h\":\"开启组件扫描\",\"t\":[\"Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML 配置中，通过 <context:component-scan> 元素开启 Spring Beans的自动扫描功能。开启此功能后，Spring 会自动从扫描指定的包（base-package 属性设置）及其子包下的所有类，如果类上使用了 @Component 注解，就将该类装配到容器中。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!--开启组件扫描功能--> <context:component-scan base-package=\\\"com.codermast.spring6\\\"></context:component-scan> </beans> \",\"注意\",\"在使用 <context:component-scan> 元素开启自动扫描功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。\",\"最基本的扫描方式\",\"<context:component-scan base-package=\\\"com.codermast.spring6\\\" /> \",\"指定要排除的组件\",\"<context:component-scan base-package=\\\"com.codermast.spring6\\\"> <!-- context:exclude-filter标签：指定排除规则 --> <!-- type：设置排除或包含的依据 type=\\\"annotation\\\"，根据注解排除，expression中设置要排除的注解的全类名 type=\\\"assignable\\\"，根据类型排除，expression中设置要排除的类型的全类名 --> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> <!--<context:exclude-filter type=\\\"assignable\\\" expression=\\\"com.com.codermast.spring6.controller.UserController\\\"/>--> </context:component-scan> \",\"仅扫描指定组件\",\"<context:component-scan base-package=\\\"com.codermast\\\" use-default-filters=\\\"false\\\"> <!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --> <!-- use-default-filters属性：取值false表示关闭默认扫描规则 --> <!-- 此时必须设置use-default-filters=\\\"false\\\"，因为默认规则即扫描指定包下所有类 --> <!-- type：设置排除或包含的依据 type=\\\"annotation\\\"，根据注解排除，expression中设置要排除的注解的全类名 type=\\\"assignable\\\"，根据类型排除，expression中设置要排除的类型的全类名 --> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> <!--<context:include-filter type=\\\"assignable\\\" expression=\\\"com.codermast.spring6.controller.UserController\\\"/>--> </context:component-scan> \"]},\"644\":{\"h\":\"使用注解定义bean\",\"t\":[\"Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。\",\"注解\",\"说明\",\"@Component\",\"该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。\",\"@Repository\",\"该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Service\",\"该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Controller\",\"该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"提示\",\"实际上这4个注解功能上都是相同的，唯一区别的就是名称上，仅为了直观的体现其在不同的层次。\"]},\"645\":{\"h\":\"数据注入\"},\"646\":{\"h\":\"@Autowired注入\",\"t\":[\"单独使用@Autowired注解，默认根据类型装配。【默认是byType】\",\"查看源码：\",\"package org.springframework.beans.factory.annotation; import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Autowired { boolean required() default true; } \",\"源码中有两处需要注意：\",\"第一处：该注解可以标注在哪里？\",\"构造方法上\",\"方法上\",\"形参上\",\"属性上\",\"注解上\",\"第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。\",\"属性注入\",\"UserDao接口\",\"public interface UserDao { public void print(); } \",\"UserDaoImpl实现类\",\"@Repository public class UserDaoImpl implements UserDao { @Override public void print() { System.out.println(\\\"Dao层执行结束\\\"); } } \",\"UserService接口\",\"public interface UserService { public void out(); } \",\"UserServiceImpl实现类\",\"@Service public class UserServiceImpl implements UserService { @Autowired private UserDao userDao; @Override public void out() { userDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"UserController\",\"@Controller public class UserController { @Autowired private UserService userService; public void out() { userService.out(); System.out.println(\\\"Controller层执行结束。\\\"); } } \",\"测试\",\"@Test public void testAnnotation() { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); UserController userController = context.getBean(\\\"userController\\\", UserController.class); userController.out(); logger.info(\\\"执行成功\\\"); } \",\"测试结果\",\"以上构造方法和setter方法都没有提供，经过测试，仍然可以注入成功。\",\"Set 注入\",\"修改 UserServiceImpl 类\",\"@Service public class UserServiceImpl implements UserService { private UserDao userDao; @Autowired public void setUserDao(UserDao userDao) { this.userDao = userDao; } @Override public void out() { userDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"修改 UserController 类\",\"@Controller public class UserController { private UserService userService; @Autowired public void setUserService(UserService userService) { this.userService = userService; } public void out() { userService.out(); System.out.println(\\\"Controller层执行结束。\\\"); } } \",\"测试：成功调用\",\"构造方法注入\",\"修改 UserServiceImpl 类\",\"// 增加构造方法 @Autowired public UserServiceImpl(UserDao userDao) { this.userDao = userDao; } \",\"修改 UserController 类\",\"// 增加构造方法 @Autowired public UserController(UserService userService) { this.userService = userService; } \",\"形参上注入\",\"修改 UserServiceImpl 类\",\"public UserServiceImpl(@Autowired UserDao userDao) { this.userDao = userDao; } \",\"修改 UserController 类\",\"public UserController(@Autowired UserService userService) { this.userService = userService; } \",\"只有一个构造函数，无注解\",\"修改 UserServiceImpl 类\",\"public UserServiceImpl(UserDao userDao) { this.userDao = userDao; } \",\"当有参数的构造方法只有一个时，@Autowired注解可以省略。\",\"说明：有多个构造方法时呢？大家可以测试（再添加一个无参构造函数），测试报错\",\"@Autowired注解和@Qualifier注解联合\",\"添加 dao 层实现\",\"@Repository public class UserDaoRedisImpl implements UserDao { @Override public void print() { System.out.println(\\\"Redis Dao层执行结束\\\"); } } \",\"测试：测试异常\",\"expected single matching bean but found 2: userDaoImpl,userDaoRedisImpl \",\"错误信息中说：不能装配，UserDao 这个 Bean 的数量等于 2\",\"怎么解决这个问题呢？当然要byName，根据名称进行装配了。\",\"修改 UserServiceImpl 类\",\"@Service public class UserServiceImpl implements UserService { @Autowired @Qualifier(\\\"userDaoImpl\\\") // 指定bean的名字 private UserDao userDao; @Override public void out() { userDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"总结\",\"@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。\",\"当带参数的构造方法只有一个，@Autowired注解可以省略。（）\",\"@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。\"]},\"647\":{\"h\":\"@Resource注入\",\"t\":[\"@Resource 注解也可以完成属性注入。那它和 @Autowired 注解有什么区别？\",\"@Resource 注解是 JDK 扩展包中的，也就是说属于 JDK 的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR 是 Java 规范提案。)\",\"@Autowired 注解是 Spring 框架自己的。\",\"@Resource 注解默认根据名称装配 byName，未指定 name 时，使用属性名作为 name 。通过name找不到的话会自动启动通过类型byType 装配。\",\"@Autowired 注解默认根据类型装配byType，如果想根据名称装配，需要配合 @Qualifier 注解一起用。\",\"@Resource 注解用在属性上、setter 方法上。\",\"@Autowired 注解用在属性上、setter 方法上、构造方法上、构造方法参数上。\",\"@Resource 注解属于 JDK 扩展包，所以不在 JDK 当中，需要额外引入以下依赖：【如果是 JDK8 的话不需要额外引入依赖。高于JDK11 或低于 JDK8 需要引入以下依赖。】\",\"<dependency> <groupId>jakarta.annotation</groupId> <artifactId>jakarta.annotation-api</artifactId> <version>2.1.1</version> </dependency> \",\"@Resource源码\",\"package jakarta.annotation; import java.lang.annotation.ElementType; import java.lang.annotation.Repeatable; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Repeatable(Resources.class) public @interface Resource { String name() default \\\"\\\"; String lookup() default \\\"\\\"; Class<?> type() default Object.class; Resource.AuthenticationType authenticationType() default Resource.AuthenticationType.CONTAINER; boolean shareable() default true; String mappedName() default \\\"\\\"; String description() default \\\"\\\"; public static enum AuthenticationType { CONTAINER, APPLICATION; private AuthenticationType() { } } } \",\"根据 name 注入\",\"修改 UserDaoImpl 类\",\"@Repository(\\\"myUserDao\\\") public class UserDaoImpl implements UserDao { @Override public void print() { System.out.println(\\\"Dao层执行结束\\\"); } } \",\"修改 UserServiceImpl 类\",\"@Service public class UserServiceImpl implements UserService { @Resource(name = \\\"myUserDao\\\") private UserDao myUserDao; @Override public void out() { myUserDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"name 未知注入\",\"修改UserDaoImpl类\",\"@Repository(\\\"myUserDao\\\") public class UserDaoImpl implements UserDao { @Override public void print() { System.out.println(\\\"Dao层执行结束\\\"); } } \",\"修改UserServiceImpl类\",\"@Service public class UserServiceImpl implements UserService { @Resource private UserDao myUserDao; @Override public void out() { myUserDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"当 @Resource 注解使用时没有指定 name 的时候，还是根据 name 进行查找，这个 name 是属性名。\",\"其他情况注入\",\"修改UserServiceImpl类，userDao1属性名不存在\",\"@Service public class UserServiceImpl implements UserService { @Resource private UserDao userDao1; @Override public void out() { userDao1.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"测试异常\",\"根据异常信息得知：显然当通过name找不到的时候，自然会启动byType进行注入，以上的错误是因为UserDao接口下有两个实现类导致的。所以根据类型注入就会报错。\",\"总结：\",\"@Resource注解：默认byName注入，没有指定name时把属性名当做name，根据name找不到时，才会byType注入。byType注入时，某种类型的Bean只能有一个，否则就会报错。\"]},\"648\":{\"h\":\"Spring全注解开发\",\"t\":[\"全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。\",\"@Configuration @ComponentScan(\\\"com.codermast.spring6\\\") public class Spring6Config { } \",\"测试类\",\"@Test public void testAllAnnotation(){ ApplicationContext context = new AnnotationConfigApplicationContext(Spring6Config.class); UserController userController = context.getBean(\\\"userController\\\", UserController.class); userController.out(); logger.info(\\\"执行成功\\\"); } \",\"测试结果\"]},\"649\":{\"h\":\"Spring - 原理手写IoC\",\"t\":[\"Spring 框架的 IOC 是基于 Java 反射机制实现的，在学习手写 IoC 之前，你需要具备一定的 Java 反射相关的知识，参考本站内的 Java 教程。\",\"Java教程\",\"//TODO: 待更新\",\"IoC（控制反转）和DI（依赖注入）是Spring里面核心的东西，本章节我们就来自己实现 Spring 框架中的 IoC 和 DI。\"]},\"650\":{\"h\":\"创建子模块\",\"t\":[\"还是和前面的几个章节一致，为了避免冲突，这里我们创建一个新的子模块，名为 spring6-ioc-reflect。\",\"引入依赖\",\"引入相关的依赖，即将依赖项写入到子模块中的 pom.xml 配置文件中。如果之前在父模块中引入了该依赖，则不用重复添加。\",\"<dependencies> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies> \",\"创建 UserDao\",\"public interface UserDao { public void print(); } \",\"创建UserDaoImpl实现\",\"public class UserDaoImpl implements UserDao { @Override public void print() { System.out.println(\\\"Dao层执行结束\\\"); } } \",\"创建UserService接口\",\"public interface UserService { public void out(); } \",\"创建UserServiceImpl实现类\",\"@Bean public class UserServiceImpl implements UserService { // private UserDao userDao; @Override public void out() { //userDao.print(); System.out.println(\\\"Service层执行结束\\\"); } } \",\"定义注解\",\"bean注解\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface Bean { } \",\"依赖注入DI注解\",\"@Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) public @interface Di { } \",\"说明：上面两个注解可以随意取名\",\"定义容器接口\",\"public interface ApplicationContext { Object getBean(Class clazz); } \",\"定义容器接口实现类\",\"AnnotationApplicationContext 实现类\",\"public class AnnotationApplicationContext implements ApplicationContext { //存储bean的容器 private HashMap<Class, Object> beanFactory = new HashMap<>(); private static String rootPath; @Override public Object getBean(Class clazz) { return beanFactory.get(clazz); } /** * 根据包扫描加载bean * * @param basePackage */ public AnnotationApplicationContext(String basePackage) { // 这里要注意的是如果在 linux 或 mac 平台下，文件的绝对路径使用的是 / 斜杠 // 而 windows 平台下是 反斜杠 \\\\ // 如果使用的错误的符号，那么就会导致 dirs 为空 // windows 使用这个 // String packageDirName = basePackage.replaceAll(\\\"\\\\\\\\.\\\", \\\"\\\\\\\\\\\\\\\\\\\"); try { String packageDirName = basePackage.replaceAll(\\\"\\\\\\\\.\\\", \\\"/\\\"); Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName); while (dirs.hasMoreElements()) { URL url = dirs.nextElement(); String filePath = URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8); rootPath = filePath.substring(0, filePath.length() - packageDirName.length()); loadBean(new File(filePath)); } } catch (Exception e) { throw new RuntimeException(e); } //依赖注入 loadDi(); } private void loadBean(File fileParent) { if (fileParent.isDirectory()) { File[] childrenFiles = fileParent.listFiles(); if (childrenFiles == null || childrenFiles.length == 0) { return; } for (File child : childrenFiles) { if (child.isDirectory()) { //如果是个文件夹就继续调用该方法,使用了递归 loadBean(child); } else { //通过文件路径转变成全类名,第一步把绝对路径部分去掉 String pathWithClass = child.getAbsolutePath().substring(rootPath.length() - 1); //选中class文件 if (pathWithClass.contains(\\\".class\\\")) { // com.codermast.dao.UserDao //去掉.class后缀，并且把 \\\\ 替换成 . // 这里和上面同理，还是 windows 和 linux Mac 平台下的文件路径分隔符不一致的问题 // String fullName = pathWithClass.replaceAll(\\\"\\\\\\\\\\\\\\\\\\\", \\\".\\\").replace(\\\".class\\\", \\\"\\\"); String fullName = pathWithClass.replaceAll(\\\"/\\\", \\\".\\\").replace(\\\".class\\\", \\\"\\\").substring(1); try { Class<?> aClass = Class.forName(fullName); //把非接口的类实例化放在map中 if (!aClass.isInterface()) { Bean annotation = aClass.getAnnotation(Bean.class); if (annotation != null) { Object instance = aClass.newInstance(); //判断一下有没有接口 if (aClass.getInterfaces().length > 0) { //如果有接口把接口的class当成key，实例对象当成value System.out.println(\\\"正在加载【\\\" + aClass.getInterfaces()[0] + \\\"】,实例对象是：\\\" + instance.getClass().getName()); beanFactory.put(aClass.getInterfaces()[0], instance); } else { //如果有接口把自己的class当成key，实例对象当成value System.out.println(\\\"正在加载【\\\" + aClass.getName() + \\\"】,实例对象是：\\\" + instance.getClass().getName()); beanFactory.put(aClass, instance); } } } } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) { e.printStackTrace(); } } } } } } private void loadDi() { for (Map.Entry<Class, Object> entry : beanFactory.entrySet()) { //就是咱们放在容器的对象 Object obj = entry.getValue(); Class<?> aClass = obj.getClass(); Field[] declaredFields = aClass.getDeclaredFields(); for (Field field : declaredFields) { Di annotation = field.getAnnotation(Di.class); if (annotation != null) { field.setAccessible(true); try { System.out.println(\\\"正在给【\\\" + obj.getClass().getName() + \\\"】属性【\\\" + field.getName() + \\\"】注入值【\\\" + beanFactory.get(field.getType()).getClass().getName() + \\\"】\\\"); field.set(obj, beanFactory.get(field.getType())); } catch (IllegalAccessException e) { e.printStackTrace(); } } } } } } \",\"警告\",\"在 AnnotationApplicationContext 的代码中，有涉及到文件的路径转换。需要注意 Windows 和 Linux、Mac 平台下的文件路径分隔符是不相同的。\",\"Windows 下是 \\\\，反斜杠\",\"Linux、Mac 下是 /，斜杠 需要注意区分，否则容易造成无法反射和注入对应的类和对象，导致空指针异常。\",\"对类进行@Bean注解标识\",\"@Bean public class UserServiceImpl implements UserService \",\"@Bean public class UserDaoImpl implements UserDao \",\"执行测试\",\"@Test public void testIoc() { ApplicationContext applicationContext = new AnnotationApplicationContext(\\\"com.codermast.reflect\\\"); UserService userService = (UserService)applicationContext.getBean(UserService.class); userService.out(); System.out.println(\\\"run success\\\"); } \",\"测试结果\"]},\"651\":{\"h\":\"Spring - 入门案例\",\"t\":[\"创建 Maven 工程\",\"引入 Spring 相关的依赖\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.9</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> </dependencies> \",\"创建java类\",\"package com.codermast.spring6.bean; public class HelloWorld { public void sayHello(){ System.out.println(\\\"helloworld\\\"); } } \",\"创建配置文件\",\"在resources目录创建一个 Spring 配置文件 beans.xml（配置文件名称可随意命名，如：springs.xml）\",\"这里的命名需要和第五步中的使用的配置文件名称相同。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理 通过bean标签配置IOC容器所管理的bean 属性： id：设置bean的唯一标识 class：设置bean所对应类型的全类名 --> <bean id=\\\"helloWorld\\\" class=\\\"com.codermast.spring6.bean.HelloWorld\\\"></bean> </beans> \",\"创建测试类\",\"package com.codermast.spring6.bean; import org.junit.jupiter.api.Test; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; public class HelloWorldTest { @Test public void testHelloWorld(){ ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); HelloWorld helloworld = (HelloWorld) ac.getBean(\\\"helloWorld\\\"); helloworld.sayHello(); } } \",\"测试运行\"]},\"652\":{\"h\":\"Spring\",\"t\":[\"Spring\"]},\"653\":{\"h\":\"参考资料\",\"t\":[\"代码仓库：\",\"Github\",\"https://github.com/CoderMast/Spring6\",\"尚硅谷Spring6视频教程\",\"视频地址\",\"https://www.bilibili.com/video/BV1kR4y1b7Qc\",\"黑马程序员Spring教程\",\"视频地址\",\"https://www.bilibili.com/video/BV1rt4y1u7q5\",\"笔记资料\",\"百度网盘\",\"链接: https://pan.baidu.com/s/1OXIMGcfgFg34mkMuVX19ow?pwd=45nc\\n提取码: 45nc\"]},\"654\":{\"h\":\"Spring - 面向切面AOP\"},\"655\":{\"h\":\"场景模拟\",\"t\":[\"还是老规矩，为了避免和之前的项目冲突，我们这里创建一个新的子模块 spring6-aop\",\"声明计算器接口 Calculator\",\"public interface Calculator { int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j); } \",\"创建一般实现类\",\"public class CalculatorImpl implements Calculator { @Override public int add(int i, int j) { int result = i + j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int sub(int i, int j) { int result = i - j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int mul(int i, int j) { int result = i * j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int div(int i, int j) { int result = i / j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } } \",\"创建带日志功能的实现类\",\"public class CalculatorLogImpl implements Calculator { @Override public int add(int i, int j) { System.out.println(\\\"[日志] add 方法开始了，参数是：\\\" + i + \\\",\\\" + j); int result = i + j; System.out.println(\\\"方法内部 result = \\\" + result); System.out.println(\\\"[日志] add 方法结束了，结果是：\\\" + result); return result; } @Override public int sub(int i, int j) { System.out.println(\\\"[日志] sub 方法开始了，参数是：\\\" + i + \\\",\\\" + j); int result = i - j; System.out.println(\\\"方法内部 result = \\\" + result); System.out.println(\\\"[日志] sub 方法结束了，结果是：\\\" + result); return result; } @Override public int mul(int i, int j) { System.out.println(\\\"[日志] mul 方法开始了，参数是：\\\" + i + \\\",\\\" + j); int result = i * j; System.out.println(\\\"方法内部 result = \\\" + result); System.out.println(\\\"[日志] mul 方法结束了，结果是：\\\" + result); return result; } @Override public int div(int i, int j) { System.out.println(\\\"[日志] div 方法开始了，参数是：\\\" + i + \\\",\\\" + j); int result = i / j; System.out.println(\\\"方法内部 result = \\\" + result); System.out.println(\\\"[日志] div 方法结束了，结果是：\\\" + result); return result; } } \",\"提出问题\",\"现有代码缺陷\",\"针对带日志功能的实现类，我们发现有如下缺陷：\",\"对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力\",\"附加功能分散在各个业务功能方法中，不利于统一维护\",\"解决思路\",\"解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。\",\"困难\",\"解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。\"]},\"656\":{\"h\":\"代理模式\",\"t\":[\"提示\",\"对代理模式还不熟悉的朋友，可以看我写的这章笔记。 // TODO: 待更新【设计模式-代理模式】\",\"二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。\",\"使用代理后：\",\"②生活中的代理\",\"广告商找大明星拍广告需要经过经纪人\",\"合作伙伴找大老板谈合作要约见面时间需要经过秘书\",\"房产中介是买卖双方的代理\",\"③相关术语\",\"代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。\",\"目标：被代理“套用”了非核心逻辑代码的类、对象、方法。\"]},\"657\":{\"h\":\"静态代理\",\"t\":[\"创建静态代理类\",\"public class CalculatorStaticProxy implements Calculator { // 将被代理的目标对象声明为成员变量 private Calculator target; public CalculatorStaticProxy(Calculator target) { this.target = target; } @Override public int add(int i, int j) { // 附加功能由代理类中的代理方法来实现 System.out.println(\\\"[日志] add 方法开始了，参数是：\\\" + i + \\\",\\\" + j); // 通过目标对象来实现核心业务逻辑 int addResult = target.add(i, j); System.out.println(\\\"[日志] add 方法结束了，结果是：\\\" + addResult); return addResult; } } \",\"静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。\",\"提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。\"]},\"658\":{\"h\":\"动态代理\",\"t\":[\"生产代理对象的工厂类：\",\"public class ProxyFactory { private Object target; public ProxyFactory(Object target) { this.target = target; } public Object getProxy(){ /** * newProxyInstance()：创建一个代理实例 * 其中有三个参数： * 1、classLoader：加载动态生成的代理类的类加载器 * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组 * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法 */ ClassLoader classLoader = target.getClass().getClassLoader(); Class<?>[] interfaces = target.getClass().getInterfaces(); InvocationHandler invocationHandler = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { /** * proxy：代理对象 * method：代理对象需要实现的方法，即其中需要重写的方法 * args：method所对应方法的参数 */ Object result = null; try { System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，参数：\\\"+ Arrays.toString(args)); result = method.invoke(target, args); System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，结果：\\\"+ result); } catch (Exception e) { e.printStackTrace(); System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，异常：\\\"+e.getMessage()); } finally { System.out.println(\\\"[动态代理][日志] \\\"+method.getName()+\\\"，方法执行完毕\\\"); } return result; } }; return Proxy.newProxyInstance(classLoader, interfaces, invocationHandler); } } \",\"测试\",\"@Test public void testDynamicProxy(){ ProxyFactory factory = new ProxyFactory(new CalculatorLogImpl()); Calculator proxy = (Calculator) factory.getProxy(); proxy.div(1,1); // 参数正常时可以正常运行 // proxy.div(1,0); // 在数学中，除法的除数不能为0，否则没意义。在实际的 Java 运算中则会报错。 } \",\"参数正常\",\"参数异常\"]},\"659\":{\"h\":\"AOP概念及相关术语\"},\"660\":{\"h\":\"概述\",\"t\":[\"AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。\"]},\"661\":{\"h\":\"相关术语\",\"t\":[\"横切关注点\",\"分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。\",\"从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。\",\"这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。\",\"通知（增强）\",\"增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。\",\"每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。\",\"前置通知：在被代理的目标方法前执行\",\"返回通知：在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知：在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知：在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置\",\"切面\",\"封装通知方法的类。\",\"目标\",\"被代理的目标对象。\",\"代理\",\"向目标对象应用通知之后创建的代理对象。\",\"连接点\",\"这也是一个纯逻辑概念，不是语法定义的。\",\"把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。通俗说，就是spring允许你使用通知的地方\",\"切入点\",\"定位连接点的方式。\",\"每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。\",\"如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。\",\"Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法\",\"切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。\",\"作用\",\"简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。\",\"代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就被切面给增强了。\"]},\"662\":{\"h\":\"基于注解的AOP\"},\"663\":{\"h\":\"技术说明\",\"t\":[\"动态代理分为JDK动态代理和cglib动态代理\",\"当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理\",\"JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口\",\"cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类\",\"动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。\",\"cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。\",\"AspectJ：是AOP思想的一种实现。本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。\"]},\"664\":{\"h\":\"准备工作\",\"t\":[\"添加依赖\",\"在 IOC 所需依赖的基础上再加入下面依赖即可：\",\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.2</version> </dependency> <!--spring aop依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.2</version> </dependency> <!--spring aspects依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.11</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.3.1</version> </dependency> <!--log4j2的依赖--> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.19.0</version> </dependency> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j2-impl</artifactId> <version>2.19.0</version> </dependency> </dependencies> \",\"准备被代理的目标资源\",\"接口\",\"public interface Calculator { int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j); } \",\"实现类\",\"@Component public class CalculatorImpl implements Calculator { @Override public int add(int i, int j) { int result = i + j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int sub(int i, int j) { int result = i - j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int mul(int i, int j) { int result = i * j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } @Override public int div(int i, int j) { int result = i / j; System.out.println(\\\"方法内部 result = \\\" + result); return result; } } \"]},\"665\":{\"h\":\"创建切面类并配置\",\"t\":[\"// @Aspect表示这个类是一个切面类 @Aspect // @Component注解保证这个切面类能够放入IOC容器 @Component public class LogAspect { @Before(\\\"execution(public int com.codermast.spring.CalculatorImpl.*(..))\\\") public void beforeMethod(JoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); String args = Arrays.toString(joinPoint.getArgs()); System.out.println(\\\"Logger-->前置通知，方法名：\\\"+methodName+\\\"，参数：\\\"+args); } @After(\\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\") public void afterMethod(JoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"Logger-->后置通知，方法名：\\\"+methodName); } @AfterReturning(value = \\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\", returning = \\\"result\\\") public void afterReturningMethod(JoinPoint joinPoint, Object result){ String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"Logger-->返回通知，方法名：\\\"+methodName+\\\"，结果：\\\"+result); } @AfterThrowing(value = \\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\", throwing = \\\"ex\\\") public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){ String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"Logger-->异常通知，方法名：\\\"+methodName+\\\"，异常：\\\"+ex); } @Around(\\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\") public Object aroundMethod(ProceedingJoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); String args = Arrays.toString(joinPoint.getArgs()); Object result = null; try { System.out.println(\\\"环绕通知-->目标对象方法执行之前\\\"); //目标对象（连接点）方法的执行 result = joinPoint.proceed(); System.out.println(\\\"环绕通知-->目标对象方法返回值之后\\\"); } catch (Throwable throwable) { throwable.printStackTrace(); System.out.println(\\\"环绕通知-->目标对象方法出现异常时\\\"); } finally { System.out.println(\\\"环绕通知-->目标对象方法执行完毕\\\"); } return result; } } \",\"在Spring的配置文件中配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\\\"> <!-- 基于注解的AOP的实现： 1、将目标对象和切面交给IOC容器管理（注解+扫描） 2、开启AspectJ的自动代理，为目标对象自动生成代理 3、将切面类通过注解@Aspect标识 --> <context:component-scan base-package=\\\"com.codermast.spring\\\"/> <aop:aspectj-autoproxy /> </beans> \",\"执行测试\",\"import com.codermast.spring.Calculator; import org.junit.jupiter.api.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; public class CalculatorTest { private Logger logger = LoggerFactory.getLogger(CalculatorTest.class); @Test public void testAdd(){ ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); Calculator calculator = ac.getBean( Calculator.class); int add = calculator.add(1, 1); logger.info(\\\"执行成功:\\\"+add); } } \",\"注意\",\"注意这里要导入的类路径，有几个类名是相同的，不要导入错了，会造成异常。\",\"测试结果\"]},\"666\":{\"h\":\"各种通知\",\"t\":[\"前置通知：使用@Before注解标识，在被代理的目标方法前执行\",\"返回通知：使用@AfterReturning注解标识，在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知：使用@AfterThrowing注解标识，在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知：使用@After注解标识，在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知：使用@Around注解标识，使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置\",\"各种通知的执行顺序：\",\"Spring版本5.3.x以前： \",\"前置通知\",\"目标操作\",\"后置通知\",\"返回通知或异常通知\",\"Spring版本5.3.x以后： \",\"前置通知\",\"目标操作\",\"返回通知或异常通知\",\"后置通知\"]},\"667\":{\"h\":\"切入点表达式语法\",\"t\":[\"①作用\",\"②语法细节\",\"用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限\",\"在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。\",\"例如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello\",\"在包名的部分，使用“*..”表示包名任意、包的层次深度任意\",\"在类名的部分，类名部分整体用*号代替，表示类名任意\",\"在类名的部分，可以使用*号代替类名的一部分\",\"例如：*Service匹配所有名称以Service结尾的类或接口\",\"在方法名部分，可以使用*号表示方法名任意\",\"在方法名部分，可以使用*号代替方法名的一部分\",\"例如：*Operation匹配所有方法名以Operation结尾的方法\",\"在方法参数列表部分，使用(..)表示参数列表任意\",\"在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头\",\"在方法参数列表部分，基本数据类型和对应的包装类型是不一样的\",\"切入点表达式中使用 int 和实际方法中 Integer 是不匹配的\",\"在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符\",\"例如：execution(public int ..Service.(.., int)) 正确 例如：execution( int *..Service.(.., int)) 错误\"]},\"668\":{\"h\":\"重用切入点表达式\",\"t\":[\"声明\",\"@Pointcut(\\\"execution(* com.atguigu.aop.annotation.*.*(..))\\\") public void pointCut(){} \",\"在同一个切面中使用\",\"@Before(\\\"pointCut()\\\") public void beforeMethod(JoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); String args = Arrays.toString(joinPoint.getArgs()); System.out.println(\\\"Logger-->前置通知，方法名：\\\"+methodName+\\\"，参数：\\\"+args); } \",\"在不同切面中使用\",\"@Before(\\\"com.atguigu.aop.CommonPointCut.pointCut()\\\") public void beforeMethod(JoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); String args = Arrays.toString(joinPoint.getArgs()); System.out.println(\\\"Logger-->前置通知，方法名：\\\"+methodName+\\\"，参数：\\\"+args); } \"]},\"669\":{\"h\":\"获取通知的相关信息\",\"t\":[\"①获取连接点信息\",\"获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参\",\"@Before(\\\"execution(public int com.codermast.spring.CalculatorImpl.*(..))\\\") public void beforeMethod(JoinPoint joinPoint){ //获取连接点的签名信息 String methodName = joinPoint.getSignature().getName(); //获取目标方法到的实参信息 String args = Arrays.toString(joinPoint.getArgs()); System.out.println(\\\"Logger-->前置通知，方法名：\\\"+methodName+\\\"，参数：\\\"+args); } \",\"②获取目标方法的返回值\",\"@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值\",\"@AfterReturning(value = \\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\", returning = \\\"result\\\") public void afterReturningMethod(JoinPoint joinPoint, Object result){ String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"Logger-->返回通知，方法名：\\\"+methodName+\\\"，结果：\\\"+result); } \",\"③获取目标方法的异常\",\"@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常\",\"@AfterThrowing(value = \\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\", throwing = \\\"ex\\\") public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){ String methodName = joinPoint.getSignature().getName(); System.out.println(\\\"Logger-->异常通知，方法名：\\\"+methodName+\\\"，异常：\\\"+ex); } \"]},\"670\":{\"h\":\"环绕通知\",\"t\":[\"@Around(\\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\") public Object aroundMethod(ProceedingJoinPoint joinPoint){ String methodName = joinPoint.getSignature().getName(); String args = Arrays.toString(joinPoint.getArgs()); Object result = null; try { System.out.println(\\\"环绕通知-->目标对象方法执行之前\\\"); //目标方法的执行，目标方法的返回值一定要返回给外界调用者 result = joinPoint.proceed(); System.out.println(\\\"环绕通知-->目标对象方法返回值之后\\\"); } catch (Throwable throwable) { throwable.printStackTrace(); System.out.println(\\\"环绕通知-->目标对象方法出现异常时\\\"); } finally { System.out.println(\\\"环绕通知-->目标对象方法执行完毕\\\"); } return result; } \"]},\"671\":{\"h\":\"切面的优先级\",\"t\":[\"相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。\",\"优先级高的切面：外面\",\"优先级低的切面：里面\",\"使用@Order注解可以控制切面的优先级：\",\"@Order(较小的数)：优先级高\",\"@Order(较大的数)：优先级低\"]},\"672\":{\"h\":\"基于XML的AOP\"},\"673\":{\"h\":\"准备工作\",\"t\":[\"参考基于注解的AOP环境\"]},\"674\":{\"h\":\"实现\",\"t\":[\"<context:component-scan base-package=\\\"com.codermast.spring.CalculatorImpl\\\"></context:component-scan> <aop:config> <!--配置切面类--> <aop:aspect ref=\\\"loggerAspect\\\"> <aop:pointcut id=\\\"pointCut\\\" expression=\\\"execution(* com.codermast.spring.CalculatorImpl.*(..))\\\"/> <aop:before method=\\\"beforeMethod\\\" pointcut-ref=\\\"pointCut\\\"></aop:before> <aop:after method=\\\"afterMethod\\\" pointcut-ref=\\\"pointCut\\\"></aop:after> <aop:after-returning method=\\\"afterReturningMethod\\\" returning=\\\"result\\\" pointcut-ref=\\\"pointCut\\\"></aop:after-returning> <aop:after-throwing method=\\\"afterThrowingMethod\\\" throwing=\\\"ex\\\" pointcut-ref=\\\"pointCut\\\"></aop:after-throwing> <aop:around method=\\\"aroundMethod\\\" pointcut-ref=\\\"pointCut\\\"></aop:around> </aop:aspect> </aop:config> \"]},\"675\":{\"h\":\"Spring - AOT提前编译\"},\"676\":{\"h\":\"AOT概述\"},\"677\":{\"h\":\"JIT与AOT的区别\",\"t\":[\"JIT和AOT 这个名词是指两种不同的编译方式，这两种编译方式的主要区别在于是否在“运行时”进行编译\",\"（1）JIT， Just-in-time,动态(即时)编译，边运行边编译；\",\"在程序运行时，根据算法计算出热点代码，然后进行 JIT 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。JIT 缺点就是编译需要占用运行时资源，会导致进程卡顿。\",\"（2）AOT，Ahead Of Time，指运行前编译，预先编译。\",\"AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT 缺点就是在程序运行前编译会使程序安装的时间增加。\",\"**简单来讲：**JIT即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。\",\".java -> .class -> (使用jaotc编译工具) -> .so（程序函数库,即编译好的可以供其他程序使用的代码和数据） \",\"（3）AOT的优点\",\"**简单来讲，**Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。\",\"在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗 可以在程序运行初期就达到最高性能，程序启动速度快 运行产物只有机器码，打包体积小\",\"AOT的缺点\",\"由于是静态提前编译，不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如JIT 没有动态能力，同一份产物不能跨平台运行\",\"第一种即时编译 (JIT) 是默认模式，Java Hotspot 虚拟机使用它在运行时将字节码转换为机器码。后者提前编译 (AOT)由新颖的 GraalVM 编译器支持，并允许在构建时将字节码直接静态编译为机器码。\",\"现在正处于云原生，降本增效的时代，Java 相比于 Go、Rust 等其他编程语言非常大的弊端就是启动编译和启动进程非常慢，这对于根据实时计算资源，弹性扩缩容的云原生技术相冲突，Spring6 借助 AOT 技术在运行时内存占用低，启动速度快，逐渐的来满足 Java 在云原生时代的需求，对于大规模使用 Java 应用的商业公司可以考虑尽早调研使用 JDK17，通过云原生技术为公司实现降本增效。\"]},\"678\":{\"h\":\"Graalvm\",\"t\":[\"Spring6 支持的 AOT 技术，这个 GraalVM 就是底层的支持，Spring 也对 GraalVM 本机映像提供了一流的支持。GraalVM 是一种高性能 JDK，旨在加速用 Java 和其他 JVM 语言编写的应用程序的执行，同时还为 JavaScript、Python 和许多其他流行语言提供运行时。 GraalVM 提供两种运行 Java 应用程序的方法：在 HotSpot JVM 上使用 Graal 即时 (JIT) 编译器或作为提前 (AOT) 编译的本机可执行文件。 GraalVM 的多语言能力使得在单个应用程序中混合多种编程语言成为可能，同时消除了外语调用成本。GraalVM 向 HotSpot Java 虚拟机添加了一个用 Java 编写的高级即时 (JIT) 优化编译器。\",\"GraalVM 具有以下特性：\",\"（1）一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源\",\"（2）AOT 本机图像编译提前将 Java 应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能\",\"（3）Polyglot 编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销\",\"（4）高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗\",\"总的来说对云原生的要求不算高短期内可以继续使用 2.7.X 的版本和 JDK8，不过 Spring 官方已经对 Spring6 进行了正式版发布。\"]},\"679\":{\"h\":\"Native Image\",\"t\":[\"目前业界除了这种在JVM中进行AOT的方案，还有另外一种实现Java AOT的思路，那就是直接摒弃JVM，和C/C++一样通过编译器直接将代码编译成机器代码，然后运行。这无疑是一种直接颠覆Java语言设计的思路，那就是GraalVM Native Image。它通过C语言实现了一个超微缩的运行时组件 —— Substrate VM，基本实现了JVM的各种特性，但足够轻量、可以被轻松内嵌，这就让Java语言和工程摆脱JVM的限制，能够真正意义上实现和C/C++一样的AOT编译。这一方案在经过长时间的优化和积累后，已经拥有非常不错的效果，基本上成为Oracle官方首推的Java AOT解决方案。\\nNative Image 是一项创新技术，可将 Java 代码编译成独立的本机可执行文件或本机共享库。在构建本机可执行文件期间处理的 Java 字节码包括所有应用程序类、依赖项、第三方依赖库和任何所需的 JDK 类。生成的自包含本机可执行文件特定于不需要 JVM 的每个单独的操作系统和机器体系结构。\"]},\"680\":{\"h\":\"Spring - 数据校验\",\"t\":[\"在开发中，我们经常遇到参数校验的需求，比如用户注册的时候，要校验用户名不能为空、用户名长度不超过20个字符、手机号是合法的手机号格式等等。如果使用普通方式，我们会把校验的代码和真正的业务处理逻辑耦合在一起，而且如果未来要新增一种校验逻辑也需要在修改多个地方。而spring validation允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，让代码编写更加方便。Spring Validation其实就是对Hibernate Validator进一步的封装，方便在Spring中使用。\",\"在Spring中有多种校验的方式\",\"第一种是通过实现org.springframework.validation.Validator接口，然后在代码中调用这个类\",\"第二种是按照Bean Validation方式来进行校验，即通过注解的方式。\",\"第三种是基于方法实现校验\",\"除此之外，还可以实现自定义校验\"]},\"681\":{\"h\":\"通过Validator接口实现\",\"t\":[\"第一步 创建子模块 spring6-validation\",\"第二步 引入相关依赖\",\"<dependencies> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> <version>7.0.5.Final</version> </dependency> <dependency> <groupId>org.glassfish</groupId> <artifactId>jakarta.el</artifactId> <version>4.0.2</version> </dependency> </dependencies> \",\"第三步 创建实体类，定义属性和方法\",\"public class Person { private String name; private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } \",\"第四步 创建类实现Validator接口，实现接口方法指定校验规则\",\"import org.springframework.validation.Errors; import org.springframework.validation.ValidationUtils; import org.springframework.validation.Validator; public class PersonValidator implements Validator { @Override public boolean supports(Class<?> clazz) { return Person.class.equals(clazz); } @Override public void validate(Object object, Errors errors) { ValidationUtils.rejectIfEmpty(errors, \\\"name\\\", \\\"name.empty\\\"); Person p = (Person) object; if (p.getAge() < 0) { errors.rejectValue(\\\"age\\\", \\\"error value < 0\\\"); } else if (p.getAge() > 110) { errors.rejectValue(\\\"age\\\", \\\"error value too old\\\"); } } } \",\"上面定义的类，其实就是实现接口中对应的方法，\",\"supports方法用来表示此校验用在哪个类型上，\",\"validate是设置校验逻辑的地点，其中ValidationUtils，是Spring封装的校验工具类，帮助快速实现校验。\",\"第五步 使用上述Validator进行测试\",\"import org.springframework.validation.BindingResult; import org.springframework.validation.DataBinder; public class TestMethod1 { public static void main(String[] args) { //创建person对象 Person person = new Person(); person.setName(\\\"codermast\\\"); person.setAge(-1); // 创建Person对应的DataBinder DataBinder binder = new DataBinder(person); // 设置校验 binder.setValidator(new PersonValidator()); // 由于Person对象中的属性为空，所以校验不通过 binder.validate(); //输出结果 BindingResult results = binder.getBindingResult(); System.out.println(results.getAllErrors()); } } \"]},\"682\":{\"h\":\"Bean Validation注解实现\",\"t\":[\"使用Bean Validation校验方式，就是如何将Bean Validation需要使用的javax.validation.ValidatorFactory 和javax.validation.Validator注入到容器中。spring默认有一个实现类LocalValidatorFactoryBean，它实现了上面Bean Validation中的接口，并且也实现了org.springframework.validation.Validator接口。\",\"第一步 创建配置类，配置LocalValidatorFactoryBean\",\"@Configuration @ComponentScan(\\\"com.codermast.spring\\\") public class ValidationConfig { @Bean public LocalValidatorFactoryBean validator() { return new LocalValidatorFactoryBean(); } } \",\"第二步 创建实体类，使用注解定义校验规则\",\"import jakarta.validation.constraints.Max; import jakarta.validation.constraints.Min; import jakarta.validation.constraints.NotNull; public class User { @NotNull private String name; @Min(0) @Max(120) private int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } \",\"常用注解说明 @NotNull 限制必须不为null @NotEmpty 只作用于字符串类型，字符串不为空，并且长度不为0 @NotBlank 只作用于字符串类型，字符串不为空，并且trim()后不为空串 @DecimalMax(value) 限制必须为一个不大于指定值的数字 @DecimalMin(value) 限制必须为一个不小于指定值的数字 @Max(value) 限制必须为一个不大于指定值的数字 @Min(value) 限制必须为一个不小于指定值的数字 @Pattern(value) 限制必须符合指定的正则表达式 @Size(max,min) 限制字符长度必须在min到max之间 @Email 验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式\",\"第三步 使用两种不同的校验器实现\",\"（1）使用jakarta.validation.Validator校验\",\"import jakarta.validation.ConstraintViolation; import jakarta.validation.Validator; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.Set; @Service public class MyService1 { @Autowired private Validator validator; public boolean validator(User user){ Set<ConstraintViolation<User>> sets = validator.validate(user); return sets.isEmpty(); } } \",\"（2）使用org.springframework.validation.Validator校验\",\"import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.validation.BindException; import org.springframework.validation.Validator; @Service public class MyService2 { @Autowired private Validator validator; public boolean validaPersonByValidator(User user) { BindException bindException = new BindException(user, user.getName()); validator.validate(user, bindException); return bindException.hasErrors(); } } \",\"第四步 测试\",\"import org.junit.jupiter.api.Test; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class TestMethod2 { @Test public void testMyService1() { ApplicationContext context = new AnnotationConfigApplicationContext(ValidationConfig.class); MyService1 myService = context.getBean(MyService1.class); User user = new User(); user.setAge(-1); boolean validator = myService.validator(user); System.out.println(validator); } @Test public void testMyService2() { ApplicationContext context = new AnnotationConfigApplicationContext(ValidationConfig.class); MyService2 myService = context.getBean(MyService2.class); User user = new User(); user.setName(\\\"lucy\\\"); user.setAge(130); user.setAge(-1); boolean validator = myService.validaPersonByValidator(user); System.out.println(validator); } } \"]},\"683\":{\"h\":\"基于方法实现校验\",\"t\":[\"第一步 创建配置类，配置MethodValidationPostProcessor\",\"import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; import org.springframework.validation.beanvalidation.MethodValidationPostProcessor; @Configuration @ComponentScan(\\\"com.atguigu.spring6.validation.method3\\\") public class ValidationConfig { @Bean public MethodValidationPostProcessor validationPostProcessor() { return new MethodValidationPostProcessor(); } } \",\"第二步 创建实体类，使用注解设置校验规则\",\"package com.atguigu.spring6.validation.method3; import jakarta.validation.constraints.*; public class User { @NotNull private String name; @Min(0) @Max(120) private int age; @Pattern(regexp = \\\"^1(3|4|5|7|8)\\\\\\\\d{9}$\\\",message = \\\"手机号码格式错误\\\") @NotBlank(message = \\\"手机号码不能为空\\\") private String phone; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } } \",\"第三步 定义Service类，通过注解操作对象\",\"import jakarta.validation.Valid; import jakarta.validation.constraints.NotNull; import org.springframework.stereotype.Service; import org.springframework.validation.annotation.Validated; @Service @Validated public class MyService { public String testParams(@NotNull @Valid User user) { return user.toString(); } } \",\"第四步 测试\",\"import org.junit.jupiter.api.Test; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class TestMethod3 { @Test public void testMyService1() { ApplicationContext context = new AnnotationConfigApplicationContext(ValidationConfig.class); MyService myService = context.getBean(MyService.class); User user = new User(); user.setAge(-1); myService.testParams(user); } } \"]},\"684\":{\"h\":\"实现自定义校验\",\"t\":[\"第一步 自定义校验注解\",\"import jakarta.validation.Constraint; import jakarta.validation.Payload; import java.lang.annotation.*; @Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER}) @Retention(RetentionPolicy.RUNTIME) @Documented @Constraint(validatedBy = {CannotBlankValidator.class}) public @interface CannotBlank { //默认错误消息 String message() default \\\"不能包含空格\\\"; //分组 Class<?>[] groups() default {}; //负载 Class<? extends Payload>[] payload() default {}; //指定多个时使用 @Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE}) @Retention(RetentionPolicy.RUNTIME) @Documented @interface List { CannotBlank[] value(); } } \",\"第二步 编写真正的校验类\",\"import jakarta.validation.ConstraintValidator; import jakarta.validation.ConstraintValidatorContext; public class CannotBlankValidator implements ConstraintValidator<CannotBlank, String> { @Override public void initialize(CannotBlank constraintAnnotation) { } @Override public boolean isValid(String value, ConstraintValidatorContext context) { //null时不进行校验 if (value != null && value.contains(\\\" \\\")) { //获取默认提示信息 String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate(); System.out.println(\\\"default message :\\\" + defaultConstraintMessageTemplate); //禁用默认提示信息 context.disableDefaultConstraintViolation(); //设置提示语 context.buildConstraintViolationWithTemplate(\\\"can not contains blank\\\").addConstraintViolation(); return false; } return true; } } \"]},\"685\":{\"h\":\"Spring - 国际化i18n\"},\"686\":{\"h\":\"i18n概述\",\"t\":[\"国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。\"]},\"687\":{\"h\":\"Java国际化\",\"t\":[\"（1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：\",\" /** * This method must be called only for creating the Locale.* * constants due to making shortcuts. */ private static Locale createConstant(String lang, String country) { BaseLocale base = BaseLocale.createInstance(lang, country); return getInstance(base, null); } \",\"（2）配置文件命名规则：basename_language_country.properties 必须遵循以上的命名规则，java才会识别。其中，basename是必须的，语言和国家是可选的。这里存在一个优先级概念，如果同时提供了messages.properties和messages_zh_CN.propertes两个配置文件，如果提供的locale符合en_CN，那么优先查找messages_en_CN.propertes配置文件，如果没查找到，再查找messages.properties配置文件。最后，提示下，所有的配置文件必须放在classpath中，一般放在resources目录下\",\"（3）实验：演示Java国际化\",\"第一步 创建子模块spring6-i18n，引入spring依赖\",\"第二步 在resource目录下创建两个配置文件：messages_zh_CN.propertes和messages_en_GB.propertes\",\"第三步 测试\",\"import java.nio.charset.StandardCharsets; import java.util.Locale; import java.util.ResourceBundle; public class Demo1 { public static void main(String[] args) { System.out.println(ResourceBundle.getBundle(\\\"messages\\\", new Locale(\\\"en\\\",\\\"GB\\\")).getString(\\\"test\\\")); System.out.println(ResourceBundle.getBundle(\\\"messages\\\", new Locale(\\\"zh\\\",\\\"CN\\\")).getString(\\\"test\\\")); } } \"]},\"688\":{\"h\":\"Spring6国际化\"},\"689\":{\"h\":\"MessageSource接口\",\"t\":[\"spring中国际化是通过MessageSource这个接口来支持的\",\"常见实现类\",\"ResourceBundleMessageSource\",\"这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源\",\"ReloadableResourceBundleMessageSource\",\"这个功能和第一个类的功能类似，多了定时刷新功能，允许在不重启系统的情况下，更新资源的信息\",\"StaticMessageSource\",\"它允许通过编程的方式提供国际化信息，一会我们可以通过这个来实现db中存储国际化信息的功能。\"]},\"690\":{\"h\":\"使用Spring6国际化\",\"t\":[\"第一步 创建资源文件\",\"国际化文件命名格式：基本名称 _ 语言 _ 国家.properties\",\"{0},{1}这样内容，就是动态参数\",\"（1）创建codermast_en_US.properties\",\"www.codermast.com=welcome {0},time:{1} \",\"（2）创建codermast_zh_CN.properties\",\"www.codermast.com=欢迎 {0},时间:{1} \",\"第二步 创建spring配置文件，配置MessageSource\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"messageSource\\\" class=\\\"org.springframework.context.support.ResourceBundleMessageSource\\\"> <property name=\\\"basenames\\\"> <list> <value>codermast</value> </list> </property> <property name=\\\"defaultEncoding\\\" value=\\\"utf-8\\\"/> </bean> </beans> \",\"第三步 创建测试类\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import java.util.Date; import java.util.Locale; public class Demo2 { public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); //传递动态参数，使用数组形式对应{0} {1}顺序 Object[] objs = new Object[]{\\\"codermast\\\",new Date().toString()}; //www.codermast.com为资源文件的key值, //objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言 String str=context.getMessage(\\\"www.codermast.com\\\", objs, Locale.CHINA); System.out.println(str); } } \"]},\"691\":{\"h\":\"Spring - IOC容器\",\"t\":[\"IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。\",\"Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。\",\"我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。\",\"IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。\"]},\"692\":{\"h\":\"IOC容器\"},\"693\":{\"h\":\"IOC控制反转\",\"t\":[\"控制反转是一种思想。\",\"控制反转是为了降低程序耦合度，提高程序扩展力。\",\"控制反转，反转的是什么？\",\"将对象的创建权利交出去，交给第三方容器负责。\",\"将对象和对象之间关系的维护权交出去，交给第三方容器负责。\",\"举个简单的例子，如果我们要创建一个对象 A，而 A 又需要 B，那么我们在创建 A 的时候，就需要先创建一个 B，才能创建一个 A。通过 IOC，我们可以将 A、B 都交给 IOC 容器，此时再创建 A 时，IOC 容器会自动创建好 B 和 A。\",\"通过 IOC 创建的对象和我们使用 new 创建的 Java 对象没有任何区别。\",\"IOC 容器中放的是 Bean 对象，使用的是 Map 集合来进行存储。\",\"控制反转这种思想如何实现呢？DI（Dependency Injection）：依赖注入\"]},\"694\":{\"h\":\"依赖注入\",\"t\":[\"DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。\",\"依赖注入：指Spring创建对象的过程中，将对象依赖属性通过配置进行注入\",\"依赖注入常见的实现方式包括两种：\",\"第一种：set方法注入\",\"第二种：构造方法注入\",\"本质上来说 IOC 就是一种控制反转的思想， 而 DI 是对IOC的一种具体实现。\",\"Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。\"]},\"695\":{\"h\":\"IoC容器在Spring中的实现\",\"t\":[\"Spring 的 IoC 容器就是 IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：\",\"①BeanFactory\",\"这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。\",\"②ApplicationContext\",\"BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。\",\"③ApplicationContext的主要实现类\",\"类型名\",\"简介\",\"ClassPathXmlApplicationContext\",\"通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象\",\"FileSystemXmlApplicationContext\",\"通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象\",\"ConfigurableApplicationContext\",\"ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。\",\"WebApplicationContext\",\"专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。\"]},\"696\":{\"h\":\"Spring - 单元测试JUnit\",\"t\":[\"在之前的测试方法中，几乎都能看到以下的两行代码：\",\"ApplicationContext context = new ClassPathXmlApplicationContext(\\\"xxx.xml\\\"); Xxxx xxx = context.getBean(Xxxx.class); \",\"这两行代码的作用是创建Spring容器，最终获取到对象，但是每次测试都需要重复编写。针对上述问题，我们需要的是程序能自动帮我们创建容器。我们都知道JUnit无法知晓我们是否使用了 Spring 框架，更不用说帮我们创建 Spring 容器了。Spring提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件位置就可以了。这样一来，我们通过Spring整合JUnit可以使程序创建spring容器了\"]},\"697\":{\"h\":\"整合JUnit5\"},\"698\":{\"h\":\"搭建子模块\",\"t\":[\"搭建spring-junit模块\"]},\"699\":{\"h\":\"引入依赖\",\"t\":[\"<dependencies> <!--spring context依赖--> <!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.11</version> </dependency> <!--spring对junit的支持相关依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>6.0.2</version> </dependency> <!--junit5测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.3</version> </dependency> <!--log4j2的依赖--> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.19.0</version> </dependency> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j2-impl</artifactId> <version>2.19.0</version> </dependency> </dependencies> \"]},\"700\":{\"h\":\"添加配置文件\",\"t\":[\"beans.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:component-scan base-package=\\\"com.codermast.spring6.bean\\\"/> </beans> \",\"copy日志文件：log4j2.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration> <loggers> <!-- level指定日志级别，从低到高的优先级： TRACE < DEBUG < INFO < WARN < ERROR < FATAL trace：追踪，是最低的日志级别，相当于追踪程序的执行 debug：调试，一般在开发中，都将其设置为最低的日志级别 info：信息，输出重要的信息，使用较多 warn：警告，输出警告的信息 error：错误，输出错误信息 fatal：严重错误 --> <root level=\\\"DEBUG\\\"> <appender-ref ref=\\\"spring6log\\\"/> <appender-ref ref=\\\"RollingFile\\\"/> <appender-ref ref=\\\"log\\\"/> </root> </loggers> <appenders> <!--输出日志信息到控制台--> <console name=\\\"spring6log\\\" target=\\\"SYSTEM_OUT\\\"> <!--控制日志输出的格式--> <PatternLayout pattern=\\\"%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n\\\"/> </console> <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--> <File name=\\\"log\\\" fileName=\\\"d:/spring6_log/test.log\\\" append=\\\"false\\\"> <PatternLayout pattern=\\\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\\\"/> </File> <!-- 这个会打印出所有的信息， 每次大小超过size， 则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩， 作为存档--> <RollingFile name=\\\"RollingFile\\\" fileName=\\\"d:/spring6_log/app.log\\\" filePattern=\\\"log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz\\\"> <PatternLayout pattern=\\\"%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n\\\"/> <SizeBasedTriggeringPolicy size=\\\"50MB\\\"/> <!-- DefaultRolloverStrategy属性如不设置， 则默认为最多同一文件夹下7个文件，这里设置了20 --> <DefaultRolloverStrategy max=\\\"20\\\"/> </RollingFile> </appenders> </configuration> \"]},\"701\":{\"h\":\"添加Java类\",\"t\":[\"package com.codermast.spring6.bean; import org.springframework.stereotype.Component; @Component public class User { public User() { System.out.println(\\\"run user\\\"); } } \"]},\"702\":{\"h\":\"测试\",\"t\":[\"import com.codermast.spring6.bean.User; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.springframework.test.context.junit.jupiter.SpringJUnitConfig; //两种方式均可 //方式一 //@ExtendWith(SpringExtension.class) //@ContextConfiguration(\\\"classpath:beans.xml\\\") //方式二 @SpringJUnitConfig(locations = \\\"classpath:beans.xml\\\") public class UserTest { @Autowired private User user; @Test public void testUser(){ System.out.println(user); } } \",\"测试结果\"]},\"703\":{\"h\":\"Spring - 资源操作\"},\"704\":{\"h\":\"Resources概述\",\"t\":[\"Java的标准java.net.URL类和各种URL前缀的标准处理程序无法满足所有对low-level资源的访问，比如：没有标准化的 URL 实现可用于访问需要从类路径或相对于 ServletContext 获取的资源。并且缺少某些Spring所需要的功能，例如检测某资源是否存在等。而Spring的Resource声明了访问low-level资源的能力。\"]},\"705\":{\"h\":\"Resource接口\",\"t\":[\"Spring 的 Resource 接口位于 org.springframework.core.io 中。 旨在成为一个更强大的接口，用于抽象对低级资源的访问。以下显示了Resource接口定义的方法\",\"public interface Resource extends InputStreamSource { boolean exists(); boolean isReadable(); boolean isOpen(); boolean isFile(); URL getURL() throws IOException; URI getURI() throws IOException; File getFile() throws IOException; ReadableByteChannel readableChannel() throws IOException; long contentLength() throws IOException; long lastModified() throws IOException; Resource createRelative(String relativePath) throws IOException; String getFilename(); String getDescription(); } \",\"Resource接口继承了InputStreamSource接口，提供了很多InputStreamSource所没有的方法。InputStreamSource接口，只有一个方法：\",\"public interface InputStreamSource { InputStream getInputStream() throws IOException; } \",\"其中一些重要的方法：\",\"getInputStream(): 找到并打开资源，返回一个InputStream以从资源中读取。预计每次调用都会返回一个新的InputStream()，调用者有责任关闭每个流 exists(): 返回一个布尔值，表明某个资源是否以物理形式存在 isOpen: 返回一个布尔值，指示此资源是否具有开放流的句柄。如果为true，InputStream就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏。对于所有常规资源实现，返回false，但是InputStreamResource除外。 getDescription(): 返回资源的描述，用来输出错误的日志。这通常是完全限定的文件名或资源的实际URL。\",\"其他方法：\",\"isReadable(): 表明资源的目录读取是否通过getInputStream()进行读取。 isFile(): 表明这个资源是否代表了一个文件系统的文件。 getURL(): 返回一个URL句柄，如果资源不能够被解析为URL，将抛出IOException getURI(): 返回一个资源的URI句柄 getFile(): 返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出FileNotFoundException lastModified(): 资源最后一次修改的时间戳 createRelative(): 创建此资源的相关资源 getFilename(): 资源的文件名是什么 例如：最后一部分的文件名 myfile.txt\"]},\"706\":{\"h\":\"Resource的实现类\",\"t\":[\"Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource\"]},\"707\":{\"h\":\"UrlResource访问网络资源\",\"t\":[\"Resource的一个实现类，用来访问网络资源，它支持URL的绝对路径。\",\"http:------该前缀用于访问基于HTTP协议的网络资源。\",\"ftp:------该前缀用于访问基于FTP协议的网络资源\",\"file: ------该前缀用于从文件系统中读取资源\",\"实验：访问基于HTTP协议的网络资源\",\"创建一个maven子模块spring6-resources，配置Spring依赖（参考前面）\",\"import org.springframework.core.io.UrlResource; public class UrlResourcesDemo { public static void loadAndReadUrlResource(String path){ // 创建一个 Resource 对象 UrlResource url = null; try { url = new UrlResource(path); // 获取资源名 System.out.println(url.getFilename()); System.out.println(url.getURI()); // 获取资源描述 System.out.println(url.getDescription()); //获取资源内容 System.out.println(url.getInputStream().read()); } catch (Exception e) { throw new RuntimeException(e); } } public static void main(String[] args) { //访问网络资源 loadAndReadUrlResource(\\\"https://www.codermast.com\\\"); } } \",\"实验二：在项目根路径下创建文件，从文件系统中读取资源\",\"方法不变，修改调用传递路径\",\"public static void main(String[] args) { //1 访问网络资源 //loadAndReadUrlResource(\\\"http://www..com\\\"); //2 访问文件系统资源 loadAndReadUrlResource(\\\"file:codermast.txt\\\"); } \"]},\"708\":{\"h\":\"ClassPathResource 访问类路径下资源\",\"t\":[\"ClassPathResource 用来访问类加载路径下的资源，相对于其他的 Resource 实现类，其主要优势是方便访问类加载路径里的资源，尤其对于 Web 应用，ClassPathResource 可自动搜索位于 classes 下的资源文件，无须使用绝对路径访问。\",\"实验：在类路径下创建文件codermast.txt，使用ClassPathResource 访问\",\"import org.springframework.core.io.ClassPathResource; import java.io.InputStream; public class ClassPathResourceDemo { public static void loadAndReadUrlResource(String path) throws Exception{ // 创建一个 Resource 对象 ClassPathResource resource = new ClassPathResource(path); // 获取文件名 System.out.println(\\\"resource.getFileName = \\\" + resource.getFilename()); // 获取文件描述 System.out.println(\\\"resource.getDescription = \\\"+ resource.getDescription()); //获取文件内容 InputStream in = resource.getInputStream(); byte[] b = new byte[1024]; while(in.read(b)!=-1) { System.out.println(new String(b)); } } public static void main(String[] args) throws Exception { loadAndReadUrlResource(\\\"codermast.txt\\\"); } } \",\"ClassPathResource实例可使用ClassPathResource构造器显式地创建，但更多的时候它都是隐式地创建的。当执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含classpath:前缀后，系统会自动创建ClassPathResource对象。\"]},\"709\":{\"h\":\"FileSystemResource 访问文件系统资源\",\"t\":[\"Spring 提供的 FileSystemResource 类用于访问文件系统资源，使用 FileSystemResource 来访问文件系统资源并没有太大的优势，因为 Java 提供的 File 类也可用于访问文件系统资源。\",\"实验：使用FileSystemResource 访问文件系统资源\",\"import org.springframework.core.io.FileSystemResource; import java.io.InputStream; public class FileSystemResourceDemo { public static void loadAndReadUrlResource(String path) throws Exception{ //相对路径 FileSystemResource resource = new FileSystemResource(\\\"atguigu.txt\\\"); //绝对路径 //FileSystemResource resource = new FileSystemResource(\\\"C:\\\\\\\\atguigu.txt\\\"); // 获取文件名 System.out.println(\\\"resource.getFileName = \\\" + resource.getFilename()); // 获取文件描述 System.out.println(\\\"resource.getDescription = \\\"+ resource.getDescription()); //获取文件内容 InputStream in = resource.getInputStream(); byte[] b = new byte[1024]; while(in.read(b)!=-1) { System.out.println(new String(b)); } } public static void main(String[] args) throws Exception { loadAndReadUrlResource(\\\"atguigu.txt\\\"); } } \",\"FileSystemResource实例可使用FileSystemResource构造器显示地创建，但更多的时候它都是隐式创建。执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含file:前缀后，系统将会自动创建FileSystemResource对象。\"]},\"710\":{\"h\":\"ServletContextResource\",\"t\":[\"这是ServletContext资源的Resource实现，它解释相关Web应用程序根目录中的相对路径。它始终支持流(stream)访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。无论它是在文件系统上扩展还是直接从JAR或其他地方（如数据库）访问，实际上都依赖于Servlet容器。\"]},\"711\":{\"h\":\"InputStreamResource\",\"t\":[\"InputStreamResource 是给定的输入流(InputStream)的Resource实现。它的使用场景在没有特定的资源实现的时候使用(感觉和@Component 的适用场景很相似)。与其他Resource实现相比，这是已打开资源的描述符。 因此，它的isOpen()方法返回true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。\"]},\"712\":{\"h\":\"ByteArrayResource\",\"t\":[\"字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。\"]},\"713\":{\"h\":\"Resource类图\",\"t\":[\"上述Resource实现类与Resource顶级接口之间的关系可以用下面的UML关系模型来表示\"]},\"714\":{\"h\":\"ResourceLoader 接口\"},\"715\":{\"h\":\"ResourceLoader 概述\",\"t\":[\"Spring 提供如下两个标志性接口：\",\"（1）ResourceLoader ： 该接口实现类的实例可以获得一个Resource实例。\",\"（2） ResourceLoaderAware ： 该接口实现类的实例将获得一个ResourceLoader的引用。\",\"在ResourceLoader接口里有如下方法：\",\"（1）Resource getResource（String location） ： 该接口仅有这个方法，用于返回一个Resource实例。ApplicationContext实现类都实现ResourceLoader接口，因此ApplicationContext可直接获取Resource实例。\"]},\"716\":{\"h\":\"使用演示\",\"t\":[\"实验一：ClassPathXmlApplicationContext获取Resource实例\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.core.io.Resource; public class Demo1 { public static void main(String[] args) { ApplicationContext ctx = new ClassPathXmlApplicationContext(); // 通过ApplicationContext访问资源 // ApplicationContext实例获取Resource实例时， // 默认采用与ApplicationContext相同的资源访问策略 Resource res = ctx.getResource(\\\"codermast.txt\\\"); System.out.println(res.getFilename()); } } \",\"实验二：FileSystemApplicationContext获取Resource实例\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext; import org.springframework.core.io.Resource; public class Demo2 { public static void main(String[] args) { ApplicationContext ctx = new FileSystemXmlApplicationContext(); Resource res = ctx.getResource(\\\"codermast.txt\\\"); System.out.println(res.getFilename()); } } \"]},\"717\":{\"h\":\"ResourceLoader 总结\",\"t\":[\"Spring将采用和ApplicationContext相同的策略来访问资源。也就是说，如果ApplicationContext是FileSystemXmlApplicationContext，res就是FileSystemResource实例；如果ApplicationContext是ClassPathXmlApplicationContext，res就是ClassPathResource实例\",\"当Spring应用需要进行资源访问时，实际上并不需要直接使用Resource实现类，而是调用ResourceLoader实例的getResource()方法来获得资源，ReosurceLoader将会负责选择Reosurce实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开来\",\"另外，使用ApplicationContext访问资源时，可通过不同前缀指定强制使用指定的ClassPathResource、FileSystemResource等实现类\",\"Resource res = ctx.getResource(\\\"calsspath:bean.xml\\\"); Resrouce res = ctx.getResource(\\\"file:bean.xml\\\"); Resource res = ctx.getResource(\\\"http://localhost:8080/beans.xml\\\"); \"]},\"718\":{\"h\":\"ResourceLoaderAware 接口\",\"t\":[\"ResourceLoaderAware接口实现类的实例将获得一个ResourceLoader的引用，ResourceLoaderAware接口也提供了一个setResourceLoader()方法，该方法将由Spring容器负责调用，Spring容器会将一个ResourceLoader对象作为该方法的参数传入。\",\"如果把实现ResourceLoaderAware接口的Bean类部署在Spring容器中，Spring容器会将自身当成ResourceLoader作为setResourceLoader()方法的参数传入。由于ApplicationContext的实现类都实现了ResourceLoader接口，Spring容器自身完全可作为ResorceLoader使用。\",\"实验：演示ResourceLoaderAware使用\",\"第一步 创建类，实现ResourceLoaderAware接口\",\"import org.springframework.context.ResourceLoaderAware; import org.springframework.core.io.ResourceLoader; public class TestBean implements ResourceLoaderAware { private ResourceLoader resourceLoader; //实现ResourceLoaderAware接口必须实现的方法 //如果把该Bean部署在Spring容器中，该方法将会有Spring容器负责调用。 //SPring容器调用该方法时，Spring会将自身作为参数传给该方法。 public void setResourceLoader(ResourceLoader resourceLoader) { this.resourceLoader = resourceLoader; } //返回ResourceLoader对象的应用 public ResourceLoader getResourceLoader(){ return this.resourceLoader; } } \",\"第二步 创建bean.xml文件，配置TestBean\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"testBean\\\" class=\\\"com.codermast.spring.TestBean\\\"></bean> </beans> \",\"第三步 测试\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.core.io.Resource; import org.springframework.core.io.ResourceLoader; public class Demo3 { public static void main(String[] args) { //Spring容器会将一个ResourceLoader对象作为该方法的参数传入 ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); TestBean testBean = ctx.getBean(\\\"testBean\\\",TestBean.class); //获取ResourceLoader对象 ResourceLoader resourceLoader = testBean.getResourceLoader(); System.out.println(\\\"Spring容器将自身注入到ResourceLoaderAware Bean 中 ？ ：\\\" + (resourceLoader == ctx)); //加载其他资源 Resource resource = resourceLoader.getResource(\\\"codermast.txt\\\"); System.out.println(resource.getFilename()); System.out.println(resource.getDescription()); } } \"]},\"719\":{\"h\":\"使用Resource 作为属性\",\"t\":[\"前面介绍了 Spring 提供的资源访问策略，但这些依赖访问策略要么需要使用 Resource 实现类，要么需要使用 ApplicationContext 来获取资源。实际上，当应用程序中的 Bean 实例需要访问资源时，Spring 有更好的解决方法：直接利用依赖注入。从这个意义上来看，Spring 框架不仅充分利用了策略模式来简化资源访问，而且还将策略模式和 IoC 进行充分地结合，最大程度地简化了 Spring 资源访问。\",\"归纳起来，如果 Bean 实例需要访问资源，有如下两种解决方案：\",\"代码中获取 Resource 实例。\",\"使用依赖注入。\",\"对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource 所在的位置，不管通过 FileSystemResource 创建实例，还是通过 ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource() 方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让 Spring 为 Bean 实例依赖注入资源。\",\"实验：让Spring为Bean实例依赖注入资源\",\"第一步 创建依赖注入类，定义属性和方法\",\"import org.springframework.core.io.Resource; public class ResourceBean { private Resource res; public void setRes(Resource res) { this.res = res; } public Resource getRes() { return res; } public void parse(){ System.out.println(res.getFilename()); System.out.println(res.getDescription()); } } \",\"第二步 创建spring配置文件，配置依赖注入\",\"<bean id=\\\"resourceBean\\\" class=\\\"com.codermast.spring.ResourceBean\\\" > <!-- 可以使用file:、http:、ftp:等前缀强制Spring采用对应的资源访问策略 --> <!-- 如果不采用任何前缀，则Spring将采用与该ApplicationContext相同的资源访问策略来访问资源 --> <property name=\\\"res\\\" value=\\\"classpath:codermast.txt\\\"/> </bean> \",\"第三步 测试\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; public class Demo4 { public static void main(String[] args) { ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); ResourceBean resourceBean = ctx.getBean(\\\"resourceBean\\\",ResourceBean.class); resourceBean.parse(); } } \"]},\"720\":{\"h\":\"应用程序上下文和资源路径\"},\"721\":{\"h\":\"概述\",\"t\":[\"不管以怎样的方式创建ApplicationContext实例，都需要为ApplicationContext指定配置文件，Spring允许使用一份或多分XML配置文件。当程序创建ApplicationContext实例时，通常也是以Resource的方式来访问配置文件的，所以ApplicationContext完全支持ClassPathResource、FileSystemResource、ServletContextResource等资源访问方式。\",\"ApplicationContext确定资源访问策略通常有两种方法：\",\"（1）使用ApplicationContext实现类指定访问策略。\",\"（2）使用前缀指定访问策略。\"]},\"722\":{\"h\":\"ApplicationContext实现类指定访问策略\",\"t\":[\"创建ApplicationContext对象时，通常可以使用如下实现类：\",\"（1） ClassPathXMLApplicationContext : 对应使用ClassPathResource进行资源访问。\",\"（2）FileSystemXmlApplicationContext ： 对应使用FileSystemResource进行资源访问。\",\"（3）XmlWebApplicationContext ： 对应使用ServletContextResource进行资源访问。\",\"当使用ApplicationContext的不同实现类时，就意味着Spring使用响应的资源访问策略。\",\"效果前面已经演示\"]},\"723\":{\"h\":\"使用前缀指定访问策略\",\"t\":[\"实验一：classpath前缀使用\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext; import org.springframework.core.io.Resource; public class Demo1 { public static void main(String[] args) { /* * 通过搜索文件系统路径下的xml文件创建ApplicationContext， * 但通过指定classpath:前缀强制搜索类加载路径 * classpath:bean.xml * */ ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"classpath:beans.xml\\\"); System.out.println(ctx); Resource resource = ctx.getResource(\\\"codermast.txt\\\"); System.out.println(resource.getFilename()); System.out.println(resource.getDescription()); } } \",\"实验二：classpath通配符使用\",\"classpath * :前缀提供了加载多个XML配置文件的能力，当使用classpath*:前缀来指定XML配置文件时，系统将搜索类加载路径，找到所有与文件名匹配的文件，分别加载文件中的配置定义，最后合并成一个ApplicationContext。\",\"ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"classpath*:beans.xml\\\"); System.out.println(ctx); \",\"当使用classpath * :前缀时，Spring将会搜索类加载路径下所有满足该规则的配置文件。\",\"如果不是采用classpath * :前缀，而是改为使用classpath:前缀，Spring则只加载第一个符合条件的XML文件\",\"注意 ：\",\"classpath * : 前缀仅对ApplicationContext有效。实际情况是，创建ApplicationContext时，分别访问多个配置文件(通过ClassLoader的getResource方法实现)。因此，classpath * :前缀不可用于Resource。\",\"使用三：通配符其他使用\",\"一次性加载多个配置文件的方式：指定配置文件时使用通配符\",\"ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"classpath:bean*.xml\\\"); \",\"Spring允许将classpath*:前缀和通配符结合使用：\",\"ApplicationContext ctx = new ClassPathXmlApplicationContext(\\\"classpath*:bean*.xml\\\"); \"]},\"724\":{\"h\":\"Spring - Spring概述\"},\"725\":{\"h\":\"Spring 是什么？\",\"t\":[\"Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由“Spring 之父”Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。\",\"Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java 企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE 代名词，成为了构建 Java EE 应用的事实标准。\",\"自 2004 年 4 月，Spring 1.0 版本正式发布以来，Spring 已经步入到了第 6 个大版本，也就是 Spring 6。本课程采用Spring当前最新发布的正式版本6.0.2。\"]},\"726\":{\"h\":\"Spring Framework的特点\",\"t\":[\"非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。\",\"控制反转：IoC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。\",\"面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。\",\"容器：Spring IoC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。\",\"组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。\",\"一站式：在 IoC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。\"]},\"727\":{\"h\":\"Spring 模块组成\",\"t\":[\"上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。\",\"①Spring Core（核心容器）\",\"spring core提供了IOC,DI,Bean配置装载创建的核心实现。核心概念： Beans、BeanFactory、BeanDefinitions、ApplicationContext。\",\"spring-core ：IOC和DI的基本实现\",\"spring-beans：BeanFactory和Bean的装配管理(BeanFactory)\",\"spring-context：Spring context上下文，即IOC容器(AppliactionContext)\",\"spring-expression：spring表达式语言\",\"②Spring AOP\",\"spring-aop：面向切面编程的应用模块，整合ASM，CGLib，JDK Proxy\",\"spring-aspects：集成AspectJ，AOP应用框架\",\"spring-instrument：动态Class Loading模块\",\"③Spring Data Access\",\"spring-jdbc：spring对JDBC的封装，用于简化jdbc操作\",\"spring-orm：java对象与数据库数据的映射框架\",\"spring-oxm：对象与xml文件的映射框架\",\"spring-jms： Spring对Java Message Service(java消息服务)的封装，用于服务之间相互通信\",\"spring-tx：spring jdbc事务管理\",\"④Spring Web\",\"spring-web：最基础的web支持，建立于spring-context之上，通过servlet或listener来初始化IOC容器\",\"spring-webmvc：实现web mvc\",\"spring-websocket：与前端的全双工通信协议\",\"spring-webflux：Spring 5.0提供的，用于取代传统java servlet，非阻塞式Reactive Web框架，异步，非阻塞，事件驱动的服务\",\"⑤Spring Message\",\"Spring-messaging：spring 4.0提供的，为Spring集成一些基础的报文传送服务\",\"⑥Spring test\",\"spring-test：集成测试支持，主要是对junit的封装\"]},\"728\":{\"h\":\"Spring - 事务\"},\"729\":{\"h\":\"JdbcTemplate\",\"t\":[\"Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作\"]},\"730\":{\"h\":\"准备工作\",\"t\":[\"①搭建子模块\",\"搭建子模块：spring6-transaction\",\"②加入依赖\",\"<dependencies> <!--spring jdbc Spring 持久化层支持jar包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>6.0.2</version> </dependency> <!-- MySQL驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.33</version> </dependency> <!-- 数据源 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.15</version> </dependency> </dependencies> \",\"③创建jdbc.properties\",\"jdbc.user=codermast jdbc.password=123456 jdbc.url=jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false jdbc.driver=com.mysql.cj.jdbc.Driver \",\"这里 user 就是数据库账号，password 就是数据库密码，spring 就是数据库名。根据自己实际的信息修改即可。\",\"④配置Spring的配置文件\",\"beans.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 导入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <!-- 配置数据源 --> <bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.user}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> <!-- 配置 JdbcTemplate --> <bean id=\\\"jdbcTemplate\\\" class=\\\"org.springframework.jdbc.core.JdbcTemplate\\\"> <!-- 装配数据源 --> <property name=\\\"dataSource\\\" ref=\\\"druidDataSource\\\"/> </bean> </beans> \",\"⑤准备数据库与测试表\",\"CREATE DATABASE `spring`; use `spring`; CREATE TABLE `t_emp` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) DEFAULT NULL COMMENT '姓名', `age` int(11) DEFAULT NULL COMMENT '年龄', `sex` varchar(2) DEFAULT NULL COMMENT '性别', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; \"]},\"731\":{\"h\":\"实现CURD\",\"t\":[\"①装配 JdbcTemplate\",\"创建测试类，整合JUnit，注入JdbcTemplate\",\"package com.codermast.spring6; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.test.context.junit.jupiter.SpringJUnitConfig; @SpringJUnitConfig(locations = \\\"classpath:beans.xml\\\") public class JDBCTemplateTest { @Autowired private JdbcTemplate jdbcTemplate; } \",\"②测试增删改功能\",\"@Test //测试增删改功能 public void testUpdate(){ //添加功能 String sql = \\\"insert into t_emp values(null,?,?,?)\\\"; int result = jdbcTemplate.update(sql, \\\"张三\\\", 23, \\\"男\\\"); //修改功能 //String sql = \\\"update t_emp set name=? where id=?\\\"; //int result = jdbcTemplate.update(sql, \\\"codermast\\\", 1); //删除功能 //String sql = \\\"delete from t_emp where id=?\\\"; //int result = jdbcTemplate.update(sql, 1); } \",\"③查询数据返回对象\",\"public class Emp { private Integer id; private String name; private Integer age; private String sex; //生成get和set方法 //...... @Override public String toString() { return \\\"Emp{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex='\\\" + sex + '\\\\'' + '}'; } } \",\"④查询返回对象\",\"@Test public void testSelectObject() { //写法一 // String sql = \\\"select * from t_emp where id=?\\\"; // Emp empResult = jdbcTemplate.queryForObject(sql, // (rs, rowNum) -> { // Emp emp = new Emp(); // emp.setId(rs.getInt(\\\"id\\\")); // emp.setName(rs.getString(\\\"name\\\")); // emp.setAge(rs.getInt(\\\"age\\\")); // emp.setSex(rs.getString(\\\"sex\\\")); // return emp; // }, 1); // System.out.println(empResult); //写法二 String sql = \\\"select * from t_emp where id=?\\\"; Emp emp = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<>(Emp.class),1); System.out.println(emp); } \",\"⑤查询数据返回list集合\",\"@Test //查询多条数据为一个list集合 public void testSelectList(){ String sql = \\\"select * from t_emp\\\"; List<Emp> list = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Emp.class)); System.out.println(list); } \",\"⑥查询返回单个的值\",\"@Test //查询单行单列的值 public void selectCount(){ String sql = \\\"select count(id) from t_emp\\\"; Integer count = jdbcTemplate.queryForObject(sql, Integer.class); System.out.println(count); } \",\"测试结果\"]},\"732\":{\"h\":\"事务概念\"},\"733\":{\"h\":\"事务基本概念\",\"t\":[\"①什么是事务\",\"数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。\",\"②事务的特性\",\"A：原子性(Atomicity)\",\"一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\",\"C：一致性(Consistency)\",\"事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。\",\"如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。\",\"如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。\",\"I：隔离性(Isolation)\",\"指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。\",\"D：持久性(Durability)\",\"指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。\"]},\"734\":{\"h\":\"编程式事务\",\"t\":[\"事务功能的相关操作全部通过自己编写代码来实现：\",\"Connection conn = ...; try { // 开启事务：关闭事务的自动提交 conn.setAutoCommit(false); // 核心操作 // 提交事务 conn.commit(); }catch(Exception e){ // 回滚事务 conn.rollBack(); }finally{ // 释放数据库连接 conn.close(); } \",\"编程式的实现方式存在缺陷：\",\"细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。\",\"代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。\"]},\"735\":{\"h\":\"声明式事务\",\"t\":[\"既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。\",\"封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。\",\"好处1：提高开发效率\",\"好处2：消除了冗余的代码\",\"好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化\",\"所以，我们可以总结下面两个概念：\",\"编程式：自己写代码实现功能\",\"声明式：通过配置让框架实现功能\"]},\"736\":{\"h\":\"基于注解的声明式事务\"},\"737\":{\"h\":\"准备工作\",\"t\":[\"①添加配置\",\"在beans.xml添加配置\",\"<!--扫描组件--> <context:component-scan base-package=\\\"com.codermast.spring6\\\"/> \",\"②创建表\",\"CREATE TABLE `t_book` ( `book_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键', `book_name` varchar(20) DEFAULT NULL COMMENT '图书名称', `price` int(11) DEFAULT NULL COMMENT '价格', `stock` int(10) unsigned DEFAULT NULL COMMENT '库存（无符号）', PRIMARY KEY (`book_id`) ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8; insert into `t_book`(`book_id`,`book_name`,`price`,`stock`) values (1,'斗破苍穹',80,100),(2,'斗罗大陆',50,100); CREATE TABLE `t_user` ( `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键', `username` varchar(20) DEFAULT NULL COMMENT '用户名', `balance` int(10) unsigned DEFAULT NULL COMMENT '余额（无符号）', PRIMARY KEY (`user_id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8; insert into `t_user`(`user_id`,`username`,`balance`) values (1,'admin',50); \",\"③创建组件\",\"创建BookController\",\"@Controller public class BookController { @Autowired private BookService bookService; public void buyBook(Integer bookId, Integer userId){ bookService.buyBook(bookId, userId); } } \",\"创建接口BookService：\",\"public interface BookService { void buyBook(Integer bookId, Integer userId); } \",\"创建实现类BookServiceImpl：\",\"@Service public class BookServiceImpl implements BookService { @Autowired private BookDao bookDao; @Override public void buyBook(Integer bookId, Integer userId) { //查询图书的价格 Integer price = bookDao.getPriceByBookId(bookId); //更新图书的库存 bookDao.updateStock(bookId); //更新用户的余额 bookDao.updateBalance(userId, price); } } \",\"创建接口BookDao：\",\"public interface BookDao { Integer getPriceByBookId(Integer bookId); void updateStock(Integer bookId); void updateBalance(Integer userId, Integer price); } \",\"创建实现类BookDaoImpl：\",\"@Repository public class BookDaoImpl implements BookDao { @Autowired private JdbcTemplate jdbcTemplate; @Override public Integer getPriceByBookId(Integer bookId) { String sql = \\\"select price from t_book where book_id = ?\\\"; return jdbcTemplate.queryForObject(sql, Integer.class, bookId); } @Override public void updateStock(Integer bookId) { String sql = \\\"update t_book set stock = stock - 1 where book_id = ?\\\"; jdbcTemplate.update(sql, bookId); } @Override public void updateBalance(Integer userId, Integer price) { String sql = \\\"update t_user set balance = balance - ? where user_id = ?\\\"; jdbcTemplate.update(sql, price, userId); } } \"]},\"738\":{\"h\":\"测试无事务情况\",\"t\":[\"①创建测试类\",\"@SpringJUnitConfig(locations = \\\"classpath:beans.xml\\\") public class TxByAnnotationTest { @Autowired private BookController bookController; @Test public void testBuyBook(){ bookController.buyBook(1, 1); } } \",\"②模拟场景\",\"用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额\",\"假设用户id为1的用户，购买id为1的图书\",\"用户余额为50，而图书价格为80\",\"购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段\",\"此时执行sql语句会抛出SQLException\",\"③观察结果\",\"因为没有添加事务，图书的库存更新了，但是用户的余额没有更新\",\"显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败\",\"余额不足\",\"余额充足\"]},\"739\":{\"h\":\"加入事务\",\"t\":[\"①添加事务配置\",\"在spring配置文件中引入tx命名空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\\\"> \",\"在Spring的配置文件中添加配置：\",\"<bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"druidDataSource\\\"></property> </bean> <!-- 开启事务的注解驱动 通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务 --> <!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> \",\"②添加事务注解\",\"因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理\",\"在BookServiceImpl的buybook()添加注解@Transactional\",\"③观察结果\",\"由于使用了Spring的声明式事务，更新库存和更新余额都没有执行\"]},\"740\":{\"h\":\"@Transactional注解标识的位置\",\"t\":[\"@Transactional标识在方法上，则只会影响该方法\",\"@Transactional标识的类上，则会影响类中所有的方法\"]},\"741\":{\"h\":\"事务属性：只读\",\"t\":[\"①介绍\",\"对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。\",\"②使用方式\",\"@Transactional(readOnly = true) public void buyBook(Integer bookId, Integer userId) { //查询图书的价格 Integer price = bookDao.getPriceByBookId(bookId); //更新图书的库存 bookDao.updateStock(bookId); //更新用户的余额 bookDao.updateBalance(userId, price); //System.out.println(1/0); } \",\"③注意\",\"对增删改操作设置只读会抛出下面异常：\",\"Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed\"]},\"742\":{\"h\":\"事务属性：超时\",\"t\":[\"①介绍\",\"事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。\",\"概括来说就是一句话：超时回滚，释放资源。\",\"②使用方式\",\"//超时时间单位秒 @Transactional(timeout = 3) public void buyBook(Integer bookId, Integer userId) { try { TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) { e.printStackTrace(); } //查询图书的价格 Integer price = bookDao.getPriceByBookId(bookId); //更新图书的库存 bookDao.updateStock(bookId); //更新用户的余额 bookDao.updateBalance(userId, price); //System.out.println(1/0); } \",\"③观察结果\",\"执行过程中抛出异常：\",\"org.springframework.transaction.TransactionTimedOutException: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022\",\"异常信息\"]},\"743\":{\"h\":\"事务属性：回滚策略\",\"t\":[\"①介绍\",\"声明式事务默认只针对运行时异常回滚，编译时异常不回滚。\",\"可以通过@Transactional中相关属性设置回滚策略\",\"rollbackFor属性：需要设置一个Class类型的对象\",\"rollbackForClassName属性：需要设置一个字符串类型的全类名\",\"noRollbackFor属性：需要设置一个Class类型的对象\",\"rollbackFor属性：需要设置一个字符串类型的全类名\",\"②使用方式\",\"@Transactional(noRollbackFor = ArithmeticException.class) //@Transactional(noRollbackForClassName = \\\"java.lang.ArithmeticException\\\") public void buyBook(Integer bookId, Integer userId) { //查询图书的价格 Integer price = bookDao.getPriceByBookId(bookId); //更新图书的库存 bookDao.updateStock(bookId); //更新用户的余额 bookDao.updateBalance(userId, price); System.out.println(1/0); } \",\"③观察结果\",\"虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现ArithmeticException不发生回滚，因此购买图书的操作正常执行\",\"异常回滚\"]},\"744\":{\"h\":\"事务属性：隔离级别\",\"t\":[\"①介绍\",\"数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。\",\"隔离级别一共有四种：\",\"读未提交：READ UNCOMMITTED\",\"允许Transaction01读取Transaction02未提交的修改。\",\"读已提交：READ COMMITTED、\",\"要求Transaction01只能读取Transaction02已提交的修改。\",\"可重复读：REPEATABLE READ\",\"确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。\",\"串行化：SERIALIZABLE\",\"确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。\",\"各个隔离级别解决并发问题的能力见下表：\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"READ UNCOMMITTED\",\"有\",\"有\",\"有\",\"READ COMMITTED\",\"无\",\"有\",\"有\",\"REPEATABLE READ\",\"无\",\"无\",\"有\",\"SERIALIZABLE\",\"无\",\"无\",\"无\",\"各种数据库产品对事务隔离级别的支持程度：\",\"隔离级别\",\"Oracle\",\"MySQL\",\"READ UNCOMMITTED\",\"×\",\"√\",\"READ COMMITTED\",\"√(默认)\",\"√\",\"REPEATABLE READ\",\"×\",\"√(默认)\",\"SERIALIZABLE\",\"√\",\"√\",\"②使用方式\",\"@Transactional(isolation = Isolation.DEFAULT)//使用数据库默认的隔离级别 @Transactional(isolation = Isolation.READ_UNCOMMITTED)//读未提交 @Transactional(isolation = Isolation.READ_COMMITTED)//读已提交 @Transactional(isolation = Isolation.REPEATABLE_READ)//可重复读 @Transactional(isolation = Isolation.SERIALIZABLE)//串行化 \"]},\"745\":{\"h\":\"事务属性：传播行为\",\"t\":[\"①介绍\",\"什么是事务的传播行为？\",\"在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。\",\"一共有七种传播行为：\",\"REQUIRED：支持当前事务，如果不存在就新建一个(默认)【没有就新建，有就加入】\",\"SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行**【有就加入，没有就不管了】**\",\"MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常**【有就加入，没有就抛异常】**\",\"REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起**【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】**\",\"NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务**【不支持事务，存在就挂起】**\",\"NEVER：以非事务方式运行，如果有事务存在，抛出异常**【不支持事务，存在就抛异常】**\",\"NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】\",\"②测试\",\"创建接口CheckoutService\",\"public interface CheckoutService { void checkout(Integer[] bookIds, Integer userId); } \",\"创建实现类CheckoutServiceImpl\",\"@Service public class CheckoutServiceImpl implements CheckoutService { @Autowired private BookService bookService; @Override @Transactional //一次购买多本图书 public void checkout(Integer[] bookIds, Integer userId) { for (Integer bookId : bookIds) { bookService.buyBook(bookId, userId); } } } \",\"在BookController中添加方法：\",\"@Autowired private CheckoutService checkoutService; public void checkout(Integer[] bookIds, Integer userId){ checkoutService.checkout(bookIds, userId); } \",\"在数据库中将用户的余额修改为100元\",\"③观察结果\",\"可以通过@Transactional中的propagation属性设置事务传播行为\",\"修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性\",\"@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不了，就都买不了\",\"@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本。\"]},\"746\":{\"h\":\"全注解配置事务\",\"t\":[\"①添加配置类\",\"import com.alibaba.druid.pool.DruidDataSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.jdbc.datasource.DataSourceTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; import javax.sql.DataSource; @Configuration @ComponentScan(\\\"com.codermast.spring6\\\") @EnableTransactionManagement public class SpringConfig { @Bean public DataSource getDataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); dataSource.setUrl(\\\"jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&useSSL=false\\\"); dataSource.setUsername(\\\"codermast\\\"); dataSource.setPassword(\\\"123456\\\"); return dataSource; } @Bean(name = \\\"jdbcTemplate\\\") public JdbcTemplate getJdbcTemplate(DataSource dataSource){ JdbcTemplate jdbcTemplate = new JdbcTemplate(); jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; } @Bean public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource){ DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager(); dataSourceTransactionManager.setDataSource(dataSource); return dataSourceTransactionManager; } } \",\"②测试\",\"import com.codermast.spring6.config.SpringConfig; import com.codermast.spring6.controller.BookController; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.test.context.junit.jupiter.SpringJUnitConfig; public class TxByAllAnnotationTest { @Test public void testTxAllAnnotation(){ ApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfig.class); BookController accountService = applicationContext.getBean(\\\"bookController\\\", BookController.class); accountService.buyBook(1, 1); } } \"]},\"747\":{\"h\":\"基于XML的声明式事务\"},\"748\":{\"h\":\"场景模拟\",\"t\":[\"参考基于注解的声明式事务\"]},\"749\":{\"h\":\"修改Spring配置文件\",\"t\":[\"将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：\",\"<aop:config> <!-- 配置事务通知和切入点表达式 --> <aop:advisor advice-ref=\\\"txAdvice\\\" pointcut=\\\"execution(* com.codermast.spring.tx.xml.service.impl.*.*(..))\\\"></aop:advisor> </aop:config> <!-- tx:advice标签：配置事务通知 --> <!-- id属性：给事务通知标签设置唯一标识，便于引用 --> <!-- transaction-manager属性：关联事务管理器 --> <tx:advice id=\\\"txAdvice\\\" transaction-manager=\\\"transactionManager\\\"> <tx:attributes> <!-- tx:method标签：配置具体的事务方法 --> <!-- name属性：指定方法名，可以使用星号代表多个字符 --> <tx:method name=\\\"get*\\\" read-only=\\\"true\\\"/> <tx:method name=\\\"query*\\\" read-only=\\\"true\\\"/> <tx:method name=\\\"find*\\\" read-only=\\\"true\\\"/> <!-- read-only属性：设置只读属性 --> <!-- rollback-for属性：设置回滚的异常 --> <!-- no-rollback-for属性：设置不回滚的异常 --> <!-- isolation属性：设置事务的隔离级别 --> <!-- timeout属性：设置事务的超时属性 --> <!-- propagation属性：设置事务的传播行为 --> <tx:method name=\\\"save*\\\" read-only=\\\"false\\\" rollback-for=\\\"java.lang.Exception\\\" propagation=\\\"REQUIRES_NEW\\\"/> <tx:method name=\\\"update*\\\" read-only=\\\"false\\\" rollback-for=\\\"java.lang.Exception\\\" propagation=\\\"REQUIRES_NEW\\\"/> <tx:method name=\\\"delete*\\\" read-only=\\\"false\\\" rollback-for=\\\"java.lang.Exception\\\" propagation=\\\"REQUIRES_NEW\\\"/> </tx:attributes> </tx:advice> \",\"注意：基于xml实现的声明式事务，必须引入aspectJ的依赖\",\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.2</version> </dependency> \"]},\"750\":{\"h\":\"Spring - 基于XML管理Bean\"},\"751\":{\"h\":\"创建子模块\",\"t\":[\"在使用 XML 管理 Bean 之前，为了防止和之前的项目冲突，我们重新创建一个子模块，叫做 spring6-ioc-xml ，并且引入 beans.xml 文件即可。\"]},\"752\":{\"h\":\"获取bean\",\"t\":[\"在通过 xml 方式获取 bean 之前，我们需要先导入对应的配置文件，这里我们是 beans.xml。构建 ApplicationContext 容器。\",\"// 导入 bean 的 xml 配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); \",\"在 xml 方式下获取 bean 对象的方式有三种：\",\"根据 id 获取\",\"// 1.根据 id 获取对象 User user1 = (User) context.getBean(\\\"user\\\"); // 调用 user 对象的 run 方法 user1.run(); System.out.println(\\\"1 根据 id 获取的 User 对象\\\" + user1); \",\"根据 Class 获取\",\"// 2.根据类型获取对象 User user2 = context.getBean(User.class); user2.run(); System.out.println(\\\"2 根据 类型 获取的 User 对象\\\" + user2); \",\"同时根据 id 和 Class 获取\",\"// 3.同时根据id和类型获取对象 User user3 = context.getBean(\\\"user\\\", User.class); user3.run(); System.out.println(\\\"3 同时根据 id 和 类型 获取的 User 对象\\\" + user3); \",\"执行结果\",\"注意\",\"要注意在 bean 的配置文件中，如果定义了两个相同的类，并赋予了不同的 id，那么此时就无法仅依靠类型来创建对象。\",\"<!-- 创建user --> <bean id=\\\"user\\\" class=\\\"com.codermast.spring6.iocxml.User\\\"/> <bean id=\\\"user\\\" class=\\\"com.codermast.spring6.iocxml.User\\\"/> \",\"报错信息：\",\"Exception in thread \\\"main\\\" org.springframework.beans.factory.NoUniqueBeanDefinition Exception: No qualifying bean of type 'com.codermast.spring6.iocxml.User' available: expected single matching bean but found 2: user,user1 \",\"报错的意思就是，期望的应为单个匹配bean，但找到：user，user1 两个。\",\"这个时候可以使用 id 或者 id和类型同时使用的方式进行获取，只要保证唯一性，理论上就可以创建。\",\"是否可以根据接口类型来获取bean？\",\"如果接口的实现唯一，此时可根据接口类型来获取该实现类的Bean\",\"如果接口的实现不唯一，那么久无法根据接口类型来获取该实现类的Bean\",\"结论\",\"根据类型来获取bean时，在满足 bean 唯一性的前提下，其实只是看：『对象 instanceof 指定的类型』的返回结果，只要返回的是 true 就可以认定为和类型匹配，能够获取到。\",\"Java 中，instanceof运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回true，否则返回false。也就是说：用instanceof关键字做判断时， instanceof 操作符的左右操作必须有继承或实现关系\"]},\"753\":{\"h\":\"依赖注入\",\"t\":[\"依赖注入DI（Dependency injection），是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。\",\"降低程序间的耦合（依赖关系）\",\"依赖关系的管理：\",\"以后都交给spring来维护\",\"在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明依赖关系的维护,就称之为依赖注入。\",\"提示\",\"简单的来讲，依赖注入你只需要告诉他，所需要的各种数据在哪里去找即可，你不必亲自去找好交给他，让他自己去找所需要的依赖。\",\"依赖注入主要有三种方式：Set方法注入、构造方法注入、注解注入\"]},\"754\":{\"h\":\"Set注入\",\"t\":[\"在使用 Set 注入时，需要先创建对应属性的 Set 方法，否则无法进行注入。\",\"创建 Student 类\",\"点击展开代码\",\"public class Student { private Integer id; private String name; private Integer age; private String sex; public Student() { } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex='\\\" + sex + '\\\\'' + '}'; } } \",\"配置 bean 时为属性赋值\",\"创建一个新配置文件，名为 beans-di.xml ，添加如下配置\",\"<bean id=\\\"studentOne\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --> <!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --> <!-- value属性：指定属性值 --> <property name=\\\"id\\\" value=\\\"1001\\\"/> <property name=\\\"name\\\" value=\\\"张三\\\"/> <property name=\\\"age\\\" value=\\\"23\\\"/> <property name=\\\"sex\\\" value=\\\"男\\\"/> </bean> \",\"测试\",\"@Test public void setDiTest(){ // 1.导入 beans-di 配置文件 ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"beans-di.xml\\\"); // 2. 创建 Student 对象 Student studentOne = ac.getBean(\\\"studentOne\\\", Student.class); // 3. 打印 Student 对象 System.out.println(studentOne); } \",\"测试结果\"]},\"755\":{\"h\":\"构造器注入\",\"t\":[\"在使用构造器注入时和 Set 注入同理，需要先提供构造器，才可以使用构造器注入。\",\"在 Student 类中添加有参构造器\",\"public Student(Integer id, String name, Integer age, String sex) { this.id = id; this.name = name; this.age = age; this.sex = sex; } \",\"配置对应的 bean\",\"<!--创建构造器 bean--> <bean id=\\\"studentTwo\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <constructor-arg value=\\\"1002\\\"/> <constructor-arg value=\\\"李四\\\"/> <constructor-arg value=\\\"33\\\"/> <constructor-arg value=\\\"女\\\"/> </bean> \",\"注意\",\"constructor-arg标签还有两个属性可以进一步描述构造器参数：\",\"index属性：指定参数所在位置的索引（从0开始）\",\"name属性：指定参数名\",\"测试\",\"@Test public void constructDITest(){ // 1.导入 beans-di 配置文件 ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"beans-di.xml\\\"); // 2. 创建 Student 对象 Student studentTwo = ac.getBean(\\\"studentTwo\\\", Student.class); // 3. 打印 Student 对象 System.out.println(studentTwo); } \",\"测试结果\"]},\"756\":{\"h\":\"数据赋值\"},\"757\":{\"h\":\"特殊值赋值\",\"t\":[\"字面量值\",\"字面量就是数据本身所代表的值，如 1、2、3、a、b、c等就代表的是实际的值，而在 int a = 10; 时，a 是变量，10为字面量。\",\"<!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --> <property name=\\\"name\\\" value=\\\"张三\\\"/> \",\"null 值\",\"<property name=\\\"name\\\"> <null /> </property> \",\"需要注意的是，不能直接讲 null 作为 value 值进行传递，此时则为传递一个 内容为 null 的字符串，而并非传递 null 对象。\",\"<property name=\\\"name\\\" value=\\\"null\\\"></property> \",\"xml 实体\",\"<!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --> <!-- 解决方案一：使用XML实体来代替 --> <property name=\\\"expression\\\" value=\\\"a &lt; b\\\"/> \",\"cdata 节\",\"<property name=\\\"expression\\\"> <!-- 解决方案二：使用CDATA节 --> <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --> <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --> <!-- 所以CDATA节中写什么符号都随意 --> <value><![CDATA[a < b]]></value> </property> \"]},\"758\":{\"h\":\"对象类型属性赋值\",\"t\":[\"创建 Clazz 类 在为对象类型属性赋值之前，我们先来创建一个名为 Clazz 的班级类（这里是为了避免和 Java 关键字 class 冲突）\",\"点我展开代码\",\"public class Clazz { private Integer clazzId; private String clazzName; public Integer getClazzId() { return clazzId; } public void setClazzId(Integer clazzId) { this.clazzId = clazzId; } public String getClazzName() { return clazzName; } public void setClazzName(String clazzName) { this.clazzName = clazzName; } @Override public String toString() { return \\\"Clazz{\\\" + \\\"clazzId=\\\" + clazzId + \\\", clazzName='\\\" + clazzName + '\\\\'' + '}'; } public Clazz() { } public Clazz(Integer clazzId, String clazzName) { this.clazzId = clazzId; this.clazzName = clazzName; } } \",\"修改 Student 类\",\"private Clazz clazz; public Clazz getClazz() { return clazz; } public void setClazz(Clazz clazz) { this.clazz = clazz; } \",\"配置 Bean\",\"这里我们在配置 Bean 的时候，有三种方式：外部bean、内部bean、级联属性赋值\",\"外部bean\",\"配置 Clazz 类\",\"<bean id=\\\"clazzOne\\\" class=\\\"com.codermast.spring6.iocxml.bean.Clazz\\\"> <property name=\\\"clazzId\\\" value=\\\"1111\\\"/> <property name=\\\"clazzName\\\" value=\\\"财源滚滚班\\\"/> </bean> \",\"为 Student 中的 clazz 属性赋值\",\"<bean id=\\\"studentFour\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --> <property name=\\\"clazz\\\" ref=\\\"clazzOne\\\"/> </bean> \",\"内部bean\",\"<bean id=\\\"studentFive\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <property name=\\\"clazz\\\"> <!-- 在一个bean中再声明一个bean就是内部bean --> <!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --> <bean id=\\\"clazzInner\\\" class=\\\"com.codermast.spring6.iocxml.bean.Clazz\\\"> <property name=\\\"clazzId\\\" value=\\\"2222\\\"/> <property name=\\\"clazzName\\\" value=\\\"远大前程班\\\"/> </bean> </property> </bean> \",\"级联属性赋值\",\"<bean id=\\\"studentSix\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <property name=\\\"clazz\\\" ref=\\\"clazzOne\\\"/> <property name=\\\"clazz.clazzId\\\" value=\\\"3333\\\"/> <property name=\\\"clazz.clazzName\\\" value=\\\"最强王者班\\\"/> </bean> \"]},\"759\":{\"h\":\"数组类型属性赋值\",\"t\":[\"修改 Student 类\",\"在 Student 类中增加如下代码：\",\"private String[] hobbies; public String[] getHobbies() { return hobbies; } public void setHobbies(String[] hobbies) { this.hobbies = hobbies; } \",\"配置 bean\",\"<bean id=\\\"studentSeven\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --> <property name=\\\"clazz\\\" ref=\\\"clazzOne\\\"/> <property name=\\\"hobbies\\\"> <array> <value>抽烟</value> <value>喝酒</value> <value>烫头</value> </array> </property> </bean> \"]},\"760\":{\"h\":\"集合类型属性赋值\",\"t\":[\"List 集合\",\"在 Clazz 类中加入如下代码\",\"private List<Student> students; public List<Student> getStudents() { return students; } public void setStudents(List<Student> students) { this.students = students; } \",\"配置 bean\",\"<bean id=\\\"clazzTwo\\\" class=\\\"com.codermast.spring6.iocxml.bean.Clazz\\\"> <property name=\\\"clazzId\\\" value=\\\"4444\\\"/> <property name=\\\"clazzName\\\" value=\\\"Javaee0222\\\"/> <property name=\\\"students\\\"> <list> <ref bean=\\\"studentOne\\\"/> <ref bean=\\\"studentTwo\\\"/> <ref bean=\\\"studentFour\\\"/> <ref bean=\\\"studentFive\\\"/> </list> </property> </bean> \",\"若为 Set 集合类型属性赋值，只需要将其中的 list 标签改为set标签即可。\",\"Map 集合\",\"创建 Teacher 类\",\"点我展开代码\",\"public class Teacher { private Integer teacherId; private String teacherName; public Integer getTeacherId() { return teacherId; } public void setTeacherId(Integer teacherId) { this.teacherId = teacherId; } public String getTeacherName() { return teacherName; } public void setTeacherName(String teacherName) { this.teacherName = teacherName; } public Teacher(Integer teacherId, String teacherName) { this.teacherId = teacherId; this.teacherName = teacherName; } public Teacher() { } @Override public String toString() { return \\\"Teacher{\\\" + \\\"teacherId=\\\" + teacherId + \\\", teacherName='\\\" + teacherName + '\\\\'' + '}'; } } \",\"在 Student 类中加入如下代码\",\"private Map<String, Teacher> teacherMap; public Map<String, Teacher> getTeacherMap() { return teacherMap; } public void setTeacherMap(Map<String, Teacher> teacherMap) { this.teacherMap = teacherMap; } \",\"配置bean\",\"<!-- Map 集合配置--> <bean id=\\\"teacherOne\\\" class=\\\"com.codermast.spring6.iocxml.bean.Teacher\\\"> <property name=\\\"teacherId\\\" value=\\\"10010\\\"/> <property name=\\\"teacherName\\\" value=\\\"大宝\\\"/> </bean> <bean id=\\\"teacherTwo\\\" class=\\\"com.codermast.spring6.iocxml.bean.Teacher\\\"> <property name=\\\"teacherId\\\" value=\\\"10086\\\"/> <property name=\\\"teacherName\\\" value=\\\"二宝\\\"/> </bean> <bean id=\\\"studentFour\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --> <property name=\\\"clazz\\\" ref=\\\"clazzOne\\\"/> <property name=\\\"hobbies\\\"> <array> <value>抽烟</value> <value>喝酒</value> <value>烫头</value> </array> </property> <property name=\\\"teacherMap\\\"> <map> <entry value-ref=\\\"teacherOne\\\"> <key> <value>10010</value> </key> </entry> <entry value-ref=\\\"teacherTwo\\\"> <key> <value>10086</value> </key> </entry> </map> </property> </bean> \",\"引用集合类型\",\"<!--list集合类型的bean--> <util:list id=\\\"students\\\"> <ref bean=\\\"studentOne\\\"/> <ref bean=\\\"studentTwo\\\"/> <ref bean=\\\"studentFour\\\"/> </util:list> <!--map集合类型的bean--> <util:map id=\\\"teacherMap\\\"> <entry> <key> <value>10010</value> </key> <ref bean=\\\"teacherOne\\\"/> </entry> <entry> <key> <value>10086</value> </key> <ref bean=\\\"teacherTwo\\\"/> </entry> </util:map> <bean id=\\\"clazzTwo\\\" class=\\\"com.codermast.spring6.iocxml.bean.Clazz\\\"> <property name=\\\"clazzId\\\" value=\\\"4444\\\"/> <property name=\\\"clazzName\\\" value=\\\"Javaee0222\\\"/> <property name=\\\"students\\\" ref=\\\"students\\\"/> </bean> <bean id=\\\"studentFour\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\"> <property name=\\\"id\\\" value=\\\"1004\\\"/> <property name=\\\"name\\\" value=\\\"赵六\\\"/> <property name=\\\"age\\\" value=\\\"26\\\"/> <property name=\\\"sex\\\" value=\\\"女\\\"/> <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --> <property name=\\\"clazz\\\" ref=\\\"clazzOne\\\"/> <property name=\\\"hobbies\\\"> <array> <value>抽烟</value> <value>喝酒</value> <value>烫头</value> </array> </property> <property name=\\\"teacherMap\\\" ref=\\\"teacherMap\\\"/> </bean> \",\"使用util:list、util:map标签必须引入相应的命名空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> \"]},\"761\":{\"h\":\"P命名空间\",\"t\":[\"引入 P 命名空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> \",\"引入p命名空间后，可以通过以下方式为bean的各个属性赋值\",\"<bean id=\\\"studentSix\\\" class=\\\"com.codermast.spring6.iocxml.bean.Student\\\" p:id=\\\"1006\\\" p:name=\\\"小明\\\" p:clazz-ref=\\\"clazzOne\\\" p:teacherMap-ref=\\\"teacherMap\\\"></bean> \"]},\"762\":{\"h\":\"引入外部属性文件\",\"t\":[\"加入依赖\",\"即将下面的代码，加入到对应子模块中的 pom.xml 文件中\",\"<!-- MySQL驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.30</version> </dependency> <!-- 数据源 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.15</version> </dependency> \",\"创建外部属性配置文件jdbc.properties\",\"jdbc.user=codermast jdbc.password=123456 jdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC jdbc.driver=com.mysql.cj.jdbc.Driver \",\"引入配置文件\",\"引入context 名称空间，这里我们为了防止和之前的冲突，新建一个 bean 配置文件，名为 spring-datasource.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 引入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/> </beans> \",\"注意：\",\"在使用 <context:property-placeholder> 元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。\",\"配置bean\",\"<bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.user}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> \",\"测试\",\"@Test public void testDataSource() throws SQLException { ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-datasource.xml\\\"); DataSource dataSource = ac.getBean(DataSource.class); Connection connection = dataSource.getConnection(); System.out.println(connection); } \",\"测试结果\"]},\"763\":{\"h\":\"Bean的作用域\",\"t\":[\"概念\",\"在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：\",\"取值\",\"含义\",\"创建对象的时机\",\"singleton（默认）\",\"在IOC容器中，这个bean的对象始终为单实例\",\"IOC容器初始化时\",\"prototype\",\"这个bean在IOC容器中有多个实例\",\"获取bean时\",\"如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：\",\"取值\",\"含义\",\"request\",\"在一个请求范围内有效\",\"session\",\"在一个会话范围内有效\",\"创建 User 类\",\"点我展开代码\",\"package com.atguigu.spring6.bean; public class User { private Integer id; private String username; private String password; private Integer age; public User() { } public User(Integer id, String username, String password, Integer age) { this.id = id; this.username = username; this.password = password; this.age = age; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } @Override public String toString() { return \\\"User{\\\" + \\\"id=\\\" + id + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + \\\", age=\\\" + age + '}'; } } \",\"这里也可以使用我们之前的 User 类，不影响后续的操作。\",\"配置bean\",\"<!-- 配置 User 类 --> <bean id=\\\"userSingleton\\\" class=\\\"com.codermast.spring6.iocxml.bean.User\\\" scope=\\\"singleton\\\"/> <bean id=\\\"userPrototype\\\" class=\\\"com.codermast.spring6.iocxml.bean.User\\\" scope=\\\"prototype\\\"/> \",\"测试\",\"@Test public void testBeanScope(){ ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-scope.xml\\\"); User user1 = ac.getBean(User.class); User user2 = ac.getBean(User.class); System.out.println(user1==user2); } \",\"测试结果\"]},\"764\":{\"h\":\"Bean生命周期\",\"t\":[\"具体的生命周期过程\",\"bean对象创建（调用无参构造器）\",\"给bean对象设置属性\",\"bean的后置处理器（初始化之前）\",\"bean对象初始化（需在配置bean时指定初始化方法）\",\"bean的后置处理器（初始化之后）\",\"bean对象就绪可以使用\",\"bean对象销毁（需在配置bean时指定销毁方法）\",\"IOC容器关闭\",\"修改 User 类\",\"点我展开代码\",\"public class User { private Integer id; private String username; private String password; private Integer age; public User() { System.out.println(\\\"生命周期：1、创建对象\\\"); } public User(Integer id, String username, String password, Integer age) { this.id = id; this.username = username; this.password = password; this.age = age; } public Integer getId() { return id; } public void setId(Integer id) { System.out.println(\\\"生命周期：2、依赖注入\\\"); this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public void initMethod(){ System.out.println(\\\"生命周期：3、初始化\\\"); } public void destroyMethod(){ System.out.println(\\\"生命周期：5、销毁\\\"); } @Override public String toString() { return \\\"User{\\\" + \\\"id=\\\" + id + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + \\\", age=\\\" + age + '}'; } public void run(){ System.out.println(\\\"run ......\\\"); } } \",\"注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法\",\"配置bean\",\"<!-- 使用init-method属性指定初始化方法 --> <!-- 使用destroy-method属性指定销毁方法 --> <bean class=\\\"com.codermast.spring6.iocxml.bean.User\\\" scope=\\\"prototype\\\" init-method=\\\"initMethod\\\" destroy-method=\\\"destroyMethod\\\"> <property name=\\\"id\\\" value=\\\"1001\\\"/> <property name=\\\"username\\\" value=\\\"admin\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> <property name=\\\"age\\\" value=\\\"23\\\"/> </bean> \",\"测试\",\"@Test public void testLife(){ ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-lifecycle.xml\\\"); User bean = ac.getBean(User.class); System.out.println(\\\"生命周期：4、通过IOC容器获取bean并使用\\\"); ac.close(); } \",\"单例模式-测试结果\",\"多例模式-测试结果\",\"只有在单例模式下，执行 close 方法才会调用 destroyMethod 销毁方法。\",\"bean的后置处理器\",\"bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行\",\"创建bean的后置处理器：\",\"public class MyBeanProcessor implements BeanPostProcessor { // 初始化之前调用 @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"☆☆☆\\\" + beanName + \\\" = \\\" + bean); return bean; } // 初始化之后调用 @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"★★★\\\" + beanName + \\\" = \\\" + bean); return bean; } } \",\"在IOC容器中配置后置处理器：\",\"<!-- bean的后置处理器要放入IOC容器才能生效 --> <bean id=\\\"myBeanProcessor\\\" class=\\\"com.atguigu.spring6.process.MyBeanProcessor\\\"/> \",\"加入后置处理器的执行结果\"]},\"765\":{\"h\":\"FactoryBean\",\"t\":[\"简介\",\"FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。\",\"将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。\",\"FactoryBean接口源码\",\"/* * Copyright 2002-2020 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * https://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \\\"AS IS\\\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package org.springframework.beans.factory; import org.springframework.lang.Nullable; /** * Interface to be implemented by objects used within a {@link BeanFactory} which * are themselves factories for individual objects. If a bean implements this * interface, it is used as a factory for an object to expose, not directly as a * bean instance that will be exposed itself. * * <p><b>NB: A bean that implements this interface cannot be used as a normal bean.</b> * A FactoryBean is defined in a bean style, but the object exposed for bean * references ({@link #getObject()}) is always the object that it creates. * * <p>FactoryBeans can support singletons and prototypes, and can either create * objects lazily on demand or eagerly on startup. The {@link SmartFactoryBean} * interface allows for exposing more fine-grained behavioral metadata. * * <p>This interface is heavily used within the framework itself, for example for * the AOP {@link org.springframework.aop.framework.ProxyFactoryBean} or the * {@link org.springframework.jndi.JndiObjectFactoryBean}. It can be used for * custom components as well; however, this is only common for infrastructure code. * * <p><b>{@code FactoryBean} is a programmatic contract. Implementations are not * supposed to rely on annotation-driven injection or other reflective facilities.</b> * {@link #getObjectType()} {@link #getObject()} invocations may arrive early in the * bootstrap process, even ahead of any post-processor setup. If you need access to * other beans, implement {@link BeanFactoryAware} and obtain them programmatically. * * <p><b>The container is only responsible for managing the lifecycle of the FactoryBean * instance, not the lifecycle of the objects created by the FactoryBean.</b> Therefore, * a destroy method on an exposed bean object (such as {@link java.io.Closeable#close()} * will <i>not</i> be called automatically. Instead, a FactoryBean should implement * {@link DisposableBean} and delegate any such close call to the underlying object. * * <p>Finally, FactoryBean objects participate in the containing BeanFactory's * synchronization of bean creation. There is usually no need for internal * synchronization other than for purposes of lazy initialization within the * FactoryBean itself (or the like). * * @author Rod Johnson * @author Juergen Hoeller * @since 08.03.2003 * @param <T> the bean type * @see org.springframework.beans.factory.BeanFactory * @see org.springframework.aop.framework.ProxyFactoryBean * @see org.springframework.jndi.JndiObjectFactoryBean */ public interface FactoryBean<T> { /** * The name of an attribute that can be * {@link org.springframework.core.AttributeAccessor#setAttribute set} on a * {@link org.springframework.beans.factory.config.BeanDefinition} so that * factory beans can signal their object type when it can't be deduced from * the factory bean class. * @since 5.2 */ String OBJECT_TYPE_ATTRIBUTE = \\\"factoryBeanObjectType\\\"; /** * Return an instance (possibly shared or independent) of the object * managed by this factory. * <p>As with a {@link BeanFactory}, this allows support for both the * Singleton and Prototype design pattern. * <p>If this FactoryBean is not fully initialized yet at the time of * the call (for example because it is involved in a circular reference), * throw a corresponding {@link FactoryBeanNotInitializedException}. * <p>As of Spring 2.0, FactoryBeans are allowed to return {@code null} * objects. The factory will consider this as normal value to be used; it * will not throw a FactoryBeanNotInitializedException in this case anymore. * FactoryBean implementations are encouraged to throw * FactoryBeanNotInitializedException themselves now, as appropriate. * @return an instance of the bean (can be {@code null}) * @throws Exception in case of creation errors * @see FactoryBeanNotInitializedException */ @Nullable T getObject() throws Exception; /** * Return the type of object that this FactoryBean creates, * or {@code null} if not known in advance. * <p>This allows one to check for specific types of beans without * instantiating objects, for example on autowiring. * <p>In the case of implementations that are creating a singleton object, * this method should try to avoid singleton creation as far as possible; * it should rather estimate the type in advance. * For prototypes, returning a meaningful type here is advisable too. * <p>This method can be called <i>before</i> this FactoryBean has * been fully initialized. It must not rely on state created during * initialization; of course, it can still use such state if available. * <p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return * {@code null} here. Therefore it is highly recommended to implement * this method properly, using the current state of the FactoryBean. * @return the type of object that this FactoryBean creates, * or {@code null} if not known at the time of the call * @see ListableBeanFactory#getBeansOfType */ @Nullable Class<?> getObjectType(); /** * Is the object managed by this factory a singleton? That is, * will {@link #getObject()} always return the same object * (a reference that can be cached)? * <p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object, * the object returned from {@code getObject()} might get cached * by the owning BeanFactory. Hence, do not return {@code true} * unless the FactoryBean always exposes the same reference. * <p>The singleton status of the FactoryBean itself will generally * be provided by the owning BeanFactory; usually, it has to be * defined as singleton there. * <p><b>NOTE:</b> This method returning {@code false} does not * necessarily indicate that returned objects are independent instances. * An implementation of the extended {@link SmartFactoryBean} interface * may explicitly indicate independent instances through its * {@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean} * implementations which do not implement this extended interface are * simply assumed to always return independent instances if the * {@code isSingleton()} implementation returns {@code false}. * <p>The default implementation returns {@code true}, since a * {@code FactoryBean} typically manages a singleton instance. * @return whether the exposed object is a singleton * @see #getObject() * @see SmartFactoryBean#isPrototype() */ default boolean isSingleton() { return true; } } \",\"创建类UserFactoryBean\",\"public class UserFactoryBean implements FactoryBean<User> { @Override public User getObject() throws Exception { return new User(); } @Override public Class<?> getObjectType() { return User.class; } } \",\"配置bean\",\"<bean id=\\\"user\\\" class=\\\"com.codermast.spring6.iocxml.bean.UserFactoryBean\\\"/> \",\"测试\",\"@Test public void testUserFactoryBean(){ //获取IOC容器 ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"bean-factorybean.xml\\\"); User user = (User) ac.getBean(\\\"user\\\"); System.out.println(user); System.out.println(user.getClass()); } \",\"测试结果\"]},\"766\":{\"h\":\"基于xml自动装配\",\"t\":[\"自动装配：根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值\",\"场景模拟\",\"创建类UserController\",\"public class UserController { private UserService userService; public void setUserService(UserService userService) { this.userService = userService; } public void saveUser(){ userService.saveUser(); } } \",\"创建接口UserService\",\"public interface UserService { void saveUser(); } \",\"创建类UserServiceImpl实现接口UserService\",\"public class UserServiceImpl implements UserService { private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; } @Override public void saveUser() { userDao.saveUser(); } } \",\"创建接口UserDao\",\"public interface UserDao { void saveUser(); } \",\"创建类UserDaoImpl实现接口UserDao\",\"public class UserDaoImpl implements UserDao{ @Override public void saveUser() { System.out.println(\\\"保存成功\\\"); } } \",\"2.配置bean\",\"使用bean标签的autowire属性设置自动装配效果\",\"自动装配方式：byType\",\"byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值\",\"若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null\",\"若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException\",\"autowire-byType.xml\",\"<!--自动装配 ：byType 方式--> <bean id=\\\"userController\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.controller.UserController\\\" autowire=\\\"byType\\\"/> <bean id=\\\"userService\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.service.UserServiceImpl\\\" autowire=\\\"byType\\\"/> <bean id=\\\"userDao\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.dao.UserDaoImpl\\\"/> \",\"自动装配方式：byName\",\"byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值\",\"autowire-byName.xml\",\"<!--自动装配：byName 方式--> <bean id=\\\"userController\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.controller.UserController\\\" autowire=\\\"byName\\\"/> <bean id=\\\"userService\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.service.UserServiceImpl\\\" autowire=\\\"byName\\\"/> <bean id=\\\"userServiceImpl\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.service.UserServiceImpl\\\" autowire=\\\"byName\\\"/> <bean id=\\\"userDao\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.dao.UserDaoImpl\\\"/> <bean id=\\\"userDaoImpl\\\" class=\\\"com.codermast.spring6.iocxml.bean.autowire.dao.UserDaoImpl\\\"/> \",\"测试\",\"@Test public void testAutoWireByXML() { ApplicationContext acByName = new ClassPathXmlApplicationContext(\\\"autowire-byName.xml\\\"); UserController userControllerByName = acByName.getBean(UserController.class); userControllerByName.saveUser(); ApplicationContext acByType = new ClassPathXmlApplicationContext(\\\"autowire-byType.xml\\\"); UserController userControllerByType = acByType.getBean(UserController.class); userControllerByType.saveUser(); } \",\"测试结果\"]},\"767\":{\"h\":\"SpringBoot\"},\"768\":{\"h\":\"章节分布\",\"t\":[\"SpringBoot3 核心特性\",\"SpringBoot3 场景实战\",\"响应式编程全套\"]},\"769\":{\"h\":\"参考资料\",\"t\":[\"视频资料 : 尚硅谷SpringBoot3零基础教程，springboot入门到实战\",\"笔记资料 : https://www.yuque.com/leifengyang/springboot3/\",\"代码仓库 : https://gitee.com/leifengyang/spring-boot-3/\"]},\"770\":{\"h\":\"第六章 应用层\"},\"771\":{\"h\":\"第一章 计算机网络体系结构\"},\"772\":{\"h\":\"2 计算机网络的分类\"},\"773\":{\"h\":\"2.1 按分布范围分类\",\"t\":[\"广域网（WAN） 广域网的任务时容果\",\"城域网（MAN）\",\"局域网（LAN）\",\"个人区域网（PAN）\",\"注意\",\"若中央处理器之间的距离非常近（如仅1m的数量级或甚至更小），则一般称为多处理器系统，而不称为计算机网络。\"]},\"774\":{\"h\":\"2.2 按传输技术分类\"},\"775\":{\"h\":\"2.3 按拓扑结构分类\"},\"776\":{\"h\":\"2.4 按使用者分类\"},\"777\":{\"h\":\"2.5 按交换技术分类\"},\"778\":{\"h\":\"2.6 按传输介质分类\"},\"779\":{\"h\":\"1 计算机网络的概念、组成和功能\"},\"780\":{\"h\":\"1.1 计算机网络的概念\",\"t\":[\"一般认为，计算机网络是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。\"]},\"781\":{\"h\":\"1.1.1 广义观点\",\"t\":[\"只要是能实现远程信息处理的系统或者能进一步达到资源共享的系统，都是计算机网络。\"]},\"782\":{\"h\":\"1.1.2 资源共享观点\",\"t\":[\"计算机网络是“以能够相互共享资源的方式互联起来的自治计算机系统的集合”。\",\"1. 目的——资源共享 2. 组成单元——分布在不同地理位置的多台独立的“自治计算机” 3. 网络中的计算机必须遵循的统一规则——网络协议 \"]},\"783\":{\"h\":\"1.1.3 用户透明性观点\",\"t\":[\"存在一个能为用户自动管理资源的网络操作系统，它能够调用用户所需要的资源，而整个网络就像一个大的计算机系统一样对用户是透明的，即用户不可见的。用户使用网络就像使用一台单一的超级计算机，无需了解网络的存在、资源的位置信息。\"]},\"784\":{\"h\":\"1.2 计算机网络的组成\"},\"785\":{\"h\":\"1.2.1 从组成部分上看\",\"t\":[\"从组成部分上看，一个完整的计算机网络主要由硬件、软件、协议三大部分组成，缺一不可。\",\"硬件主要由主机（也称端系统）、通信链路（如双绞线、光纤）、交换设备（如路由器、交换机等）和通信处理机（如网卡）等组成。\",\"软件主要由各种实现资源共享的软件和方便用户使用的各种工具软件（如操作系统、邮件收发程序、FTP程序、聊天程序等）。软件部分多属于应用层。\",\"协议是计算机网络的核心，如同交通规则制约汽车驾驶一样，协议规定了网络传输数据时所遵循的规范。\"]},\"786\":{\"h\":\"1.2.2 从工作方式上看\",\"t\":[\"从工作方式上看，计算机网络可以分为边缘部分和核心部分。\",\"边缘部分由所有连接到因特网上、供用户直接使用的主机组成，用来进行通信和资源共享；\",\"核心部分由大量的网络和连接这些网络的路由器组成，它为边缘部分提供连通性和交换服务。\",\"边缘部分和核心部分\"]},\"787\":{\"h\":\"1.2.3 从功能组成上看\",\"t\":[\"从功能组成上看，计算机网络可以分为通信子网和资源子网。\",\"通信子网由各种传输介质、通信设备和相应的网络协议组成，它使网络具有数据传输、交换、控制和储存的能力，实现联网计算机之间的数据通信。\",\"资源子网是实现资源共享功能的设备及其软件的集合，向网络用户提供共享其他计算机上的硬件资源、软件资源和数据资源的服务。\"]},\"788\":{\"h\":\"1.3 计算机网络的功能\"},\"789\":{\"h\":\"1.3.1 数据通信\",\"t\":[\"它是计算机网络最基本和最重要的功能用来实现联网计算机之间各种信息的传输，并将分散在不同地理位置的计算机联系起来，进行统一的调配、控制和管理。\",\"例如\",\"例如：文件传输、电子邮件等应用。\"]},\"790\":{\"h\":\"1.3.2 资源共享\",\"t\":[\"资源共享可以是软件共享、数据共享，也可以是硬件共享。\",\"它使计算机网络中的资源互通有无、分工协作，从而极大地提高硬件资源、软件资源、数据资源的利用率。\"]},\"791\":{\"h\":\"1.3.3 分布式处理\",\"t\":[\"当计算机网络中的某个计算机系统负荷过重时，可以将其处理的某个复杂任务分配给网络中的其他计算机系统，从而利用空闲计算机资源以提高整个系统的利用率。\"]},\"792\":{\"h\":\"1.3.4 提高可靠性\",\"t\":[\"计算机网络中的各台计算机可以通过网络互为替代机。\"]},\"793\":{\"h\":\"1.3.5 负载均衡\",\"t\":[\"将工作任务均衡地分配给计算机网络中的各台计算机。\",\"除此以外\",\"除以上的几大主要功能外，计算机网络还可以实现电子化办公与服务、远程教育、娱乐等功能，满足了社会的需要，方便了人们学习、工作和生活，具有巨大的经济效益。\"]},\"794\":{\"h\":\"第三章 数据链路层\"},\"795\":{\"h\":\"第四章 网络层\"},\"796\":{\"h\":\"第二章 物理层\"},\"797\":{\"h\":\"第五章 传输层\"},\"798\":{\"h\":\"Computer\"}},\"dirtCount\":0,\"index\":[[\"物理层\",{\"0\":{\"796\":1}}],[\"娱乐等功能\",{\"1\":{\"793\":1}}],[\"电子邮件等应用\",{\"1\":{\"789\":1}}],[\"供用户直接使用的主机组成\",{\"1\":{\"786\":1}}],[\"聊天程序等\",{\"1\":{\"785\":1}}],[\"邮件收发程序\",{\"1\":{\"785\":1}}],[\"光纤\",{\"1\":{\"785\":1}}],[\"光标放在方法名上\",{\"1\":{\"553\":2}}],[\"光标放在的位置不同提示的结果也不同\",{\"1\":{\"550\":1}}],[\"光标定位到新行\",{\"1\":{\"552\":1}}],[\"光标定位到新行位置\",{\"1\":{\"551\":1}}],[\"光标定位按\",{\"1\":{\"549\":1}}],[\"光标所在行上空出一行\",{\"1\":{\"552\":1}}],[\"光标所在行\",{\"1\":{\"552\":1}}],[\"光标所在行下空出一行\",{\"1\":{\"551\":1}}],[\"光标所在的变量\",{\"1\":{\"549\":1}}],[\"光标跳转到当前单词\",{\"1\":{\"549\":2,\"553\":2}}],[\"硬件主要由主机\",{\"1\":{\"785\":1}}],[\"硬件设备等\",{\"1\":{\"406\":1}}],[\"局域网\",{\"1\":{\"773\":1}}],[\"局部内部类类似于方法中的局部变量\",{\"1\":{\"580\":1}}],[\"局部内部类是指定义在方法中或者作用域内的类\",{\"1\":{\"580\":1}}],[\"局部内部类\",{\"1\":{\"580\":2}}],[\"局部变量命名\",{\"1\":{\"561\":1}}],[\"局部变量的范围是在其内声明的begin\",{\"1\":{\"246\":1}}],[\"局部变量是根据需要定义的在局部生效的变量\",{\"1\":{\"246\":1}}],[\"局部变量\",{\"0\":{\"246\":1}}],[\"城域网\",{\"1\":{\"773\":1}}],[\"广义观点\",{\"0\":{\"781\":1}}],[\"广域网的任务时容果\",{\"1\":{\"773\":1}}],[\"广域网\",{\"1\":{\"773\":1}}],[\"广告商找大明星拍广告需要经过经纪人\",{\"1\":{\"656\":1}}],[\"尚硅谷springboot3零基础教程\",{\"1\":{\"769\":1}}],[\"尚硅谷spring6视频教程\",{\"1\":{\"653\":1}}],[\"章节分布\",{\"0\":{\"768\":1}}],[\"★★★\",{\"1\":{\"764\":1}}],[\"☆☆☆\",{\"1\":{\"764\":1}}],[\"远大前程班\",{\"1\":{\"758\":1}}],[\"远程教育\",{\"1\":{\"793\":1}}],[\"远程仓库由\",{\"1\":{\"509\":1}}],[\"远程字典服务器\",{\"1\":{\"367\":1}}],[\"赵六\",{\"1\":{\"758\":3,\"759\":1,\"760\":2}}],[\"财源滚滚班\",{\"1\":{\"758\":1}}],[\"点我展开代码\",{\"1\":{\"758\":1,\"760\":1,\"763\":1,\"764\":1}}],[\"点击展开代码\",{\"1\":{\"754\":1}}],[\"点击上面的前端资料下载链接\",{\"1\":{\"634\":1}}],[\"点击确定\",{\"1\":{\"606\":1}}],[\"点击新建\",{\"1\":{\"606\":1}}],[\"点击编辑\",{\"1\":{\"606\":1}}],[\"点击下一步\",{\"1\":{\"604\":2}}],[\"点击下载即可\",{\"1\":{\"603\":1}}],[\"点击此处的下载\",{\"1\":{\"603\":1}}],[\"冲突\",{\"1\":{\"758\":1}}],[\"冲去后同步\",{\"1\":{\"303\":1}}],[\"女\",{\"1\":{\"755\":1,\"758\":3,\"759\":1,\"760\":2}}],[\"李四\",{\"1\":{\"755\":1}}],[\"期望的应为单个匹配bean\",{\"1\":{\"752\":1}}],[\"期间\",{\"1\":{\"440\":1}}],[\"期间用户应用可以执行其他业务\",{\"1\":{\"413\":1}}],[\"期间的命令记录在\",{\"1\":{\"302\":1}}],[\"报错的意思就是\",{\"1\":{\"752\":1}}],[\"报错信息\",{\"1\":{\"752\":1}}],[\"嵌套的事务可以独立的提交和回滚\",{\"1\":{\"745\":1}}],[\"挂起当前事务\",{\"1\":{\"745\":1}}],[\"√\",{\"1\":{\"744\":6}}],[\"×\",{\"1\":{\"744\":2}}],[\"禁止其它事务对这个表进行添加\",{\"1\":{\"744\":1}}],[\"禁用默认提示信息\",{\"1\":{\"684\":1}}],[\"购买第一本图书不受影响\",{\"1\":{\"745\":1}}],[\"购买图书的方法buybook\",{\"1\":{\"745\":1}}],[\"购买图书是一个完整的功能\",{\"1\":{\"738\":1}}],[\"购买图书之后\",{\"1\":{\"738\":1}}],[\"购买id为1的图书\",{\"1\":{\"738\":1}}],[\"余额充足\",{\"1\":{\"738\":1}}],[\"余额不足\",{\"1\":{\"738\":1}}],[\"余额\",{\"1\":{\"737\":1}}],[\"余数作为插槽\",{\"1\":{\"345\":1}}],[\"斗罗大陆\",{\"1\":{\"737\":1}}],[\"斗破苍穹\",{\"1\":{\"737\":1}}],[\"价格\",{\"1\":{\"737\":1}}],[\"扫描组件\",{\"1\":{\"737\":1}}],[\"细节没有被屏蔽\",{\"1\":{\"734\":1}}],[\"⑥查询返回单个的值\",{\"1\":{\"731\":1}}],[\"⑥spring\",{\"1\":{\"727\":1}}],[\"男\",{\"1\":{\"731\":1,\"754\":1}}],[\"张三\",{\"1\":{\"731\":1,\"754\":1,\"757\":1}}],[\"性别\",{\"1\":{\"730\":1}}],[\"性能等各个方面的优化\",{\"1\":{\"735\":1}}],[\"性能的瓶颈一般情况下都是\",{\"1\":{\"463\":1}}],[\"性能不会随监听的\",{\"1\":{\"412\":1}}],[\"性能会下降\",{\"1\":{\"412\":1}}],[\"性能反而会下降\",{\"1\":{\"408\":1}}],[\"性能自然很差\",{\"1\":{\"406\":1}}],[\"性能最好\",{\"1\":{\"322\":1}}],[\"性能适中\",{\"1\":{\"322\":1}}],[\"性能影响大\",{\"1\":{\"322\":1}}],[\"性能较差\",{\"1\":{\"285\":1}}],[\"性能较好\",{\"1\":{\"274\":1}}],[\"性能要求较高\",{\"1\":{\"282\":1}}],[\"性能受影响\",{\"1\":{\"274\":1}}],[\"性能由好到差的连接类型为\",{\"1\":{\"231\":1}}],[\"性能查询\",{\"1\":{\"228\":1}}],[\"性能也是最好的\",{\"1\":{\"134\":1}}],[\"姓名\",{\"1\":{\"730\":1}}],[\"⑤查询数据返回list集合\",{\"1\":{\"731\":1}}],[\"⑤准备数据库与测试表\",{\"1\":{\"730\":1}}],[\"⑤spring\",{\"1\":{\"727\":1}}],[\"④查询返回对象\",{\"1\":{\"731\":1}}],[\"④配置spring的配置文件\",{\"1\":{\"730\":1}}],[\"④spring\",{\"1\":{\"727\":1}}],[\"旗下的项目已经覆盖了广泛领域\",{\"1\":{\"726\":1}}],[\"边缘部分和核心部分\",{\"1\":{\"786\":1}}],[\"边缘部分由所有连接到因特网上\",{\"1\":{\"786\":1}}],[\"边界清晰的组件有条不紊的搭建超大型复杂应用系统\",{\"1\":{\"726\":1}}],[\"边运行边编译\",{\"1\":{\"677\":1}}],[\"替程序员屏蔽了组件创建过程中的大量细节\",{\"1\":{\"726\":1}}],[\"替换成\",{\"1\":{\"650\":1}}],[\"翻转资源获取方向\",{\"1\":{\"726\":1}}],[\"月\",{\"1\":{\"725\":1}}],[\"月份建立的文件夹下面并进行压缩\",{\"1\":{\"700\":1}}],[\"年龄\",{\"1\":{\"730\":1}}],[\"年\",{\"1\":{\"725\":1}}],[\"俨然成为了\",{\"1\":{\"725\":1}}],[\"企业级应用程序开发的首选\",{\"1\":{\"725\":1}}],[\"企业级应用的开发难度和开发周期\",{\"1\":{\"725\":1}}],[\"企业版\",{\"1\":{\"503\":1}}],[\"归纳起来\",{\"1\":{\"719\":1}}],[\"感觉和\",{\"1\":{\"711\":1}}],[\"绝对路径\",{\"1\":{\"709\":1}}],[\"尤其对于\",{\"1\":{\"708\":1}}],[\"旨在成为一个更强大的接口\",{\"1\":{\"705\":1}}],[\"旨在加速用\",{\"1\":{\"678\":1}}],[\"严重错误\",{\"1\":{\"700\":1}}],[\"严格区分大小写\",{\"1\":{\"561\":1}}],[\"严格意义上来说可以分为本地仓库和远程仓库\",{\"1\":{\"509\":1}}],[\"域中\",{\"1\":{\"695\":1}}],[\"专门为\",{\"1\":{\"695\":1}}],[\"专为性能和易用性而设计\",{\"1\":{\"351\":1}}],[\"交换\",{\"1\":{\"787\":1}}],[\"交换机等\",{\"1\":{\"785\":1}}],[\"交换设备\",{\"1\":{\"785\":1}}],[\"交给第三方容器负责\",{\"1\":{\"693\":2}}],[\"交集\",{\"1\":{\"381\":1,\"382\":1,\"399\":1}}],[\"译为\",{\"1\":{\"691\":1}}],[\"译器不会检查它\",{\"1\":{\"595\":1}}],[\"传输层\",{\"0\":{\"797\":1}}],[\"传播行为\",{\"0\":{\"745\":1}}],[\"传递动态参数\",{\"1\":{\"690\":1}}],[\"传统的缓存策略一般是请求到达\",{\"1\":{\"281\":1}}],[\"传统缓存的问题\",{\"1\":{\"281\":1}}],[\"演示resourceloaderaware使用\",{\"1\":{\"718\":1}}],[\"演示java国际化\",{\"1\":{\"687\":1}}],[\"演示try\",{\"1\":{\"600\":1}}],[\"软件资源\",{\"1\":{\"790\":1}}],[\"软件资源和数据资源的服务\",{\"1\":{\"787\":1}}],[\"软件部分多属于应用层\",{\"1\":{\"785\":1}}],[\"软件主要由各种实现资源共享的软件和方便用户使用的各种工具软件\",{\"1\":{\"785\":1}}],[\"软件\",{\"1\":{\"785\":1}}],[\"软件中的国际化是通过配置文件来实现的\",{\"1\":{\"686\":1}}],[\"软件显示不同语言的过程就是国际化\",{\"1\":{\"686\":1}}],[\"软件工程\",{\"1\":{\"132\":3}}],[\"国家\",{\"1\":{\"690\":1}}],[\"国际化文件命名格式\",{\"1\":{\"690\":1}}],[\"国际化也称作i18n\",{\"1\":{\"686\":1}}],[\"国际化i18n\",{\"0\":{\"685\":1}}],[\"国内镜像\",{\"1\":{\"499\":1}}],[\"国内访问可能不够稳定\",{\"1\":{\"494\":1}}],[\"验证注解的元素值是email\",{\"1\":{\"682\":1}}],[\"验证该网络下的两个容器建立了联系\",{\"1\":{\"487\":1}}],[\"帮助快速实现校验\",{\"1\":{\"681\":1}}],[\"帮助我们实现多个相关联的\",{\"1\":{\"478\":1}}],[\"手机号码不能为空\",{\"1\":{\"683\":1}}],[\"手机号码格式错误\",{\"1\":{\"683\":1}}],[\"手机号是合法的手机号格式等等\",{\"1\":{\"680\":1}}],[\"手动下载的是\",{\"1\":{\"498\":1}}],[\"手动下载安装\",{\"1\":{\"498\":1}}],[\"手动反序列化为对象\",{\"1\":{\"358\":1}}],[\"手动完成对象的序列化和反序列化\",{\"1\":{\"357\":1}}],[\"手动的\",{\"1\":{\"347\":1}}],[\"手动提交事务\",{\"0\":{\"202\":1}}],[\"立即启动\",{\"1\":{\"678\":1}}],[\"立刻删除对应的\",{\"1\":{\"457\":1}}],[\"立刻记录到\",{\"1\":{\"322\":1}}],[\"借助\",{\"1\":{\"677\":1}}],[\"借助指针存储地址来表示元素之间的逻辑关系\",{\"1\":{\"35\":1}}],[\"弹性扩缩容的云原生技术相冲突\",{\"1\":{\"677\":1}}],[\"弹出层\",{\"1\":{\"556\":1}}],[\"弹出层中有很多目标可以进行选择\",{\"1\":{\"550\":1}}],[\"弹出\",{\"1\":{\"554\":2,\"556\":1}}],[\"弹出缓存的最近拷贝的内容管理器弹出层\",{\"1\":{\"553\":1}}],[\"弹出跟当前文件有关联的文件弹出层\",{\"1\":{\"552\":1}}],[\"弹出模板选择窗口\",{\"1\":{\"552\":1}}],[\"弹出书签显示层\",{\"1\":{\"551\":1}}],[\"弹出可输入计算表达式调试框\",{\"1\":{\"550\":1}}],[\"弹出一个提示\",{\"1\":{\"550\":1}}],[\"弹出该文件路径\",{\"1\":{\"549\":1}}],[\"弹出当前文件结构层\",{\"1\":{\"549\":1}}],[\"便将字节码转换为机器码的过程\",{\"1\":{\"677\":1}}],[\"便于引用\",{\"1\":{\"749\":1}}],[\"便于管理\",{\"1\":{\"533\":1}}],[\"便于判断空闲时间太久的key\",{\"1\":{\"467\":1}}],[\"便于维护\",{\"1\":{\"110\":1}}],[\"便于系统异常时恢复数据\",{\"1\":{\"73\":1}}],[\"预计每次调用都会返回一个新的inputstream\",{\"1\":{\"705\":1}}],[\"预先编译\",{\"1\":{\"677\":1}}],[\"预分配事务id\",{\"1\":{\"87\":1}}],[\"较大的数\",{\"1\":{\"671\":1}}],[\"较小的数\",{\"1\":{\"671\":1}}],[\"较难\",{\"0\":{\"26\":1}}],[\"③注意\",{\"1\":{\"741\":1}}],[\"③观察结果\",{\"1\":{\"738\":1,\"739\":1,\"742\":1,\"743\":1,\"745\":1}}],[\"③创建组件\",{\"1\":{\"737\":1}}],[\"③创建jdbc\",{\"1\":{\"730\":1}}],[\"③查询数据返回对象\",{\"1\":{\"731\":1}}],[\"③spring\",{\"1\":{\"727\":1}}],[\"③applicationcontext的主要实现类\",{\"1\":{\"695\":1}}],[\"③获取目标方法的异常\",{\"1\":{\"669\":1}}],[\"③相关术语\",{\"1\":{\"656\":1}}],[\"①介绍\",{\"1\":{\"741\":1,\"742\":1,\"743\":1,\"744\":1,\"745\":1}}],[\"①添加事务配置\",{\"1\":{\"739\":1}}],[\"①添加配置类\",{\"1\":{\"746\":1}}],[\"①添加配置\",{\"1\":{\"737\":1}}],[\"①创建测试类\",{\"1\":{\"738\":1}}],[\"①什么是事务\",{\"1\":{\"733\":1}}],[\"①装配\",{\"1\":{\"731\":1}}],[\"①搭建子模块\",{\"1\":{\"730\":1}}],[\"①spring\",{\"1\":{\"727\":1}}],[\"①beanfactory\",{\"1\":{\"695\":1}}],[\"①获取连接点信息\",{\"1\":{\"669\":1}}],[\"①作用\",{\"1\":{\"667\":1}}],[\"号表示方法名任意\",{\"1\":{\"667\":1}}],[\"号只能代表包的层次结构中的一层\",{\"1\":{\"667\":1}}],[\"号代替方法名的一部分\",{\"1\":{\"667\":1}}],[\"号代替类名的一部分\",{\"1\":{\"667\":1}}],[\"号代替\",{\"1\":{\"667\":2}}],[\"②测试\",{\"1\":{\"745\":1,\"746\":1}}],[\"②测试增删改功能\",{\"1\":{\"731\":1}}],[\"②使用方式\",{\"1\":{\"741\":1,\"742\":1,\"743\":1,\"744\":1}}],[\"②添加事务注解\",{\"1\":{\"739\":1}}],[\"②模拟场景\",{\"1\":{\"738\":1}}],[\"②创建表\",{\"1\":{\"737\":1}}],[\"②事务的特性\",{\"1\":{\"733\":1}}],[\"②加入依赖\",{\"1\":{\"730\":1}}],[\"②spring\",{\"1\":{\"727\":1}}],[\"②applicationcontext\",{\"1\":{\"695\":1}}],[\"②获取目标方法的返回值\",{\"1\":{\"669\":1}}],[\"②语法细节\",{\"1\":{\"667\":1}}],[\"②生活中的代理\",{\"1\":{\"656\":1}}],[\"准备被代理的目标资源\",{\"1\":{\"664\":1}}],[\"准备工作\",{\"0\":{\"664\":1,\"673\":1,\"730\":1,\"737\":1}}],[\"准备实例和配置\",{\"0\":{\"297\":1,\"333\":1,\"341\":1}}],[\"织入\",{\"1\":{\"663\":1}}],[\"认干爹模式\",{\"1\":{\"663\":1}}],[\"认识redis\",{\"0\":{\"367\":1}}],[\"兄弟两个拜把子模式\",{\"1\":{\"663\":1}}],[\"切点通过\",{\"1\":{\"661\":1}}],[\"切入点表达式中使用\",{\"1\":{\"667\":1}}],[\"切入点表达式语法\",{\"0\":{\"667\":1}}],[\"切入点\",{\"1\":{\"661\":1}}],[\"切面的优先级控制切面的内外嵌套顺序\",{\"1\":{\"671\":1}}],[\"切面的优先级\",{\"0\":{\"671\":1}}],[\"切面\",{\"1\":{\"661\":1}}],[\"切换全屏模式\",{\"1\":{\"552\":1}}],[\"切换当前已打开的窗口中的子视图\",{\"1\":{\"550\":1}}],[\"切换到执行\",{\"1\":{\"347\":1}}],[\"环绕通知\",{\"0\":{\"670\":1},\"1\":{\"661\":1,\"665\":4,\"666\":1,\"670\":4}}],[\"环境创建\",{\"1\":{\"695\":1}}],[\"环境检测\",{\"0\":{\"608\":1}}],[\"环境下执行\",{\"1\":{\"496\":1}}],[\"环境变量和配置文件\",{\"1\":{\"483\":1}}],[\"环境变量\",{\"1\":{\"482\":1}}],[\"环境变量等\",{\"1\":{\"482\":1}}],[\"环境\",{\"1\":{\"384\":1,\"498\":1,\"499\":1}}],[\"盖棺定论\",{\"1\":{\"661\":1,\"666\":1}}],[\"盖好一栋大厦的关键在于打好地基\",{\"1\":{\"2\":1}}],[\"死于非命\",{\"1\":{\"661\":1,\"666\":1}}],[\"寿终正寝\",{\"1\":{\"661\":1,\"666\":1}}],[\"横切关注点\",{\"1\":{\"661\":1}}],[\"附加功能由代理类中的代理方法来实现\",{\"1\":{\"657\":1}}],[\"附加功能分散在各个业务功能方法中\",{\"1\":{\"655\":1}}],[\"套用\",{\"1\":{\"656\":1}}],[\"套接字或网络接口\",{\"1\":{\"474\":1}}],[\"房产中介是买卖双方的代理\",{\"1\":{\"656\":1}}],[\"合作伙伴找大老板谈合作要约见面时间需要经过秘书\",{\"1\":{\"656\":1}}],[\"合并到一个事务里\",{\"1\":{\"745\":1}}],[\"合并页的阀值\",{\"1\":{\"208\":1}}],[\"合并插入缓存\",{\"1\":{\"75\":1}}],[\"设计模式\",{\"1\":{\"656\":1}}],[\"设置不回滚的异常\",{\"1\":{\"749\":1}}],[\"设置回滚的异常\",{\"1\":{\"749\":1}}],[\"设置只读属性\",{\"1\":{\"749\":1}}],[\"设置提示语\",{\"1\":{\"684\":1}}],[\"设置校验\",{\"1\":{\"681\":1}}],[\"设置代理对象实现目标对象方法的过程\",{\"1\":{\"658\":1}}],[\"设置bean所对应类型的全类名\",{\"1\":{\"651\":1}}],[\"设置bean的唯一标识\",{\"1\":{\"651\":1}}],[\"设置bitmaps中某个偏移量的值\",{\"1\":{\"399\":1}}],[\"设置排除或包含的依据\",{\"1\":{\"643\":2}}],[\"设置光标当前行为断点\",{\"1\":{\"549\":1}}],[\"设置执行后续命令的用户或\",{\"1\":{\"493\":1}}],[\"设置了工作目录\",{\"1\":{\"490\":1}}],[\"设置工作目录\",{\"1\":{\"490\":1,\"493\":1}}],[\"设置环境变量\",{\"1\":{\"489\":1,\"493\":1}}],[\"设置dict\",{\"1\":{\"440\":2}}],[\"设置为0\",{\"1\":{\"407\":1}}],[\"设置后访问redis必须输入密码\",{\"1\":{\"371\":1}}],[\"设置\",{\"1\":{\"355\":2,\"553\":1}}],[\"设置连接⼯⼚\",{\"1\":{\"355\":1}}],[\"设置密码\",{\"1\":{\"353\":1}}],[\"设置最长等待时间\",{\"1\":{\"349\":1}}],[\"设置缓存为软引用或者弱引用\",{\"1\":{\"285\":1}}],[\"设置缓存有效期为\",{\"1\":{\"285\":1}}],[\"设置缓存的有效时间\",{\"1\":{\"285\":1}}],[\"设置缓存的数量上限\",{\"1\":{\"285\":1}}],[\"设置缓存大小上限为\",{\"1\":{\"285\":1}}],[\"设置事务的传播行为\",{\"1\":{\"749\":1}}],[\"设置事务的超时属性\",{\"1\":{\"749\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"261\":1,\"749\":1}}],[\"设置事务提交方式\",{\"1\":{\"258\":1}}],[\"设置系统变量\",{\"1\":{\"244\":1}}],[\"设置慢查询的\",{\"1\":{\"229\":1}}],[\"设置全局参数为local\",{\"1\":{\"204\":1}}],[\"设置别名\",{\"1\":{\"188\":1}}],[\"靠以前把子类中的重复代码抽取到父类的方式没法解决\",{\"1\":{\"655\":1}}],[\"困难\",{\"1\":{\"655\":1}}],[\"现有代码缺陷\",{\"1\":{\"655\":1}}],[\"现在正处于云原生\",{\"1\":{\"677\":1}}],[\"现在数组中每个数字都保存在\",{\"1\":{\"432\":1}}],[\"现在在存储数据之前需要进行手动序列化\",{\"1\":{\"357\":1}}],[\"现在三个实例还没有任何关系\",{\"1\":{\"299\":1}}],[\"现在触发器还只支持行级触发\",{\"1\":{\"155\":1}}],[\"面向切面编程的应用模块\",{\"1\":{\"727\":1}}],[\"面向切面编程\",{\"1\":{\"726\":1}}],[\"面向切面aop\",{\"0\":{\"654\":1}}],[\"面向\",{\"1\":{\"695\":2}}],[\"面向对象的三大基本特征是\",{\"1\":{\"574\":1}}],[\"面向对象三个特性\",{\"0\":{\"574\":1}}],[\"面向对象\",{\"0\":{\"573\":1,\"629\":1},\"1\":{\"573\":1}}],[\"笔记资料\",{\"1\":{\"653\":1,\"769\":1}}],[\"笔者看到也会尽量答复和解决\",{\"1\":{\"640\":1}}],[\"笔者的电脑系统为macos\",{\"1\":{\"375\":1}}],[\"入门案例\",{\"0\":{\"651\":1}}],[\"入门基础\",{\"0\":{\"473\":1}}],[\"警告\",{\"1\":{\"650\":1,\"700\":1}}],[\"警告位置\",{\"1\":{\"551\":1,\"556\":1}}],[\"斜杠\",{\"1\":{\"650\":2}}],[\"教程\",{\"1\":{\"649\":1}}],[\"某种类型的bean只能有一个\",{\"1\":{\"647\":1}}],[\"显然这样的结果是错误的\",{\"1\":{\"738\":1}}],[\"显然当通过name找不到的时候\",{\"1\":{\"647\":1}}],[\"显示添加到收藏夹弹出层\",{\"1\":{\"554\":1}}],[\"显示方法层次结构\",{\"1\":{\"553\":1}}],[\"显示最近修改的文件列表的弹出层\",{\"1\":{\"553\":1}}],[\"显示最近打开的文件记录列表\",{\"1\":{\"549\":1}}],[\"显示使用的地方\",{\"1\":{\"552\":1}}],[\"显示对应数值的选项卡\",{\"1\":{\"550\":1}}],[\"显示到当前文件的\",{\"1\":{\"550\":1}}],[\"显示各类浏览器打开目标选择弹出层\",{\"1\":{\"550\":1}}],[\"显示当前文件选择目标弹出层\",{\"1\":{\"550\":1}}],[\"显示当前类的声明\",{\"1\":{\"550\":1}}],[\"显示当前类的层次结构\",{\"1\":{\"549\":1}}],[\"显示版本控制常用操作菜单弹出层\",{\"1\":{\"550\":1}}],[\"显示文档内容\",{\"1\":{\"549\":1}}],[\"显示待处理消息的相关信息\",{\"1\":{\"387\":1}}],[\"显示可能应用到这张表上的索引\",{\"1\":{\"231\":1}}],[\"显示内连接\",{\"1\":{\"96\":1}}],[\"装配数据源\",{\"1\":{\"730\":1}}],[\"装配\",{\"1\":{\"647\":1}}],[\"装箱拆箱\",{\"1\":{\"562\":1}}],[\"装箱\",{\"1\":{\"562\":2}}],[\"框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题\",{\"1\":{\"735\":1}}],[\"框架对\",{\"1\":{\"729\":1}}],[\"框架除了自己提供功能外\",{\"1\":{\"725\":1}}],[\"框架不仅充分利用了策略模式来简化资源访问\",{\"1\":{\"719\":1}}],[\"框架\",{\"1\":{\"696\":1}}],[\"框架的所有模块\",{\"1\":{\"727\":1}}],[\"框架的\",{\"1\":{\"649\":1}}],[\"框架自己的\",{\"1\":{\"647\":1}}],[\"框架中最重要的核心组件之一\",{\"1\":{\"691\":1}}],[\"框架中的\",{\"1\":{\"649\":1}}],[\"框架中\",{\"1\":{\"362\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"646\":1}}],[\"怎么办\",{\"1\":{\"446\":1}}],[\"形参上注入\",{\"1\":{\"646\":1}}],[\"形参上\",{\"1\":{\"646\":1}}],[\"形成循环\",{\"1\":{\"410\":1}}],[\"形成一个单向链表\",{\"1\":{\"121\":1}}],[\"形成一个新的查询结果集\",{\"1\":{\"99\":1}}],[\"叫做\",{\"1\":{\"642\":1,\"751\":1}}],[\"叫做页分裂\",{\"1\":{\"207\":1}}],[\"于是便整理了我在学习中遇到的种种问题的解决方案\",{\"1\":{\"636\":1}}],[\"于使用redis类似\",{\"1\":{\"222\":1}}],[\"明明市面上已经有很多笔记\",{\"1\":{\"636\":1}}],[\"百度网盘\",{\"1\":{\"630\":1,\"631\":1,\"653\":1}}],[\"百度百科\",{\"1\":{\"423\":1}}],[\"倍大小\",{\"1\":{\"627\":1}}],[\"倍\",{\"1\":{\"627\":1}}],[\"想到了很多人在学习该项目的时候\",{\"1\":{\"636\":1}}],[\"想要操作时只能通过引用去调用对应的方法进行操作\",{\"1\":{\"619\":1}}],[\"想要直接删除需要加上\",{\"1\":{\"541\":1}}],[\"想存基本数据类型时\",{\"1\":{\"619\":1}}],[\"源码中有两处需要注意\",{\"1\":{\"646\":1}}],[\"源码解析\",{\"0\":{\"616\":1,\"617\":1}}],[\"源代码\",{\"1\":{\"562\":1}}],[\"仍然可以注入成功\",{\"1\":{\"646\":1}}],[\"仍无法正确执行\",{\"1\":{\"608\":1}}],[\"仍可被其他类继承\",{\"1\":{\"576\":1}}],[\"均能获取到\",{\"1\":{\"608\":1}}],[\"均无法发挥\",{\"1\":{\"406\":1}}],[\"习惯上\",{\"1\":{\"601\":1}}],[\"块中引起异常\",{\"1\":{\"600\":1}}],[\"抛出的仍然为原始异常\",{\"1\":{\"600\":1}}],[\"抛出异常\",{\"1\":{\"600\":1,\"745\":1}}],[\"抛出一个\",{\"1\":{\"599\":1}}],[\"抛开持久化不谈\",{\"1\":{\"460\":1}}],[\"程序启动速度快\",{\"1\":{\"677\":1}}],[\"程序函数库\",{\"1\":{\"677\":1}}],[\"程序员在开发时候需要进行运行调试\",{\"1\":{\"611\":1}}],[\"程序所在的线程死亡\",{\"1\":{\"600\":1}}],[\"程序就不能编译通过\",{\"1\":{\"595\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"595\":1}}],[\"程序中可以对其进行捕获处理\",{\"1\":{\"595\":1}}],[\"程序将对象的refcount减一\",{\"1\":{\"472\":1}}],[\"惯例\",{\"1\":{\"595\":1}}],[\"栈溢出错误\",{\"1\":{\"595\":1}}],[\"除以上的几大主要功能外\",{\"1\":{\"793\":1}}],[\"除此以外\",{\"1\":{\"793\":1}}],[\"除此之外\",{\"1\":{\"680\":1}}],[\"除法的除数不能为0\",{\"1\":{\"658\":1}}],[\"除非实现接口的类是抽象类\",{\"1\":{\"590\":1}}],[\"除了构造方法以外的方法\",{\"1\":{\"584\":1}}],[\"除了控制\",{\"1\":{\"450\":1}}],[\"除了扩容以外\",{\"1\":{\"439\":1}}],[\"除了链地址法解决哈希冲突以外\",{\"1\":{\"437\":1}}],[\"除了保存数据库中的字符串值以外\",{\"1\":{\"430\":1}}],[\"除了上述安装方式以外还有很多安装方式\",{\"1\":{\"368\":1}}],[\"除了参考视频教程外\",{\"1\":{\"173\":1}}],[\"除了传统的计算机资源\",{\"1\":{\"138\":1}}],[\"猪等类中抽象出动物类\",{\"1\":{\"589\":1}}],[\"狗\",{\"1\":{\"589\":1}}],[\"篮球等行为中抽象出运动这种行为\",{\"1\":{\"589\":1}}],[\"修饰\",{\"1\":{\"580\":1}}],[\"修改spring配置文件\",{\"0\":{\"749\":1}}],[\"修改s2\",{\"1\":{\"333\":1}}],[\"修改bookserviceimpl中buybook\",{\"1\":{\"745\":1}}],[\"修改功能\",{\"1\":{\"731\":1}}],[\"修改调用传递路径\",{\"1\":{\"707\":1}}],[\"修改userserviceimpl类\",{\"1\":{\"647\":2}}],[\"修改userdaoimpl类\",{\"1\":{\"647\":1}}],[\"修改指定下标的元素为\",{\"1\":{\"625\":1}}],[\"修改元素\",{\"1\":{\"619\":1}}],[\"修改和删除则会在dict\",{\"1\":{\"440\":1}}],[\"修改数组长度\",{\"1\":{\"434\":1}}],[\"修改数据库配置信息\",{\"1\":{\"631\":1}}],[\"修改数据\",{\"0\":{\"183\":1}}],[\"修改数据类型\",{\"1\":{\"180\":1}}],[\"修改为yes后即为后台运行\",{\"1\":{\"371\":1}}],[\"修改为0\",{\"1\":{\"371\":1}}],[\"修改配置类\",{\"1\":{\"336\":1}}],[\"修改配置文件\",{\"1\":{\"299\":1,\"341\":1}}],[\"修改故障节点配置\",{\"1\":{\"330\":1}}],[\"修改nginx\",{\"0\":{\"311\":1}}],[\"修改每个目录下的redis\",{\"1\":{\"341\":1}}],[\"修改每个实例的声明ip\",{\"1\":{\"297\":1}}],[\"修改每个实例的端口\",{\"1\":{\"297\":1}}],[\"修改每个文件夹内的配置文件\",{\"1\":{\"297\":1}}],[\"修改redis配置文件redis\",{\"1\":{\"371\":1}}],[\"修改redistemplate\",{\"1\":{\"358\":1}}],[\"修改redis\",{\"1\":{\"297\":1}}],[\"修改用户\",{\"1\":{\"197\":1}}],[\"修改字段名称和字段类型\",{\"1\":{\"180\":1}}],[\"修改字段\",{\"1\":{\"180\":1}}],[\"修改表权限\",{\"1\":{\"198\":1}}],[\"修改表字符集\",{\"1\":{\"179\":1}}],[\"修改表名\",{\"1\":{\"179\":1}}],[\"修改表的时候添加约束\",{\"1\":{\"49\":1}}],[\"修改\",{\"1\":{\"165\":1,\"179\":1,\"308\":1,\"434\":1,\"440\":1,\"631\":1,\"646\":8,\"647\":2,\"758\":1,\"759\":1,\"764\":1}}],[\"私有内部类\",{\"1\":{\"580\":1}}],[\"私有数组\",{\"1\":{\"438\":1}}],[\"匿名内部类用于继承其他类或是实现接口\",{\"1\":{\"580\":1}}],[\"匿名内部类在编译的时候由系统自动起名为\",{\"1\":{\"580\":1}}],[\"匿名内部类是唯一一种没有构造器的类\",{\"1\":{\"580\":1}}],[\"匿名内部类\",{\"1\":{\"580\":2}}],[\"匿名内部类的简写\",{\"1\":{\"336\":1}}],[\"静态链接至最终的程序中\",{\"1\":{\"677\":1}}],[\"静态链表\",{\"0\":{\"42\":1},\"1\":{\"42\":1}}],[\"静态代理确实实现了解耦\",{\"1\":{\"657\":1}}],[\"静态代理\",{\"0\":{\"657\":1}}],[\"静态代码块和实例代码块\",{\"1\":{\"592\":1}}],[\"静态方法名\",{\"1\":{\"590\":1}}],[\"静态方法是属于类的方法\",{\"1\":{\"584\":1}}],[\"静态方法\",{\"1\":{\"584\":1,\"590\":1}}],[\"静态类本质上和静态方法类似\",{\"1\":{\"580\":1}}],[\"静态内部类无法访问外部类的成员\",{\"1\":{\"580\":1}}],[\"静态内部类我们不需要创建外部类来访问\",{\"1\":{\"580\":1}}],[\"静态内部类可以使用\",{\"1\":{\"580\":1}}],[\"静态内部类\",{\"1\":{\"580\":2}}],[\"岁了\",{\"1\":{\"579\":1}}],[\"今年\",{\"1\":{\"579\":1}}],[\"概括来说就是一句话\",{\"1\":{\"742\":1}}],[\"概述\",{\"0\":{\"579\":1,\"594\":1,\"660\":1,\"715\":1,\"721\":1}}],[\"概念介绍\",{\"0\":{\"80\":1}}],[\"概念\",{\"0\":{\"47\":1,\"115\":1},\"1\":{\"763\":1}}],[\"父类\",{\"1\":{\"577\":1}}],[\"父类的引用指向了子类对象\",{\"1\":{\"577\":1}}],[\"父类做出修改时\",{\"1\":{\"576\":1}}],[\"父表有变更时\",{\"1\":{\"52\":1}}],[\"继承了\",{\"1\":{\"618\":1}}],[\"继承抽象类的关键字为extends\",{\"1\":{\"592\":1}}],[\"继承是指一个类通过继承从另外一个类中获取其属性和方法\",{\"1\":{\"576\":1}}],[\"继承\",{\"0\":{\"576\":1},\"1\":{\"574\":1}}],[\"继续当前循环\",{\"1\":{\"570\":1}}],[\"继续执行当前程序\",{\"1\":{\"255\":1}}],[\"需在配置bean时指定销毁方法\",{\"1\":{\"764\":1}}],[\"需在配置bean时指定初始化方法\",{\"1\":{\"764\":1}}],[\"需使用\",{\"1\":{\"572\":1,\"582\":1}}],[\"需要实现beanpostprocessor接口\",{\"1\":{\"764\":1}}],[\"需要设置一个字符串类型的全类名\",{\"1\":{\"743\":2}}],[\"需要设置一个class类型的对象\",{\"1\":{\"743\":2}}],[\"需要更少的计算资源\",{\"1\":{\"678\":1}}],[\"需要更新\",{\"1\":{\"302\":1}}],[\"需要被代理的目标类必须实现接口\",{\"1\":{\"663\":1}}],[\"需要注意区分\",{\"1\":{\"650\":1}}],[\"需要注意\",{\"1\":{\"650\":1}}],[\"需要注意的是\",{\"1\":{\"38\":2,\"228\":1,\"757\":1,\"764\":1}}],[\"需要引入以下依赖\",{\"1\":{\"647\":1}}],[\"需要额外引入以下依赖\",{\"1\":{\"647\":1}}],[\"需要配合\",{\"1\":{\"646\":1,\"647\":1}}],[\"需要配置一个系统服务文件\",{\"1\":{\"372\":1}}],[\"需要相关的类库工具和jvm即可\",{\"1\":{\"614\":1}}],[\"需要加锁的代码\",{\"1\":{\"600\":1}}],[\"需要使用\",{\"1\":{\"584\":1}}],[\"需要使用declare声明\",{\"1\":{\"246\":1}}],[\"需要让类实现\",{\"1\":{\"581\":1}}],[\"需要进行程序的调试\",{\"1\":{\"614\":1}}],[\"需要进行修改\",{\"1\":{\"549\":1}}],[\"需要进行连接的释放\",{\"1\":{\"19\":1}}],[\"需要此项目有加入到版本控制才可用\",{\"1\":{\"549\":2}}],[\"需要手动清除\",{\"1\":{\"527\":1}}],[\"需要手动反序列化对象\",{\"1\":{\"357\":1}}],[\"需要备份\",{\"1\":{\"518\":1}}],[\"需要先提供构造器\",{\"1\":{\"755\":1}}],[\"需要先创建对应属性的\",{\"1\":{\"754\":1}}],[\"需要先构建拥有该方法的对象\",{\"1\":{\"585\":1}}],[\"需要先进行登录\",{\"1\":{\"532\":1}}],[\"需要先将容器先停止运行\",{\"1\":{\"526\":1}}],[\"需要先拉取\",{\"1\":{\"509\":1}}],[\"需要先对\",{\"1\":{\"290\":1}}],[\"需要重点学习\",{\"1\":{\"507\":1}}],[\"需要重启才能够生效\",{\"1\":{\"475\":1}}],[\"需要什么基础\",{\"0\":{\"506\":1}}],[\"需要消耗很大的cpu\",{\"1\":{\"471\":1}}],[\"需要消除无效的笛卡尔积\",{\"1\":{\"95\":1}}],[\"需要判断所执行的数据类型和编码方式\",{\"1\":{\"470\":1}}],[\"需要7次查找\",{\"1\":{\"452\":1}}],[\"需要增加记录上一个元素的\",{\"1\":{\"443\":1}}],[\"需要升级\",{\"1\":{\"434\":1}}],[\"需要申请新的内存空间\",{\"1\":{\"429\":1}}],[\"需要遍历fd\",{\"1\":{\"407\":1}}],[\"需要将整个fd\",{\"1\":{\"407\":1}}],[\"需要将所有的元素都进行对比\",{\"1\":{\"38\":1}}],[\"需要用户进程逐个遍历\",{\"1\":{\"406\":1}}],[\"需要保证redis服务是开启的\",{\"1\":{\"374\":1}}],[\"需要给redis\",{\"1\":{\"344\":1}}],[\"需要在\",{\"1\":{\"328\":1}}],[\"需要在集群间共享\",{\"1\":{\"282\":1}}],[\"需要修改\",{\"1\":{\"322\":1}}],[\"需要预留一部分缓冲空间\",{\"1\":{\"321\":1}}],[\"需要一种自动的故障恢复手段\",{\"1\":{\"320\":1}}],[\"需要认真学习\",{\"1\":{\"259\":1}}],[\"需要我们使用指令进行提交\",{\"1\":{\"258\":1}}],[\"需要我们建立一张中间表\",{\"1\":{\"94\":1}}],[\"需要通过实例化对象的引用来调用\",{\"1\":{\"572\":1,\"582\":1}}],[\"需要通过关键字delimiter指定sql语句的结束符\",{\"1\":{\"242\":1}}],[\"需要通过建立中间临时表对所需要的数据进行查询\",{\"1\":{\"215\":1}}],[\"需要优化的没有被统计\",{\"1\":{\"229\":1}}],[\"需要把数据一行一行地从引擎里面读出来\",{\"1\":{\"221\":1}}],[\"需要对此优化\",{\"1\":{\"218\":1}}],[\"需要严格谨慎检查自己的sql语句\",{\"1\":{\"183\":1,\"184\":1}}],[\"需要经过时间等待计时器设置的时间后\",{\"1\":{\"19\":1}}],[\"需要做出回应\",{\"1\":{\"19\":1}}],[\"动态class\",{\"1\":{\"727\":1}}],[\"动态\",{\"1\":{\"677\":1}}],[\"动态代理分为jdk动态代理和cglib动态代理\",{\"1\":{\"663\":1}}],[\"动态代理\",{\"0\":{\"658\":1},\"1\":{\"658\":4,\"663\":1}}],[\"动态创建对象\",{\"1\":{\"581\":1}}],[\"动态字符串sds\",{\"0\":{\"426\":1}}],[\"动物可以看做一个类\",{\"1\":{\"571\":1}}],[\"^1\",{\"1\":{\"683\":1}}],[\"^=\",{\"1\":{\"563\":1}}],[\"^\",{\"1\":{\"563\":1}}],[\"算术运算符\",{\"1\":{\"563\":1}}],[\"算法得到一个\",{\"1\":{\"345\":1}}],[\"算法复杂度问题\",{\"0\":{\"21\":1}}],[\"拆箱\",{\"1\":{\"562\":2}}],[\"蛇形命名法\",{\"1\":{\"561\":1}}],[\"命名空间\",{\"1\":{\"761\":1}}],[\"命名要求\",{\"1\":{\"561\":1}}],[\"命名规范\",{\"0\":{\"561\":1}}],[\"命令将自己的镜像推送到\",{\"1\":{\"533\":1}}],[\"命令为镜像添加一个新的标签\",{\"1\":{\"517\":1}}],[\"命令转换为\",{\"1\":{\"480\":1}}],[\"命令来启动并运行整个应用程序\",{\"1\":{\"478\":1}}],[\"命令来在容器内运行一个应用程序\",{\"1\":{\"476\":1}}],[\"命令行配置\",{\"1\":{\"475\":1}}],[\"命令行客户端\",{\"0\":{\"374\":1},\"1\":{\"373\":1}}],[\"命令处理\",{\"0\":{\"470\":1}}],[\"命令处理部分\",{\"1\":{\"460\":1}}],[\"命令或者\",{\"1\":{\"439\":1}}],[\"命令对所有\",{\"1\":{\"401\":1}}],[\"命令入队事务时返回的queue\",{\"1\":{\"471\":1}}],[\"命令入队\",{\"1\":{\"401\":1}}],[\"命令后进入事务执行\",{\"1\":{\"401\":1}}],[\"命令前被放入队列缓存\",{\"1\":{\"401\":1}}],[\"命令创建\",{\"1\":{\"387\":1}}],[\"命令的执行是原子性的\",{\"1\":{\"401\":1}}],[\"命令的基本语法如下\",{\"1\":{\"385\":1}}],[\"命令的这个\",{\"1\":{\"347\":1}}],[\"命令发送给频道\",{\"1\":{\"383\":1}}],[\"命令可以手动让集群中的某个\",{\"1\":{\"347\":1}}],[\"命令可以查看服务器状态信息\",{\"1\":{\"228\":1}}],[\"命令说明\",{\"1\":{\"343\":1}}],[\"命令\",{\"1\":{\"299\":1,\"307\":1,\"322\":1,\"327\":1,\"329\":2,\"330\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"398\":1,\"399\":1,\"400\":1,\"439\":1}}],[\"命令获取mysql如何执行select语句的信息\",{\"1\":{\"231\":1}}],[\"智能代码提示\",{\"1\":{\"553\":1}}],[\"智能步入\",{\"1\":{\"551\":1}}],[\"折叠所有代码\",{\"1\":{\"553\":1}}],[\"折叠代码\",{\"1\":{\"549\":1}}],[\"展开所有代码\",{\"1\":{\"553\":1}}],[\"展开代码\",{\"1\":{\"549\":1}}],[\"递进式取消选择代码块\",{\"1\":{\"553\":1}}],[\"递进式选择代码块\",{\"1\":{\"549\":1}}],[\"滚轮前后滚动\",{\"1\":{\"551\":1}}],[\"窗口打开\",{\"1\":{\"551\":1}}],[\"窗口中有\",{\"1\":{\"550\":2}}],[\"释光标所在行代码\",{\"1\":{\"549\":1}}],[\"释放资源\",{\"1\":{\"742\":1}}],[\"释放数据库连接\",{\"1\":{\"734\":1}}],[\"释放原来的dict\",{\"1\":{\"440\":2}}],[\"释放原哈希表的内存空间\",{\"1\":{\"439\":1}}],[\"释放连接\",{\"1\":{\"424\":1}}],[\"释放redis连接api\",{\"1\":{\"309\":1}}],[\"释放锁\",{\"1\":{\"145\":1,\"274\":1}}],[\"接口是\",{\"1\":{\"706\":1}}],[\"接口位于\",{\"1\":{\"705\":1}}],[\"接口进行描述\",{\"1\":{\"661\":1}}],[\"接口内的\",{\"1\":{\"623\":1}}],[\"接口基于数组的一个实现类\",{\"1\":{\"618\":1}}],[\"接口里不能包含初始化块\",{\"1\":{\"592\":1}}],[\"接口里没有构造器\",{\"1\":{\"592\":1}}],[\"接口只能定义静态常量\",{\"1\":{\"592\":1}}],[\"接口只有定义\",{\"1\":{\"592\":1}}],[\"接口强调特定功能的实现\",{\"1\":{\"592\":1}}],[\"接口名\",{\"1\":{\"590\":1}}],[\"接口静态方法只能通过接口调用\",{\"1\":{\"590\":1}}],[\"接口的类\",{\"1\":{\"600\":1}}],[\"接口的新特性\",{\"1\":{\"590\":1}}],[\"接口的实现类\",{\"1\":{\"590\":1,\"619\":1}}],[\"接口可以同时继承多个接口\",{\"1\":{\"590\":1}}],[\"接口中的变量会被隐式的指定为\",{\"1\":{\"590\":1}}],[\"接口中的方法会被隐式的指定为\",{\"1\":{\"590\":1}}],[\"接口没有构造方法\",{\"1\":{\"590\":1}}],[\"接口使用\",{\"1\":{\"589\":1,\"590\":1}}],[\"接口和抽象类都可以有抽象方法\",{\"1\":{\"592\":1}}],[\"接口和抽象类都不能被实例化\",{\"1\":{\"592\":1}}],[\"接口和抽象类的区别\",{\"0\":{\"592\":1}}],[\"接口和抽象类\",{\"0\":{\"589\":1}}],[\"接口\",{\"0\":{\"590\":1,\"714\":1,\"718\":1},\"1\":{\"581\":2,\"589\":1,\"618\":1,\"664\":1}}],[\"接口定义\",{\"1\":{\"549\":1}}],[\"接收目标方法的异常\",{\"1\":{\"669\":1}}],[\"接收目标方法的返回值\",{\"1\":{\"669\":1}}],[\"接收\",{\"1\":{\"464\":1}}],[\"接收多个元素\",{\"1\":{\"424\":1}}],[\"接收消息\",{\"1\":{\"383\":1}}],[\"接收插槽的\",{\"1\":{\"346\":1}}],[\"剪切选择内容\",{\"1\":{\"549\":1}}],[\"剪切光标所在行\",{\"1\":{\"549\":1}}],[\"希望能够帮到你\",{\"1\":{\"543\":1}}],[\"希望读者们不吝赐教\",{\"1\":{\"3\":1}}],[\"众所周知\",{\"1\":{\"543\":1}}],[\"补充\",{\"1\":{\"537\":1}}],[\"推送镜像\",{\"0\":{\"533\":1}}],[\"推荐大家使用\",{\"1\":{\"524\":1}}],[\"推荐使用\",{\"1\":{\"487\":1}}],[\"推荐这种方式\",{\"1\":{\"342\":1}}],[\"登录\",{\"1\":{\"532\":1}}],[\"登录和退出\",{\"0\":{\"532\":1}}],[\"登录仓库\",{\"1\":{\"530\":1}}],[\"管理\",{\"1\":{\"642\":1,\"751\":1}}],[\"管理的是\",{\"1\":{\"530\":1}}],[\"管理的是代码\",{\"1\":{\"530\":1}}],[\"管道组合命令\",{\"1\":{\"297\":1,\"333\":1}}],[\"强制子类提供这些方法的实现\",{\"1\":{\"591\":1}}],[\"强制的意思\",{\"1\":{\"526\":1}}],[\"强制删除容器\",{\"0\":{\"526\":1}}],[\"强制索引\",{\"1\":{\"132\":1}}],[\"刚才\",{\"1\":{\"522\":1}}],[\"刚好\",{\"1\":{\"417\":1}}],[\"各取值含义参加下表\",{\"1\":{\"763\":1}}],[\"各个隔离级别解决并发问题的能力见下表\",{\"1\":{\"744\":1}}],[\"各个参数说明\",{\"1\":{\"515\":1}}],[\"各种数据库产品对事务隔离级别的支持程度\",{\"1\":{\"744\":1}}],[\"各种通知的执行顺序\",{\"1\":{\"666\":1}}],[\"各种通知\",{\"0\":{\"666\":1}}],[\"各种命令的返回值\",{\"1\":{\"471\":1}}],[\"各种环境的安装方式\",{\"1\":{\"368\":1}}],[\"导入\",{\"1\":{\"752\":1,\"754\":1,\"755\":1}}],[\"导入外部属性文件\",{\"1\":{\"730\":1}}],[\"导入数据信息\",{\"1\":{\"631\":1}}],[\"导入项目\",{\"1\":{\"630\":1}}],[\"导入的镜像名称\",{\"1\":{\"525\":1}}],[\"导出文件名\",{\"1\":{\"525\":1}}],[\"导出为一个\",{\"1\":{\"515\":1}}],[\"导致整个checkout\",{\"1\":{\"745\":1}}],[\"导致程序卡住\",{\"1\":{\"742\":1}}],[\"导致程序员在开发核心业务功能时分散了精力\",{\"1\":{\"655\":1}}],[\"导致空指针异常\",{\"1\":{\"650\":1}}],[\"导致链表过长\",{\"1\":{\"446\":1}}],[\"导致哈希表的\",{\"1\":{\"440\":1}}],[\"导致的过多磁盘\",{\"1\":{\"303\":1}}],[\"导致数据被覆盖\",{\"1\":{\"303\":1}}],[\"导致请求数据库的总量比较大\",{\"1\":{\"274\":1}}],[\"导致瞬间大量请求到达数据库\",{\"1\":{\"273\":1}}],[\"导致性能降低\",{\"1\":{\"124\":1}}],[\"导致正常的连接请求无法响应或者缓慢响应\",{\"1\":{\"17\":1}}],[\"喜欢的意思\",{\"1\":{\"512\":1}}],[\"互不影响\",{\"1\":{\"509\":1,\"579\":1}}],[\"互斥锁\",{\"1\":{\"274\":2}}],[\"互斥\",{\"1\":{\"147\":1}}],[\"至少认识一些常见的命令\",{\"1\":{\"506\":1}}],[\"灵活且高效的方式来开发\",{\"1\":{\"504\":1}}],[\"策略非常有用\",{\"1\":{\"504\":1}}],[\"轻量级开源框架\",{\"1\":{\"725\":1}}],[\"轻量级\",{\"1\":{\"504\":1}}],[\"跨平台性\",{\"1\":{\"504\":1}}],[\"跨度越大\",{\"1\":{\"455\":1}}],[\"机器上\",{\"1\":{\"503\":1}}],[\"机制来实现主从集群的自动故障恢复\",{\"1\":{\"326\":1}}],[\"桌面管理程序的下载地址\",{\"1\":{\"499\":1}}],[\"桌面版和\",{\"1\":{\"479\":2}}],[\"博主目前只有一台\",{\"1\":{\"499\":1}}],[\"博主在学习redis数据库时参考的了黑马程序员出品的\",{\"1\":{\"268\":1}}],[\"博主在学习mysql数据库时参考的了黑马程序员出品的\",{\"1\":{\"173\":1}}],[\"博主在使用redis数据库时\",{\"1\":{\"268\":1}}],[\"博客园上这篇安装教程写的比较详细\",{\"1\":{\"499\":1}}],[\"芯片\",{\"1\":{\"498\":1,\"535\":1}}],[\"拉取镜像即从\",{\"1\":{\"513\":1}}],[\"拉取镜像\",{\"0\":{\"513\":1},\"1\":{\"535\":1}}],[\"拉取\",{\"1\":{\"495\":1,\"496\":1}}],[\"拉链法\",{\"1\":{\"123\":1}}],[\"学习笔记\",{\"0\":{\"542\":1,\"544\":1,\"558\":1}}],[\"学习docker之前\",{\"0\":{\"506\":1}}],[\"学习完成后可回头做此学习案例\",{\"1\":{\"494\":1}}],[\"学习目录\",{\"0\":{\"172\":1}}],[\"务必确保你已经成功安装\",{\"1\":{\"494\":1}}],[\"遵循从上到下原则\",{\"1\":{\"492\":1}}],[\"暴露应用程序的端口\",{\"1\":{\"490\":1}}],[\"示例说明\",{\"0\":{\"490\":1}}],[\"卷用于数据持久化和服务间共享数据\",{\"1\":{\"483\":1}}],[\"卷用于数据持久化和共享数据\",{\"1\":{\"482\":1}}],[\"卷挂载和数据持久化\",{\"1\":{\"483\":1}}],[\"卷\",{\"1\":{\"482\":1}}],[\"卷和镜像\",{\"1\":{\"481\":1}}],[\"您可以为不同的环境\",{\"1\":{\"483\":1}}],[\"您可以在多个项目中重用配置\",{\"1\":{\"483\":1}}],[\"您可以在\",{\"1\":{\"483\":1}}],[\"您可以定义卷并将其挂载到服务所需的位置\",{\"1\":{\"483\":1}}],[\"您可以定义一个卷\",{\"1\":{\"482\":1}}],[\"您可以定义一个或多个服务\",{\"1\":{\"482\":1}}],[\"您可以创建一个只供数据库和后端服务使用的内部网络\",{\"1\":{\"483\":1}}],[\"您可以自定义网络来实现服务间的隔离或通信\",{\"1\":{\"483\":1}}],[\"您就可以使用由一组容器组成的应用程序\",{\"1\":{\"474\":1}}],[\"构建\",{\"1\":{\"752\":1}}],[\"构建或重建服务\",{\"1\":{\"481\":1}}],[\"构造器注入\",{\"0\":{\"755\":1}}],[\"构造方法参数上\",{\"1\":{\"647\":1}}],[\"构造方法的参数上\",{\"1\":{\"646\":1}}],[\"构造方法注入\",{\"1\":{\"646\":1,\"694\":1,\"753\":1}}],[\"构造方法上\",{\"1\":{\"646\":2,\"647\":1}}],[\"构造方法也支持重载\",{\"1\":{\"588\":1}}],[\"构造方法在对象创建时执行\",{\"1\":{\"588\":1}}],[\"构造方法是一种特殊的方法\",{\"1\":{\"588\":1}}],[\"构造方法是指\",{\"1\":{\"584\":1}}],[\"构造方法可以重载\",{\"1\":{\"586\":1}}],[\"构造方法\",{\"0\":{\"588\":1,\"622\":1},\"1\":{\"584\":1,\"591\":1}}],[\"构造函数\",{\"1\":{\"550\":1}}],[\"构造表达式\",{\"1\":{\"290\":1}}],[\"构造一个空的线性表\",{\"1\":{\"37\":1}}],[\"映射到了该\",{\"1\":{\"536\":1}}],[\"映射到宿主机的\",{\"1\":{\"480\":1}}],[\"映射到对应的槽位上\",{\"1\":{\"123\":1}}],[\"端口上\",{\"1\":{\"535\":1}}],[\"端口绑定到容器内部的\",{\"1\":{\"535\":1}}],[\"端口映射到什么位置\",{\"1\":{\"538\":1}}],[\"端口映射既可以是本地端口映射\",{\"1\":{\"537\":1}}],[\"端口映射\",{\"1\":{\"482\":2}}],[\"端口\",{\"1\":{\"480\":2,\"536\":3,\"537\":2,\"634\":1}}],[\"端口为\",{\"1\":{\"346\":1}}],[\"组成单元\",{\"1\":{\"782\":1}}],[\"组成和功能\",{\"0\":{\"779\":1}}],[\"组件化\",{\"1\":{\"726\":1}}],[\"组件享受到了容器化的管理\",{\"1\":{\"726\":1}}],[\"组合来运行一个容器\",{\"1\":{\"476\":1}}],[\"组名\",{\"1\":{\"395\":1}}],[\"样例剖析\",{\"0\":{\"476\":1}}],[\"七牛云\",{\"1\":{\"475\":1}}],[\"阿里云\",{\"1\":{\"475\":1}}],[\"镜像名\",{\"1\":{\"530\":1}}],[\"镜像名称\",{\"1\":{\"520\":1,\"528\":1}}],[\"镜像导入\",{\"1\":{\"518\":1}}],[\"镜像导入和导出\",{\"0\":{\"518\":1}}],[\"镜像导出\",{\"1\":{\"518\":1}}],[\"镜像标签\",{\"0\":{\"517\":1}}],[\"镜像仓库源的名称\",{\"1\":{\"512\":1}}],[\"镜像为例做演示说明\",{\"1\":{\"512\":1}}],[\"镜像大小\",{\"1\":{\"511\":1}}],[\"镜像id\",{\"1\":{\"511\":1}}],[\"镜像列表\",{\"0\":{\"511\":1}}],[\"镜像不在本地仓库中\",{\"1\":{\"510\":1}}],[\"镜像实例化一个\",{\"1\":{\"509\":1}}],[\"镜像创建时间\",{\"1\":{\"511\":1}}],[\"镜像创建对象之前\",{\"1\":{\"509\":1}}],[\"镜像创建一个新容器\",{\"1\":{\"476\":1}}],[\"镜像可以看做是一个静态模板\",{\"1\":{\"509\":1}}],[\"镜像可以包含操作系统\",{\"1\":{\"508\":1}}],[\"镜像的\",{\"1\":{\"531\":1}}],[\"镜像的更新就是在目前运行的\",{\"1\":{\"515\":1}}],[\"镜像的描述\",{\"1\":{\"512\":1}}],[\"镜像的各种版本信息\",{\"1\":{\"512\":1}}],[\"镜像的标签\",{\"1\":{\"511\":1}}],[\"镜像的相关操作中\",{\"1\":{\"519\":1}}],[\"镜像的相关操作\",{\"1\":{\"510\":1}}],[\"镜像的地方\",{\"1\":{\"508\":1,\"509\":1,\"530\":1}}],[\"镜像的一个运行实例\",{\"1\":{\"508\":1}}],[\"镜像的文本文件\",{\"1\":{\"489\":1}}],[\"镜像是一个只读的模板\",{\"1\":{\"508\":1}}],[\"镜像源默认是在海外\",{\"1\":{\"494\":1}}],[\"镜像结构\",{\"0\":{\"491\":1}}],[\"镜像存储在国外的\",{\"1\":{\"475\":1}}],[\"镜像\",{\"0\":{\"507\":1,\"509\":1},\"1\":{\"475\":1,\"480\":2,\"489\":1,\"494\":1,\"495\":1,\"496\":1,\"508\":2,\"509\":3,\"513\":1,\"514\":2,\"515\":2,\"525\":1,\"530\":1}}],[\"侦听\",{\"1\":{\"474\":1}}],[\"守护程序\",{\"1\":{\"474\":1}}],[\"守护进程也可以\",{\"1\":{\"474\":1}}],[\"守护进程\",{\"1\":{\"371\":1,\"474\":2}}],[\"复制参考信息\",{\"1\":{\"555\":1}}],[\"复制当前文件磁盘路径到剪贴板\",{\"1\":{\"553\":1}}],[\"复制当前目录下的所有文件到工作目录\",{\"1\":{\"490\":1}}],[\"复制选择内容\",{\"1\":{\"549\":2}}],[\"复制光标所在行\",{\"1\":{\"549\":2}}],[\"复制文件或目录到容器中\",{\"1\":{\"493\":1}}],[\"复制文件等\",{\"1\":{\"489\":1}}],[\"复杂度较高\",{\"1\":{\"471\":1}}],[\"复用性\",{\"1\":{\"575\":1}}],[\"复用性强\",{\"1\":{\"575\":1}}],[\"复用\",{\"1\":{\"241\":1}}],[\"种特殊类型\",{\"1\":{\"469\":1}}],[\"种基本类型\",{\"1\":{\"469\":1}}],[\"种不同类型\",{\"1\":{\"468\":1}}],[\"种编码方式\",{\"1\":{\"467\":1}}],[\"种淘汰策略\",{\"1\":{\"278\":1,\"458\":1}}],[\"拥有这两个信息时\",{\"1\":{\"466\":1}}],[\"容器了\",{\"1\":{\"696\":1}}],[\"容器对象\",{\"1\":{\"695\":3}}],[\"容器就是\",{\"1\":{\"695\":1}}],[\"容器中放的是\",{\"1\":{\"693\":1}}],[\"容器中的端口直接映射到某个指定的网络\",{\"1\":{\"537\":1}}],[\"容器中的\",{\"1\":{\"534\":1,\"536\":1}}],[\"容器会自动创建好\",{\"1\":{\"693\":1}}],[\"容器会停止运行\",{\"1\":{\"524\":1}}],[\"容器管理的\",{\"1\":{\"691\":1}}],[\"容器来管理所有\",{\"1\":{\"691\":1}}],[\"容器名称重启\",{\"1\":{\"540\":1}}],[\"容器名称停止\",{\"1\":{\"539\":1}}],[\"容器错误日志\",{\"0\":{\"529\":1}}],[\"容器别名及操作\",{\"0\":{\"528\":1}}],[\"容器进行导出\",{\"1\":{\"525\":1}}],[\"容器导出和导入\",{\"0\":{\"525\":1}}],[\"容器id\",{\"1\":{\"524\":2}}],[\"容器重启\",{\"1\":{\"523\":1}}],[\"容器停止\",{\"1\":{\"523\":1}}],[\"容器停止和重启\",{\"0\":{\"523\":1}}],[\"容器再启动\",{\"0\":{\"522\":1}}],[\"容器查看\",{\"0\":{\"521\":1}}],[\"容器启动后会进入后台\",{\"1\":{\"524\":1}}],[\"容器启动\",{\"0\":{\"520\":1}}],[\"容器内容有变化\",{\"1\":{\"518\":1}}],[\"容器时\",{\"1\":{\"517\":1}}],[\"容器上进行修改\",{\"1\":{\"515\":1}}],[\"容器包含了运行应用程序所需的所有组件\",{\"1\":{\"508\":1}}],[\"容器是对镜像的一个实例化\",{\"1\":{\"509\":1}}],[\"容器是\",{\"1\":{\"508\":1,\"691\":1}}],[\"容器是代码的隔离环境\",{\"1\":{\"508\":1}}],[\"容器是完全使用沙箱机制\",{\"1\":{\"503\":1}}],[\"容器可以在任何支持docker的环境中运行\",{\"1\":{\"504\":1}}],[\"容器化应用程序\",{\"1\":{\"504\":1}}],[\"容器建立了互联关系\",{\"1\":{\"487\":1}}],[\"容器和\",{\"1\":{\"487\":1}}],[\"容器和本地以及网络中的端口进行连接起来\",{\"1\":{\"484\":1}}],[\"容器命名\",{\"0\":{\"485\":1}}],[\"容器互联\",{\"0\":{\"484\":1}}],[\"容器的基本实现\",{\"1\":{\"695\":1}}],[\"容器的两种实现方式\",{\"1\":{\"695\":1}}],[\"容器的导入\",{\"1\":{\"525\":1}}],[\"容器的导出\",{\"1\":{\"525\":1}}],[\"容器的相关操作\",{\"1\":{\"519\":1}}],[\"容器的所有内容\",{\"1\":{\"515\":1}}],[\"容器的\",{\"1\":{\"514\":1,\"526\":1,\"538\":1}}],[\"容器的说明\",{\"1\":{\"508\":1}}],[\"容器的名称\",{\"1\":{\"485\":1}}],[\"容器的端口映射\",{\"1\":{\"484\":1}}],[\"容器的过程集中管理起来\",{\"1\":{\"480\":1}}],[\"容器的快速部署\",{\"1\":{\"478\":1}}],[\"容器\",{\"0\":{\"507\":1,\"508\":1,\"509\":1},\"1\":{\"474\":3,\"494\":1,\"508\":1,\"509\":2,\"514\":2,\"515\":2,\"525\":1,\"536\":1,\"539\":2,\"540\":1,\"693\":1,\"695\":1,\"726\":1,\"752\":1}}],[\"容量无上限\",{\"1\":{\"464\":1}}],[\"容易导致内核崩溃\",{\"1\":{\"414\":1}}],[\"派发给对应的处理器进行处理\",{\"1\":{\"462\":1}}],[\"核心部分由大量的网络和连接这些网络的路由器组成\",{\"1\":{\"786\":1}}],[\"核心特性\",{\"1\":{\"768\":1}}],[\"核心操作\",{\"1\":{\"734\":1}}],[\"核心概念\",{\"1\":{\"727\":1}}],[\"核心容器\",{\"1\":{\"727\":1}}],[\"核心就是\",{\"1\":{\"655\":1}}],[\"核心就是将\",{\"1\":{\"480\":1}}],[\"核心的目的\",{\"1\":{\"543\":1}}],[\"核心的命令执行\",{\"1\":{\"463\":1}}],[\"核心\",{\"1\":{\"462\":1}}],[\"核心后台线程\",{\"1\":{\"75\":1}}],[\"带来不必要的开销\",{\"1\":{\"460\":1}}],[\"带来巨大压力\",{\"1\":{\"273\":1}}],[\"距离上一次访问时间每隔\",{\"1\":{\"458\":1}}],[\"距离查询\",{\"1\":{\"398\":1}}],[\"淘汰策略\",{\"0\":{\"458\":1}}],[\"抽取20个key判断是否过期\",{\"1\":{\"457\":2}}],[\"抽象方法被abstract修饰\",{\"1\":{\"592\":1}}],[\"抽象类则可以包含初始化块\",{\"1\":{\"592\":1}}],[\"抽象类中成员变量默认default\",{\"1\":{\"592\":1}}],[\"抽象类中的抽象方法的修饰符只能为public或者protected\",{\"1\":{\"591\":1}}],[\"抽象类不能被实例化只能被继承\",{\"1\":{\"591\":1}}],[\"抽象类可以包含属性\",{\"1\":{\"591\":1}}],[\"抽象类可以包含抽象方法\",{\"1\":{\"591\":1}}],[\"抽象类可以用于规定子类应该实现的一组方法\",{\"1\":{\"591\":1}}],[\"抽象类使用\",{\"1\":{\"589\":1}}],[\"抽象类\",{\"0\":{\"591\":1},\"1\":{\"589\":1}}],[\"抽象数据组织及与之相关的操作\",{\"1\":{\"34\":1}}],[\"抽象数据类型\",{\"1\":{\"34\":1}}],[\"抽象为计算三维体积\",{\"1\":{\"30\":1}}],[\"清理停止的容器\",{\"0\":{\"527\":1}}],[\"清理\",{\"1\":{\"457\":1}}],[\"清空本地数据\",{\"1\":{\"302\":1}}],[\"周期性的抽样部分过期的\",{\"1\":{\"457\":1}}],[\"周期删除\",{\"1\":{\"456\":1,\"457\":1}}],[\"惰性删除\",{\"1\":{\"456\":1,\"457\":1}}],[\"答\",{\"1\":{\"456\":2}}],[\"答案是可以的\",{\"1\":{\"526\":1}}],[\"答案\",{\"1\":{\"128\":2,\"434\":1}}],[\"另一方面\",{\"1\":{\"636\":1}}],[\"另一个\",{\"1\":{\"474\":1}}],[\"另一个一般是空\",{\"1\":{\"438\":1}}],[\"另外也可以在后端环境搭建章节中的资料下载中下载\",{\"1\":{\"631\":1}}],[\"另外\",{\"1\":{\"537\":1,\"717\":1}}],[\"另外当你在学习本小节时\",{\"1\":{\"494\":1}}],[\"另外一个用来记录\",{\"1\":{\"456\":1}}],[\"层实现\",{\"1\":{\"646\":1}}],[\"层等\",{\"1\":{\"644\":1}}],[\"层\",{\"1\":{\"644\":3}}],[\"层次结构\",{\"0\":{\"595\":1}}],[\"层级越高\",{\"1\":{\"455\":1}}],[\"层级较深\",{\"1\":{\"118\":1,\"119\":1}}],[\"层数是\",{\"1\":{\"455\":1}}],[\"跳过\",{\"1\":{\"600\":1}}],[\"跳\",{\"1\":{\"589\":1}}],[\"跳转到下一个高亮错误\",{\"1\":{\"556\":1}}],[\"跳转到类型声明处\",{\"1\":{\"553\":1}}],[\"跳转到上一个高亮错误\",{\"1\":{\"551\":1}}],[\"跳到下个查找的文件\",{\"1\":{\"552\":1}}],[\"跳到上个查找的文件\",{\"1\":{\"552\":1}}],[\"跳到文件头\",{\"1\":{\"549\":1}}],[\"跳到文件尾\",{\"1\":{\"549\":1}}],[\"跳出\",{\"1\":{\"551\":1}}],[\"跳跃表是一个双向链表\",{\"1\":{\"455\":1}}],[\"跳表\",{\"1\":{\"453\":1,\"468\":1}}],[\"跳表skiplist\",{\"0\":{\"452\":1}}],[\"级联属性赋值\",{\"1\":{\"758\":2}}],[\"级指针\",{\"1\":{\"453\":1}}],[\"级别开启profiling\",{\"1\":{\"230\":1}}],[\"过于精炼又不能达到我快速掌握\",{\"1\":{\"543\":1}}],[\"过于繁琐学起来费时费力\",{\"1\":{\"543\":1}}],[\"过期key比例小于10\",{\"1\":{\"457\":1}}],[\"过多\",{\"1\":{\"450\":1}}],[\"过程是阻塞的\",{\"1\":{\"321\":1}}],[\"过程\",{\"1\":{\"233\":1}}],[\"申请内存的效率很低\",{\"1\":{\"446\":1}}],[\"申请内存时只需要调用一次内存分配函数\",{\"1\":{\"417\":1}}],[\"连按两次shift\",{\"1\":{\"556\":1}}],[\"连续按会在原有选中的基础上再扩展取消选中范围\",{\"1\":{\"553\":1}}],[\"连续按会在原有选中的基础上再扩展选中范围\",{\"1\":{\"549\":1}}],[\"连锁更新\",{\"1\":{\"445\":1}}],[\"连锁更新问题\",{\"0\":{\"445\":1}}],[\"连接点\",{\"1\":{\"661\":1,\"665\":1}}],[\"连接容器\",{\"0\":{\"487\":1}}],[\"连接到另一个容器的方法\",{\"1\":{\"484\":1}}],[\"连接处理器\",{\"1\":{\"464\":1}}],[\"连接等待时间\",{\"1\":{\"362\":1}}],[\"连接池依赖\",{\"1\":{\"362\":1}}],[\"连接池大小\",{\"1\":{\"309\":1}}],[\"连接redis失败\",{\"1\":{\"309\":1}}],[\"连接的空闲时间\",{\"1\":{\"309\":1}}],[\"连接\",{\"1\":{\"299\":3,\"344\":1,\"464\":1}}],[\"连接层处于mysql体系结构中的最上层\",{\"1\":{\"233\":1}}],[\"连接层\",{\"1\":{\"233\":1}}],[\"连接条件\",{\"1\":{\"96\":1,\"97\":2}}],[\"连接释放报文段也要占用一个序号\",{\"1\":{\"19\":1}}],[\"连接释放报文段也要消耗一个序号\",{\"1\":{\"19\":1}}],[\"连接过程更加复杂\",{\"1\":{\"18\":1}}],[\"连接关闭\",{\"1\":{\"17\":1}}],[\"理论峰值性能不如jit\",{\"1\":{\"677\":1}}],[\"理论上就可以创建\",{\"1\":{\"752\":1}}],[\"理论上无上限\",{\"1\":{\"412\":1}}],[\"理论上是无限的\",{\"1\":{\"408\":1}}],[\"理论上讲dml数据操作语言\",{\"1\":{\"181\":1}}],[\"理解docker\",{\"1\":{\"482\":1}}],[\"理解了\",{\"1\":{\"443\":1}}],[\"势必会造成\",{\"1\":{\"440\":1}}],[\"渐进式完成的\",{\"1\":{\"440\":1}}],[\"渐进式的完成\",{\"1\":{\"440\":1}}],[\"极大的降低了使用门槛\",{\"1\":{\"726\":1}}],[\"极有可能导致主线程阻塞\",{\"1\":{\"440\":1}}],[\"极端情况\",{\"1\":{\"321\":1}}],[\"变化\",{\"1\":{\"440\":1}}],[\"变量的接口或是定义处\",{\"1\":{\"549\":1}}],[\"变量类型就是数据库字段类型\",{\"1\":{\"246\":1}}],[\"变量类型\",{\"1\":{\"246\":1}}],[\"变量名\",{\"1\":{\"245\":1,\"246\":4}}],[\"变量\",{\"0\":{\"243\":1,\"290\":1},\"1\":{\"254\":2,\"550\":1,\"590\":1}}],[\"负载均衡\",{\"0\":{\"793\":1}}],[\"负载\",{\"1\":{\"684\":1}}],[\"负载因子\",{\"1\":{\"439\":2}}],[\"负责把他们组装起来\",{\"1\":{\"753\":1}}],[\"负责构建\",{\"1\":{\"474\":1}}],[\"负责将写缓冲区内容刷新到磁盘\",{\"1\":{\"75\":1}}],[\"负责将日志缓冲区刷新到磁盘\",{\"1\":{\"75\":1}}],[\"负责写操作\",{\"1\":{\"75\":1}}],[\"负责读操作\",{\"1\":{\"75\":1}}],[\"必\",{\"1\":{\"549\":1}}],[\"必备\",{\"1\":{\"549\":24,\"550\":9,\"551\":5,\"552\":7,\"553\":25,\"554\":4,\"555\":2,\"556\":6}}],[\"必然要引入线程锁这样的安全手段\",{\"1\":{\"460\":1}}],[\"必然导致哈希冲突增多\",{\"1\":{\"439\":1}}],[\"必定会创建新的哈希表\",{\"1\":{\"440\":1}}],[\"必须引入aspectj的依赖\",{\"1\":{\"749\":1}}],[\"必须运行在一个事务中\",{\"1\":{\"745\":1}}],[\"必须遵循以上的命名规则\",{\"1\":{\"687\":1}}],[\"必须配置环境变量才能使用\",{\"1\":{\"604\":1}}],[\"必须以分号结尾\",{\"1\":{\"592\":1}}],[\"必须先实例化外部类\",{\"1\":{\"580\":1}}],[\"必须删除所有使用该镜像的容器\",{\"1\":{\"514\":1}}],[\"必须部署在\",{\"1\":{\"499\":1}}],[\"必须让每个键都带有类型信息\",{\"1\":{\"466\":1}}],[\"必须为不同类型的键设置不同的处理方式\",{\"1\":{\"466\":1}}],[\"必须唯一\",{\"1\":{\"421\":1}}],[\"必须通过内核提供的接口访问\",{\"1\":{\"403\":1}}],[\"必须想\",{\"1\":{\"302\":1}}],[\"必须准备三份不同的配置文件和目录\",{\"1\":{\"297\":1,\"333\":1}}],[\"必须使用\",{\"1\":{\"590\":1}}],[\"必须使得所有的数据都保持一致状态\",{\"1\":{\"259\":1}}],[\"必须使所有的数据都保持一致性\",{\"1\":{\"76\":1}}],[\"必须用在循环中\",{\"1\":{\"253\":2}}],[\"必须有\",{\"1\":{\"126\":1}}],[\"扩容操作会创建一个新的数组\",{\"1\":{\"627\":1}}],[\"扩容过程为\",{\"1\":{\"627\":1}}],[\"扩容大小为第一个大于等于used\",{\"1\":{\"441\":1}}],[\"扩容\",{\"1\":{\"439\":1}}],[\"扩容收缩的具体步骤如下\",{\"1\":{\"439\":1}}],[\"扩容收缩\",{\"0\":{\"439\":1}}],[\"扩展包\",{\"1\":{\"647\":1}}],[\"扩展包中的\",{\"1\":{\"647\":1}}],[\"扩展和复用配置\",{\"1\":{\"483\":1}}],[\"扩展性\",{\"1\":{\"366\":1}}],[\"扩展性极高的动态\",{\"1\":{\"306\":1}}],[\"扩展模块提供了\",{\"1\":{\"283\":1}}],[\"决定是插入队首\",{\"1\":{\"434\":1}}],[\"决定循环的终止条件\",{\"1\":{\"291\":1}}],[\"倒序遍历\",{\"1\":{\"434\":1}}],[\"倒序是为了防止正序拷贝时的数据覆盖\",{\"1\":{\"434\":1}}],[\"倒序依次将数组中的元素拷贝到扩容后的正确位置\",{\"1\":{\"434\":1}}],[\"依此循环进入\",{\"1\":{\"554\":1}}],[\"依次类推\",{\"1\":{\"450\":1}}],[\"依次查找并执行\",{\"1\":{\"440\":1}}],[\"依次读取每个元素\",{\"1\":{\"424\":1}}],[\"依赖项\",{\"1\":{\"679\":1}}],[\"依赖注入主要有三种方式\",{\"1\":{\"753\":1}}],[\"依赖注入你只需要告诉他\",{\"1\":{\"753\":1}}],[\"依赖注入di\",{\"1\":{\"753\":1}}],[\"依赖注入di注解\",{\"1\":{\"650\":1}}],[\"依赖注入常见的实现方式包括两种\",{\"1\":{\"694\":1}}],[\"依赖注入实现了控制反转的思想\",{\"1\":{\"694\":1}}],[\"依赖注入\",{\"0\":{\"694\":1,\"753\":1},\"1\":{\"641\":1,\"649\":1,\"650\":1,\"693\":1,\"694\":2,\"764\":1}}],[\"依赖即可\",{\"1\":{\"630\":1}}],[\"依赖库等\",{\"1\":{\"508\":1}}],[\"依赖库\",{\"1\":{\"508\":1}}],[\"依赖关系的管理\",{\"1\":{\"753\":1}}],[\"依赖关系\",{\"1\":{\"482\":2,\"753\":1}}],[\"依赖\",{\"1\":{\"348\":1,\"355\":1}}],[\"遍历处理就绪的\",{\"1\":{\"464\":1}}],[\"遍历\",{\"1\":{\"424\":1}}],[\"首字节是\",{\"1\":{\"423\":5}}],[\"首先需要创建ioc\",{\"1\":{\"695\":1}}],[\"首先需要在\",{\"1\":{\"643\":1,\"762\":1}}],[\"首先会检查当前数组的容量是否足够存放新元素\",{\"1\":{\"627\":1}}],[\"首先会判断\",{\"1\":{\"328\":1}}],[\"首先执行\",{\"1\":{\"600\":1}}],[\"首先从本地主机上查找镜像是否存在\",{\"1\":{\"476\":1}}],[\"首先从设置了过期时间的键集合中驱逐最久没有使用的键\",{\"1\":{\"278\":1,\"458\":1}}],[\"首先是链表\",{\"1\":{\"453\":1}}],[\"首先是该实例与其他实例失去连接\",{\"1\":{\"347\":1}}],[\"首先根据\",{\"1\":{\"438\":1}}],[\"首先选定一个\",{\"1\":{\"330\":1}}],[\"首先要安装openresty的依赖开发库\",{\"1\":{\"307\":1}}],[\"首先你的linux虚拟机必须联网\",{\"1\":{\"307\":1}}],[\"首先通过lru算法驱逐最久没有使用的键\",{\"1\":{\"278\":1,\"458\":1}}],[\"首先检查该记录是否有对应外键\",{\"1\":{\"52\":4}}],[\"升级到了\",{\"1\":{\"423\":1}}],[\"升序\",{\"1\":{\"193\":1}}],[\"协议规定了网络传输数据时所遵循的规范\",{\"1\":{\"785\":1}}],[\"协议是计算机网络的核心\",{\"1\":{\"785\":1}}],[\"协议三大部分组成\",{\"1\":{\"785\":1}}],[\"协议开源\",{\"1\":{\"503\":1}}],[\"协议\",{\"1\":{\"423\":5}}],[\"协助\",{\"1\":{\"75\":1}}],[\"超出了\",{\"1\":{\"446\":1}}],[\"超出编码\",{\"1\":{\"434\":1}}],[\"超过则采用\",{\"1\":{\"418\":1}}],[\"超时回滚\",{\"1\":{\"742\":1}}],[\"超时\",{\"0\":{\"742\":1}}],[\"超时时间单位秒\",{\"1\":{\"742\":1}}],[\"超时时间\",{\"1\":{\"407\":1,\"408\":1,\"409\":1}}],[\"超时剔除\",{\"1\":{\"276\":1}}],[\"尾操作列表中的元素\",{\"1\":{\"418\":1}}],[\"尾插法建立单链表\",{\"1\":{\"39\":1}}],[\"了非核心逻辑代码的类\",{\"1\":{\"656\":1}}],[\"了\",{\"1\":{\"417\":1}}],[\"范围为整个项目\",{\"1\":{\"553\":1}}],[\"范围从\",{\"1\":{\"444\":1}}],[\"范围内\",{\"1\":{\"417\":1}}],[\"范围查询右侧的列索引失效\",{\"1\":{\"131\":1}}],[\"范围查询\",{\"1\":{\"131\":1,\"398\":1}}],[\"事件驱动的服务\",{\"1\":{\"727\":1}}],[\"事件派发\",{\"1\":{\"462\":1}}],[\"事件通知机制\",{\"0\":{\"410\":1}}],[\"事务结束\",{\"1\":{\"742\":1,\"745\":1}}],[\"事务在执行过程中\",{\"1\":{\"742\":1}}],[\"事务在执行过程中发生错误\",{\"1\":{\"733\":1}}],[\"事务属性\",{\"0\":{\"741\":1,\"742\":1,\"743\":1,\"744\":1,\"745\":1}}],[\"事务功能的相关操作全部通过自己编写代码来实现\",{\"1\":{\"734\":1}}],[\"事务不会查看到中间状态的数据\",{\"1\":{\"733\":1}}],[\"事务不会回滚\",{\"1\":{\"401\":1}}],[\"事务查看数据更新时\",{\"1\":{\"733\":1}}],[\"事务由事务开始与事务结束之间执行的全部数据库操作组成\",{\"1\":{\"733\":1}}],[\"事务基本概念\",{\"0\":{\"733\":1}}],[\"事务概念\",{\"0\":{\"732\":1}}],[\"事务处理\",{\"1\":{\"661\":1}}],[\"事务可以理解为一个打包的批量执行脚本\",{\"1\":{\"401\":1}}],[\"事务可以一次执行多个命令\",{\"1\":{\"401\":1}}],[\"事务中任意命令执行失败\",{\"1\":{\"401\":1}}],[\"事务并发问题\",{\"0\":{\"260\":1}}],[\"事务一旦提交或者回滚\",{\"1\":{\"259\":1}}],[\"事务一旦提交或回滚\",{\"1\":{\"76\":1}}],[\"事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态\",{\"1\":{\"733\":1}}],[\"事务的执行并不是原子性的\",{\"1\":{\"401\":1}}],[\"事务的隔离级别越高\",{\"1\":{\"261\":1}}],[\"事务的隔离级别\",{\"0\":{\"261\":1}}],[\"事务的acid特性\",{\"1\":{\"259\":1}}],[\"事务的四大特性\",{\"0\":{\"259\":1}}],[\"事务操作\",{\"0\":{\"258\":1}}],[\"事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求\",{\"1\":{\"257\":1}}],[\"事务会把所有的操作作为一个整体向系统提交或撤销操作请求\",{\"1\":{\"76\":1}}],[\"事务安全\",{\"1\":{\"238\":1}}],[\"事务\",{\"0\":{\"257\":1,\"401\":1,\"728\":1},\"1\":{\"172\":1,\"264\":1,\"661\":1}}],[\"事务提交时\",{\"1\":{\"78\":1}}],[\"事务完成时\",{\"1\":{\"76\":1,\"259\":1}}],[\"事务是如何传递的\",{\"1\":{\"745\":1}}],[\"事务是不可分割的最小操作单元\",{\"1\":{\"76\":1,\"259\":1}}],[\"事务是一组操作的集合\",{\"1\":{\"76\":1,\"257\":1}}],[\"事务特性\",{\"1\":{\"76\":1,\"366\":1}}],[\"事务原理\",{\"0\":{\"76\":1}}],[\"拷贝\",{\"1\":{\"408\":1}}],[\"拷贝配置文件到每个实例目录\",{\"1\":{\"297\":1}}],[\"流程\",{\"1\":{\"408\":1}}],[\"流程函数也是很常用的一类函数\",{\"1\":{\"58\":1}}],[\"流程函数\",{\"0\":{\"58\":1}}],[\"错误信息中说\",{\"1\":{\"646\":1}}],[\"错误时返回的error\",{\"1\":{\"471\":1}}],[\"错误的数据格式\",{\"1\":{\"424\":1}}],[\"错误\",{\"1\":{\"423\":1,\"594\":1,\"595\":1,\"667\":1,\"700\":1}}],[\"错误事件\",{\"1\":{\"408\":1}}],[\"错误等情况\",{\"1\":{\"3\":1}}],[\"部分表示\",{\"1\":{\"667\":1}}],[\"部分关键代码如下\",{\"1\":{\"408\":1}}],[\"部分内置函数的执行\",{\"1\":{\"233\":1}}],[\"固定只占用\",{\"1\":{\"444\":1}}],[\"固定等待时间\",{\"1\":{\"407\":1}}],[\"固定16k\",{\"1\":{\"206\":1}}],[\"固定1m\",{\"1\":{\"206\":1}}],[\"永不超时\",{\"1\":{\"407\":1}}],[\"永久生效\",{\"1\":{\"299\":1}}],[\"恰好从\",{\"1\":{\"445\":1}}],[\"恰好未就绪\",{\"1\":{\"406\":1}}],[\"恰好有数据\",{\"1\":{\"406\":1}}],[\"恰好没有数据\",{\"1\":{\"406\":1}}],[\"忙轮训\",{\"1\":{\"405\":1}}],[\"顾名思义\",{\"1\":{\"404\":1}}],[\"顾名思义就是通过可视化的软件\",{\"1\":{\"375\":1}}],[\"信号较多\",{\"1\":{\"413\":1}}],[\"信号通知用户\",{\"1\":{\"413\":1}}],[\"信号驱动io\",{\"0\":{\"413\":1}}],[\"信号驱动\",{\"1\":{\"403\":1,\"413\":1}}],[\"信息\",{\"1\":{\"408\":1,\"434\":1,\"700\":1}}],[\"信息如下\",{\"1\":{\"296\":1,\"340\":1}}],[\"寻找被该类或是变量被调用的地方\",{\"1\":{\"552\":1}}],[\"寻找命令对应的command\",{\"1\":{\"464\":1}}],[\"寻找插槽所在实例即可\",{\"1\":{\"345\":1}}],[\"寻址地址就为\",{\"1\":{\"403\":1}}],[\"位置\",{\"1\":{\"623\":2}}],[\"位置保存数值\",{\"1\":{\"444\":1}}],[\"位于\",{\"1\":{\"619\":1}}],[\"位运算符\",{\"1\":{\"563\":1}}],[\"位\",{\"1\":{\"467\":1}}],[\"位有符号整数\",{\"1\":{\"444\":1}}],[\"位的操作系统\",{\"1\":{\"403\":1}}],[\"位序是从\",{\"1\":{\"38\":2}}],[\"任何java应用都可以从spring中受益\",{\"1\":{\"725\":1}}],[\"任何linux\",{\"1\":{\"403\":1}}],[\"任意位置处执行如下指令\",{\"1\":{\"608\":1}}],[\"任意一个消费者读取了消息都会使游标\",{\"1\":{\"387\":1}}],[\"任意写\",{\"1\":{\"333\":1}}],[\"⽐如每⽉活跃⽤户可以使⽤每天的活跃⽤户来合并计算可得\",{\"1\":{\"400\":1}}],[\"⽐如⽤hll存储每天的uv\",{\"1\":{\"400\":1}}],[\"⽽不会储存输⼊元素本身\",{\"1\":{\"400\":1}}],[\"键\",{\"1\":{\"438\":1}}],[\"键必须唯一\",{\"1\":{\"419\":1,\"421\":1}}],[\"键只需要花费\",{\"1\":{\"400\":1}}],[\"键值型\",{\"1\":{\"367\":1}}],[\"键值类型\",{\"1\":{\"366\":1}}],[\"键值设计\",{\"0\":{\"286\":1},\"1\":{\"266\":1}}],[\"键值\",{\"1\":{\"111\":1}}],[\"⾥⾯\",{\"1\":{\"400\":1}}],[\"异常回滚\",{\"1\":{\"743\":1}}],[\"异常信息\",{\"1\":{\"742\":1}}],[\"异常通知\",{\"1\":{\"661\":1,\"666\":1}}],[\"异常自定义\",{\"0\":{\"601\":1}}],[\"异常代码之后的语句不再执行\",{\"1\":{\"600\":1}}],[\"异常捕获\",{\"0\":{\"600\":1}}],[\"异常抛出\",{\"0\":{\"599\":1}}],[\"异常声明\",{\"0\":{\"598\":1}}],[\"异常就被抛出\",{\"1\":{\"597\":1}}],[\"异常关键字\",{\"0\":{\"597\":1}}],[\"异常基础\",{\"0\":{\"596\":1}}],[\"异常主要分为\",{\"1\":{\"594\":1}}],[\"异常是程序中的一些错误\",{\"1\":{\"594\":1}}],[\"异常等\",{\"1\":{\"409\":1}}],[\"异常\",{\"0\":{\"593\":1},\"1\":{\"408\":1,\"424\":1,\"594\":1,\"595\":2,\"599\":1,\"658\":1,\"665\":1,\"669\":1}}],[\"异步io\",{\"0\":{\"414\":1}}],[\"异步\",{\"1\":{\"403\":1,\"414\":2,\"727\":1}}],[\"异步加载的方式也可供选择\",{\"1\":{\"283\":1}}],[\"异或\",{\"1\":{\"399\":1}}],[\"⾮\",{\"1\":{\"399\":1}}],[\"纬度\",{\"1\":{\"398\":1}}],[\"找\",{\"1\":{\"421\":1}}],[\"找出位于指定范围内的\",{\"1\":{\"398\":1}}],[\"找出某⼀半径内的元素\",{\"1\":{\"398\":1}}],[\"找到所有与文件名匹配的文件\",{\"1\":{\"723\":1}}],[\"找到并打开资源\",{\"1\":{\"705\":1}}],[\"找到该位置的java\",{\"1\":{\"603\":1}}],[\"找到就绪的\",{\"1\":{\"408\":1}}],[\"找到记录值的id\",{\"1\":{\"127\":1}}],[\"找到\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"经过观察\",{\"1\":{\"745\":1}}],[\"经过测试\",{\"1\":{\"646\":1}}],[\"经度\",{\"1\":{\"398\":1}}],[\"经度和纬度\",{\"1\":{\"398\":1}}],[\"经纬度hash等常⻅操作\",{\"1\":{\"398\":1}}],[\"经常被用来实现排行榜这样的功能\",{\"1\":{\"382\":1}}],[\"经常查阅菜鸟教程编写的\",{\"1\":{\"268\":1}}],[\"地理信息的缩写\",{\"1\":{\"398\":1}}],[\"地址\",{\"1\":{\"35\":1,\"282\":1,\"368\":1,\"376\":1}}],[\"阻塞io模型中\",{\"1\":{\"404\":1}}],[\"阻塞io\",{\"0\":{\"404\":1}}],[\"阻塞\",{\"1\":{\"403\":1,\"404\":1,\"406\":1}}],[\"阻塞毫秒数\",{\"1\":{\"394\":1,\"396\":1}}],[\"阻止其他事务获得相同数据集的共享锁和排他锁\",{\"1\":{\"149\":1}}],[\"阻止其他事务获得相同数据集的排他锁\",{\"1\":{\"149\":1}}],[\"队列名\",{\"1\":{\"392\":1,\"393\":1,\"394\":1,\"396\":1}}],[\"队列名称\",{\"1\":{\"388\":1,\"389\":1,\"390\":1,\"391\":1,\"395\":1}}],[\"队列的定义\",{\"1\":{\"34\":1}}],[\"打包体积小\",{\"1\":{\"677\":1}}],[\"打包和部署应用程序\",{\"1\":{\"504\":1}}],[\"打印\",{\"1\":{\"754\":1,\"755\":1}}],[\"打印流信息\",{\"1\":{\"387\":1}}],[\"打印消费者组的信息\",{\"1\":{\"387\":1}}],[\"打开项目结构设置\",{\"1\":{\"604\":1}}],[\"打开下载好的安装包\",{\"1\":{\"604\":1}}],[\"打开当前项目设置\",{\"1\":{\"555\":1}}],[\"打开目录需要在输入的内容后面多加一个正斜杠\",{\"1\":{\"553\":1}}],[\"打开文件\",{\"1\":{\"553\":1}}],[\"打开\",{\"1\":{\"552\":1,\"630\":1}}],[\"打开配置文件\",{\"1\":{\"307\":1}}],[\"打开游标\",{\"1\":{\"254\":1}}],[\"转而执行\",{\"1\":{\"600\":1}}],[\"转为redis命令参数存入\",{\"1\":{\"464\":1}}],[\"转链表存储\",{\"1\":{\"408\":1}}],[\"转移消息的归属权\",{\"1\":{\"387\":1}}],[\"转变为established\",{\"1\":{\"17\":1}}],[\"反而能将组件结构进一步简化\",{\"1\":{\"726\":1}}],[\"反转的是什么\",{\"1\":{\"693\":1}}],[\"反斜杠\",{\"1\":{\"650\":2}}],[\"反向代理\",{\"1\":{\"634\":2}}],[\"反向获取消息列表\",{\"1\":{\"387\":1}}],[\"反序列化对象\",{\"1\":{\"581\":1}}],[\"反序列化创建\",{\"1\":{\"581\":1}}],[\"反序列化\",{\"1\":{\"581\":1}}],[\"反射相关的知识\",{\"1\":{\"649\":1}}],[\"反射机制实现的\",{\"1\":{\"649\":1}}],[\"反射创建\",{\"1\":{\"581\":1}}],[\"反射\",{\"1\":{\"581\":1}}],[\"反编译\",{\"1\":{\"562\":1}}],[\"反之\",{\"1\":{\"78\":1}}],[\"往往是字符串或者字符串的集合\",{\"1\":{\"427\":1}}],[\"往前移动\",{\"1\":{\"387\":1}}],[\"往redis中存放一条string类型的数据并获取返回结果\",{\"1\":{\"353\":1}}],[\"消除了冗余的代码\",{\"1\":{\"735\":1}}],[\"消费者名\",{\"1\":{\"396\":1}}],[\"消费者组相关命令\",{\"1\":{\"387\":1}}],[\"消费者\",{\"1\":{\"387\":1}}],[\"消费组名\",{\"1\":{\"396\":1}}],[\"消费组\",{\"1\":{\"387\":1}}],[\"消息会全部忽略\",{\"1\":{\"395\":1}}],[\"消息\",{\"1\":{\"388\":1,\"390\":1,\"394\":1,\"396\":1}}],[\"消息队列相关命令\",{\"1\":{\"387\":1}}],[\"消息就会被丢弃\",{\"1\":{\"387\":1}}],[\"消息发布者和订阅者不进行直接通信\",{\"1\":{\"383\":1}}],[\"校验码\",{\"1\":{\"386\":1}}],[\"校对规则名\",{\"1\":{\"179\":1}}],[\"杀死当前正在运行的\",{\"1\":{\"386\":1}}],[\"脚本\",{\"1\":{\"386\":1}}],[\"脚本命令\",{\"0\":{\"386\":1}}],[\"脚本使用\",{\"1\":{\"384\":1}}],[\"脚本语言调动\",{\"1\":{\"306\":1}}],[\"退回到上次修改的地方\",{\"1\":{\"553\":1}}],[\"退回到上一个操作的地方\",{\"1\":{\"552\":1}}],[\"退订给定模式频道\",{\"1\":{\"383\":1}}],[\"退订一个或多个频道\",{\"1\":{\"383\":1}}],[\"退出程序\",{\"1\":{\"600\":1}}],[\"退出当前循环\",{\"1\":{\"570\":1}}],[\"退出登录\",{\"1\":{\"532\":1}}],[\"退出这个容器到我们本地的命令控制端\",{\"1\":{\"515\":1}}],[\"退出\",{\"1\":{\"363\":1}}],[\"退出指定标记的循环体\",{\"1\":{\"253\":1}}],[\"退出循环\",{\"1\":{\"253\":1}}],[\"订阅给定模式频道\",{\"1\":{\"383\":1}}],[\"订阅一个或多个频道\",{\"1\":{\"383\":1}}],[\"订阅该频道的每个客户端都可以收到该消息\",{\"1\":{\"383\":1}}],[\"订阅者\",{\"1\":{\"383\":1}}],[\"此类错误发生时\",{\"1\":{\"595\":1}}],[\"此类错误一般表示代码运行时\",{\"1\":{\"595\":1}}],[\"此种模式下\",{\"1\":{\"383\":1}}],[\"此时可根据接口类型来获取该实现类的bean\",{\"1\":{\"752\":1}}],[\"此时可以使用mysql提供的load指令进行插入\",{\"1\":{\"204\":1}}],[\"此时可以只将字符串的一部分前缀\",{\"1\":{\"134\":1}}],[\"此时这个很可能出问题的程序应该被回滚\",{\"1\":{\"742\":1}}],[\"此时执行sql语句会抛出sqlexception\",{\"1\":{\"738\":1}}],[\"此时再创建\",{\"1\":{\"693\":1}}],[\"此时必须设置use\",{\"1\":{\"643\":1}}],[\"此时重启一下电脑\",{\"1\":{\"608\":1}}],[\"此时无法通过上述方式创建\",{\"1\":{\"580\":1}}],[\"此时子类具有所有父类的属性和方法\",{\"1\":{\"576\":1}}],[\"此时我们在创建\",{\"1\":{\"517\":1}}],[\"此时我们可以使用后台启动\",{\"1\":{\"370\":1}}],[\"此时encoding的后14位用来存储string长度\",{\"1\":{\"444\":1}}],[\"此时encoding长度为5个字节\",{\"1\":{\"444\":1}}],[\"此时encoding长度为两个字节\",{\"1\":{\"444\":1}}],[\"此时encoding长度为1个字节\",{\"1\":{\"444\":1}}],[\"此时启动redis时需要加上配置文件\",{\"1\":{\"371\":1}}],[\"此时密码即为\",{\"1\":{\"371\":1}}],[\"此时命令终端会一直响应redis服务\",{\"1\":{\"370\":1}}],[\"此时节点总数\",{\"1\":{\"343\":1}}],[\"此时主进程大量修改数据\",{\"1\":{\"321\":1}}],[\"此时事务执行完毕时\",{\"1\":{\"258\":1}}],[\"此时查询的代价就比较大\",{\"1\":{\"219\":1}}],[\"此时需要注意联合索引在创建时的规则\",{\"1\":{\"213\":1}}],[\"此时则为传递一个\",{\"1\":{\"757\":1}}],[\"此时则完成了数据的插入\",{\"1\":{\"207\":1}}],[\"此时则在undo\",{\"1\":{\"86\":1}}],[\"此时页内的数据是有序的\",{\"1\":{\"207\":1}}],[\"此时还需要通过id值在聚集索引中查询\",{\"1\":{\"128\":1}}],[\"此时就产生了哈希碰撞\",{\"1\":{\"123\":1}}],[\"此时\",{\"1\":{\"24\":1,\"321\":1,\"417\":1,\"600\":1}}],[\"此时tcp连接还未释放\",{\"1\":{\"19\":1}}],[\"此时将服务端到客户端方向的连接断开\",{\"1\":{\"19\":1}}],[\"此时仅仅只有客户端向服务端方向的连接断开\",{\"1\":{\"19\":1}}],[\"此时由客户端发送连接释放报文段\",{\"1\":{\"19\":1}}],[\"此时服务端从syn\",{\"1\":{\"17\":1}}],[\"此时服务端从listen\",{\"1\":{\"17\":1}}],[\"此时连接建立\",{\"1\":{\"17\":1}}],[\"此时发送报文段的同时为该tcp连接分配对应的缓存和变量\",{\"1\":{\"17\":1}}],[\"此时报文段的ack位置为1\",{\"1\":{\"17\":1}}],[\"此时客户端从syn\",{\"1\":{\"17\":1}}],[\"此时客户端接受到服务端发来的确认报文段\",{\"1\":{\"17\":1}}],[\"此时客户端由closed\",{\"1\":{\"17\":1}}],[\"此时同意进行连接时\",{\"1\":{\"17\":1}}],[\"移除set中的指定元素\",{\"1\":{\"381\":1}}],[\"移除并返回列表右侧的第一个元素\",{\"1\":{\"380\":1}}],[\"移除并返回列表左侧的第一个元素\",{\"1\":{\"380\":1}}],[\"移动光标所在行向下移动\",{\"1\":{\"554\":1}}],[\"移动光标所在行向上移动\",{\"1\":{\"554\":1}}],[\"移动光标到当前所在代码的花括号结束位置\",{\"1\":{\"549\":1}}],[\"移动光标到当前所在代码的花括号开始位置\",{\"1\":{\"549\":1}}],[\"移动数组中\",{\"1\":{\"434\":1}}],[\"移动\",{\"1\":{\"346\":1}}],[\"评论列表等\",{\"1\":{\"380\":1}}],[\"朋友圈点赞列表\",{\"1\":{\"380\":1}}],[\"项目介绍\",{\"0\":{\"637\":1}}],[\"项目名\",{\"1\":{\"378\":1}}],[\"项目篇\",{\"0\":{\"9\":1}}],[\"隔开\",{\"1\":{\"378\":1,\"598\":1,\"600\":1}}],[\"隔离所需依赖\",{\"1\":{\"505\":1}}],[\"隔离操作系统\",{\"1\":{\"505\":1}}],[\"隔离程度\",{\"1\":{\"505\":1}}],[\"隔离级别一共有四种\",{\"1\":{\"744\":1}}],[\"隔离级别越高\",{\"1\":{\"744\":1}}],[\"隔离级别\",{\"0\":{\"744\":1},\"1\":{\"261\":1,\"744\":2}}],[\"隔离性\",{\"1\":{\"76\":1,\"88\":1,\"259\":1,\"504\":1,\"733\":1}}],[\"浮点类型\",{\"1\":{\"378\":1}}],[\"整合junit\",{\"1\":{\"731\":1}}],[\"整合junit5\",{\"0\":{\"697\":1}}],[\"整合asm\",{\"1\":{\"727\":1}}],[\"整理和总结的笔记都很优秀\",{\"1\":{\"543\":1}}],[\"整体\",{\"1\":{\"460\":1}}],[\"整数等实际数据的类型\",{\"1\":{\"471\":1}}],[\"整数集合\",{\"1\":{\"468\":1}}],[\"整数集intset\",{\"0\":{\"431\":1}}],[\"整数\",{\"1\":{\"444\":1}}],[\"整数类型\",{\"1\":{\"378\":1}}],[\"整个类共有\",{\"1\":{\"572\":1,\"582\":1}}],[\"整个\",{\"1\":{\"345\":1}}],[\"普通字符串\",{\"1\":{\"378\":1}}],[\"意思是\",{\"1\":{\"378\":1}}],[\"意向排他锁\",{\"1\":{\"147\":1}}],[\"意向共享锁\",{\"1\":{\"147\":1}}],[\"意向锁之间不会互斥\",{\"1\":{\"147\":1}}],[\"意向锁\",{\"0\":{\"147\":1},\"1\":{\"144\":1}}],[\"几乎都能看到以下的两行代码\",{\"1\":{\"696\":1}}],[\"几乎所有场合都使用\",{\"1\":{\"695\":1}}],[\"几乎不丢数据\",{\"1\":{\"322\":1}}],[\"几级指针代表一次横跨几个节点\",{\"1\":{\"453\":1}}],[\"几千万甚至几亿\",{\"1\":{\"440\":1}}],[\"几个java语言的客户端展示\",{\"1\":{\"376\":1}}],[\"唯⼀的区别就在于github上的更新⽐较及时\",{\"1\":{\"375\":1}}],[\"唯一性的前提下\",{\"1\":{\"752\":1}}],[\"唯一区别的就是名称上\",{\"1\":{\"644\":1}}],[\"唯一索引的选择性是1\",{\"1\":{\"134\":1}}],[\"唯一索引\",{\"1\":{\"126\":2}}],[\"唯一约束\",{\"1\":{\"49\":1}}],[\"⼀般来说两者都没有什么差别\",{\"1\":{\"375\":1}}],[\"q\",{\"1\":{\"549\":1,\"550\":1}}],[\"q=redis\",{\"1\":{\"512\":1}}],[\"qiniu\",{\"1\":{\"475\":1}}],[\"qishibo\",{\"1\":{\"375\":2}}],[\"qblen\",{\"1\":{\"464\":1}}],[\"ql\",{\"1\":{\"449\":3}}],[\"qualifying\",{\"1\":{\"752\":1}}],[\"qualifier注解一起使用\",{\"1\":{\"646\":1}}],[\"qualifier注解联合\",{\"1\":{\"646\":1}}],[\"qualifier\",{\"1\":{\"646\":1,\"647\":1}}],[\"quicklist小结\",{\"0\":{\"451\":1}}],[\"quicklistentry\",{\"1\":{\"449\":3}}],[\"quicklistiter\",{\"1\":{\"449\":3}}],[\"quicklistbookmark\",{\"1\":{\"449\":4}}],[\"quicklistlzf\",{\"1\":{\"449\":3}}],[\"quicklistnodes\",{\"1\":{\"449\":1}}],[\"quicklistnode\",{\"1\":{\"449\":9}}],[\"quicklistnote\",{\"1\":{\"449\":1}}],[\"quicklist示意图\",{\"1\":{\"448\":1}}],[\"quicklist是一个双向链表\",{\"1\":{\"448\":1}}],[\"quicklist\",{\"1\":{\"418\":1,\"446\":1,\"448\":3,\"449\":7,\"450\":4,\"451\":1,\"468\":1,\"469\":1}}],[\"quit\",{\"1\":{\"363\":1}}],[\"queries\",{\"1\":{\"741\":1}}],[\"queryforobject\",{\"1\":{\"731\":3,\"737\":1}}],[\"query\",{\"1\":{\"106\":1,\"176\":1,\"229\":3,\"230\":4,\"731\":1,\"749\":1}}],[\"queue\",{\"1\":{\"387\":1}}],[\"quorum\",{\"1\":{\"327\":2}}],[\"网易\",{\"1\":{\"475\":1}}],[\"网络层\",{\"0\":{\"795\":1}}],[\"网络协议\",{\"1\":{\"782\":1}}],[\"网络中的计算机必须遵循的统一规则\",{\"1\":{\"782\":1}}],[\"网络连接和磁盘文件\",{\"1\":{\"597\":1}}],[\"网络端口映射\",{\"1\":{\"537\":1}}],[\"网络类型\",{\"1\":{\"486\":1}}],[\"网络配置\",{\"1\":{\"483\":1}}],[\"网络\",{\"1\":{\"481\":1,\"482\":1}}],[\"网络和卷\",{\"1\":{\"474\":1}}],[\"网络请求\",{\"1\":{\"463\":1}}],[\"网络模型\",{\"0\":{\"461\":1}}],[\"网络上的资源也很多\",{\"1\":{\"375\":1}}],[\"网站更新\",{\"0\":{\"13\":1}}],[\"费\",{\"1\":{\"375\":1}}],[\"⽀持mac\",{\"1\":{\"375\":1}}],[\"生命周期\",{\"1\":{\"764\":5}}],[\"生产代理对象的工厂类\",{\"1\":{\"658\":1}}],[\"生产环境不要设置为0\",{\"1\":{\"371\":1}}],[\"生态系统\",{\"1\":{\"504\":1}}],[\"生成get和set方法\",{\"1\":{\"731\":1}}],[\"生成的自包含本机可执行文件特定于不需要\",{\"1\":{\"679\":1}}],[\"生成镜像\",{\"0\":{\"516\":1}}],[\"生成\",{\"1\":{\"388\":1,\"458\":1}}],[\"生成readview的时机不同\",{\"1\":{\"88\":1}}],[\"生成一条记录版本链条\",{\"1\":{\"86\":1}}],[\"生成新结点\",{\"1\":{\"39\":1}}],[\"良好的编码\",{\"1\":{\"367\":1}}],[\"速度会比较快\",{\"1\":{\"499\":1}}],[\"速度快\",{\"1\":{\"367\":1}}],[\"速度更快\",{\"1\":{\"282\":1}}],[\"水平\",{\"1\":{\"366\":1}}],[\"垂直\",{\"1\":{\"366\":1}}],[\"泛指非关系型的数据库\",{\"1\":{\"365\":2}}],[\"泛型for循环\",{\"1\":{\"291\":1}}],[\"工程\",{\"1\":{\"651\":1}}],[\"工具进行安装\",{\"1\":{\"634\":1}}],[\"工具类\",{\"1\":{\"361\":1}}],[\"工作和生活\",{\"1\":{\"793\":1}}],[\"工作目录\",{\"1\":{\"297\":1}}],[\"工作总结\",{\"1\":{\"3\":1}}],[\"统计字符串被设置为1的bit数\",{\"1\":{\"399\":1}}],[\"统计score值在给定范围内的所有元素的个数\",{\"1\":{\"382\":1}}],[\"统计数量\",{\"1\":{\"191\":1}}],[\"统一为\",{\"1\":{\"420\":1}}],[\"统一采用\",{\"1\":{\"418\":1}}],[\"统一\",{\"1\":{\"360\":1}}],[\"省去了我们自定义的\",{\"1\":{\"357\":1}}],[\"省略的对\",{\"1\":{\"347\":1}}],[\"针对上述问题\",{\"1\":{\"696\":1}}],[\"针对带日志功能的实现类\",{\"1\":{\"655\":1}}],[\"针对不同的\",{\"1\":{\"443\":1}}],[\"针对如图所示的特殊情况\",{\"1\":{\"356\":1}}],[\"针对于常作为查询条件\",{\"1\":{\"136\":1}}],[\"针对于数据量较大\",{\"1\":{\"136\":1}}],[\"针对于表中主键创建的索引\",{\"1\":{\"126\":1}}],[\"针对于非唯一的二级索引页\",{\"1\":{\"64\":1}}],[\"采用渐进式\",{\"1\":{\"440\":1}}],[\"采用\",{\"1\":{\"418\":2,\"420\":1}}],[\"采用的是\",{\"1\":{\"321\":1}}],[\"采⽤\",{\"1\":{\"355\":2}}],[\"既然事务控制的代码有规律可循\",{\"1\":{\"735\":1}}],[\"既然这样可读性又差\",{\"1\":{\"354\":1}}],[\"既可以使用\",{\"1\":{\"517\":1}}],[\"既可以支持正向检索和也可以支持反向检索\",{\"1\":{\"380\":1}}],[\"既可以作为输入参数\",{\"1\":{\"248\":1}}],[\"资源子网是实现资源共享功能的设备及其软件的集合\",{\"1\":{\"787\":1}}],[\"资源的位置信息\",{\"1\":{\"783\":1}}],[\"资源的文件名是什么\",{\"1\":{\"705\":1}}],[\"资源共享可以是软件共享\",{\"1\":{\"790\":1}}],[\"资源共享\",{\"0\":{\"790\":1},\"1\":{\"782\":1}}],[\"资源共享观点\",{\"0\":{\"782\":1}}],[\"资源所在的物理位置将被耦合到代码中\",{\"1\":{\"719\":1}}],[\"资源访问\",{\"1\":{\"719\":1}}],[\"资源访问策略的抽象\",{\"1\":{\"706\":1}}],[\"资源最后一次修改的时间戳\",{\"1\":{\"705\":1}}],[\"资源操作\",{\"0\":{\"703\":1}}],[\"资源利用率\",{\"1\":{\"505\":1}}],[\"资源优化\",{\"1\":{\"504\":1}}],[\"资源\",{\"1\":{\"406\":1}}],[\"资源占用又高\",{\"1\":{\"354\":1}}],[\"资源占用高\",{\"1\":{\"354\":1}}],[\"资料文件\",{\"1\":{\"639\":1}}],[\"资料\",{\"1\":{\"293\":1}}],[\"序列化器\",{\"1\":{\"357\":1}}],[\"序列化器来处理\",{\"1\":{\"357\":1}}],[\"序列化类\",{\"1\":{\"355\":1}}],[\"序列化⽅式\",{\"1\":{\"355\":1}}],[\"序列化的方式来解决\",{\"1\":{\"354\":1}}],[\"序列化\",{\"1\":{\"354\":1}}],[\"序列化成为字节形式\",{\"1\":{\"354\":1}}],[\"序号seq\",{\"1\":{\"19\":1}}],[\"序号seq=\",{\"1\":{\"19\":1}}],[\"出现问题\",{\"1\":{\"595\":1}}],[\"出现这种现象的原因是什么呢\",{\"1\":{\"354\":1}}],[\"出现范围查\",{\"1\":{\"131\":1}}],[\"官方已经对\",{\"1\":{\"678\":1}}],[\"官方发布\",{\"1\":{\"512\":1}}],[\"官方仓库拉取\",{\"1\":{\"509\":1}}],[\"官方维护的一个免费的公共仓库\",{\"1\":{\"531\":1}}],[\"官方维护\",{\"1\":{\"509\":1}}],[\"官方提供了\",{\"1\":{\"508\":1}}],[\"官方提供的\",{\"1\":{\"510\":1}}],[\"官方提供的安装脚本安装即可\",{\"1\":{\"500\":1}}],[\"官方提供的国内加速服务为样例\",{\"1\":{\"475\":1}}],[\"官方和国内许多服务商提供了国内的加速器服务\",{\"1\":{\"475\":1}}],[\"官方地址\",{\"0\":{\"352\":1}}],[\"官网下载速度可能会比较慢\",{\"1\":{\"499\":1}}],[\"官网下载\",{\"1\":{\"499\":1,\"603\":1}}],[\"官网地址\",{\"1\":{\"360\":1}}],[\"官网\",{\"1\":{\"288\":1}}],[\"忽略\",{\"1\":{\"347\":1}}],[\"忽略数据一致性\",{\"1\":{\"347\":1}}],[\"忽略索引\",{\"1\":{\"132\":1}}],[\"步长为指定的increment值\",{\"1\":{\"382\":1}}],[\"步\",{\"1\":{\"347\":1}}],[\"步骤2\",{\"0\":{\"312\":1}}],[\"步骤1\",{\"0\":{\"311\":1}}],[\"缺一不可\",{\"1\":{\"785\":1}}],[\"缺省\",{\"1\":{\"347\":1}}],[\"缺点就是在程序运行前编译会使程序安装的时间增加\",{\"1\":{\"677\":1}}],[\"缺点就是编译需要占用运行时资源\",{\"1\":{\"677\":1}}],[\"缺点\",{\"1\":{\"116\":1,\"118\":1,\"119\":1,\"236\":1,\"272\":2,\"274\":1,\"282\":2,\"322\":1,\"354\":1,\"576\":1}}],[\"取值\",{\"1\":{\"763\":2}}],[\"取值false表示关闭默认扫描规则\",{\"1\":{\"643\":1}}],[\"取消撤销\",{\"1\":{\"553\":1}}],[\"取消缩进\",{\"1\":{\"551\":1}}],[\"取消书签\",{\"1\":{\"549\":1}}],[\"取消\",{\"1\":{\"401\":1}}],[\"取消监视\",{\"1\":{\"401\":1}}],[\"取消事务\",{\"1\":{\"401\":1}}],[\"取余\",{\"1\":{\"345\":2}}],[\"取决于刷盘策略\",{\"1\":{\"323\":1}}],[\"散列插槽\",{\"0\":{\"345\":1}}],[\"散列存储\",{\"1\":{\"35\":2}}],[\"尝试把结果写到\",{\"1\":{\"464\":1}}],[\"尝试连接7001节点\",{\"1\":{\"344\":1}}],[\"尝试让master节点7001宕机\",{\"1\":{\"335\":1}}],[\"÷\",{\"1\":{\"343\":1}}],[\"z\",{\"1\":{\"549\":1,\"553\":1,\"700\":1}}],[\"zlend\",{\"1\":{\"444\":1}}],[\"zlib\",{\"1\":{\"343\":1}}],[\"zipmap\",{\"1\":{\"468\":1}}],[\"ziplist小结\",{\"0\":{\"446\":1}}],[\"ziplistentry\",{\"0\":{\"443\":1},\"1\":{\"444\":1,\"445\":1}}],[\"ziplist\",{\"1\":{\"418\":2,\"419\":7,\"421\":5,\"442\":1,\"443\":6,\"445\":3,\"446\":6,\"448\":2,\"450\":12,\"451\":3,\"468\":1,\"469\":2}}],[\"zi\",{\"1\":{\"449\":2}}],[\"zinter\",{\"1\":{\"382\":1}}],[\"zincrby\",{\"1\":{\"382\":1}}],[\"zunion\",{\"1\":{\"382\":1}}],[\"zdiff\",{\"1\":{\"382\":1}}],[\"zcount\",{\"1\":{\"382\":1}}],[\"zcard\",{\"1\":{\"382\":1}}],[\"zrangebyscore\",{\"1\":{\"382\":1}}],[\"zrange\",{\"1\":{\"382\":1}}],[\"zrank\",{\"1\":{\"382\":1}}],[\"zrem\",{\"1\":{\"382\":1}}],[\"zskiplistlevel\",{\"1\":{\"454\":1}}],[\"zskiplistnode\",{\"1\":{\"454\":6}}],[\"zskiplist\",{\"1\":{\"454\":3}}],[\"zset\",{\"1\":{\"419\":2,\"421\":7,\"469\":1}}],[\"zsetoperations\",{\"1\":{\"361\":1}}],[\"zscore\",{\"1\":{\"382\":1}}],[\"zadd\",{\"1\":{\"382\":1}}],[\"zh\",{\"1\":{\"283\":1,\"687\":3,\"690\":1}}],[\"绑定地址\",{\"1\":{\"341\":1}}],[\"海量数据存储问题\",{\"1\":{\"339\":1}}],[\"控制和管理\",{\"1\":{\"789\":1}}],[\"控制和储存的能力\",{\"1\":{\"787\":1}}],[\"控制日志输出的格式\",{\"1\":{\"700\":1}}],[\"控制对象与对象之间的依赖关系\",{\"1\":{\"691\":1}}],[\"控制反转这种思想如何实现呢\",{\"1\":{\"693\":1}}],[\"控制反转是为了降低程序耦合度\",{\"1\":{\"693\":1}}],[\"控制反转是一种思想\",{\"1\":{\"693\":1}}],[\"控制反转\",{\"1\":{\"649\":1,\"691\":1,\"693\":1,\"726\":1}}],[\"控制\",{\"1\":{\"451\":1}}],[\"控制器\",{\"1\":{\"336\":1}}],[\"控制数据库的访问权限\",{\"1\":{\"196\":1}}],[\"控制数据表的访问权限\",{\"1\":{\"176\":1}}],[\"引用集合类型\",{\"1\":{\"760\":1}}],[\"引用ioc容器中某个bean的id\",{\"1\":{\"758\":1,\"759\":1,\"760\":2}}],[\"引用类型\",{\"1\":{\"562\":1}}],[\"引用数据类型\",{\"1\":{\"562\":1}}],[\"引用计数器\",{\"0\":{\"472\":1}}],[\"引用计数\",{\"1\":{\"458\":1}}],[\"引入context\",{\"1\":{\"762\":1}}],[\"引入外部属性文件\",{\"0\":{\"762\":1},\"1\":{\"762\":1}}],[\"引入p命名空间后\",{\"1\":{\"761\":1}}],[\"引入spring依赖\",{\"1\":{\"687\":1}}],[\"引入相关依赖\",{\"1\":{\"681\":1}}],[\"引入相关的依赖\",{\"1\":{\"650\":1}}],[\"引入配置文件\",{\"1\":{\"642\":1,\"762\":1}}],[\"引入多线程会面临线程安全问题\",{\"1\":{\"460\":1}}],[\"引入多线程异步处理一些耗时较长的任务\",{\"1\":{\"460\":1}}],[\"引入依赖\",{\"0\":{\"699\":1},\"1\":{\"362\":1,\"641\":1,\"650\":1}}],[\"引入单元测试依赖\",{\"1\":{\"353\":1}}],[\"引入jedis依赖\",{\"1\":{\"353\":1}}],[\"引入\",{\"1\":{\"336\":1,\"348\":1,\"642\":2,\"651\":1,\"761\":1}}],[\"引擎读取\",{\"1\":{\"489\":1}}],[\"引擎层处于mysql体系结构中的第三层\",{\"1\":{\"233\":1}}],[\"引擎层\",{\"1\":{\"233\":1}}],[\"引擎并不会把全部字段取出来\",{\"1\":{\"223\":1}}],[\"及其子包下的所有类\",{\"1\":{\"643\":1}}],[\"及其子类\",{\"1\":{\"595\":1}}],[\"及其对应的\",{\"1\":{\"456\":1}}],[\"及其对应状态\",{\"1\":{\"407\":1}}],[\"及时更新连接信息\",{\"1\":{\"336\":1}}],[\"及排他锁\",{\"1\":{\"147\":1}}],[\"让他自己去找所需要的依赖\",{\"1\":{\"753\":1}}],[\"让其他正常程序可以执行\",{\"1\":{\"742\":1}}],[\"让spring为bean实例依赖注入资源\",{\"1\":{\"719\":1}}],[\"让sorted\",{\"1\":{\"382\":1}}],[\"让\",{\"1\":{\"695\":1,\"719\":1}}],[\"让代码编写更加方便\",{\"1\":{\"680\":1}}],[\"让被抽取的方法更专注于自己的核心功能\",{\"1\":{\"661\":1}}],[\"让不属于目标方法核心逻辑的代码从目标方法中剥离出来\",{\"1\":{\"656\":1}}],[\"让我们在调用目标方法的时候\",{\"1\":{\"656\":1}}],[\"让外部程序通过该类提供的方法来实现对内部信息的操作和访问\",{\"1\":{\"575\":1}}],[\"让容器在后台运行\",{\"1\":{\"535\":1}}],[\"让一个hash类型key的字段值自增并指定步长\",{\"1\":{\"379\":1}}],[\"让一个浮点类型的数字自增并指定步长\",{\"1\":{\"378\":1}}],[\"让一个整型的key自增并指定步长\",{\"1\":{\"378\":1}}],[\"让一个整型的key自增1\",{\"1\":{\"378\":1}}],[\"让num值自增2\",{\"1\":{\"378\":1}}],[\"让redis后台运行\",{\"1\":{\"341\":1}}],[\"让这些\",{\"1\":{\"329\":1}}],[\"让该节点成为\",{\"1\":{\"329\":1}}],[\"让服务端的资源白白浪费\",{\"1\":{\"18\":1}}],[\"越大越接近队尾\",{\"1\":{\"421\":1}}],[\"越大则说明数据越新\",{\"1\":{\"328\":1}}],[\"越小越接近队首\",{\"1\":{\"421\":1}}],[\"越小优先级越高\",{\"1\":{\"328\":2}}],[\"越多\",{\"1\":{\"408\":1}}],[\"越先执行\",{\"1\":{\"231\":1}}],[\"选中class文件\",{\"1\":{\"650\":1}}],[\"选中从光标所在位置到它的底部中括号位置\",{\"1\":{\"553\":1}}],[\"选中从光标所在位置到它的顶部中括号位置\",{\"1\":{\"553\":1}}],[\"选中部分进行自动代码缩进\",{\"1\":{\"552\":1}}],[\"选中光标到当前行头位置\",{\"1\":{\"551\":1}}],[\"选中光标到当前行尾位置\",{\"1\":{\"551\":1}}],[\"选中对象\",{\"1\":{\"550\":1}}],[\"选中文本\",{\"1\":{\"550\":1}}],[\"选中文件\",{\"1\":{\"549\":1}}],[\"选项\",{\"1\":{\"541\":1}}],[\"选项即可\",{\"1\":{\"528\":1}}],[\"选举master时的quorum值\",{\"1\":{\"333\":1}}],[\"选举新的master\",{\"0\":{\"328\":1}}],[\"选择系统变量中的path这一行\",{\"1\":{\"606\":1}}],[\"选择环境变量\",{\"1\":{\"606\":1}}],[\"选择一个项目并打开\",{\"1\":{\"604\":1}}],[\"选择指定目录\",{\"1\":{\"604\":1}}],[\"选择指定的数据库\",{\"1\":{\"363\":1}}],[\"选择对应的版本下载\",{\"1\":{\"603\":1}}],[\"选择适配自己电脑的版本\",{\"1\":{\"603\":1}}],[\"选择被双击的单词\",{\"1\":{\"554\":1}}],[\"选择\",{\"1\":{\"554\":1,\"604\":1}}],[\"选择可继承的方法\",{\"1\":{\"549\":1}}],[\"选择可重写的方法\",{\"1\":{\"549\":1}}],[\"选择自己电脑的版本下载即可\",{\"1\":{\"498\":1}}],[\"选择合适的操作函数来处理底层的数据结构\",{\"1\":{\"470\":1}}],[\"选择不同的编码方式\",{\"1\":{\"468\":1,\"469\":1}}],[\"选择不同的实现\",{\"1\":{\"461\":1}}],[\"选择库\",{\"1\":{\"353\":1}}],[\"选择依据是这样\",{\"1\":{\"328\":1}}],[\"选择使用auto\",{\"1\":{\"209\":1}}],[\"客户机负责完成与用户的交互任务\",{\"1\":{\"423\":1}}],[\"客户机\",{\"1\":{\"423\":2}}],[\"客户端是\",{\"1\":{\"474\":1}}],[\"客户端和守护程序使用\",{\"1\":{\"474\":1}}],[\"客户端和守护程序可以\",{\"1\":{\"474\":1}}],[\"客户端连接到远程\",{\"1\":{\"474\":1}}],[\"客户端连接服务端时\",{\"1\":{\"204\":1}}],[\"客户端与\",{\"1\":{\"474\":1}}],[\"客户端写缓存区\",{\"1\":{\"464\":1}}],[\"客户端中有缓冲区用来读和写\",{\"1\":{\"464\":1}}],[\"客户端可读\",{\"1\":{\"462\":1}}],[\"客户端可以订阅任意数量的频道\",{\"1\":{\"383\":1}}],[\"客户端缓存\",{\"1\":{\"423\":1}}],[\"客户端的整合\",{\"1\":{\"360\":1}}],[\"客户端的服务发现来源\",{\"1\":{\"326\":1}}],[\"客户端\",{\"1\":{\"351\":1,\"410\":1,\"423\":1,\"424\":1,\"474\":1}}],[\"客户端请求可以访问集群任意节点\",{\"1\":{\"339\":1}}],[\"客户端请求\",{\"1\":{\"306\":1}}],[\"客户端断开连接\",{\"1\":{\"145\":1}}],[\"客户端才进入连接关闭状态\",{\"1\":{\"19\":1}}],[\"客户端收到来自服务端的连接释放报文段\",{\"1\":{\"19\":1}}],[\"客户端也可以接受到数据\",{\"1\":{\"19\":1}}],[\"客户端久久未收到来自服务端的确认报文段\",{\"1\":{\"18\":1}}],[\"客户端向服务端发起连接请求\",{\"1\":{\"17\":1}}],[\"客观下线\",{\"1\":{\"327\":1}}],[\"充当\",{\"1\":{\"326\":1}}],[\"充分利用\",{\"1\":{\"306\":1,\"406\":1}}],[\"监视\",{\"1\":{\"678\":1}}],[\"监视一个\",{\"1\":{\"401\":2}}],[\"监测彼此健康状态\",{\"1\":{\"339\":1}}],[\"监控\",{\"1\":{\"326\":1,\"330\":1}}],[\"监听fd\",{\"1\":{\"464\":1}}],[\"监听tcp端口\",{\"1\":{\"464\":1}}],[\"监听的\",{\"1\":{\"408\":1}}],[\"监听\",{\"1\":{\"17\":1,\"464\":1}}],[\"慢慢迁移到新的哈希表中\",{\"1\":{\"440\":1}}],[\"慢\",{\"1\":{\"323\":1}}],[\"慢查询日志主要就是为了记录那些查询时间较长的sql语句\",{\"1\":{\"229\":1}}],[\"慢查询日志记录了所有执行时间超过指定参数\",{\"1\":{\"229\":1}}],[\"慢查询日志\",{\"0\":{\"229\":1}}],[\"很显然我们看到全称\",{\"1\":{\"612\":1}}],[\"很明显它是需要预留空间的\",{\"1\":{\"443\":1}}],[\"很不方便\",{\"1\":{\"370\":1}}],[\"很多方面的功能性需求可以在\",{\"1\":{\"726\":1}}],[\"很多人也说它是\",{\"1\":{\"365\":1}}],[\"很多数据都查不到从而查数据库\",{\"1\":{\"274\":1}}],[\"很快\",{\"1\":{\"323\":1}}],[\"定位连接点的方式\",{\"1\":{\"661\":1}}],[\"定位到下一个匹配处\",{\"1\":{\"556\":1}}],[\"定位到对应数值的书签位置\",{\"1\":{\"549\":1}}],[\"定位\",{\"1\":{\"550\":1}}],[\"定时删除\",{\"1\":{\"457\":1}}],[\"定时对整个内存做快照\",{\"1\":{\"323\":1}}],[\"定义service类\",{\"1\":{\"683\":1}}],[\"定义属性和方法\",{\"1\":{\"681\":1,\"719\":1}}],[\"定义容器接口实现类\",{\"1\":{\"650\":1}}],[\"定义容器接口\",{\"1\":{\"650\":1}}],[\"定义容器启动时要执行的默认命令\",{\"1\":{\"493\":2}}],[\"定义注解\",{\"1\":{\"650\":1}}],[\"定义一个异常类应包含两个构造函数\",{\"1\":{\"601\":1}}],[\"定义一次\",{\"1\":{\"583\":1}}],[\"定义构建时的变量\",{\"1\":{\"493\":1}}],[\"定义构成应用程序的服务\",{\"1\":{\"478\":1}}],[\"定义了\",{\"1\":{\"590\":1}}],[\"定义了对象的属性和方法\",{\"1\":{\"571\":1}}],[\"定义了容器启动时要执行的默认命令\",{\"1\":{\"490\":1}}],[\"定义了一套操作关系型数据库的统一标准\",{\"1\":{\"106\":1}}],[\"定义启动命令\",{\"1\":{\"490\":1}}],[\"定义应用程序的环境\",{\"1\":{\"478\":1}}],[\"定义集合\",{\"1\":{\"424\":1}}],[\"定义类型别名\",{\"1\":{\"407\":1}}],[\"定义单链表节点类型\",{\"1\":{\"39\":1}}],[\"定义线性表的最大容量\",{\"1\":{\"38\":1}}],[\"阈值也可以在\",{\"1\":{\"322\":1}}],[\"刷新\",{\"1\":{\"552\":1}}],[\"刷新脏页到磁盘的线程\",{\"1\":{\"75\":1}}],[\"刷盘时机\",{\"1\":{\"322\":1}}],[\"追踪\",{\"1\":{\"700\":1}}],[\"追加一段字符串\",{\"1\":{\"429\":1}}],[\"追加文件\",{\"1\":{\"322\":1}}],[\"追究源头\",{\"1\":{\"3\":1}}],[\"技术在运行时内存占用低\",{\"1\":{\"677\":1}}],[\"技术说明\",{\"0\":{\"663\":1}}],[\"技术可以通过切入点定位到特定的连接点\",{\"1\":{\"661\":1}}],[\"技术\",{\"1\":{\"321\":1,\"678\":1}}],[\"磁盘\",{\"1\":{\"366\":1}}],[\"磁盘空间相对廉价\",{\"1\":{\"321\":1}}],[\"磁盘结构\",{\"0\":{\"67\":1},\"1\":{\"67\":1}}],[\"压缩列表\",{\"1\":{\"468\":1}}],[\"压缩列表ziplist\",{\"0\":{\"442\":1},\"1\":{\"446\":1}}],[\"压缩\",{\"1\":{\"321\":1,\"450\":1}}],[\"压缩也会消耗\",{\"1\":{\"321\":1}}],[\"压力\",{\"1\":{\"281\":1,\"303\":1}}],[\"停机时会执行一次\",{\"1\":{\"321\":1}}],[\"停止web应用容器\",{\"0\":{\"539\":1}}],[\"停止和重新启动\",{\"1\":{\"504\":1}}],[\"停止并移除容器\",{\"1\":{\"481\":1}}],[\"停止\",{\"1\":{\"308\":1,\"372\":1,\"539\":1}}],[\"恢复程序运行\",{\"1\":{\"556\":1}}],[\"恢复\",{\"1\":{\"321\":1}}],[\"恢复数据\",{\"1\":{\"321\":1}}],[\"恢复原始配置\",{\"1\":{\"297\":1}}],[\"搭建spring\",{\"1\":{\"698\":1}}],[\"搭建子模块\",{\"0\":{\"698\":1},\"1\":{\"730\":1}}],[\"搭建哨兵集群\",{\"0\":{\"331\":1}}],[\"搭建分片集群\",{\"0\":{\"339\":1},\"1\":{\"320\":1}}],[\"搭建主从集群\",{\"1\":{\"320\":1}}],[\"搭建主从架构\",{\"0\":{\"295\":1}}],[\"哨兵和\",{\"1\":{\"360\":1}}],[\"哨兵的结构和作用如下\",{\"1\":{\"326\":1}}],[\"哨兵的作用\",{\"0\":{\"326\":1}}],[\"哨兵的作用和工作原理\",{\"0\":{\"325\":1}}],[\"哨兵\",{\"1\":{\"320\":1}}],[\"宕机等\",{\"1\":{\"387\":1}}],[\"宕机会发生什么\",{\"1\":{\"347\":1}}],[\"宕机恢复速度\",{\"1\":{\"323\":1}}],[\"宕机\",{\"1\":{\"320\":1,\"347\":1}}],[\"宕机时尽快实现故障恢复\",{\"1\":{\"303\":1}}],[\"故常常这样使用\",{\"1\":{\"619\":1}}],[\"故其是一个顺序集合\",{\"1\":{\"618\":1}}],[\"故不需要自定义\",{\"1\":{\"601\":1}}],[\"故不会影响到后面程序的执行\",{\"1\":{\"577\":1}}],[\"故使用\",{\"1\":{\"509\":1}}],[\"故\",{\"1\":{\"505\":1}}],[\"故此将学习过程记录下来有利于我对项目的更深层次理解\",{\"1\":{\"636\":1}}],[\"故此就开了\",{\"1\":{\"543\":1}}],[\"故此\",{\"1\":{\"475\":1}}],[\"故此所有的知识点也仅代表了当前时刻自己对知识的掌握\",{\"1\":{\"1\":1}}],[\"故redis\",{\"1\":{\"463\":1}}],[\"故就演示mac环境下的图形化客户端\",{\"1\":{\"375\":1}}],[\"故我们在centos操作系统内进行安装\",{\"1\":{\"368\":1}}],[\"故我们在配置\",{\"1\":{\"321\":1}}],[\"故障转移步骤有哪些\",{\"1\":{\"330\":1}}],[\"故障转移\",{\"0\":{\"347\":1},\"1\":{\"330\":1}}],[\"故障转移的步骤如下\",{\"1\":{\"329\":1}}],[\"故障\",{\"1\":{\"326\":1,\"328\":1}}],[\"故障恢复问题\",{\"1\":{\"320\":1}}],[\"~\",{\"1\":{\"313\":1,\"389\":1,\"403\":1,\"456\":1,\"458\":1,\"563\":1}}],[\"正在给\",{\"1\":{\"650\":1}}],[\"正在加载\",{\"1\":{\"650\":2}}],[\"正在运行\",{\"1\":{\"526\":1}}],[\"正因为其没有构造器\",{\"1\":{\"580\":1}}],[\"正则表达式匹配\",{\"1\":{\"313\":1}}],[\"正确安装\",{\"1\":{\"494\":1}}],[\"正确\",{\"1\":{\"3\":1,\"587\":1,\"667\":1}}],[\"路径占位符\",{\"1\":{\"313\":2}}],[\"响应式编程全套\",{\"1\":{\"768\":1}}],[\"响应数据由\",{\"1\":{\"311\":1}}],[\"响应类型\",{\"1\":{\"311\":1}}],[\"拦截\",{\"1\":{\"310\":1}}],[\"得到响应结果\",{\"1\":{\"464\":1}}],[\"得到通知说\",{\"1\":{\"410\":1}}],[\"得到的结果就如图所示\",{\"1\":{\"354\":1}}],[\"得到的结果就是\",{\"1\":{\"345\":1}}],[\"得到的就是master的数量\",{\"1\":{\"343\":1}}],[\"得到的数据为空处理\",{\"1\":{\"309\":1}}],[\"得到数据的记录值\",{\"1\":{\"127\":1}}],[\"放入元素的顺序和实际存储的顺序是相同的\",{\"1\":{\"618\":1}}],[\"放入redis连接池失败\",{\"1\":{\"309\":1}}],[\"放在try语句块之内\",{\"1\":{\"597\":1}}],[\"放一个数字\",{\"1\":{\"223\":1}}],[\"看哪里有需要\",{\"1\":{\"661\":1}}],[\"看看到底数据是否存储在redis服务器中\",{\"1\":{\"354\":1}}],[\"看看是否可以将两个页合并以优化空间使用\",{\"1\":{\"208\":1}}],[\"看到里面的nginx目录了吗\",{\"1\":{\"307\":1}}],[\"仓库内找到\",{\"1\":{\"631\":1}}],[\"仓库管理\",{\"0\":{\"531\":1}}],[\"仓库是集中存放资源的地方\",{\"1\":{\"531\":1}}],[\"仓库是集中存放\",{\"1\":{\"530\":1}}],[\"仓库是用来存储和管理\",{\"1\":{\"508\":1}}],[\"仓库中拉取\",{\"1\":{\"513\":1}}],[\"仓库中下载\",{\"1\":{\"510\":1}}],[\"仓库中下载该镜像\",{\"1\":{\"510\":1}}],[\"仓库就是存放\",{\"1\":{\"509\":1}}],[\"仓库之间的关系\",{\"0\":{\"509\":1}}],[\"仓库等\",{\"1\":{\"494\":1}}],[\"仓库\",{\"0\":{\"507\":1,\"508\":1},\"1\":{\"307\":1,\"508\":1}}],[\"你不必亲自去找好交给他\",{\"1\":{\"753\":1}}],[\"你不在代码里直接组装你的组件和服务\",{\"1\":{\"753\":1}}],[\"你需要具备一定的\",{\"1\":{\"649\":1}}],[\"你需要掌握一些常用的\",{\"1\":{\"506\":1}}],[\"你修改的是匿名内部类中的外部局部变量副本\",{\"1\":{\"580\":1}}],[\"你可以在这个环境内干任何想干的事\",{\"1\":{\"505\":1}}],[\"你可以在你的\",{\"1\":{\"307\":1}}],[\"你必须确保你正确安装了\",{\"1\":{\"494\":1}}],[\"你就可以使用下面这个命令来设定缓存的大小了\",{\"1\":{\"275\":1}}],[\"甚至于对远程后端诸如\",{\"1\":{\"306\":1}}],[\"乃至\",{\"1\":{\"306\":1}}],[\"团队自主开发\",{\"1\":{\"306\":1}}],[\"库存\",{\"1\":{\"737\":1}}],[\"库\",{\"1\":{\"306\":1,\"461\":1}}],[\"平常用\",{\"1\":{\"441\":1}}],[\"平台下的文件路径分隔符是不相同的\",{\"1\":{\"650\":1}}],[\"平台下的文件路径分隔符不一致的问题\",{\"1\":{\"650\":1}}],[\"平台下的安装教程\",{\"1\":{\"499\":1}}],[\"平台下是\",{\"1\":{\"650\":1}}],[\"平台下\",{\"1\":{\"650\":1}}],[\"平台\",{\"1\":{\"306\":1}}],[\"平均值\",{\"1\":{\"191\":1}}],[\"平均情况\",{\"1\":{\"38\":3}}],[\"安装jdk\",{\"0\":{\"604\":1}}],[\"安装打开后会自动检测系统当前的\",{\"1\":{\"498\":1}}],[\"安装成功\",{\"1\":{\"498\":1}}],[\"安装软件等\",{\"1\":{\"490\":1}}],[\"安装应用程序依赖\",{\"1\":{\"490\":1}}],[\"安装好之后\",{\"1\":{\"475\":1}}],[\"安装完redis以后\",{\"1\":{\"370\":1}}],[\"安装redis\",{\"0\":{\"368\":1},\"1\":{\"368\":1}}],[\"安装依赖\",{\"1\":{\"343\":1,\"490\":1}}],[\"安装opm工具\",{\"1\":{\"307\":1}}],[\"安装openresty仓库\",{\"1\":{\"307\":1}}],[\"安装openresty\",{\"0\":{\"306\":1},\"1\":{\"307\":1}}],[\"安装开发库\",{\"1\":{\"307\":1}}],[\"安装\",{\"0\":{\"307\":1,\"497\":1},\"1\":{\"498\":1,\"634\":3}}],[\"安全性\",{\"1\":{\"575\":1}}],[\"安全性高\",{\"1\":{\"575\":1}}],[\"安全性要求不高\",{\"1\":{\"366\":1}}],[\"安全\",{\"1\":{\"169\":1,\"661\":1}}],[\"什么关系\",{\"0\":{\"614\":1}}],[\"什么叫渐进式\",{\"1\":{\"440\":1}}],[\"什么是事务的传播行为\",{\"1\":{\"745\":1}}],[\"什么是docker镜像\",{\"0\":{\"508\":1}}],[\"什么是dockerfile\",{\"0\":{\"489\":1}}],[\"什么是nosql\",{\"0\":{\"365\":1}}],[\"什么是tcp连接\",{\"0\":{\"16\":1}}],[\"什么时候执行增量同步\",{\"1\":{\"304\":1}}],[\"什么时候执行全量同步\",{\"1\":{\"304\":1}}],[\"上有事务注解\",{\"1\":{\"745\":1}}],[\"上面定义的类\",{\"1\":{\"681\":1}}],[\"上面两个注解可以随意取名\",{\"1\":{\"650\":1}}],[\"上使用\",{\"1\":{\"678\":1}}],[\"上安装\",{\"1\":{\"634\":1}}],[\"上下文信息\",{\"1\":{\"550\":1}}],[\"上述resource实现类与resource顶级接口之间的关系可以用下面的uml关系模型来表示\",{\"1\":{\"713\":1}}],[\"上述对容器的操作都是针对容器\",{\"1\":{\"528\":1}}],[\"上述仅说明了操作\",{\"1\":{\"358\":1}}],[\"上限的问题\",{\"1\":{\"412\":1}}],[\"上图中包含了\",{\"1\":{\"727\":1}}],[\"上图中的继承关系\",{\"1\":{\"593\":1}}],[\"上图解析\",{\"1\":{\"387\":1}}],[\"上图为innodb的内存架构\",{\"1\":{\"62\":1}}],[\"上\",{\"1\":{\"345\":1,\"745\":1}}],[\"上同步数据\",{\"1\":{\"329\":1}}],[\"上的\",{\"1\":{\"303\":1}}],[\"限制字符长度必须在min到max之间\",{\"1\":{\"682\":1}}],[\"限制必须符合指定的正则表达式\",{\"1\":{\"682\":1}}],[\"限制必须为一个不小于指定值的数字\",{\"1\":{\"682\":2}}],[\"限制必须为一个不大于指定值的数字\",{\"1\":{\"682\":2}}],[\"限制必须不为null\",{\"1\":{\"682\":1}}],[\"限制\",{\"1\":{\"450\":1}}],[\"限制压缩\",{\"0\":{\"450\":1}}],[\"限制长度\",{\"1\":{\"387\":1,\"389\":1}}],[\"限制一个\",{\"1\":{\"303\":1}}],[\"限制该字段的数据不能为null\",{\"1\":{\"49\":1}}],[\"适合临时测试用\",{\"1\":{\"700\":1}}],[\"适当提高\",{\"1\":{\"303\":1}}],[\"适配器\",{\"1\":{\"283\":1}}],[\"启用无磁盘复制\",{\"1\":{\"303\":1}}],[\"启动速度快\",{\"1\":{\"677\":2}}],[\"启动并运行整个应用\",{\"1\":{\"481\":1}}],[\"启动一个新的\",{\"1\":{\"346\":1}}],[\"启动后\",{\"1\":{\"334\":1}}],[\"启动nginx\",{\"1\":{\"308\":1}}],[\"启动和运行\",{\"0\":{\"308\":1}}],[\"启动命令\",{\"1\":{\"298\":1,\"334\":1}}],[\"启动\",{\"0\":{\"298\":1,\"334\":1,\"342\":1},\"1\":{\"372\":1,\"634\":1}}],[\"断点所在行上有多个方法调用\",{\"1\":{\"551\":1}}],[\"断开时间过久\",{\"1\":{\"303\":1}}],[\"断电问题的影响\",{\"1\":{\"238\":1}}],[\"收缩大小为第一个大于等于used的2n\",{\"1\":{\"441\":1}}],[\"收缩\",{\"1\":{\"439\":1}}],[\"收到\",{\"1\":{\"401\":1}}],[\"收到接受的命令\",{\"1\":{\"302\":1}}],[\"收费\",{\"1\":{\"108\":1}}],[\"拒绝增量同步\",{\"1\":{\"302\":1}}],[\"偏移量不存在\",{\"1\":{\"399\":1}}],[\"偏移量从0开始\",{\"1\":{\"399\":1}}],[\"偏移量和\",{\"1\":{\"347\":1}}],[\"偏移量\",{\"1\":{\"302\":1}}],[\"节\",{\"1\":{\"757\":1}}],[\"节省内存是相对于普通的list来说的\",{\"1\":{\"443\":1}}],[\"节省存储空间\",{\"1\":{\"136\":1}}],[\"节点按照\",{\"1\":{\"455\":1}}],[\"节点可能包含多个指针\",{\"1\":{\"453\":1}}],[\"节点采用\",{\"1\":{\"451\":1}}],[\"节点是连续存在的\",{\"1\":{\"445\":1}}],[\"节点中保存前一个节点的大小长度\",{\"1\":{\"445\":1}}],[\"节点分配插槽\",{\"1\":{\"346\":1}}],[\"节点映射到\",{\"1\":{\"345\":1}}],[\"节点心跳失败的超时时间\",{\"1\":{\"341\":1}}],[\"节点发送\",{\"1\":{\"329\":1}}],[\"节点发现某实例未在规定时间响应\",{\"1\":{\"327\":1}}],[\"节点\",{\"1\":{\"328\":1,\"329\":1,\"332\":1,\"339\":1,\"346\":2,\"347\":1}}],[\"节点与\",{\"1\":{\"328\":1}}],[\"节点宕机怎么办\",{\"1\":{\"324\":1}}],[\"节点宕机恢复以后可以找\",{\"1\":{\"324\":1}}],[\"节点同步数据\",{\"1\":{\"324\":1}}],[\"节点断开的时间长短\",{\"1\":{\"328\":1}}],[\"节点断开又恢复\",{\"1\":{\"304\":1}}],[\"节点断开时间太久\",{\"1\":{\"304\":1}}],[\"节点时\",{\"1\":{\"304\":1}}],[\"节点第一次连接\",{\"1\":{\"304\":1}}],[\"节点数量\",{\"1\":{\"303\":1}}],[\"节点判断\",{\"1\":{\"302\":1}}],[\"节点请求增量同步\",{\"1\":{\"302\":1}}],[\"节点的运行\",{\"1\":{\"328\":1}}],[\"节点的\",{\"1\":{\"302\":1,\"328\":2}}],[\"测试无事务情况\",{\"0\":{\"738\":1}}],[\"测试增删改功能\",{\"1\":{\"731\":1}}],[\"测试运行\",{\"1\":{\"651\":1}}],[\"测试类\",{\"1\":{\"648\":1}}],[\"测试异常\",{\"1\":{\"646\":1,\"647\":1}}],[\"测试报错\",{\"1\":{\"646\":1}}],[\"测试结果\",{\"1\":{\"646\":1,\"648\":1,\"650\":1,\"665\":1,\"702\":1,\"731\":1,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":1}}],[\"测试还是生产环境\",{\"1\":{\"504\":1}}],[\"测试和生产\",{\"1\":{\"483\":1}}],[\"测试访问\",{\"1\":{\"336\":1}}],[\"测试\",{\"0\":{\"300\":1,\"335\":1,\"344\":1,\"702\":1},\"1\":{\"646\":3,\"658\":1,\"682\":1,\"683\":1,\"687\":1,\"718\":1,\"719\":1,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1}}],[\"逐渐的来满足\",{\"1\":{\"677\":1}}],[\"逐个往下查找相同文本\",{\"1\":{\"550\":1}}],[\"逐个遍历db中的bucket\",{\"1\":{\"457\":2}}],[\"逐个遍历db\",{\"1\":{\"457\":2}}],[\"逐个搬运元素到新的位置\",{\"1\":{\"434\":1}}],[\"逐个发送给\",{\"1\":{\"304\":1}}],[\"逐个拷贝\",{\"1\":{\"297\":1,\"333\":1}}],[\"逐一执行\",{\"1\":{\"297\":1}}],[\"格式的配置文件创建\",{\"1\":{\"695\":2}}],[\"格式化代码\",{\"1\":{\"552\":1}}],[\"格式如下\",{\"1\":{\"297\":1,\"321\":1,\"343\":1}}],[\"格式统一\",{\"1\":{\"110\":1}}],[\"虚拟机添加了一个用\",{\"1\":{\"678\":1}}],[\"虚拟机使用它在运行时将字节码转换为机器码\",{\"1\":{\"677\":1}}],[\"虚拟机加载已经预编译成二进制库\",{\"1\":{\"677\":1}}],[\"虚拟机运行错误\",{\"1\":{\"595\":1}}],[\"虚拟机\",{\"1\":{\"505\":1}}],[\"虚拟机是在物理硬件层面对资源的隔离\",{\"1\":{\"505\":1}}],[\"虚拟机本身有多个ip\",{\"1\":{\"297\":1}}],[\"虚拟机的任意目录下\",{\"1\":{\"289\":1}}],[\"配置一个factorybean类型的bean\",{\"1\":{\"765\":1}}],[\"配置bean\",{\"1\":{\"760\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1}}],[\"配置对应的\",{\"1\":{\"755\":1}}],[\"配置具体的事务方法\",{\"1\":{\"749\":1}}],[\"配置事务通知\",{\"1\":{\"749\":1}}],[\"配置事务通知和切入点表达式\",{\"1\":{\"749\":1}}],[\"配置数据源\",{\"1\":{\"730\":1}}],[\"配置依赖注入\",{\"1\":{\"719\":1}}],[\"配置testbean\",{\"1\":{\"718\":1}}],[\"配置spring依赖\",{\"1\":{\"707\":1}}],[\"配置messagesource\",{\"1\":{\"690\":1}}],[\"配置methodvalidationpostprocessor\",{\"1\":{\"683\":1}}],[\"配置localvalidatorfactorybean\",{\"1\":{\"682\":1}}],[\"配置切面类\",{\"1\":{\"674\":1}}],[\"配置helloworld所对应的bean\",{\"1\":{\"651\":1}}],[\"配置的一级标签\",{\"1\":{\"643\":1,\"762\":1}}],[\"配置中\",{\"1\":{\"643\":1}}],[\"配置\",{\"1\":{\"634\":1,\"641\":1,\"730\":1,\"754\":1,\"758\":2,\"759\":1,\"760\":1,\"763\":1}}],[\"配置环境变量\",{\"0\":{\"605\":1}}],[\"配置了卷\",{\"1\":{\"480\":1}}],[\"配置了工作目录\",{\"1\":{\"480\":1}}],[\"配置类\",{\"0\":{\"355\":1}}],[\"配置jedis连接池\",{\"1\":{\"349\":1}}],[\"配置读写分离\",{\"1\":{\"348\":1}}],[\"配置分片集群地址\",{\"1\":{\"348\":1}}],[\"配置项解析\",{\"1\":{\"482\":1}}],[\"配置项\",{\"1\":{\"322\":1}}],[\"配置文件命名规则\",{\"1\":{\"687\":1}}],[\"配置文件中\",{\"1\":{\"650\":1}}],[\"配置文件名称可随意命名\",{\"1\":{\"651\":1}}],[\"配置文件名\",{\"1\":{\"525\":1}}],[\"配置文件等\",{\"1\":{\"508\":1}}],[\"配置文件所在目录就是redis安装目录\",{\"1\":{\"371\":1}}],[\"配置文件所在目录也就是工作目录\",{\"1\":{\"297\":1,\"333\":1}}],[\"配置文件\",{\"1\":{\"336\":1,\"362\":1,\"634\":1,\"651\":1,\"752\":1,\"754\":1,\"755\":1,\"762\":1}}],[\"配置文件来开启\",{\"1\":{\"322\":1}}],[\"配置nginx的环境变量\",{\"1\":{\"307\":1}}],[\"配置完毕以后\",{\"1\":{\"229\":1}}],[\"角色\",{\"1\":{\"296\":1,\"340\":1}}],[\"角标访问\",{\"1\":{\"290\":1}}],[\"模板文件\",{\"1\":{\"478\":1}}],[\"模式下\",{\"1\":{\"549\":1,\"551\":2,\"553\":1,\"554\":1,\"556\":3}}],[\"模式为fast\",{\"1\":{\"457\":1}}],[\"模式为\",{\"1\":{\"457\":1}}],[\"模式中如何解决这些问题\",{\"1\":{\"412\":1}}],[\"模式中的\",{\"1\":{\"408\":1}}],[\"模式的问题\",{\"1\":{\"412\":1}}],[\"模式的存在的三个问题\",{\"1\":{\"412\":1}}],[\"模式的\",{\"1\":{\"411\":1}}],[\"模式的改进\",{\"1\":{\"409\":1}}],[\"模式最好结合非阻塞\",{\"1\":{\"410\":1}}],[\"模式可能出现的惊群现象\",{\"1\":{\"410\":1}}],[\"模式避免了\",{\"1\":{\"410\":1}}],[\"模式是对\",{\"1\":{\"409\":1}}],[\"模式做了简单改进\",{\"1\":{\"408\":1}}],[\"模式对\",{\"1\":{\"408\":1}}],[\"模拟分片集群\",{\"1\":{\"340\":1}}],[\"模拟主从集群\",{\"1\":{\"296\":1}}],[\"模型虽然很简单\",{\"1\":{\"414\":1}}],[\"模型中\",{\"1\":{\"405\":1,\"414\":1}}],[\"模型\",{\"1\":{\"306\":1}}],[\"模块组成\",{\"0\":{\"727\":1}}],[\"模块日志\",{\"1\":{\"642\":1}}],[\"模块中的aof缓冲区以及客户端状态中的输入缓冲区\",{\"1\":{\"430\":1}}],[\"模块中\",{\"1\":{\"430\":1}}],[\"模块支持\",{\"1\":{\"311\":1}}],[\"模块\",{\"1\":{\"306\":2,\"309\":1,\"311\":2}}],[\"模糊匹配\",{\"1\":{\"189\":1}}],[\"模糊查询\",{\"1\":{\"131\":1}}],[\"共性较少\",{\"1\":{\"471\":1}}],[\"共包含\",{\"1\":{\"468\":1}}],[\"共包含三个节点\",{\"1\":{\"296\":1}}],[\"共有\",{\"1\":{\"467\":1}}],[\"共计\",{\"1\":{\"432\":1}}],[\"共1024个bit位\",{\"1\":{\"407\":1}}],[\"共\",{\"1\":{\"345\":1}}],[\"共享主机的资源\",{\"1\":{\"504\":1}}],[\"共享连接信息\",{\"1\":{\"484\":1}}],[\"共享对象只能被字典和双向链表这类能带有指针的数据结构使用\",{\"1\":{\"471\":1}}],[\"共享内存空间\",{\"1\":{\"321\":1}}],[\"共享字典\",{\"1\":{\"309\":1}}],[\"共享\",{\"1\":{\"146\":1}}],[\"共享锁\",{\"1\":{\"82\":1,\"149\":1}}],[\"版本正式发布以来\",{\"1\":{\"725\":1}}],[\"版本开始提供了对注解技术的全面支持\",{\"1\":{\"641\":1}}],[\"版本信息\",{\"1\":{\"608\":1}}],[\"版本控制更新项目\",{\"1\":{\"549\":1}}],[\"版本控制提交项目\",{\"1\":{\"549\":1}}],[\"版本控制\",{\"1\":{\"504\":1}}],[\"版本后新加的\",{\"1\":{\"448\":1}}],[\"版本中引入了多线程\",{\"1\":{\"463\":1}}],[\"版本中\",{\"1\":{\"423\":1}}],[\"版本中成为与\",{\"1\":{\"423\":1}}],[\"版本引入了\",{\"1\":{\"423\":1}}],[\"版本之后分为\",{\"1\":{\"503\":1}}],[\"版本之后\",{\"1\":{\"418\":1}}],[\"版本之前\",{\"1\":{\"418\":1}}],[\"版本新增加的数据结构\",{\"1\":{\"387\":1}}],[\"版本通过内嵌支持\",{\"1\":{\"384\":1}}],[\"版本以后被称为\",{\"1\":{\"295\":1}}],[\"版本链数据访问规则\",{\"0\":{\"88\":1}}],[\"版本链\",{\"0\":{\"86\":1}}],[\"布尔表达式的值为\",{\"1\":{\"569\":1}}],[\"布尔表达式为否时\",{\"1\":{\"565\":1}}],[\"布尔表达式为真时\",{\"1\":{\"565\":2}}],[\"布尔表达式为\",{\"1\":{\"292\":2}}],[\"布尔表达式\",{\"1\":{\"292\":1,\"565\":6,\"569\":1,\"570\":1}}],[\"布隆过滤\",{\"1\":{\"272\":1}}],[\"之父\",{\"1\":{\"725\":1}}],[\"之后一个容器\",{\"1\":{\"753\":1}}],[\"之后重新启动服务\",{\"1\":{\"475\":1}}],[\"之后的元素到\",{\"1\":{\"434\":1}}],[\"之后的命令给\",{\"1\":{\"304\":1}}],[\"之后的代码会被执行\",{\"1\":{\"292\":1}}],[\"之所以叫做动态字符串\",{\"1\":{\"429\":1}}],[\"之前事务被挂起\",{\"1\":{\"745\":1}}],[\"之前的版本是\",{\"1\":{\"448\":1}}],[\"之前加上了一段字符\",{\"1\":{\"354\":1}}],[\"之前\",{\"1\":{\"306\":1,\"358\":1,\"506\":1,\"642\":1,\"649\":1,\"695\":1,\"751\":1,\"752\":1}}],[\"之间进行转化\",{\"1\":{\"562\":1}}],[\"之间的随机数\",{\"1\":{\"455\":1,\"458\":1}}],[\"之间的关系\",{\"1\":{\"383\":1}}],[\"之间的同步\",{\"1\":{\"302\":1}}],[\"之间通过\",{\"1\":{\"339\":1}}],[\"之间写入数据有丢失的风险\",{\"1\":{\"321\":1}}],[\"之间相差的天数\",{\"1\":{\"57\":1}}],[\"紧跟在\",{\"1\":{\"292\":1}}],[\"里氏代换原则\",{\"1\":{\"586\":1}}],[\"里面\",{\"1\":{\"671\":1}}],[\"里面的\",{\"1\":{\"512\":1}}],[\"里面的元素\",{\"1\":{\"427\":1}}],[\"里面可以缓存磁盘上经常操作的真实数据\",{\"1\":{\"63\":1}}],[\"里\",{\"1\":{\"290\":1}}],[\"初识\",{\"0\":{\"288\":1}}],[\"初始大小为16mb\",{\"1\":{\"71\":1}}],[\"初始化\",{\"1\":{\"764\":1}}],[\"初始化之后调用\",{\"1\":{\"764\":1}}],[\"初始化之后\",{\"1\":{\"764\":1}}],[\"初始化之前调用\",{\"1\":{\"764\":1}}],[\"初始化之前\",{\"1\":{\"764\":1}}],[\"初始化时如果未指定容量\",{\"1\":{\"622\":1}}],[\"初始化语句\",{\"1\":{\"568\":1}}],[\"初始化服务\",{\"1\":{\"464\":1}}],[\"初始化为空哈希表\",{\"1\":{\"440\":2}}],[\"初始化为空链表\",{\"1\":{\"39\":1}}],[\"初始化表\",{\"1\":{\"37\":1}}],[\"规范提案\",{\"1\":{\"647\":1}}],[\"规范子类\",{\"1\":{\"591\":1}}],[\"规范了基于\",{\"1\":{\"283\":1}}],[\"规则选择\",{\"1\":{\"285\":1}}],[\"原理手写ioc\",{\"0\":{\"649\":1}}],[\"原文地址\",{\"1\":{\"283\":1}}],[\"原子性\",{\"1\":{\"76\":1,\"88\":1,\"259\":1,\"733\":1}}],[\"原子类型\",{\"1\":{\"34\":1}}],[\"持续部署\",{\"1\":{\"504\":1}}],[\"持续计算缓存的访问统计指标\",{\"1\":{\"283\":1}}],[\"持久化层支持jar包\",{\"1\":{\"730\":1}}],[\"持久化文件存放目录\",{\"1\":{\"341\":1}}],[\"持久化方式\",{\"1\":{\"323\":1}}],[\"持久性\",{\"1\":{\"76\":1,\"88\":1,\"259\":1,\"733\":1}}],[\"或其子类\",{\"1\":{\"752\":1}}],[\"或注解\",{\"1\":{\"696\":1}}],[\"或低于\",{\"1\":{\"647\":1}}],[\"或默认\",{\"1\":{\"583\":1}}],[\"或\",{\"1\":{\"549\":4,\"551\":2,\"552\":1,\"553\":3,\"556\":1,\"650\":1}}],[\"或这些\",{\"1\":{\"401\":1}}],[\"或多个\",{\"1\":{\"401\":2}}],[\"或移除\",{\"1\":{\"283\":1}}],[\"或者通过\",{\"1\":{\"719\":1}}],[\"或者叫做bean对象之间关系的维护\",{\"1\":{\"694\":1}}],[\"或者您想学习\",{\"1\":{\"506\":1}}],[\"或者您可以将\",{\"1\":{\"474\":1}}],[\"或者双击\",{\"1\":{\"498\":1}}],[\"或者消除对一个对象的引用之后\",{\"1\":{\"472\":1}}],[\"或者slaveof\",{\"1\":{\"299\":1}}],[\"或者一键修改\",{\"1\":{\"297\":1}}],[\"或者在空闲时间完成对失效数据的驱逐\",{\"1\":{\"285\":1}}],[\"或者有些sql本应该很快执行完毕\",{\"1\":{\"229\":1}}],[\"或者\",{\"1\":{\"168\":1,\"175\":1,\"189\":4,\"231\":2,\"258\":1,\"290\":1,\"342\":1,\"419\":1,\"439\":1,\"580\":1,\"752\":1}}],[\"或者四次\",{\"0\":{\"18\":1}}],[\"驱逐\",{\"1\":{\"283\":1}}],[\"直至dict\",{\"1\":{\"440\":1}}],[\"直至数据处理完成\",{\"1\":{\"410\":1}}],[\"直到满足添加数据的需求为止\",{\"1\":{\"627\":1}}],[\"直到bin目录为止\",{\"1\":{\"606\":1}}],[\"直到内核处理才开始停止轮训\",{\"1\":{\"405\":1}}],[\"直到它们被从缓存当中手动移除\",{\"1\":{\"283\":1}}],[\"直接开启一个新事务\",{\"1\":{\"745\":1}}],[\"直接利用依赖注入\",{\"1\":{\"719\":1}}],[\"直接将\",{\"1\":{\"677\":1}}],[\"直接将数据保存在\",{\"1\":{\"417\":1}}],[\"直接执行finally语句\",{\"1\":{\"600\":1}}],[\"直接执行第\",{\"1\":{\"347\":1}}],[\"直接停止\",{\"1\":{\"597\":1}}],[\"直接通过类名调用\",{\"1\":{\"585\":1}}],[\"直接使用\",{\"1\":{\"500\":1}}],[\"直接使用索引对相关的信息进行查询\",{\"1\":{\"215\":1}}],[\"直接结束并返回失败\",{\"1\":{\"434\":1}}],[\"直接读一行\",{\"1\":{\"424\":1}}],[\"直接拷贝到用户空间的指定位置\",{\"1\":{\"412\":1}}],[\"直接能定位到就绪的\",{\"1\":{\"406\":1}}],[\"直接进入下一次循环\",{\"1\":{\"253\":2}}],[\"直接进行函数的调用即可\",{\"1\":{\"241\":1}}],[\"直接进行查询即可\",{\"1\":{\"212\":1}}],[\"直接在\",{\"1\":{\"444\":1,\"512\":1}}],[\"直接在select语句之前加上关键字\",{\"1\":{\"231\":1}}],[\"直接在mysql官方网站\",{\"1\":{\"107\":1}}],[\"直接按行进行累加\",{\"1\":{\"223\":3}}],[\"直接简写为limit\",{\"1\":{\"194\":1}}],[\"场景实战\",{\"1\":{\"768\":1}}],[\"场景模拟\",{\"0\":{\"655\":1,\"748\":1},\"1\":{\"766\":1}}],[\"场景\",{\"1\":{\"282\":2}}],[\"处理用户端发送的请求\",{\"1\":{\"634\":1}}],[\"处理管理端发送的请求\",{\"1\":{\"634\":1}}],[\"处理函数不能及时处理可能导致信号队列溢出\",{\"1\":{\"413\":1}}],[\"处理的每一个写命令都会记录在\",{\"1\":{\"322\":1}}],[\"处理后返回数据\",{\"1\":{\"310\":1}}],[\"处理\",{\"1\":{\"281\":1,\"464\":1}}],[\"处放入\",{\"1\":{\"38\":1}}],[\"请不要使用它\",{\"1\":{\"711\":1}}],[\"请在\",{\"1\":{\"475\":1}}],[\"请在创建表时使用not\",{\"1\":{\"136\":1}}],[\"请求并管理\",{\"1\":{\"474\":1}}],[\"请求时\",{\"1\":{\"406\":1}}],[\"请求头\",{\"1\":{\"313\":2}}],[\"请求\",{\"1\":{\"310\":1,\"404\":1}}],[\"请求要经过\",{\"1\":{\"281\":1}}],[\"店铺详情查询的缓存\",{\"1\":{\"276\":1}}],[\"店铺类型的查询缓存\",{\"1\":{\"276\":1}}],[\"好处3\",{\"1\":{\"735\":1}}],[\"好处2\",{\"1\":{\"735\":1}}],[\"好处1\",{\"1\":{\"735\":1}}],[\"好\",{\"1\":{\"276\":1,\"505\":1}}],[\"差异\",{\"1\":{\"406\":1}}],[\"差别在于无数据时的处理方式\",{\"1\":{\"406\":1}}],[\"差集\",{\"1\":{\"381\":1,\"420\":1}}],[\"差集等功能\",{\"1\":{\"381\":1}}],[\"差\",{\"1\":{\"276\":1,\"505\":1}}],[\"编译的本机可执行文件\",{\"1\":{\"678\":1}}],[\"编译器或作为提前\",{\"1\":{\"678\":1}}],[\"编译器支持\",{\"1\":{\"677\":1}}],[\"编译指的则是\",{\"1\":{\"677\":1}}],[\"编译能直接将源代码转化为机器码\",{\"1\":{\"677\":1}}],[\"编译\",{\"1\":{\"677\":1}}],[\"编译时异常不回滚\",{\"1\":{\"743\":1}}],[\"编译时异常\",{\"1\":{\"595\":1}}],[\"编译看右边\",{\"1\":{\"577\":1}}],[\"编译看左边\",{\"1\":{\"577\":1}}],[\"编译过程中\",{\"1\":{\"577\":1}}],[\"编译不通过\",{\"1\":{\"577\":1}}],[\"编译后注释会被编译器完全去除\",{\"1\":{\"560\":1}}],[\"编译选中的文件\",{\"1\":{\"553\":1}}],[\"编辑源\",{\"1\":{\"556\":1}}],[\"编辑器最大化\",{\"1\":{\"553\":1}}],[\"编辑窗口切换\",{\"1\":{\"549\":1}}],[\"编号\",{\"1\":{\"468\":1,\"469\":1}}],[\"编码方式\",{\"0\":{\"468\":1},\"1\":{\"458\":1,\"466\":1,\"468\":1,\"469\":1}}],[\"编码分为字符串和整数两种类型\",{\"1\":{\"444\":1}}],[\"编码\",{\"1\":{\"417\":2,\"418\":2,\"419\":2,\"420\":2,\"434\":1}}],[\"编写真正的校验类\",{\"1\":{\"684\":1}}],[\"编写的高级即时\",{\"1\":{\"678\":1}}],[\"编写的函数\",{\"1\":{\"290\":1}}],[\"编写规则\",{\"0\":{\"492\":1}}],[\"编写测试类\",{\"1\":{\"362\":1}}],[\"编写测试类并与redis建立连接\",{\"1\":{\"353\":1}}],[\"编写一个\",{\"0\":{\"355\":1},\"1\":{\"356\":1}}],[\"编写一个操作数据的方法\",{\"1\":{\"353\":1}}],[\"编写item\",{\"0\":{\"312\":1}}],[\"编写业务逻辑\",{\"1\":{\"276\":1}}],[\"编程式\",{\"1\":{\"735\":1}}],[\"编程式的实现方式存在缺陷\",{\"1\":{\"734\":1}}],[\"编程式事务\",{\"0\":{\"734\":1}}],[\"编程在单个应用程序中利用流行语言的最佳功能和库\",{\"1\":{\"678\":1}}],[\"编程语言客户端也有很多种\",{\"1\":{\"376\":1}}],[\"编程语言客户端\",{\"0\":{\"376\":1},\"1\":{\"373\":1}}],[\"编程语言中的函数\",{\"1\":{\"241\":1}}],[\"编程学习知识库\",{\"0\":{\"0\":1}}],[\"下的资源文件\",{\"1\":{\"708\":1}}],[\"下是\",{\"1\":{\"650\":2}}],[\"下制造了一个隔离的文件环境\",{\"1\":{\"499\":1}}],[\"下载之后解压\",{\"1\":{\"634\":1}}],[\"下载解压以后\",{\"1\":{\"630\":1}}],[\"下载链接\",{\"1\":{\"630\":1,\"631\":1}}],[\"下载即可\",{\"1\":{\"604\":1}}],[\"下载\",{\"0\":{\"603\":1}}],[\"下载好的文件\",{\"1\":{\"498\":1}}],[\"下载好的文件为\",{\"1\":{\"498\":1}}],[\"下载地址\",{\"1\":{\"498\":1,\"634\":1}}],[\"下载公共镜像\",{\"1\":{\"476\":1}}],[\"下一步\",{\"1\":{\"554\":1}}],[\"下一个\",{\"1\":{\"438\":1}}],[\"下一次启动\",{\"1\":{\"321\":1}}],[\"下标在bitmap中成为偏移量\",{\"1\":{\"399\":1}}],[\"下图展示了频道\",{\"1\":{\"383\":1}}],[\"下次查询时更新缓存\",{\"1\":{\"276\":2}}],[\"下面分别对这些模块的作用进行简单介绍\",{\"1\":{\"727\":1}}],[\"下面我们对其进行端口的自定义操作\",{\"1\":{\"537\":1}}],[\"下面我们来具体举例说明\",{\"1\":{\"23\":1}}],[\"下面来学习关于\",{\"1\":{\"510\":1}}],[\"下面的下载是\",{\"1\":{\"499\":1}}],[\"下面\",{\"1\":{\"311\":2}}],[\"下面是一个简单的自定义异常类\",{\"1\":{\"601\":1}}],[\"下面是一个更复杂的docker\",{\"1\":{\"482\":1}}],[\"下面是\",{\"1\":{\"290\":1}}],[\"下面是innodb架构图\",{\"1\":{\"61\":1}}],[\"兼顾访问性能和内存空间开销\",{\"1\":{\"275\":1}}],[\"兼容和互斥\",{\"1\":{\"149\":1}}],[\"兼容\",{\"1\":{\"147\":1}}],[\"到事务开始前的状态\",{\"1\":{\"733\":1}}],[\"到底是哪里出现问题了\",{\"1\":{\"636\":1}}],[\"到底是单线程还是多线程\",{\"1\":{\"460\":1}}],[\"到数组的\",{\"1\":{\"623\":1}}],[\"到列表的末尾\",{\"1\":{\"623\":1}}],[\"到处运行\",{\"1\":{\"613\":2}}],[\"到期后就立刻删除\",{\"1\":{\"457\":1}}],[\"到期后\",{\"1\":{\"457\":1}}],[\"到期后自动删除缓存\",{\"1\":{\"276\":1}}],[\"到期就立刻删除呢\",{\"1\":{\"456\":1}}],[\"到内核空间\",{\"1\":{\"412\":1}}],[\"到之前的集群\",{\"1\":{\"346\":1}}],[\"到\",{\"1\":{\"275\":1,\"304\":2,\"455\":1}}],[\"被嵌套的事务可以独立于外层事务进行提交或回滚\",{\"1\":{\"745\":1}}],[\"被套用了切面逻辑的方法就被切面给增强了\",{\"1\":{\"661\":1}}],[\"被代理的目标类编译得到的字节码文件\",{\"1\":{\"663\":1}}],[\"被代理的目标对象\",{\"1\":{\"661\":1}}],[\"被代理\",{\"1\":{\"656\":1}}],[\"被抑制的异常会由\",{\"1\":{\"600\":1}}],[\"被访问都计数\",{\"1\":{\"458\":1}}],[\"被访问完以后\",{\"1\":{\"275\":1}}],[\"被哈希函数映射到同一个位置的情况\",{\"1\":{\"437\":1}}],[\"被其他命令所改动\",{\"1\":{\"401\":1}}],[\"被该注解修饰的方法会在每次执行其他方法后执行\",{\"1\":{\"353\":1}}],[\"被该注解修饰的方法每次执行其他方法前自动执行\",{\"1\":{\"353\":1}}],[\"被修改\",{\"1\":{\"321\":3}}],[\"被反复执行的程序被称为循环体\",{\"1\":{\"291\":1}}],[\"被使用过的page\",{\"1\":{\"63\":1}}],[\"被使用的page\",{\"1\":{\"63\":1}}],[\"突然失效\",{\"1\":{\"274\":1}}],[\"利用aop可以对业务逻辑的各个部分进行隔离\",{\"1\":{\"660\":1}}],[\"利用两个\",{\"1\":{\"456\":1}}],[\"利用链表解决了\",{\"1\":{\"412\":1}}],[\"利用插槽机制实现动态扩容\",{\"1\":{\"320\":1}}],[\"利用redis\",{\"1\":{\"300\":3}}],[\"利用\",{\"1\":{\"273\":1,\"276\":1,\"285\":1,\"320\":1,\"347\":1}}],[\"增强的\",{\"1\":{\"568\":1}}],[\"增强\",{\"1\":{\"568\":1,\"661\":2}}],[\"增强id的复杂度\",{\"1\":{\"272\":1}}],[\"增删改查效率与红黑树基本一致\",{\"1\":{\"455\":1}}],[\"增或者删较大数据时有可能发生连续更新问题\",{\"1\":{\"446\":1}}],[\"增加构造方法\",{\"1\":{\"646\":2}}],[\"增加了对注解\",{\"1\":{\"641\":1}}],[\"增加了更多数据类型并且支持\",{\"1\":{\"423\":1}}],[\"增加多个元素\",{\"1\":{\"619\":1}}],[\"增加一个元素\",{\"1\":{\"619\":1}}],[\"增加日志缓冲区的大小可以节省磁盘io\",{\"1\":{\"65\":1}}],[\"增量同步\",{\"0\":{\"303\":1},\"1\":{\"304\":1}}],[\"额外的内存消耗\",{\"1\":{\"272\":1}}],[\"造成了极大的资源浪费\",{\"1\":{\"356\":1}}],[\"造成资源的浪费\",{\"1\":{\"272\":1}}],[\"造成的影响\",{\"1\":{\"225\":1}}],[\"频繁请求\",{\"1\":{\"272\":1}}],[\"代名词\",{\"1\":{\"725\":1}}],[\"代理对象需要实现的方法\",{\"1\":{\"658\":1}}],[\"代理对象\",{\"1\":{\"658\":1}}],[\"代理\",{\"1\":{\"656\":1,\"661\":1}}],[\"代理模式\",{\"0\":{\"656\":1},\"1\":{\"656\":1}}],[\"代码的结构基本是确定的\",{\"1\":{\"735\":1}}],[\"代码的耦合性较高\",{\"1\":{\"576\":1}}],[\"代码就没有得到复用\",{\"1\":{\"734\":1}}],[\"代码复用性不高\",{\"1\":{\"734\":1}}],[\"代码中获取\",{\"1\":{\"719\":1}}],[\"代码编译成独立的本机可执行文件或本机共享库\",{\"1\":{\"679\":1}}],[\"代码增强\",{\"1\":{\"661\":1}}],[\"代码仓库\",{\"0\":{\"638\":1},\"1\":{\"653\":1,\"769\":1}}],[\"代码仓库是存放代码的\",{\"1\":{\"531\":1}}],[\"代码块退出时\",{\"1\":{\"600\":1}}],[\"代码块的执行过程中\",{\"1\":{\"600\":1}}],[\"代码块内的语句\",{\"1\":{\"600\":1}}],[\"代码块\",{\"1\":{\"600\":2}}],[\"代码块中不同的是\",{\"1\":{\"600\":1}}],[\"代码块中\",{\"1\":{\"600\":1}}],[\"代码块注释\",{\"1\":{\"553\":1}}],[\"代码自动生成\",{\"1\":{\"550\":1}}],[\"代码详情\",{\"1\":{\"313\":1,\"434\":3,\"449\":6,\"634\":1}}],[\"代码维护成本\",{\"1\":{\"271\":1}}],[\"代表想要存进\",{\"1\":{\"619\":1}}],[\"代表\",{\"1\":{\"526\":1}}],[\"代表这个仓库源的不同个版本\",{\"1\":{\"511\":1}}],[\"代表不压缩\",{\"1\":{\"450\":1}}],[\"代表rehash结束\",{\"1\":{\"440\":1}}],[\"代表是创建集群\",{\"1\":{\"343\":1}}],[\"代表集群操作命令\",{\"1\":{\"343\":1}}],[\"代表所有\",{\"1\":{\"198\":1}}],[\"代表可选参数\",{\"1\":{\"179\":1}}],[\"代表的是当前的事务id\",{\"1\":{\"88\":1}}],[\"黑马程序员spring教程\",{\"1\":{\"653\":1}}],[\"黑马程序员相关教程中提供的项目环境搭建使用的是\",{\"1\":{\"636\":1}}],[\"黑马程序员\",{\"1\":{\"268\":1,\"639\":1}}],[\"菜鸟教程\",{\"1\":{\"268\":1}}],[\"五种数据类型的底层结构关系\",{\"0\":{\"416\":1},\"1\":{\"267\":1}}],[\"集成测试支持\",{\"1\":{\"727\":1}}],[\"集成aspectj\",{\"1\":{\"727\":1}}],[\"集中式完成的\",{\"1\":{\"440\":1}}],[\"集群\",{\"1\":{\"360\":1}}],[\"集群伸缩就是集群节点能够动态的增加和减少\",{\"1\":{\"346\":1}}],[\"集群伸缩\",{\"0\":{\"346\":1}}],[\"集群操作时\",{\"1\":{\"344\":1}}],[\"集群管理以及集成到了redis\",{\"1\":{\"343\":1}}],[\"集群的配置文件名称\",{\"1\":{\"341\":1}}],[\"集群中有多个\",{\"1\":{\"339\":1}}],[\"集群监管下的\",{\"1\":{\"336\":1}}],[\"集群结构\",{\"0\":{\"296\":1,\"332\":1,\"340\":1}}],[\"集群提高服务的可用性\",{\"1\":{\"273\":1}}],[\"集群最佳实践\",{\"0\":{\"280\":1},\"1\":{\"266\":1}}],[\"集合配置\",{\"1\":{\"760\":1}}],[\"集合来进行存储\",{\"1\":{\"693\":1}}],[\"集合框架\",{\"0\":{\"628\":1}}],[\"集合提供了三个构造方法\",{\"1\":{\"622\":1}}],[\"集合对象\",{\"1\":{\"471\":2}}],[\"集合对象set\",{\"0\":{\"420\":1}}],[\"集合类型属性赋值\",{\"0\":{\"760\":1},\"1\":{\"760\":1}}],[\"集合类型有字典和整数集合两种不同的底层实现方式\",{\"1\":{\"466\":1}}],[\"集合类型的一种实现方式\",{\"1\":{\"432\":1}}],[\"集合\",{\"0\":{\"381\":1},\"1\":{\"35\":1,\"469\":1,\"568\":1,\"760\":2}}],[\"批处理优化\",{\"0\":{\"269\":1},\"1\":{\"266\":1}}],[\"批量操作在发送\",{\"1\":{\"401\":1}}],[\"批量获取多个hash类型key的field的值\",{\"1\":{\"379\":1}}],[\"批量添加多个string类型的键值对\",{\"1\":{\"378\":1}}],[\"批量添加数据\",{\"1\":{\"182\":1}}],[\"批量插入速度\",{\"1\":{\"238\":1}}],[\"批量插入\",{\"0\":{\"201\":1}}],[\"缓存和\",{\"1\":{\"283\":1}}],[\"缓存和数据库整合为一个服务\",{\"1\":{\"277\":1}}],[\"缓存数据量较小\",{\"1\":{\"282\":1}}],[\"缓存数据量较大\",{\"1\":{\"282\":1}}],[\"缓存在日常开发中起着至关重要的作用\",{\"1\":{\"282\":1}}],[\"缓存失效时\",{\"1\":{\"281\":1}}],[\"缓存更新策略\",{\"0\":{\"276\":1}}],[\"缓存淘汰策略\",{\"0\":{\"278\":1},\"1\":{\"275\":1}}],[\"缓存被写满是不可避免的\",{\"1\":{\"275\":1}}],[\"缓存中的元素时将会进行通知\",{\"1\":{\"283\":1}}],[\"缓存中会存在大量的永远不会被访问的数据\",{\"1\":{\"275\":1}}],[\"缓存中不存在\",{\"1\":{\"272\":1}}],[\"缓存污染会随着数据的持续增加而逐渐显露\",{\"1\":{\"275\":1}}],[\"缓存污染问题指的是缓存中一些只会被访问一次或者几次的数据\",{\"1\":{\"275\":1}}],[\"缓存污染\",{\"0\":{\"275\":1}}],[\"缓存击穿指并发查同一条数据\",{\"1\":{\"274\":1}}],[\"缓存击穿问题也叫热点\",{\"1\":{\"274\":1}}],[\"缓存击穿\",{\"0\":{\"274\":1}}],[\"缓存雪崩是不同数据都过期了\",{\"1\":{\"274\":1}}],[\"缓存雪崩是指在同一时间段内\",{\"1\":{\"273\":1}}],[\"缓存雪崩\",{\"0\":{\"273\":1}}],[\"缓存空对象\",{\"1\":{\"272\":1}}],[\"缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在\",{\"1\":{\"272\":1}}],[\"缓存穿透\",{\"0\":{\"272\":1}}],[\"缓存就是数据交换的缓冲区\",{\"1\":{\"271\":1}}],[\"缓存\",{\"0\":{\"271\":1},\"1\":{\"285\":1}}],[\"缓存同步\",{\"0\":{\"279\":1},\"1\":{\"266\":1}}],[\"缓存问题\",{\"0\":{\"270\":1},\"1\":{\"266\":1}}],[\"缓冲区\",{\"1\":{\"322\":2,\"464\":1}}],[\"缓冲区大小\",{\"1\":{\"65\":1}}],[\"缓冲池以page页为单位\",{\"1\":{\"63\":1}}],[\"缓冲池是主内存中的一个区域\",{\"1\":{\"63\":1}}],[\"缓冲池\",{\"0\":{\"63\":1}}],[\"串行化\",{\"1\":{\"261\":1,\"744\":2}}],[\"幻读\",{\"1\":{\"260\":1,\"261\":1,\"744\":1}}],[\"问题\",{\"1\":{\"260\":1,\"274\":1}}],[\"属性赋值\",{\"1\":{\"758\":1}}],[\"属性注入\",{\"1\":{\"646\":1}}],[\"属性上\",{\"1\":{\"646\":2}}],[\"属性设置\",{\"1\":{\"643\":1}}],[\"属性又称为字段或成员变量\",{\"1\":{\"582\":1}}],[\"属性和方法\",{\"0\":{\"572\":1}}],[\"属性\",{\"0\":{\"582\":1},\"1\":{\"472\":1,\"572\":1,\"650\":1,\"651\":1}}],[\"属性从1个字节变为5个字节\",{\"1\":{\"445\":1}}],[\"属性表示的长度来判断字符串是否结束\",{\"1\":{\"427\":1}}],[\"属性的值有两种\",{\"1\":{\"258\":1}}],[\"属于结构型模式\",{\"1\":{\"656\":1}}],[\"属于该类型\",{\"1\":{\"290\":1}}],[\"属于服务器层面\",{\"1\":{\"244\":1}}],[\"属于oracle旗下\",{\"1\":{\"106\":1}}],[\"比父类被重写方法更好访问\",{\"1\":{\"586\":1}}],[\"比如用户注册的时候\",{\"1\":{\"680\":1}}],[\"比如指定是哪个类或者哪个对象的方法\",{\"1\":{\"585\":1}}],[\"比如列表对象\",{\"1\":{\"471\":1}}],[\"比如成功时返回的ok\",{\"1\":{\"471\":1}}],[\"比如现在执行lpop命令\",{\"1\":{\"470\":1}}],[\"比如对元素进行添加\",{\"1\":{\"466\":1}}],[\"比如删除一个列表键和删除一个字符串键的操作过程是不一样的\",{\"1\":{\"466\":1}}],[\"比如查找12\",{\"1\":{\"452\":1}}],[\"比如服务端处理客户端socket\",{\"1\":{\"406\":1}}],[\"比如jpg图片或者序列化的对象\",{\"1\":{\"378\":1}}],[\"比如string\",{\"1\":{\"293\":1}}],[\"比如\",{\"1\":{\"275\":1,\"307\":1,\"461\":3,\"550\":2,\"595\":1,\"661\":1,\"704\":1}}],[\"比如数据表a中的一条值对应数据表b中的一条值\",{\"1\":{\"92\":1}}],[\"比较繁琐\",{\"1\":{\"734\":1}}],[\"比较\",{\"1\":{\"256\":1,\"408\":1}}],[\"终止执行当前程序\",{\"1\":{\"255\":1}}],[\"游标名称\",{\"1\":{\"254\":4}}],[\"游标的使用包括游标的声明\",{\"1\":{\"254\":1}}],[\"游标cursor是用来存储查询结果的数据类型\",{\"1\":{\"254\":1}}],[\"游标\",{\"0\":{\"254\":1},\"1\":{\"387\":1}}],[\"声明式\",{\"1\":{\"735\":1}}],[\"声明式事务默认只针对运行时异常回滚\",{\"1\":{\"743\":1}}],[\"声明式事务\",{\"0\":{\"735\":1}}],[\"声明计算器接口\",{\"1\":{\"655\":1}}],[\"声明容器将监听的端口\",{\"1\":{\"493\":1}}],[\"声明应用程序将监听的端口\",{\"1\":{\"490\":1}}],[\"声明自己的\",{\"1\":{\"302\":1}}],[\"声明数组\",{\"1\":{\"290\":1}}],[\"声明数字\",{\"1\":{\"290\":1}}],[\"声明布尔类型\",{\"1\":{\"290\":1}}],[\"声明字符串\",{\"1\":{\"290\":1}}],[\"声明变量的时候\",{\"1\":{\"290\":1}}],[\"声明游标\",{\"1\":{\"254\":1}}],[\"声明\",{\"1\":{\"246\":1,\"290\":1,\"668\":1}}],[\"访问和url访问\",{\"1\":{\"710\":1}}],[\"访问类路径下资源\",{\"0\":{\"708\":1}}],[\"访问文件系统资源\",{\"0\":{\"709\":1},\"1\":{\"707\":1,\"709\":1}}],[\"访问网络资源\",{\"1\":{\"707\":2}}],[\"访问基于http协议的网络资源\",{\"1\":{\"707\":1}}],[\"访问项目\",{\"1\":{\"634\":1}}],[\"访问oracle官网\",{\"1\":{\"603\":1}}],[\"访问修饰符\",{\"1\":{\"572\":2,\"583\":2}}],[\"访问次数会随时间缩减\",{\"1\":{\"458\":1}}],[\"访问共享内存\",{\"1\":{\"321\":1}}],[\"访问\",{\"1\":{\"290\":2,\"537\":1,\"634\":1,\"708\":1,\"710\":1}}],[\"访问缓存有网络开销\",{\"1\":{\"282\":1}}],[\"访问之前\",{\"1\":{\"246\":1}}],[\"访问速度快\",{\"1\":{\"237\":1,\"238\":1,\"239\":1}}],[\"名\",{\"1\":{\"517\":1,\"549\":1}}],[\"名字分别叫s1\",{\"1\":{\"333\":1}}],[\"名字分别叫7001\",{\"1\":{\"297\":1}}],[\"名称空间\",{\"1\":{\"762\":1}}],[\"名称叫做\",{\"1\":{\"309\":1}}],[\"名称\",{\"1\":{\"242\":1,\"398\":1}}],[\"名为\",{\"1\":{\"129\":1,\"650\":1,\"754\":1,\"762\":1}}],[\"封装起来后\",{\"1\":{\"735\":1}}],[\"封装通知方法的类\",{\"1\":{\"661\":1}}],[\"封装这些非核心逻辑的类\",{\"1\":{\"656\":1}}],[\"封装是将对象的属性和方法封装在一个类的内部\",{\"1\":{\"575\":1}}],[\"封装http请求工具\",{\"0\":{\"314\":1}}],[\"封装函数\",{\"1\":{\"309\":1}}],[\"封装\",{\"0\":{\"575\":1},\"1\":{\"241\":1,\"574\":1}}],[\"太大的表无法缓存在内存中\",{\"1\":{\"239\":1}}],[\"低8位记录逻辑访问次数\",{\"1\":{\"458\":1}}],[\"低延迟\",{\"1\":{\"367\":1}}],[\"低一致性需求\",{\"1\":{\"276\":1}}],[\"低\",{\"1\":{\"238\":3,\"276\":1,\"323\":2,\"505\":2}}],[\"高级工具在\",{\"1\":{\"678\":1}}],[\"高于jdk11\",{\"1\":{\"647\":1}}],[\"高亮消失\",{\"1\":{\"553\":1}}],[\"高亮显示所有该选中文本\",{\"1\":{\"553\":1}}],[\"高16位以分钟为单位记录最近一次访问时间\",{\"1\":{\"458\":1}}],[\"高并发写的问题\",{\"1\":{\"339\":1}}],[\"高并发读的问题\",{\"1\":{\"339\":1}}],[\"高一致性需求\",{\"1\":{\"276\":1}}],[\"高\",{\"1\":{\"238\":4,\"276\":1,\"323\":2,\"505\":2}}],[\"高度为3时\",{\"1\":{\"128\":1}}],[\"高度为2时\",{\"1\":{\"128\":1}}],[\"崩溃修复能力和并发控制\",{\"1\":{\"236\":1}}],[\"文档注释\",{\"1\":{\"560\":2}}],[\"文档类型\",{\"1\":{\"366\":1}}],[\"文档地址\",{\"1\":{\"268\":1}}],[\"文档型数据库\",{\"1\":{\"111\":1}}],[\"文件传输\",{\"1\":{\"789\":1}}],[\"文件会打印出所有信息\",{\"1\":{\"700\":1}}],[\"文件会比\",{\"1\":{\"322\":1}}],[\"文件的绝对路径使用的是\",{\"1\":{\"650\":1}}],[\"文件即可\",{\"1\":{\"642\":1,\"751\":1}}],[\"文件可以在该项目的\",{\"1\":{\"631\":1}}],[\"文件内的\",{\"1\":{\"631\":1}}],[\"文件内的数据库配置信息为自己的信息\",{\"1\":{\"631\":1}}],[\"文件夹移动至\",{\"1\":{\"634\":1}}],[\"文件夹\",{\"1\":{\"498\":1,\"549\":1,\"551\":1}}],[\"文件夹下\",{\"1\":{\"312\":1}}],[\"文件示例\",{\"1\":{\"482\":1}}],[\"文件描述符\",{\"1\":{\"406\":1}}],[\"文件体积很大\",{\"1\":{\"323\":1}}],[\"文件体积小\",{\"1\":{\"323\":1}}],[\"文件体积最小多大以上才触发重写\",{\"1\":{\"322\":1}}],[\"文件大小\",{\"1\":{\"323\":1}}],[\"文件大很多\",{\"1\":{\"322\":1}}],[\"文件比上次文件增长多少百分比\",{\"1\":{\"322\":1}}],[\"文件执行重写功能\",{\"1\":{\"322\":1}}],[\"文件中的每条指令都会创建一个新的镜像层\",{\"1\":{\"491\":1}}],[\"文件中可以选择使用那种实现方式\",{\"1\":{\"461\":1}}],[\"文件中\",{\"1\":{\"322\":1,\"428\":1,\"762\":1}}],[\"文件中找到\",{\"1\":{\"321\":1}}],[\"文件来进行配置\",{\"1\":{\"322\":1}}],[\"文件都比较耗时\",{\"1\":{\"321\":1}}],[\"文件替换旧的\",{\"1\":{\"321\":1}}],[\"文件时\",{\"1\":{\"321\":1}}],[\"文件保存的路径目录\",{\"1\":{\"321\":1}}],[\"文件名称\",{\"1\":{\"321\":1}}],[\"文件\",{\"1\":{\"237\":1,\"238\":1,\"289\":1,\"321\":4,\"322\":3,\"336\":1,\"480\":1}}],[\"文件xxx\",{\"1\":{\"236\":1}}],[\"支持当前事务\",{\"1\":{\"745\":2}}],[\"支持的\",{\"1\":{\"678\":1}}],[\"支持的各种\",{\"1\":{\"306\":1}}],[\"支持动态扩容\",{\"1\":{\"429\":1}}],[\"支持交集\",{\"1\":{\"381\":1}}],[\"支持多语言客户端\",{\"1\":{\"367\":1}}],[\"支持主从集群\",{\"1\":{\"367\":1}}],[\"支持数据持久化\",{\"1\":{\"367\":1}}],[\"支持基于\",{\"1\":{\"360\":3}}],[\"支持三种不同模式\",{\"1\":{\"347\":1}}],[\"支持外键\",{\"1\":{\"238\":1}}],[\"支持外键foreign\",{\"1\":{\"236\":1}}],[\"支持\",{\"1\":{\"238\":8,\"360\":2}}],[\"支持hash索引\",{\"1\":{\"238\":1}}],[\"支持hash索引的是memory引擎\",{\"1\":{\"123\":1}}],[\"支持表锁\",{\"1\":{\"237\":1}}],[\"支持事务\",{\"1\":{\"236\":1,\"239\":1}}],[\"完全不会破坏原有结构\",{\"1\":{\"726\":1}}],[\"完全不具备任何的灵活性\",{\"1\":{\"657\":1}}],[\"完全相同时则无可厚非\",{\"1\":{\"212\":1}}],[\"完整的意思可以解释为\",{\"1\":{\"476\":1}}],[\"完成对应的功能即可\",{\"1\":{\"466\":1}}],[\"完成\",{\"1\":{\"321\":1,\"440\":1}}],[\"完成同步时也会记录当前同步的\",{\"1\":{\"302\":1}}],[\"完成与存储引擎的交互\",{\"1\":{\"233\":1}}],[\"来获取资源\",{\"1\":{\"719\":1}}],[\"来获取数据\",{\"1\":{\"406\":1}}],[\"来访问文件系统资源并没有太大的优势\",{\"1\":{\"709\":1}}],[\"来创建容器\",{\"1\":{\"696\":1}}],[\"来调用\",{\"1\":{\"581\":1}}],[\"来进行操作\",{\"1\":{\"528\":1}}],[\"来自定义\",{\"1\":{\"485\":1}}],[\"来定义一组相关联的应用容器\",{\"1\":{\"478\":1}}],[\"来管理和创建\",{\"1\":{\"474\":1}}],[\"来控制\",{\"1\":{\"450\":1}}],[\"来限制\",{\"1\":{\"450\":1}}],[\"来分片存储数据\",{\"1\":{\"446\":1}}],[\"来细化存储大小\",{\"1\":{\"443\":1}}],[\"来对哈希表进行相应的扩展或者收缩\",{\"1\":{\"439\":1}}],[\"来对redis数据库进⾏操作\",{\"1\":{\"375\":1}}],[\"来计算元素应该存储到数组中的哪个索引位置\",{\"1\":{\"438\":1}}],[\"来达到存储特殊字符的字符串的目的\",{\"1\":{\"423\":1}}],[\"来实现list\",{\"1\":{\"418\":1}}],[\"来实现\",{\"1\":{\"418\":1,\"726\":1}}],[\"来实现消息队列的功能\",{\"1\":{\"387\":1}}],[\"来判断就绪状态\",{\"1\":{\"412\":1}}],[\"来确认\",{\"1\":{\"406\":1}}],[\"来操作\",{\"1\":{\"361\":1}}],[\"来操作redis\",{\"1\":{\"360\":1}}],[\"来监管之前的redis主从集群\",{\"1\":{\"332\":1}}],[\"来完成\",{\"1\":{\"290\":1}}],[\"来回收缓存数据\",{\"1\":{\"285\":1}}],[\"来说\",{\"1\":{\"275\":1,\"543\":1}}],[\"来选取合适的存储引擎\",{\"1\":{\"233\":1}}],[\"来减少多次请求带来的性能消耗\",{\"1\":{\"201\":1}}],[\"真正的负责了mysql中数据的存储和提取\",{\"1\":{\"233\":1}}],[\"重用切入点表达式\",{\"0\":{\"668\":1}}],[\"重写不能比父类更严格\",{\"1\":{\"586\":1}}],[\"重写要求子类被重写方法与父类被重写方法有相同的参数列表\",{\"1\":{\"586\":1}}],[\"重写发生在子类与父类之间\",{\"1\":{\"586\":1}}],[\"重写父类的方法\",{\"1\":{\"576\":1}}],[\"重载\",{\"1\":{\"588\":1}}],[\"重载对返回类型没有特殊的要求\",{\"1\":{\"586\":1}}],[\"重载与访问修饰符无关\",{\"1\":{\"586\":1}}],[\"重载发生在一个类中\",{\"1\":{\"586\":1}}],[\"重载和重写的区别\",{\"1\":{\"586\":1}}],[\"重载系统服务\",{\"1\":{\"372\":1}}],[\"重命名\",{\"1\":{\"551\":1}}],[\"重置数组大小\",{\"1\":{\"434\":1}}],[\"重置编码为新编码\",{\"1\":{\"434\":1}}],[\"重启web应用容器\",{\"0\":{\"540\":1}}],[\"重启\",{\"1\":{\"372\":1,\"540\":1}}],[\"重启后失效\",{\"1\":{\"299\":1}}],[\"重新启动数据库系统后\",{\"1\":{\"733\":1}}],[\"重新计算索引\",{\"1\":{\"440\":1}}],[\"重新利用哈希算法\",{\"1\":{\"439\":1}}],[\"重新散列\",{\"1\":{\"439\":1}}],[\"重新分片\",{\"1\":{\"346\":1}}],[\"重新创建出7001\",{\"1\":{\"341\":1}}],[\"重新加载配置\",{\"1\":{\"308\":1,\"312\":1}}],[\"重复次数可在\",{\"1\":{\"291\":1}}],[\"重要\",{\"1\":{\"231\":1}}],[\"重做日志缓冲\",{\"1\":{\"77\":1}}],[\"重做日志缓冲以及重做日志文件\",{\"1\":{\"74\":1}}],[\"重做日志是用来实现事务的持久性\",{\"1\":{\"74\":1}}],[\"重做日志\",{\"0\":{\"74\":1,\"77\":1},\"1\":{\"77\":1}}],[\"包的层次深度任意\",{\"1\":{\"667\":1}}],[\"包下\",{\"1\":{\"619\":1}}],[\"包内可见\",{\"1\":{\"583\":1}}],[\"包装类型\",{\"1\":{\"562\":1}}],[\"包括上面四种通知对应的所有位置\",{\"1\":{\"661\":1,\"666\":1}}],[\"包括了java运行环境\",{\"1\":{\"611\":1}}],[\"包括操作系统\",{\"1\":{\"508\":1}}],[\"包括docker\",{\"1\":{\"504\":1}}],[\"包括0\",{\"1\":{\"471\":1}}],[\"包括\",{\"1\":{\"409\":1,\"430\":1}}],[\"包括seletc语句执行过程中表如何连接和连接的顺序\",{\"1\":{\"231\":1}}],[\"包\",{\"1\":{\"307\":1,\"553\":1}}],[\"包含一些扩展方法\",{\"1\":{\"695\":1}}],[\"包含一系列指令\",{\"1\":{\"489\":1}}],[\"包含了运行java程序的所有配置工具\",{\"1\":{\"612\":1}}],[\"包含了两个子类\",{\"1\":{\"595\":1}}],[\"包含了几乎所有的\",{\"1\":{\"509\":1}}],[\"包含抽象方法的一定是抽象类\",{\"1\":{\"591\":1}}],[\"包含对各种数据库的集成\",{\"1\":{\"360\":1}}],[\"包含3个master节点\",{\"1\":{\"340\":1}}],[\"包含两个数\",{\"1\":{\"290\":1}}],[\"包含读取数据的语句\",{\"1\":{\"256\":1}}],[\"包含临界值\",{\"1\":{\"189\":1}}],[\"秒发送一次\",{\"1\":{\"330\":1}}],[\"秒向集群的每个实例发送\",{\"1\":{\"327\":1}}],[\"秒将缓冲区数据写入到\",{\"1\":{\"322\":1}}],[\"秒内\",{\"1\":{\"321\":3}}],[\"秒\",{\"1\":{\"229\":1}}],[\"≈\",{\"1\":{\"223\":1}}],[\"计数器为\",{\"1\":{\"467\":1}}],[\"计数器\",{\"1\":{\"458\":1}}],[\"计数为0则可以回收\",{\"1\":{\"458\":1}}],[\"计数累加\",{\"1\":{\"223\":1}}],[\"计算大小\",{\"1\":{\"619\":1}}],[\"计算新hash表的realesize\",{\"1\":{\"440\":2}}],[\"计算索引值\",{\"1\":{\"439\":1}}],[\"计算索引值index\",{\"1\":{\"437\":1}}],[\"计算出\",{\"1\":{\"438\":1}}],[\"计算键\",{\"1\":{\"437\":1}}],[\"计算哈希值和索引值方法如下\",{\"1\":{\"437\":1}}],[\"计算⼀周的uv可以使⽤7天的uv合并计算即可\",{\"1\":{\"400\":1}}],[\"计算hll的近似基数\",{\"1\":{\"400\":1}}],[\"计算基数所需的空间总是固定\",{\"1\":{\"400\":1}}],[\"计算两个位置之间的距离\",{\"1\":{\"398\":1}}],[\"计算方式是利用\",{\"1\":{\"345\":1}}],[\"计算\",{\"1\":{\"345\":2,\"458\":1}}],[\"计算体积\",{\"1\":{\"31\":1}}],[\"计算机操作系统\",{\"0\":{\"45\":1}}],[\"计算机组成原理\",{\"0\":{\"20\":1}}],[\"计算机网络还可以实现电子化办公与服务\",{\"1\":{\"793\":1}}],[\"计算机网络中的各台计算机可以通过网络互为替代机\",{\"1\":{\"792\":1}}],[\"计算机网络可以分为通信子网和资源子网\",{\"1\":{\"787\":1}}],[\"计算机网络可以分为边缘部分和核心部分\",{\"1\":{\"786\":1}}],[\"计算机网络是\",{\"1\":{\"782\":1}}],[\"计算机网络是一个将分散的\",{\"1\":{\"780\":1}}],[\"计算机网络的功能\",{\"0\":{\"788\":1}}],[\"计算机网络的组成\",{\"0\":{\"784\":1}}],[\"计算机网络的概念\",{\"0\":{\"779\":1,\"780\":1}}],[\"计算机网络的分类\",{\"0\":{\"772\":1}}],[\"计算机网络体系结构\",{\"0\":{\"771\":1}}],[\"计算机网络\",{\"0\":{\"14\":1}}],[\"把资源让出来\",{\"1\":{\"742\":1}}],[\"把自己创建资源\",{\"1\":{\"726\":1}}],[\"把校验和业务逻辑分离开\",{\"1\":{\"680\":1}}],[\"把特定的功能封装到切面类中\",{\"1\":{\"661\":1}}],[\"把方法中固定位置的重复的代码抽取出来\",{\"1\":{\"661\":1}}],[\"把方法从上到下执行的顺序看成y轴\",{\"1\":{\"661\":1}}],[\"把方法排成一排\",{\"1\":{\"661\":1}}],[\"把非接口的类实例化放在map中\",{\"1\":{\"650\":1}}],[\"把学习中遇到的问题记录下来\",{\"1\":{\"636\":1}}],[\"把代码用方法进行封装\",{\"1\":{\"575\":1}}],[\"把光标放在某个类变量上\",{\"1\":{\"553\":1}}],[\"把执行结果写出\",{\"1\":{\"464\":1}}],[\"把待添加的元素放入数组末尾\",{\"1\":{\"434\":1}}],[\"把已就绪的\",{\"1\":{\"406\":1}}],[\"把每一行的字段值都取出来\",{\"1\":{\"223\":2}}],[\"把每一行的主键id值都取出来\",{\"1\":{\"223\":1}}],[\"把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中\",{\"1\":{\"35\":1}}],[\"服务代表一个容器\",{\"1\":{\"482\":1}}],[\"服务使用了\",{\"1\":{\"480\":1}}],[\"服务使用到了\",{\"1\":{\"480\":2}}],[\"服务的机器\",{\"1\":{\"474\":1}}],[\"服务的基本流程图\",{\"1\":{\"411\":1}}],[\"服务\",{\"1\":{\"346\":2,\"474\":1,\"482\":1,\"634\":2}}],[\"服务状态监控\",{\"0\":{\"327\":1}}],[\"服务停止时执行\",{\"1\":{\"321\":1}}],[\"服务时\",{\"1\":{\"321\":1}}],[\"服务重启可能会丢失数据\",{\"1\":{\"320\":1}}],[\"服务内部\",{\"1\":{\"306\":1}}],[\"服务和动态网关\",{\"1\":{\"306\":1}}],[\"服务宕机\",{\"1\":{\"273\":1}}],[\"服务器负责数据的管理\",{\"1\":{\"423\":1}}],[\"服务器\",{\"1\":{\"423\":1}}],[\"服务器中\",{\"1\":{\"354\":1}}],[\"服务器通过api和存储引擎进行通信\",{\"1\":{\"233\":1}}],[\"服务器也会为安全接入的每个客户端验证它所具有的操作权限\",{\"1\":{\"233\":1}}],[\"服务层处于mysql体系结构中的第二层\",{\"1\":{\"233\":1}}],[\"服务层\",{\"1\":{\"233\":1}}],[\"服务层对于返回的每一行\",{\"1\":{\"223\":1}}],[\"服务层判断是否为null\",{\"1\":{\"223\":1}}],[\"服务层拿到主键以后\",{\"1\":{\"223\":1}}],[\"服务层直接按行进行累加\",{\"1\":{\"223\":1}}],[\"服务端\",{\"1\":{\"462\":1,\"474\":1}}],[\"服务端通信的标准\",{\"1\":{\"423\":1}}],[\"服务端响应结果的格式必须有一个规范\",{\"1\":{\"423\":1}}],[\"服务端解析并执行命令\",{\"1\":{\"423\":1}}],[\"服务端从\",{\"1\":{\"410\":1}}],[\"服务端调用\",{\"1\":{\"410\":1}}],[\"服务端正常会返回pong\",{\"1\":{\"374\":1}}],[\"服务端优化\",{\"0\":{\"337\":1},\"1\":{\"266\":1}}],[\"服务端还可以向客户端发送数据\",{\"1\":{\"19\":1}}],[\"服务端收到来自客户端的连接释放报文段\",{\"1\":{\"19\":1}}],[\"服务端又会收到大量的连接请求\",{\"1\":{\"18\":1}}],[\"服务端却有两个连接\",{\"1\":{\"18\":1}}],[\"服务端以为客户端建立了新的连接请求\",{\"1\":{\"18\":1}}],[\"服务端接受连接请求\",{\"1\":{\"18\":1}}],[\"服务端接收到客户端发来的连接请求\",{\"1\":{\"17\":1}}],[\"累计值就加1\",{\"1\":{\"223\":1}}],[\"维护更新\",{\"1\":{\"640\":1}}],[\"维护性\",{\"1\":{\"576\":1}}],[\"维护成本\",{\"1\":{\"276\":1}}],[\"维护方便\",{\"1\":{\"272\":1}}],[\"维护好各项属性\",{\"1\":{\"434\":1}}],[\"维护好数据表内的数据即可\",{\"1\":{\"222\":1}}],[\"维护好这个存储的变量即可\",{\"1\":{\"222\":1}}],[\"维护索引结构的代价也就越大\",{\"1\":{\"136\":1}}],[\"因此可以省略id属性\",{\"1\":{\"758\":1}}],[\"因此第一本图书购买成功\",{\"1\":{\"745\":1}}],[\"因此购买图书的操作正常执行\",{\"1\":{\"743\":1}}],[\"因此处理事务一般在service层处理\",{\"1\":{\"739\":1}}],[\"因此无法将\",{\"1\":{\"738\":1}}],[\"因此applicationcontext可直接获取resource实例\",{\"1\":{\"715\":1}}],[\"因此我们需要在\",{\"1\":{\"643\":1}}],[\"因此我们使用jedis连接池代替jedis的直接连接方式\",{\"1\":{\"349\":1}}],[\"因此它们相比于传统的虚拟机更加轻量级\",{\"1\":{\"504\":1}}],[\"因此它执行的效率几乎等同于所部署的\",{\"1\":{\"499\":1}}],[\"因此在购买第二本图书时余额不足失败\",{\"1\":{\"745\":1}}],[\"因此在此事务中执行\",{\"1\":{\"745\":1}}],[\"因此在\",{\"1\":{\"463\":1}}],[\"因此多线程并不会带来巨大的性能提升\",{\"1\":{\"460\":1}}],[\"因此所有的\",{\"1\":{\"456\":1}}],[\"因此称为渐进式\",{\"1\":{\"440\":1}}],[\"因此必须对哈希表中的每一个\",{\"1\":{\"440\":1}}],[\"因此需要采取一些措施来解决哈希冲突\",{\"1\":{\"437\":1}}],[\"因此需要有\",{\"1\":{\"421\":1}}],[\"因此采用的编码方式为\",{\"1\":{\"432\":1}}],[\"因此c字符串无法正确存取\",{\"1\":{\"427\":1}}],[\"因此客户端发送命令的格式\",{\"1\":{\"423\":1}}],[\"因此具备与hashset类似的特征\",{\"1\":{\"381\":1}}],[\"因此节点列表中的前n个就是master\",{\"1\":{\"343\":1}}],[\"因此\",{\"1\":{\"302\":1,\"419\":1,\"421\":3,\"440\":1,\"479\":2,\"499\":1,\"595\":1,\"711\":1,\"719\":1,\"723\":1}}],[\"因此执行count\",{\"1\":{\"221\":1}}],[\"因为service层表示业务逻辑层\",{\"1\":{\"739\":1}}],[\"因为sortedset的可排序特性\",{\"1\":{\"382\":1}}],[\"因为没有添加事务\",{\"1\":{\"738\":1}}],[\"因为它包含并且管理组件对象的生命周期\",{\"1\":{\"726\":1}}],[\"因为这个技术要求代理对象和目标对象实现同样的接口\",{\"1\":{\"663\":1}}],[\"因为这些日志可能还用于mvcc\",{\"1\":{\"78\":1}}],[\"因为默认规则即扫描指定包下所有类\",{\"1\":{\"643\":1}}],[\"因为java的大部分方法要么已经处理异常\",{\"1\":{\"599\":1}}],[\"因为是final所以也要显式赋初值\",{\"1\":{\"590\":1}}],[\"因为是6位\",{\"1\":{\"444\":1}}],[\"因为链表一般都是从首尾访问较多\",{\"1\":{\"450\":1}}],[\"因为记录两个指针要占用\",{\"1\":{\"443\":1}}],[\"因为c字符串以空字符作为字符串结束的标识\",{\"1\":{\"427\":1}}],[\"因为也是一个hash表\",{\"1\":{\"381\":1}}],[\"因为redis\",{\"1\":{\"343\":1}}],[\"因为已经配置了后台启动模式\",{\"1\":{\"342\":1}}],[\"因为数据完整性更高\",{\"1\":{\"323\":1}}],[\"因为数据完整性不如aof\",{\"1\":{\"323\":1}}],[\"因为\",{\"1\":{\"321\":1,\"400\":1,\"494\":1,\"709\":1}}],[\"因为其自动加载缓存的能力将会变得非常实用\",{\"1\":{\"283\":1}}],[\"因为id是主键\",{\"1\":{\"128\":1}}],[\"因为两张表的是完全相同的\",{\"1\":{\"98\":1}}],[\"因为事务id是自增的\",{\"1\":{\"87\":1}}],[\"因为顺序表支持随机访问\",{\"1\":{\"38\":1}}],[\"耗时越长\",{\"1\":{\"218\":1}}],[\"业务名\",{\"1\":{\"378\":1}}],[\"业务场景\",{\"1\":{\"276\":1}}],[\"业务操作时避免对主键的修改\",{\"1\":{\"209\":1}}],[\"业务基本上就完全停止\",{\"1\":{\"142\":1}}],[\"满足了社会的需要\",{\"1\":{\"793\":1}}],[\"满足以下两种情况时会触发哈希表扩容\",{\"1\":{\"439\":1}}],[\"满足下列特点\",{\"1\":{\"420\":1}}],[\"满足条件后\",{\"1\":{\"251\":1}}],[\"满足业务需求的情况下\",{\"1\":{\"209\":1}}],[\"满足最左前缀法则\",{\"1\":{\"131\":1}}],[\"实体\",{\"1\":{\"757\":1}}],[\"实验一\",{\"1\":{\"716\":1,\"723\":1}}],[\"实验二\",{\"1\":{\"707\":1,\"716\":1,\"723\":1}}],[\"实验\",{\"1\":{\"687\":1,\"707\":1,\"708\":1,\"709\":1,\"718\":1,\"719\":1}}],[\"实时编译\",{\"1\":{\"677\":1}}],[\"实时查看docker容器名为user\",{\"1\":{\"529\":1}}],[\"实质上根据需求来分析很容易\",{\"1\":{\"614\":1}}],[\"实质上是在已经运行的\",{\"1\":{\"499\":1}}],[\"实例依赖注入资源\",{\"1\":{\"719\":1}}],[\"实例时\",{\"1\":{\"719\":1}}],[\"实例需要访问资源\",{\"1\":{\"719\":1}}],[\"实例需要访问资源时\",{\"1\":{\"719\":1}}],[\"实例对象是\",{\"1\":{\"650\":2}}],[\"实例对象当成value\",{\"1\":{\"650\":2}}],[\"实例进行分析\",{\"1\":{\"476\":1}}],[\"实例中的红黑树保存要监听的\",{\"1\":{\"412\":1}}],[\"实例中\",{\"1\":{\"410\":1}}],[\"实例的句柄\",{\"1\":{\"409\":1}}],[\"实例\",{\"1\":{\"345\":1,\"346\":2,\"719\":1}}],[\"实例是否健康\",{\"1\":{\"330\":1}}],[\"实例数量的一半\",{\"1\":{\"327\":1}}],[\"实例故障重启后\",{\"1\":{\"321\":1}}],[\"实际情况是\",{\"1\":{\"723\":1}}],[\"实际执行扩容的过程是通过调用\",{\"1\":{\"627\":1}}],[\"实际的对象是根据类的定义实例化而来的\",{\"1\":{\"579\":1}}],[\"实际数据\",{\"1\":{\"466\":1}}],[\"实际上\",{\"1\":{\"719\":1}}],[\"实际上并不需要直接使用resource实现类\",{\"1\":{\"717\":1}}],[\"实际上并没有将记录值物理删除\",{\"1\":{\"208\":1}}],[\"实际上都依赖于servlet容器\",{\"1\":{\"710\":1}}],[\"实际上这4个注解功能上都是相同的\",{\"1\":{\"644\":1}}],[\"实际上的\",{\"1\":{\"421\":1}}],[\"实际发生的事件类型\",{\"1\":{\"408\":1}}],[\"实际使用的索引\",{\"1\":{\"231\":1}}],[\"实现联网计算机之间的数据通信\",{\"1\":{\"787\":1}}],[\"实现curd\",{\"0\":{\"731\":1}}],[\"实现web\",{\"1\":{\"727\":1}}],[\"实现resourceloaderaware接口必须实现的方法\",{\"1\":{\"718\":1}}],[\"实现resourceloaderaware接口\",{\"1\":{\"718\":1}}],[\"实现可用于访问需要从类路径或相对于\",{\"1\":{\"704\":1}}],[\"实现自定义校验\",{\"0\":{\"684\":1}}],[\"实现代理\",{\"1\":{\"663\":1}}],[\"实现代码共享\",{\"1\":{\"576\":1}}],[\"实现类的实例\",{\"1\":{\"752\":1}}],[\"实现类\",{\"1\":{\"650\":1,\"664\":1,\"708\":1,\"719\":1}}],[\"实现的\",{\"1\":{\"623\":1}}],[\"实现接口方法指定校验规则\",{\"1\":{\"681\":1}}],[\"实现接口的关键字为implements\",{\"1\":{\"592\":1}}],[\"实现接口或继承抽象类的普通子类都必须实现这些抽象方法\",{\"1\":{\"592\":1}}],[\"实现方法的功能\",{\"1\":{\"583\":1}}],[\"实现方式中独有的api\",{\"1\":{\"461\":1}}],[\"实现方式\",{\"1\":{\"88\":1}}],[\"实现却更简单\",{\"1\":{\"455\":1}}],[\"实现了使用简单的组件配置组合成一个复杂的应用\",{\"1\":{\"726\":1}}],[\"实现了可重复\",{\"1\":{\"490\":1}}],[\"实现了分片集群的支持\",{\"1\":{\"348\":1}}],[\"实现了节点的感知和自动切换\",{\"1\":{\"336\":1}}],[\"实现无感知的数据迁移\",{\"1\":{\"347\":1}}],[\"实现故障转移\",{\"0\":{\"329\":1}}],[\"实现健康检测和自动恢复\",{\"1\":{\"320\":1}}],[\"实现读写分离解决\",{\"1\":{\"320\":1}}],[\"实现读写分离\",{\"1\":{\"295\":1,\"336\":1}}],[\"实现复杂度增高\",{\"1\":{\"460\":1}}],[\"实现复杂\",{\"1\":{\"272\":1,\"274\":1}}],[\"实现简单\",{\"1\":{\"272\":1,\"274\":1}}],[\"实现\",{\"0\":{\"674\":1},\"1\":{\"92\":1,\"93\":1,\"94\":1,\"360\":1,\"406\":1,\"417\":1}}],[\"实现原理\",{\"0\":{\"84\":1},\"1\":{\"88\":1}}],[\"调试\",{\"1\":{\"700\":1}}],[\"调试时很有用\",{\"1\":{\"601\":1}}],[\"调整方法排序\",{\"1\":{\"553\":2}}],[\"调整为\",{\"1\":{\"207\":1}}],[\"调转到所选中的词的下一个引用位置\",{\"1\":{\"549\":1}}],[\"调用无参构造器\",{\"1\":{\"764\":1}}],[\"调用目标方法时先调用代理对象的方法\",{\"1\":{\"656\":1}}],[\"调用的是子类的方法\",{\"1\":{\"577\":2}}],[\"调用子类特有属性或方法\",{\"1\":{\"577\":1}}],[\"调用层次\",{\"1\":{\"552\":1}}],[\"调用对应的处理器\",{\"1\":{\"464\":1}}],[\"调用前置处理器\",{\"1\":{\"464\":1}}],[\"调用不同的处理器\",{\"1\":{\"462\":1}}],[\"调用频率影响\",{\"1\":{\"457\":1}}],[\"调用一切系统资源\",{\"1\":{\"403\":1}}],[\"调用一次递归函数\",{\"1\":{\"32\":1}}],[\"调用者有责任关闭每个流\",{\"1\":{\"705\":1}}],[\"调用者只操作缓存\",{\"1\":{\"277\":1}}],[\"调用者调用该服务\",{\"1\":{\"277\":1}}],[\"调用\",{\"1\":{\"242\":1,\"408\":1,\"752\":1}}],[\"调用存储过程可以简化应用开发人员的很多工作\",{\"1\":{\"241\":1}}],[\"调用两次递归函数\",{\"1\":{\"32\":1}}],[\"尽管很多时候都是不显眼的小问题\",{\"1\":{\"636\":1}}],[\"尽可能避免全量同步\",{\"1\":{\"303\":1}}],[\"尽可能的保证了空间的利用率\",{\"1\":{\"207\":1}}],[\"尽量建立联合索引\",{\"1\":{\"216\":1}}],[\"尽量建立唯一索引\",{\"1\":{\"136\":1}}],[\"尽量不要使用uuid做主键或者是其他自然主键\",{\"1\":{\"209\":1}}],[\"尽量降低主键的长度\",{\"1\":{\"209\":1}}],[\"尽量使用主键\",{\"1\":{\"225\":1}}],[\"尽量使用count\",{\"1\":{\"223\":1}}],[\"尽量使用顺序插入\",{\"1\":{\"209\":1}}],[\"尽量使用联合索引\",{\"1\":{\"136\":1}}],[\"尽量使用覆盖索引\",{\"1\":{\"133\":1,\"213\":1}}],[\"尽量选择区分度较高的列作为索引\",{\"1\":{\"136\":1}}],[\"换行分隔符\",{\"1\":{\"204\":1}}],[\"`balance`\",{\"1\":{\"737\":2}}],[\"`book\",{\"1\":{\"737\":5}}],[\"`username`\",{\"1\":{\"737\":2}}],[\"`user\",{\"1\":{\"737\":3}}],[\"`price`\",{\"1\":{\"737\":2}}],[\"`stock`\",{\"1\":{\"737\":2}}],[\"`sex`\",{\"1\":{\"730\":1}}],[\"`spring`\",{\"1\":{\"730\":2}}],[\"`age`\",{\"1\":{\"730\":1}}],[\"`name`\",{\"1\":{\"730\":1}}],[\"`id`\",{\"1\":{\"730\":2}}],[\"`t\",{\"1\":{\"730\":1,\"737\":4}}],[\"`table\",{\"1\":{\"204\":1}}],[\"`\",{\"1\":{\"550\":1}}],[\"`docker\",{\"1\":{\"524\":1}}],[\"```sql\",{\"1\":{\"147\":1}}],[\"```\",{\"1\":{\"147\":1}}],[\"9<\",{\"1\":{\"651\":1}}],[\"9之后\",{\"1\":{\"581\":1}}],[\"900\",{\"1\":{\"321\":2}}],[\"9\",{\"1\":{\"203\":2,\"375\":1,\"449\":1,\"468\":1,\"549\":1,\"550\":1,\"553\":1,\"683\":1}}],[\"9999\",{\"1\":{\"39\":2}}],[\"授权认证\",{\"1\":{\"233\":1}}],[\"授权时\",{\"1\":{\"198\":1}}],[\"授予权限\",{\"1\":{\"198\":1}}],[\"撤销它已做的操作\",{\"1\":{\"742\":1}}],[\"撤销\",{\"1\":{\"549\":1}}],[\"撤销权限\",{\"1\":{\"198\":1}}],[\"撤销表空间\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"权限修饰符\",{\"1\":{\"667\":2}}],[\"权限列表\",{\"1\":{\"198\":2}}],[\"权限\",{\"1\":{\"198\":1}}],[\"权限控制\",{\"0\":{\"198\":1}}],[\"密码\",{\"1\":{\"197\":1,\"371\":1}}],[\"起始索引可以省略\",{\"1\":{\"194\":1}}],[\"起始索引从0开始\",{\"1\":{\"194\":1}}],[\"起始索引\",{\"1\":{\"194\":2}}],[\"才可以使用构造器注入\",{\"1\":{\"755\":1}}],[\"才可以判断到底需要同步哪些数据\",{\"1\":{\"302\":1}}],[\"才会bytype注入\",{\"1\":{\"647\":1}}],[\"才会回来执行try或者catch块中的return或者throw语句\",{\"1\":{\"597\":1}}],[\"才会根据第二个字段比较\",{\"1\":{\"193\":1}}],[\"才执行删除\",{\"1\":{\"457\":1}}],[\"才存储到\",{\"1\":{\"354\":1}}],[\"才能创建一个\",{\"1\":{\"693\":1}}],[\"才能通过外部类对象实例化内部类\",{\"1\":{\"580\":1}}],[\"才能够删除该镜像\",{\"1\":{\"514\":2}}],[\"才能够准确无误的实现用户的指令\",{\"1\":{\"466\":1}}],[\"才能成功连接一次\",{\"1\":{\"18\":1}}],[\"才能建立起知识体系\",{\"1\":{\"2\":1}}],[\"降本增效的时代\",{\"1\":{\"677\":1}}],[\"降序\",{\"1\":{\"193\":1}}],[\"降低程序间的耦合\",{\"1\":{\"753\":1}}],[\"降低了耦合性\",{\"1\":{\"575\":1}}],[\"降低响应时间\",{\"1\":{\"271\":1}}],[\"降低后端负载\",{\"1\":{\"271\":1}}],[\"降低cpu的消耗\",{\"1\":{\"116\":1}}],[\"降低数据排序的成本\",{\"1\":{\"116\":1}}],[\"降低数据库的io成本\",{\"1\":{\"116\":1}}],[\"执行过程中抛出异常\",{\"1\":{\"742\":1}}],[\"执行过期key清理\",{\"1\":{\"457\":1}}],[\"执行测试\",{\"1\":{\"650\":1,\"665\":1}}],[\"执行成功\",{\"1\":{\"646\":1,\"648\":1,\"665\":1}}],[\"执行相应的处理\",{\"1\":{\"641\":1}}],[\"执行完\",{\"1\":{\"600\":1}}],[\"执行完成之后\",{\"1\":{\"597\":1}}],[\"执行结果\",{\"1\":{\"581\":1,\"752\":1}}],[\"执行结果为\",{\"1\":{\"580\":1}}],[\"执行这里的代码\",{\"1\":{\"565\":1}}],[\"执行这里的语句\",{\"1\":{\"565\":3}}],[\"执行以下指令即可安装\",{\"1\":{\"479\":1}}],[\"执行以下步骤\",{\"1\":{\"470\":1}}],[\"执行一个处理数据类型命令的时候\",{\"1\":{\"470\":1}}],[\"执行一次sql\",{\"1\":{\"155\":1}}],[\"执行command\",{\"1\":{\"464\":1}}],[\"执行速度非常快\",{\"1\":{\"460\":1}}],[\"执行清理耗时不超过1ms\",{\"1\":{\"457\":1}}],[\"执行清理耗时不超过一次执行周期的25\",{\"1\":{\"457\":1}}],[\"执行频率受beforesleep\",{\"1\":{\"457\":1}}],[\"执行频率受server\",{\"1\":{\"457\":1}}],[\"执行周期有两种\",{\"1\":{\"457\":1}}],[\"执行事务\",{\"1\":{\"401\":2}}],[\"执行缓存在服务器中的脚本\",{\"1\":{\"386\":1}}],[\"执行lua脚本\",{\"1\":{\"386\":1}}],[\"执行load指令\",{\"1\":{\"204\":1}}],[\"执行脚本的常用命令为\",{\"1\":{\"384\":1}}],[\"执行teststring\",{\"1\":{\"353\":1}}],[\"执行拷贝\",{\"1\":{\"341\":1}}],[\"执行\",{\"1\":{\"330\":1,\"441\":1,\"478\":1,\"549\":1,\"631\":1,\"764\":1}}],[\"执行间隔时间长\",{\"1\":{\"321\":1}}],[\"执行写操作\",{\"1\":{\"321\":1}}],[\"执行命令\",{\"1\":{\"307\":1,\"490\":1,\"493\":1}}],[\"执行get\",{\"1\":{\"300\":2}}],[\"执行spring的某个方法时\",{\"1\":{\"709\":1}}],[\"执行set\",{\"1\":{\"300\":1}}],[\"执行slaveof\",{\"1\":{\"299\":2}}],[\"执行slaveof命令\",{\"1\":{\"299\":1}}],[\"执行下列指令安装即可\",{\"1\":{\"487\":1}}],[\"执行下列操作以测试\",{\"1\":{\"300\":1}}],[\"执行下面命令\",{\"1\":{\"299\":2}}],[\"执行创建存储过程的sql时\",{\"1\":{\"242\":1}}],[\"执行顺序从上到下\",{\"1\":{\"231\":1}}],[\"执行顺序\",{\"0\":{\"195\":1},\"1\":{\"192\":1,\"600\":1}}],[\"执行时机不同\",{\"1\":{\"192\":1}}],[\"成功调用\",{\"1\":{\"646\":1}}],[\"成功传输到了服务端\",{\"1\":{\"18\":1}}],[\"成员内部类是指\",{\"1\":{\"580\":1}}],[\"成员内部类\",{\"1\":{\"580\":2}}],[\"成为了构建\",{\"1\":{\"725\":1}}],[\"成为\",{\"1\":{\"423\":1}}],[\"成为新\",{\"1\":{\"329\":1}}],[\"成本\",{\"1\":{\"271\":1,\"505\":1}}],[\"成立任意一个即可\",{\"1\":{\"189\":1}}],[\"匹配到的参数会存入\",{\"1\":{\"313\":1}}],[\"匹配任意个字符\",{\"1\":{\"189\":1}}],[\"匹配单个字符\",{\"1\":{\"189\":1}}],[\"占据\",{\"1\":{\"467\":1}}],[\"占据的内存不一样\",{\"1\":{\"443\":1}}],[\"占用更少的系统资源\",{\"1\":{\"504\":1}}],[\"占用缓存空间\",{\"1\":{\"275\":1}}],[\"占用8个字节\",{\"1\":{\"128\":1}}],[\"占位符\",{\"1\":{\"189\":1}}],[\"大宝\",{\"1\":{\"760\":1}}],[\"大概率是因为程序运行出现了问题\",{\"1\":{\"742\":1}}],[\"大幅度提高了开发效率\",{\"1\":{\"726\":1}}],[\"大家可以测试\",{\"1\":{\"646\":1}}],[\"大部分情况下都不需要手动抛出异常\",{\"1\":{\"599\":1}}],[\"大部分匿名内部类用于接口回调\",{\"1\":{\"580\":1}}],[\"大体结构如此\",{\"1\":{\"593\":1}}],[\"大大降低了程序的耦合度\",{\"1\":{\"577\":1}}],[\"大驼峰命名法\",{\"1\":{\"561\":1}}],[\"大小超过了\",{\"1\":{\"419\":1}}],[\"大小固定值为\",{\"1\":{\"408\":1}}],[\"大小\",{\"1\":{\"328\":1,\"446\":1,\"451\":1}}],[\"大小150m\",{\"1\":{\"309\":1}}],[\"大小有上限\",{\"1\":{\"303\":1}}],[\"大容量缓存是能带来性能加速的收益\",{\"1\":{\"275\":1}}],[\"大量cpu和内存消耗\",{\"1\":{\"323\":1}}],[\"大量的缓存\",{\"1\":{\"273\":1}}],[\"大量数据的情况下\",{\"1\":{\"118\":1}}],[\"大纲\",{\"0\":{\"263\":1}}],[\"大数据量排序时\",{\"1\":{\"213\":1}}],[\"大批量数据插入\",{\"0\":{\"204\":1}}],[\"大于0为阻塞时间\",{\"1\":{\"409\":1}}],[\"大于0\",{\"1\":{\"407\":1}}],[\"大于等于\",{\"1\":{\"189\":1}}],[\"大于\",{\"1\":{\"189\":1,\"408\":1,\"434\":1}}],[\"去掉\",{\"1\":{\"650\":1}}],[\"去掉即可\",{\"1\":{\"419\":1}}],[\"去掉字符串头部和尾部的空格\",{\"1\":{\"55\":1}}],[\"去除重复记录\",{\"1\":{\"188\":1}}],[\"涉及的数据的删除时\",{\"1\":{\"184\":1}}],[\"涉及的数据的修改时\",{\"1\":{\"183\":1}}],[\"涉及两个文件\",{\"1\":{\"74\":1}}],[\"危险警告\",{\"1\":{\"183\":1,\"184\":1}}],[\"给bean对象设置属性\",{\"1\":{\"764\":1}}],[\"给事务通知标签设置唯一标识\",{\"1\":{\"749\":1}}],[\"给程序动态统一添加额外功能的一种技术\",{\"1\":{\"660\":1}}],[\"给基本数据类型提供了对应的包装类\",{\"1\":{\"562\":1}}],[\"给client\",{\"1\":{\"464\":1}}],[\"给新元素腾出空间\",{\"1\":{\"434\":1}}],[\"给⼀个key设置有效期\",{\"1\":{\"363\":1}}],[\"给\",{\"1\":{\"346\":1,\"440\":2}}],[\"给所有其他\",{\"1\":{\"329\":1}}],[\"给备选的\",{\"1\":{\"329\":1}}],[\"给缓存数据添加ttl时间\",{\"1\":{\"276\":1}}],[\"给缓存业务添加降级限流操作\",{\"1\":{\"273\":1}}],[\"给业务添加多级缓存\",{\"1\":{\"273\":1}}],[\"给不同的\",{\"1\":{\"273\":1}}],[\"给全部字段添加数据\",{\"1\":{\"182\":1}}],[\"给指定字段添加数据\",{\"1\":{\"182\":1}}],[\"值进行传递\",{\"1\":{\"757\":1}}],[\"值越小淘汰优先级越高\",{\"1\":{\"458\":1}}],[\"值越大\",{\"1\":{\"231\":1}}],[\"值一样则按照\",{\"1\":{\"455\":1}}],[\"值取决于当前要做的是扩容还是收缩\",{\"1\":{\"440\":2}}],[\"值升序排列\",{\"1\":{\"421\":1}}],[\"值排序\",{\"1\":{\"421\":1,\"455\":1}}],[\"值和\",{\"1\":{\"421\":1}}],[\"值是一个键值对集合\",{\"1\":{\"419\":1}}],[\"值最好超过\",{\"1\":{\"327\":1}}],[\"值\",{\"1\":{\"244\":2,\"246\":2,\"328\":1,\"345\":2,\"398\":1,\"421\":2,\"438\":2,\"455\":1,\"757\":1}}],[\"值n\",{\"1\":{\"182\":6}}],[\"值2\",{\"1\":{\"182\":6,\"183\":1}}],[\"值1\",{\"1\":{\"182\":6,\"183\":1}}],[\"改为你的\",{\"1\":{\"533\":1}}],[\"改变编码方式\",{\"1\":{\"434\":1}}],[\"改这三个操作\",{\"1\":{\"181\":1}}],[\"改\",{\"1\":{\"181\":1}}],[\"删\",{\"1\":{\"181\":2}}],[\"删除功能\",{\"1\":{\"731\":1}}],[\"删除第一个匹配成功的指定对象\",{\"1\":{\"626\":1}}],[\"删除指定下标的元素\",{\"1\":{\"626\":1}}],[\"删除指定数据表\",{\"1\":{\"179\":1}}],[\"删除一个元素\",{\"1\":{\"619\":1}}],[\"删除光标前面的单词或是中文句\",{\"1\":{\"549\":1}}],[\"删除光标后面的单词或是中文句\",{\"1\":{\"549\":1}}],[\"删除光标所在行\",{\"1\":{\"549\":1}}],[\"删除选中的行\",{\"1\":{\"549\":1}}],[\"删除web应用容器\",{\"0\":{\"541\":1}}],[\"删除镜像\",{\"0\":{\"514\":1}}],[\"删除等操作\",{\"1\":{\"466\":1}}],[\"删除以释放更多的内存的流程\",{\"1\":{\"458\":1}}],[\"删除策略\",{\"0\":{\"457\":1}}],[\"删除消费者组\",{\"1\":{\"387\":1}}],[\"删除消费者\",{\"1\":{\"387\":1}}],[\"删除消息\",{\"1\":{\"387\":1,\"390\":1}}],[\"删除sorted\",{\"1\":{\"382\":1}}],[\"删除⼀个指定的key\",{\"1\":{\"363\":1}}],[\"删除旧的\",{\"1\":{\"341\":1}}],[\"删除之前的7001\",{\"1\":{\"341\":1}}],[\"删除现象也是如此\",{\"1\":{\"260\":1}}],[\"删除用户\",{\"1\":{\"197\":1}}],[\"删除数据库\",{\"1\":{\"198\":1}}],[\"删除数据权限\",{\"1\":{\"198\":1}}],[\"删除数据\",{\"0\":{\"184\":1}}],[\"删除数据表后\",{\"1\":{\"179\":1}}],[\"删除字段\",{\"1\":{\"180\":1}}],[\"删除触发器\",{\"0\":{\"161\":1}}],[\"删除索引\",{\"1\":{\"129\":1}}],[\"删除和更新可能会影响索引树中不相邻的二级索引页\",{\"1\":{\"64\":1}}],[\"删除外键\",{\"1\":{\"51\":1}}],[\"删除节点操作\",{\"1\":{\"39\":1}}],[\"删除表\",{\"1\":{\"129\":1,\"179\":1}}],[\"删除表头元素\",{\"1\":{\"38\":1}}],[\"删除表尾元素\",{\"1\":{\"38\":1}}],[\"删除表l中的第i个位置的元素\",{\"1\":{\"37\":1}}],[\"删除顺序表\",{\"1\":{\"38\":1}}],[\"删除\",{\"0\":{\"52\":1},\"1\":{\"38\":1,\"157\":1,\"165\":1,\"166\":1,\"178\":1,\"179\":1,\"228\":1,\"242\":1,\"461\":1,\"514\":2}}],[\"删除操作时\",{\"1\":{\"440\":1}}],[\"删除操作\",{\"1\":{\"37\":1,\"38\":1,\"239\":1,\"744\":1}}],[\"应该在哪个实例\",{\"1\":{\"345\":1}}],[\"应该在字段数据类型的规定范围以内\",{\"1\":{\"182\":1}}],[\"应该根据应用系统的特点选择合适的存储引擎\",{\"1\":{\"239\":1}}],[\"应该包含增\",{\"1\":{\"181\":1}}],[\"应用层\",{\"0\":{\"770\":1}}],[\"应用层之下的中间层\",{\"1\":{\"16\":1}}],[\"应用的事实标准\",{\"1\":{\"725\":1}}],[\"应用的商业公司可以考虑尽早调研使用\",{\"1\":{\"677\":1}}],[\"应用准备\",{\"1\":{\"695\":1}}],[\"应用给人带来\",{\"1\":{\"677\":1}}],[\"应用容器\",{\"1\":{\"539\":1}}],[\"应用程序上下文和资源路径\",{\"0\":{\"720\":1}}],[\"应用程序编译为本机二进制文件\",{\"1\":{\"678\":1}}],[\"应用程序的方法\",{\"1\":{\"678\":1}}],[\"应用程序的工具\",{\"1\":{\"478\":1}}],[\"应用程序不应该去处理此类错误\",{\"1\":{\"595\":1}}],[\"应用程序\",{\"1\":{\"479\":2,\"508\":2,\"534\":1}}],[\"应用系统\",{\"1\":{\"306\":1}}],[\"应用平台\",{\"1\":{\"306\":1}}],[\"应用\",{\"1\":{\"306\":1,\"474\":1,\"708\":1}}],[\"应用在myisam\",{\"1\":{\"144\":1}}],[\"旧窗口保留\",{\"1\":{\"551\":1}}],[\"旧次数\",{\"1\":{\"458\":1}}],[\"旧字段名\",{\"1\":{\"180\":1}}],[\"旧表名\",{\"1\":{\"179\":1}}],[\"新增删除都可能导致连锁更新的发生\",{\"1\":{\"445\":1}}],[\"新增操作只在ht\",{\"1\":{\"441\":1}}],[\"新增操作\",{\"1\":{\"440\":1}}],[\"新编码\",{\"1\":{\"434\":1}}],[\"新master\",{\"1\":{\"330\":2}}],[\"新建文件\",{\"1\":{\"312\":1}}],[\"新建一个名为\",{\"1\":{\"490\":1}}],[\"新建一个maven工程并引入以下依赖\",{\"1\":{\"353\":1}}],[\"新建一个\",{\"1\":{\"289\":1,\"762\":1}}],[\"新密码\",{\"1\":{\"197\":1}}],[\"新字段名\",{\"1\":{\"180\":1}}],[\"新数据类型\",{\"1\":{\"180\":1}}],[\"新表名\",{\"1\":{\"179\":1}}],[\"长度24bit\",{\"1\":{\"458\":1}}],[\"长度不能超过2^32\",{\"1\":{\"444\":1}}],[\"长度不能超过16383\",{\"1\":{\"444\":1}}],[\"长度小于\",{\"1\":{\"417\":1}}],[\"长度越短越小\",{\"1\":{\"231\":1}}],[\"长度\",{\"1\":{\"180\":3,\"389\":1}}],[\"长度为null\",{\"1\":{\"131\":1}}],[\"长度为\",{\"1\":{\"131\":1,\"407\":1}}],[\"且配置到ioc容器中\",{\"1\":{\"764\":1}}],[\"且方法名和类名相同的方法\",{\"1\":{\"584\":1}}],[\"且最大不超过\",{\"1\":{\"458\":1}}],[\"且在生产环境时大多数使用的linux系统\",{\"1\":{\"368\":1}}],[\"且\",{\"1\":{\"345\":1,\"444\":1}}],[\"且种类繁多\",{\"1\":{\"181\":1}}],[\"且其操作较多\",{\"1\":{\"179\":1}}],[\"且查询比较频繁的表建立索引\",{\"1\":{\"136\":1}}],[\"影响后续我们的编辑\",{\"1\":{\"308\":1}}],[\"影响\",{\"1\":{\"275\":1}}],[\"影响功能\",{\"1\":{\"179\":1}}],[\"影响查询效率\",{\"1\":{\"134\":1}}],[\"没有任何一个兼容类型的bean能够为属性赋值\",{\"1\":{\"766\":1}}],[\"没有任何关联\",{\"1\":{\"343\":1}}],[\"没有事务就和required一样\",{\"1\":{\"745\":1}}],[\"没有就抛异常\",{\"1\":{\"745\":1}}],[\"没有就不管了\",{\"1\":{\"745\":1}}],[\"没有就新建\",{\"1\":{\"745\":1}}],[\"没有标准化的\",{\"1\":{\"704\":1}}],[\"没有动态能力\",{\"1\":{\"677\":1}}],[\"没有接口时只能使用cglib动态代理\",{\"1\":{\"663\":1}}],[\"没有统一管理\",{\"1\":{\"657\":1}}],[\"没有指定name时把属性名当做name\",{\"1\":{\"647\":1}}],[\"没有返回类型\",{\"1\":{\"588\":2}}],[\"没有返回值\",{\"1\":{\"584\":1}}],[\"没有使用\",{\"1\":{\"584\":1}}],[\"没有参数就返回该类的无参构造函数\",{\"1\":{\"581\":1}}],[\"没有重写\",{\"1\":{\"577\":1}}],[\"没有在事务上增加任何维持原子性的机制\",{\"1\":{\"401\":1}}],[\"没有设置就是非阻塞模式\",{\"1\":{\"394\":1}}],[\"没有则返回nil\",{\"1\":{\"380\":1}}],[\"没有网络开销\",{\"1\":{\"282\":1}}],[\"没有额外的内存消耗\",{\"1\":{\"274\":1}}],[\"没有多余的key\",{\"1\":{\"272\":1}}],[\"没有对应的数据记录值\",{\"1\":{\"260\":1}}],[\"没有not\",{\"1\":{\"223\":1}}],[\"没有也不会对sql语句造成歧义\",{\"1\":{\"179\":1}}],[\"没有实现\",{\"1\":{\"34\":1}}],[\"缩进符来增强语句的可读性\",{\"1\":{\"175\":1}}],[\"书的pdf资料在这里下载\",{\"1\":{\"173\":1}}],[\"视频资料\",{\"1\":{\"769\":1}}],[\"视频教程\",{\"1\":{\"633\":1,\"639\":1}}],[\"视频\",{\"1\":{\"406\":1}}],[\"视频地址\",{\"1\":{\"173\":1,\"268\":2,\"653\":2}}],[\"视图不仅可以简化用户对数据的理解\",{\"1\":{\"169\":1}}],[\"视图不保存数据\",{\"1\":{\"164\":1}}],[\"视图的作用\",{\"0\":{\"169\":1}}],[\"视图的更新\",{\"0\":{\"168\":1}}],[\"视图中的行与基础表中的行之间必须存在一对一的关系\",{\"1\":{\"168\":1}}],[\"视图中的数据并不在数据库中实际存在\",{\"1\":{\"164\":1}}],[\"视图就是一张逻辑sql查询的临时表\",{\"1\":{\"165\":1}}],[\"视图名称\",{\"1\":{\"165\":7}}],[\"视图view是一种虚拟存在的表\",{\"1\":{\"164\":1}}],[\"视图\",{\"0\":{\"162\":1},\"1\":{\"172\":1}}],[\"运行产物只有机器码\",{\"1\":{\"677\":1}}],[\"运行看右边\",{\"1\":{\"577\":2}}],[\"运行一个web应用\",{\"0\":{\"535\":1}}],[\"运行效率\",{\"1\":{\"505\":1}}],[\"运行时是运行的编译好的class文件\",{\"1\":{\"611\":1}}],[\"运行时异常的特点是\",{\"1\":{\"595\":1}}],[\"运行时异常都是\",{\"1\":{\"595\":1}}],[\"运行时异常\",{\"1\":{\"595\":2}}],[\"运行时\",{\"1\":{\"504\":1,\"577\":1,\"677\":1}}],[\"运行这个镜像的容器\",{\"1\":{\"495\":1,\"496\":1}}],[\"运行和\",{\"1\":{\"474\":1}}],[\"运行在内核空间时称为内核态\",{\"1\":{\"403\":1}}],[\"运行查看结果\",{\"1\":{\"362\":1}}],[\"运行后的样子\",{\"1\":{\"343\":1}}],[\"运行下面的命令就可以添加我们的仓库\",{\"1\":{\"307\":1}}],[\"运行结果\",{\"1\":{\"289\":1}}],[\"运行\",{\"1\":{\"289\":1,\"346\":1,\"509\":1,\"677\":1}}],[\"运算中则会报错\",{\"1\":{\"658\":1}}],[\"运算时使用\",{\"1\":{\"438\":1}}],[\"运算符\",{\"0\":{\"563\":1},\"1\":{\"189\":1}}],[\"运算的实现是针对存储结构的\",{\"1\":{\"35\":1}}],[\"运算的定义是针对逻辑结构的\",{\"1\":{\"35\":1}}],[\"运维篇\",{\"1\":{\"172\":1}}],[\"进一步提高对多核\",{\"1\":{\"460\":1}}],[\"进一步节省了内存\",{\"1\":{\"451\":1}}],[\"进入下一步\",{\"1\":{\"556\":2}}],[\"进入当前方法体内\",{\"1\":{\"554\":1}}],[\"进入光标所在的方法\",{\"1\":{\"549\":1}}],[\"进入redis的src目录\",{\"1\":{\"343\":1}}],[\"进入\",{\"1\":{\"297\":1,\"333\":1,\"341\":3,\"342\":1}}],[\"进程缓存和\",{\"1\":{\"285\":1}}],[\"进程本地缓存\",{\"1\":{\"282\":1}}],[\"进去\",{\"1\":{\"223\":1}}],[\"进行统一的调配\",{\"1\":{\"789\":1}}],[\"进行了健壮性\",{\"1\":{\"735\":1}}],[\"进行了正式版发布\",{\"1\":{\"678\":1}}],[\"进行相关的封装\",{\"1\":{\"735\":1}}],[\"进行封装\",{\"1\":{\"729\":1}}],[\"进行充分地结合\",{\"1\":{\"719\":1}}],[\"进行读取\",{\"1\":{\"705\":1}}],[\"进行编译\",{\"1\":{\"677\":1}}],[\"进行查找\",{\"1\":{\"647\":1}}],[\"进行实例化\",{\"1\":{\"581\":1}}],[\"进行交互\",{\"1\":{\"520\":1}}],[\"进行配置教程\",{\"1\":{\"475\":1}}],[\"进行通信\",{\"1\":{\"474\":1}}],[\"进行通配\",{\"1\":{\"198\":1}}],[\"进行筛选\",{\"1\":{\"347\":1,\"549\":1}}],[\"进行纵向计算\",{\"1\":{\"191\":1}}],[\"进行数据恢复使用\",{\"1\":{\"74\":1,\"77\":1}}],[\"进阶篇\",{\"1\":{\"172\":1}}],[\"等组成\",{\"1\":{\"785\":1}}],[\"等前缀强制spring采用对应的资源访问策略\",{\"1\":{\"719\":1}}],[\"等其他编程语言非常大的弊端就是启动编译和启动进程非常慢\",{\"1\":{\"677\":1}}],[\"等以及用户自定义的\",{\"1\":{\"595\":1}}],[\"等子视图\",{\"1\":{\"550\":2}}],[\"等效于点击工具栏的\",{\"1\":{\"551\":2}}],[\"等效于鼠标滚轮向后效果\",{\"1\":{\"549\":1}}],[\"等效于鼠标滚轮向前效果\",{\"1\":{\"549\":1}}],[\"等效于\",{\"1\":{\"549\":1}}],[\"等等\",{\"1\":{\"471\":1}}],[\"等待安装完成\",{\"1\":{\"604\":1}}],[\"等待被写出\",{\"1\":{\"464\":1}}],[\"等待fd就绪\",{\"1\":{\"464\":1}}],[\"等待\",{\"1\":{\"461\":1}}],[\"等待碎片整理的\",{\"1\":{\"456\":1}}],[\"等待数据阶段\",{\"1\":{\"405\":1}}],[\"等后台进程\",{\"1\":{\"439\":1}}],[\"等都进行一致的高性能响应\",{\"1\":{\"306\":1}}],[\"等\",{\"1\":{\"168\":1,\"231\":1,\"550\":1,\"563\":1,\"595\":1}}],[\"聚合函数\",{\"0\":{\"191\":1},\"1\":{\"191\":1,\"192\":1}}],[\"聚合函数或者窗口函数\",{\"1\":{\"168\":1}}],[\"聚合查询\",{\"0\":{\"190\":1},\"1\":{\"187\":1}}],[\"聚集索引中查询直接就能够得到数据的记录值\",{\"1\":{\"128\":1}}],[\"聚集索引的选取规则\",{\"1\":{\"126\":1}}],[\"聚集索引\",{\"1\":{\"126\":1}}],[\"检查镜像是否生效\",{\"1\":{\"475\":1}}],[\"检查redisobject的type属性和执行命令所需的类型是否相符\",{\"1\":{\"470\":1}}],[\"检查rdlist列表是否为空\",{\"1\":{\"409\":1}}],[\"检查该\",{\"1\":{\"457\":1}}],[\"检查时在\",{\"1\":{\"456\":1}}],[\"检查选项\",{\"0\":{\"166\":1}}],[\"检索速度还是很慢\",{\"1\":{\"119\":1}}],[\"检索速度慢\",{\"1\":{\"118\":1}}],[\"案例\",{\"0\":{\"158\":1}}],[\"类中加入如下代码\",{\"1\":{\"760\":2}}],[\"类中增加如下代码\",{\"1\":{\"759\":1}}],[\"类中添加有参构造器\",{\"1\":{\"755\":1}}],[\"类中属性需要给出\",{\"1\":{\"356\":1}}],[\"类也可用于访问文件系统资源\",{\"1\":{\"709\":1}}],[\"类用于访问文件系统资源\",{\"1\":{\"709\":1}}],[\"类上\",{\"1\":{\"644\":1}}],[\"类加载和运行时被读取\",{\"1\":{\"641\":1}}],[\"类加载时初始化\",{\"1\":{\"572\":1,\"582\":1}}],[\"类或其子类\",{\"1\":{\"595\":1}}],[\"类定义错误\",{\"1\":{\"595\":1}}],[\"类及其子类\",{\"1\":{\"595\":2}}],[\"类可以一次性实现多个接口\",{\"1\":{\"590\":1}}],[\"类方法调用\",{\"1\":{\"585\":1}}],[\"类属性\",{\"1\":{\"582\":1}}],[\"类属性和类方法\",{\"1\":{\"572\":1}}],[\"类必须实现\",{\"1\":{\"581\":1}}],[\"类的\",{\"1\":{\"581\":1}}],[\"类的对象\",{\"1\":{\"579\":1}}],[\"类的定义\",{\"1\":{\"553\":1}}],[\"类是对象的抽象\",{\"1\":{\"579\":2}}],[\"类是对象的模板\",{\"1\":{\"579\":1}}],[\"类是描述对象模板的蓝图\",{\"1\":{\"571\":1}}],[\"类和对象\",{\"0\":{\"571\":1,\"578\":1}}],[\"类命名\",{\"1\":{\"561\":1}}],[\"类被调用的地方\",{\"1\":{\"550\":1}}],[\"类名部分整体用\",{\"1\":{\"667\":1}}],[\"类名为$proxy1\",{\"1\":{\"663\":1}}],[\"类名自动完成\",{\"1\":{\"552\":1}}],[\"类名\",{\"1\":{\"549\":2}}],[\"类路径地址比我们真实的数据内容还大\",{\"1\":{\"356\":1}}],[\"类\",{\"1\":{\"336\":1,\"356\":1,\"357\":1,\"560\":1,\"571\":1,\"579\":1,\"646\":8,\"647\":2,\"679\":1,\"754\":1,\"758\":3,\"759\":1,\"760\":1,\"763\":3,\"764\":1}}],[\"类似epoll\",{\"1\":{\"464\":1}}],[\"类似java的hashtable\",{\"1\":{\"441\":1}}],[\"类似\",{\"1\":{\"290\":1,\"464\":1,\"503\":1,\"512\":1,\"531\":1}}],[\"类似于代码仓库\",{\"1\":{\"508\":1}}],[\"类似于提供一个整体的虚拟环境\",{\"1\":{\"505\":1}}],[\"类似于copy\",{\"1\":{\"493\":1}}],[\"类似于java中的hashmap结构\",{\"1\":{\"379\":1}}],[\"类似于只复制数据的索引\",{\"1\":{\"321\":1}}],[\"类似于编程语言中的\",{\"1\":{\"252\":1}}],[\"类似于\",{\"1\":{\"241\":1,\"291\":1,\"530\":1}}],[\"类似于lucene\",{\"1\":{\"117\":1}}],[\"类型名\",{\"1\":{\"695\":1}}],[\"类型上都属于\",{\"1\":{\"595\":1}}],[\"类型对象的特有属性或方法\",{\"1\":{\"577\":1}}],[\"类型信息\",{\"1\":{\"466\":1}}],[\"类型是二进制安全的\",{\"1\":{\"378\":1}}],[\"类型只有在特殊的业务场景下会使用到\",{\"1\":{\"377\":1,\"397\":1}}],[\"类型时\",{\"1\":{\"361\":1}}],[\"类型的对象\",{\"1\":{\"577\":1}}],[\"类型的引用\",{\"1\":{\"577\":1}}],[\"类型的整数集合中添加一个\",{\"1\":{\"434\":1}}],[\"类型的\",{\"1\":{\"357\":1}}],[\"类型的数据元素\",{\"1\":{\"434\":1}}],[\"类型的数据\",{\"1\":{\"354\":1,\"356\":2,\"358\":1,\"361\":1,\"362\":2}}],[\"类型\",{\"0\":{\"156\":1},\"1\":{\"248\":1,\"378\":1,\"434\":1,\"438\":1,\"752\":2}}],[\"语言和国家是可选的\",{\"1\":{\"687\":1}}],[\"语言编写的应用程序的执行\",{\"1\":{\"678\":1}}],[\"语言编写并以源代码形式开放\",{\"1\":{\"288\":1}}],[\"语言\",{\"1\":{\"503\":1,\"690\":1}}],[\"语言的字符串实质为字符数组\",{\"1\":{\"427\":1}}],[\"语言的字符串\",{\"1\":{\"427\":1}}],[\"语言中字符串存在着很多的问题\",{\"1\":{\"427\":1}}],[\"语言中也有字符串\",{\"1\":{\"427\":1}}],[\"语言中的一些数据类型\",{\"1\":{\"290\":1}}],[\"语言来编写的\",{\"1\":{\"427\":1}}],[\"语言类似\",{\"1\":{\"293\":1}}],[\"语句即可\",{\"1\":{\"631\":1}}],[\"语句捕获它\",{\"1\":{\"595\":1}}],[\"语句中的最后一行写上\",{\"1\":{\"566\":1}}],[\"语句中控制\",{\"1\":{\"291\":1}}],[\"语句无限使用\",{\"1\":{\"566\":1}}],[\"语句可以无限嵌套使用\",{\"1\":{\"565\":1}}],[\"语句\",{\"1\":{\"292\":1,\"566\":2,\"661\":1}}],[\"语句在\",{\"1\":{\"230\":1}}],[\"语句级触发\",{\"1\":{\"155\":1}}],[\"语法格式如下\",{\"1\":{\"619\":1}}],[\"语法格式\",{\"1\":{\"388\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1}}],[\"语法2\",{\"1\":{\"249\":1}}],[\"语法1\",{\"1\":{\"249\":1}}],[\"语法如下\",{\"1\":{\"84\":1,\"572\":1}}],[\"语法创建通用表空间\",{\"1\":{\"70\":1}}],[\"语法\",{\"0\":{\"51\":1,\"157\":1,\"385\":1},\"1\":{\"134\":1,\"145\":1,\"189\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"231\":1,\"247\":1}}],[\"举个例子\",{\"1\":{\"410\":1}}],[\"举个简单的例子\",{\"1\":{\"131\":1,\"212\":1,\"571\":1,\"579\":1,\"693\":1}}],[\"举例说明\",{\"0\":{\"212\":1,\"219\":1,\"226\":1},\"1\":{\"378\":1}}],[\"举例\",{\"1\":{\"155\":1}}],[\"触发命令请求处理器\",{\"1\":{\"462\":1}}],[\"触发连接应答处理器\",{\"1\":{\"462\":1}}],[\"触发条件有两个\",{\"1\":{\"419\":1}}],[\"触发并执行触发器中定义的sql语句集合\",{\"1\":{\"155\":1}}],[\"触发器语句\",{\"1\":{\"157\":1}}],[\"触发器类型\",{\"1\":{\"156\":1}}],[\"触发器会触发一次\",{\"1\":{\"155\":1}}],[\"触发器的这种特性可以与协助应用在数据库端确保数据的完整性\",{\"1\":{\"155\":1}}],[\"触发器是于表有关的数据库对象\",{\"1\":{\"155\":1}}],[\"触发器\",{\"0\":{\"154\":1},\"1\":{\"172\":1}}],[\"暂未理解\",{\"1\":{\"151\":1}}],[\"允许transaction01读取transaction02未提交的修改\",{\"1\":{\"744\":1}}],[\"允许在不重启系统的情况下\",{\"1\":{\"689\":1}}],[\"允许在容器内运行应用程序\",{\"1\":{\"476\":1}}],[\"允许仅通过资源名加载国际化资源\",{\"1\":{\"689\":1}}],[\"允许使用\",{\"1\":{\"590\":1}}],[\"允许方法接受可变数量的参数\",{\"1\":{\"587\":1}}],[\"允许你对容器内的标准输入\",{\"1\":{\"520\":1}}],[\"允许开发人员和运维团队轻松地追踪和回滚应用程序的版本\",{\"1\":{\"504\":1}}],[\"允许开发者将应用程序及其依赖项打包到一个可移植的容器中\",{\"1\":{\"489\":1}}],[\"允许\",{\"1\":{\"450\":1}}],[\"允许访问的地址\",{\"1\":{\"371\":1}}],[\"允许获取排他锁的事务更新数据\",{\"1\":{\"149\":1}}],[\"允许一个事务去读一行\",{\"1\":{\"149\":1}}],[\"临键锁\",{\"0\":{\"151\":1},\"1\":{\"148\":1}}],[\"临时表\",{\"0\":{\"72\":1}}],[\"产生幻读\",{\"1\":{\"148\":1}}],[\"产生的\",{\"1\":{\"85\":2}}],[\"防止其他事务在这个间隙进行insert\",{\"1\":{\"148\":1}}],[\"防止其他事务对此行进行update和delete\",{\"1\":{\"148\":1}}],[\"间隙锁\",{\"0\":{\"150\":1},\"1\":{\"148\":1}}],[\"写法二\",{\"1\":{\"731\":1}}],[\"写法一\",{\"1\":{\"731\":1}}],[\"写一个配置类来代替配置文件\",{\"1\":{\"648\":1}}],[\"写响应结果\",{\"1\":{\"463\":1}}],[\"写\",{\"1\":{\"408\":1,\"409\":1}}],[\"写数据时\",{\"1\":{\"403\":1}}],[\"写入用户空间\",{\"1\":{\"406\":1}}],[\"写入\",{\"1\":{\"358\":1}}],[\"写入传播到一个外部数据源当中\",{\"1\":{\"283\":1}}],[\"写命令执行完先放入\",{\"1\":{\"322\":2}}],[\"写出\",{\"1\":{\"321\":1}}],[\"写满以后会覆盖最早的数据\",{\"1\":{\"303\":1}}],[\"写上以后会使sql的可读性更高\",{\"1\":{\"179\":1}}],[\"写锁既会阻塞其他客户端的读\",{\"1\":{\"145\":1}}],[\"写结果\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1}}],[\"元数据锁\",{\"0\":{\"146\":1},\"1\":{\"144\":1}}],[\"元素加载外包配置文件功能前\",{\"1\":{\"762\":1}}],[\"元素开启自动扫描功能前\",{\"1\":{\"643\":1}}],[\"元素开启\",{\"1\":{\"643\":1}}],[\"元素个数\",{\"1\":{\"434\":1}}],[\"元素数据类型不限\",{\"1\":{\"423\":1}}],[\"元素数量小于\",{\"1\":{\"421\":1}}],[\"元素越多耗费内存就越多的集合形成鲜明对⽐\",{\"1\":{\"400\":1}}],[\"元素\",{\"1\":{\"398\":1}}],[\"元素不重复\",{\"1\":{\"382\":1}}],[\"元素不可重复\",{\"1\":{\"381\":1}}],[\"元素可以重复\",{\"1\":{\"380\":1}}],[\"元素后移语句将执行\",{\"1\":{\"38\":1}}],[\"元素后移语句将不执行\",{\"1\":{\"38\":1}}],[\"元素之间的关系由存储单元的邻接关系来体现\",{\"1\":{\"35\":1}}],[\"备份\",{\"1\":{\"141\":1}}],[\"备注信息\",{\"1\":{\"231\":1}}],[\"备注\",{\"0\":{\"309\":1},\"1\":{\"128\":1,\"248\":1}}],[\"全注解配置事务\",{\"0\":{\"746\":1}}],[\"全注解开发就是不再使用spring配置文件了\",{\"1\":{\"648\":1}}],[\"全部大写\",{\"1\":{\"561\":1}}],[\"全部字段添加数据\",{\"1\":{\"182\":1}}],[\"全局变量命名\",{\"1\":{\"561\":1}}],[\"全局锁就是对整个数据库实例加锁\",{\"1\":{\"140\":1}}],[\"全局锁\",{\"0\":{\"139\":1}}],[\"全称为\",{\"1\":{\"321\":1,\"322\":1,\"367\":1}}],[\"全量同步的流程\",{\"1\":{\"302\":1}}],[\"全量同步\",{\"0\":{\"302\":1},\"1\":{\"304\":1}}],[\"全文索引查找的是文本中的关键词\",{\"1\":{\"126\":1}}],[\"全文索引\",{\"1\":{\"126\":2,\"238\":1}}],[\"从功能组成上看\",{\"0\":{\"787\":1},\"1\":{\"787\":1}}],[\"从工作方式上看\",{\"0\":{\"786\":1},\"1\":{\"786\":1}}],[\"从工具窗口进入代码文件窗口\",{\"1\":{\"556\":1}}],[\"从组成部分上看\",{\"0\":{\"785\":1},\"1\":{\"785\":1}}],[\"从0开始\",{\"1\":{\"755\":1}}],[\"从简单性\",{\"1\":{\"725\":1}}],[\"从这个意义上来看\",{\"1\":{\"719\":1}}],[\"从这个角度来说\",{\"1\":{\"138\":1}}],[\"从文件系统中读取资源\",{\"1\":{\"707\":1}}],[\"从低到高的优先级\",{\"1\":{\"700\":1}}],[\"从诞生到成长的整个过程\",{\"1\":{\"691\":1}}],[\"从逻辑上来说\",{\"1\":{\"661\":1}}],[\"从每个方法中抽取出来的同一类非核心业务\",{\"1\":{\"661\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"595\":1}}],[\"从仓库拉取\",{\"1\":{\"509\":1}}],[\"从微观上看\",{\"1\":{\"448\":1}}],[\"从宏观上看\",{\"1\":{\"448\":1}}],[\"从本质上来说\",{\"1\":{\"399\":1}}],[\"从key⾥返回所有给定位置元素的位置\",{\"1\":{\"398\":1}}],[\"从尾部开始消费\",{\"1\":{\"395\":1}}],[\"从头开始消费\",{\"1\":{\"395\":1}}],[\"从大到小\",{\"1\":{\"387\":1}}],[\"从脚本缓存中移除所有脚本\",{\"1\":{\"386\":1}}],[\"从redis中获取一条数据\",{\"1\":{\"353\":1}}],[\"从磁盘读取快照文件\",{\"1\":{\"321\":1}}],[\"从链式结构\",{\"1\":{\"303\":1}}],[\"从节点都叫做\",{\"1\":{\"295\":1}}],[\"从\",{\"1\":{\"290\":1,\"303\":1,\"423\":1,\"503\":1,\"641\":2}}],[\"从最后一次写入操作开始计时\",{\"1\":{\"285\":1}}],[\"从所有键中驱逐使用频率最少的键\",{\"1\":{\"278\":1,\"458\":1}}],[\"从所有配置了过期时间的键中驱逐使用频率最少的键\",{\"1\":{\"278\":1,\"458\":1}}],[\"从所有key随机删除\",{\"1\":{\"278\":1,\"458\":1}}],[\"从配置了过期时间的键中驱逐马上就要过期的键\",{\"1\":{\"278\":1,\"458\":1}}],[\"从过期键的集合中随机驱逐\",{\"1\":{\"278\":1,\"458\":1}}],[\"从越大数据开始的分页\",{\"1\":{\"218\":1}}],[\"从mysql安装到mysql高级\",{\"1\":{\"173\":1}}],[\"从而利用空闲计算机资源以提高整个系统的利用率\",{\"1\":{\"791\":1}}],[\"从而极大地提高硬件资源\",{\"1\":{\"790\":1}}],[\"从而长时间占用数据库资源\",{\"1\":{\"742\":1}}],[\"从而覆盖了原始异常\",{\"1\":{\"600\":1}}],[\"从而不交给上层\",{\"1\":{\"600\":1}}],[\"从而减少代码量\",{\"1\":{\"576\":1}}],[\"从而减少磁盘io\",{\"1\":{\"63\":1}}],[\"从而避免无效的等待\",{\"1\":{\"406\":1}}],[\"从而将应用程序和具体的资源访问策略分离开来\",{\"1\":{\"717\":1}}],[\"从而将\",{\"1\":{\"306\":1}}],[\"从而为应用程序提供灵活的扩展和定制功能\",{\"1\":{\"288\":1}}],[\"从而使得业务逻辑各部分之间的耦合度降低\",{\"1\":{\"660\":1}}],[\"从而使得用户不必为以后的操作每次指定全部的查询条件\",{\"1\":{\"169\":1}}],[\"从而使得逻辑上相邻的两个元素在物理上也相邻\",{\"1\":{\"38\":1}}],[\"从而获取一致性视图\",{\"1\":{\"140\":1}}],[\"从而提高索引效率\",{\"1\":{\"134\":1}}],[\"从而提高语句的效率\",{\"1\":{\"58\":1}}],[\"从而确保多对多的关系\",{\"1\":{\"94\":1}}],[\"从而形成一个自己熟悉且较为完备的知识体系\",{\"1\":{\"2\":1}}],[\"介绍和基本语法\",{\"0\":{\"163\":1}}],[\"介绍\",{\"0\":{\"138\":1,\"140\":1,\"144\":1,\"155\":1,\"164\":1,\"241\":1,\"360\":1,\"618\":1},\"1\":{\"191\":1,\"236\":1,\"237\":1,\"238\":1}}],[\"避免各种并发问题\",{\"1\":{\"744\":1}}],[\"避免配置干扰\",{\"1\":{\"341\":1}}],[\"避免主进程受到影响\",{\"1\":{\"321\":1}}],[\"避免全量同步时的磁盘\",{\"1\":{\"303\":1}}],[\"避免被猜测id规律\",{\"1\":{\"272\":1}}],[\"避免回表查询\",{\"1\":{\"216\":1}}],[\"避免回表\",{\"1\":{\"136\":1}}],[\"避免同一个表中某数据列中的值重复\",{\"1\":{\"126\":1}}],[\"排他\",{\"1\":{\"146\":1}}],[\"排他锁\",{\"1\":{\"82\":1,\"149\":1}}],[\"排序方式\",{\"1\":{\"193\":1}}],[\"排序方式2\",{\"1\":{\"193\":1}}],[\"排序方式1\",{\"1\":{\"193\":1}}],[\"排序查询\",{\"0\":{\"193\":1},\"1\":{\"187\":1}}],[\"排序字段列表\",{\"1\":{\"186\":1,\"195\":1}}],[\"排序规则\",{\"1\":{\"178\":1}}],[\"排序\",{\"1\":{\"136\":1,\"619\":1}}],[\"考虑针对于查询字段建立索引时\",{\"1\":{\"135\":1}}],[\"前面介绍了\",{\"1\":{\"719\":1}}],[\"前面我们了解的几种方法要么通过sql的执行频率\",{\"1\":{\"231\":1}}],[\"前置通知\",{\"1\":{\"661\":1,\"666\":3}}],[\"前端资料\",{\"1\":{\"634\":1}}],[\"前端资料下载\",{\"1\":{\"634\":1}}],[\"前端环境搭建\",{\"0\":{\"632\":1}}],[\"前往指定的变量\",{\"1\":{\"555\":1}}],[\"前往当前光标所在的方法的父类的方法\",{\"1\":{\"549\":1}}],[\"前进到上一个操作的地方\",{\"1\":{\"552\":1}}],[\"前方向键\",{\"1\":{\"549\":1,\"550\":1,\"552\":1,\"553\":1,\"554\":1}}],[\"前的处理器\",{\"1\":{\"464\":1}}],[\"前一个节点长度小于254字节\",{\"1\":{\"445\":1}}],[\"前提是这个field不存在\",{\"1\":{\"379\":1}}],[\"前提是这个key不存在\",{\"1\":{\"378\":1}}],[\"前台启动redis后\",{\"1\":{\"370\":1}}],[\"前台启动redis\",{\"1\":{\"370\":1}}],[\"前台启动\",{\"0\":{\"370\":1}}],[\"前景回顾\",{\"1\":{\"354\":1}}],[\"前景提要\",{\"1\":{\"229\":1,\"231\":1}}],[\"前或后\",{\"1\":{\"208\":1}}],[\"前缀和通配符结合使用\",{\"1\":{\"723\":1}}],[\"前缀不可用于resource\",{\"1\":{\"723\":1}}],[\"前缀仅对applicationcontext有效\",{\"1\":{\"723\":1}}],[\"前缀\",{\"1\":{\"723\":2}}],[\"前缀时\",{\"1\":{\"723\":1}}],[\"前缀来指定xml配置文件时\",{\"1\":{\"723\":1}}],[\"前缀提供了加载多个xml配置文件的能力\",{\"1\":{\"723\":1}}],[\"前缀强制搜索类加载路径\",{\"1\":{\"723\":1}}],[\"前缀后\",{\"1\":{\"708\":1,\"709\":1}}],[\"前缀长度\",{\"1\":{\"134\":1}}],[\"前缀索引\",{\"0\":{\"134\":1}}],[\"前者是在内存中\",{\"1\":{\"74\":1,\"77\":1}}],[\"能读懂即可\",{\"1\":{\"506\":1}}],[\"能根据自己的指令\",{\"1\":{\"466\":1}}],[\"能监听的\",{\"1\":{\"412\":1}}],[\"能否继续重复\",{\"1\":{\"291\":1}}],[\"能大量减少对数据库的访问\",{\"1\":{\"282\":1}}],[\"能够获取到\",{\"1\":{\"752\":1}}],[\"能够指导我们如何设计出松耦合\",{\"1\":{\"691\":1}}],[\"能够指出文章中一些能够完美\",{\"1\":{\"3\":1}}],[\"能够真正意义上实现和c\",{\"1\":{\"679\":1}}],[\"能够看到当前mysql是否支持profile操作\",{\"1\":{\"230\":1}}],[\"能通过索引直接查到\",{\"1\":{\"133\":1}}],[\"覆盖索引\",{\"0\":{\"133\":1},\"1\":{\"216\":1}}],[\"哪里不满足\",{\"1\":{\"131\":1}}],[\"括号内为长度\",{\"1\":{\"131\":1}}],[\"7004\",{\"1\":{\"346\":9}}],[\"7003这几个目录\",{\"1\":{\"341\":1}}],[\"7003\",{\"1\":{\"296\":1,\"297\":10,\"298\":2,\"299\":2,\"340\":1,\"341\":5,\"342\":2,\"343\":2,\"348\":1}}],[\"7002和7003这两个slave节点只能执行读操作\",{\"1\":{\"300\":1}}],[\"7002\",{\"1\":{\"296\":1,\"297\":10,\"298\":2,\"299\":2,\"329\":1,\"340\":1,\"341\":6,\"342\":2,\"343\":2,\"348\":1}}],[\"7001节点\",{\"1\":{\"299\":1}}],[\"7001\",{\"1\":{\"296\":1,\"297\":8,\"298\":2,\"299\":4,\"333\":3,\"340\":1,\"341\":4,\"342\":2,\"343\":3,\"344\":2,\"346\":3,\"348\":1}}],[\"7\",{\"1\":{\"131\":2,\"195\":1,\"203\":2,\"468\":1,\"480\":1,\"513\":1,\"600\":1,\"678\":1}}],[\"|=\",{\"1\":{\"563\":1}}],[\"|10000000|qqqqqqqq|rrrrrrrr|ssssssss|ttttttt|\",{\"1\":{\"444\":1}}],[\"|01pppppp|qqqqqqqq|\",{\"1\":{\"444\":1}}],[\"|00pppppp|\",{\"1\":{\"444\":1}}],[\"|\",{\"1\":{\"129\":2,\"165\":3,\"228\":1,\"244\":6,\"261\":3,\"297\":2,\"298\":1,\"333\":1,\"341\":2,\"342\":6,\"464\":2,\"529\":1,\"563\":1,\"581\":1,\"600\":2,\"650\":2}}],[\"||\",{\"1\":{\"38\":3,\"189\":1,\"563\":1,\"650\":1}}],[\"8中可以定义default方法体\",{\"1\":{\"592\":1}}],[\"8b\",{\"1\":{\"562\":2}}],[\"8c0dde3e3fb4\",{\"1\":{\"514\":1}}],[\"88\",{\"1\":{\"353\":1}}],[\"888\",{\"1\":{\"300\":1}}],[\"80\",{\"1\":{\"480\":4,\"482\":2,\"483\":1,\"493\":1,\"634\":3,\"737\":1}}],[\"8003目录\",{\"1\":{\"341\":1}}],[\"8003\",{\"1\":{\"340\":1,\"341\":3,\"342\":2,\"343\":2,\"348\":1}}],[\"8002\",{\"1\":{\"340\":1,\"341\":4,\"342\":2,\"343\":2,\"348\":1}}],[\"8001\",{\"1\":{\"340\":1,\"341\":4,\"342\":2,\"343\":2,\"348\":1}}],[\"8088\",{\"1\":{\"634\":1}}],[\"8080\",{\"1\":{\"336\":2,\"634\":2,\"717\":1}}],[\"8081\",{\"1\":{\"308\":2}}],[\"8\",{\"1\":{\"128\":1,\"203\":2,\"278\":1,\"349\":4,\"353\":1,\"362\":2,\"375\":1,\"417\":1,\"424\":3,\"428\":1,\"444\":2,\"450\":1,\"458\":1,\"467\":1,\"468\":1,\"600\":1,\"643\":1,\"650\":1,\"651\":1,\"665\":1,\"690\":2,\"700\":2,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"8n2​\",{\"1\":{\"25\":1}}],[\"虽然购买图书功能中出现了数学运算异常\",{\"1\":{\"743\":1}}],[\"虽然docker\",{\"1\":{\"483\":1}}],[\"虽然节省内存\",{\"1\":{\"446\":1}}],[\"虽然是非阻塞的\",{\"1\":{\"405\":1}}],[\"虽然\",{\"1\":{\"356\":1}}],[\"虽然服务启动了\",{\"1\":{\"343\":1}}],[\"虽然建立有索引\",{\"1\":{\"128\":1}}],[\"虽然只执行了一条查询语句\",{\"1\":{\"127\":1}}],[\"那就是graalvm\",{\"1\":{\"679\":1}}],[\"那就是直接摒弃jvm\",{\"1\":{\"679\":1}}],[\"那就产生了大量重复的代码\",{\"1\":{\"657\":1}}],[\"那还得再声明更多个静态代理类\",{\"1\":{\"657\":1}}],[\"那它和\",{\"1\":{\"647\":1}}],[\"那些被经常使用的查询可以被定义为视图\",{\"1\":{\"169\":1}}],[\"那个执行效率更高\",{\"1\":{\"128\":1}}],[\"那么久无法根据接口类型来获取该实现类的bean\",{\"1\":{\"752\":1}}],[\"那么系统中的所有变化将自动地回滚\",{\"1\":{\"733\":1}}],[\"那么系统中所有变化将正确地应用\",{\"1\":{\"733\":1}}],[\"那么我们在创建\",{\"1\":{\"693\":1}}],[\"那么我们必须建立一套完整的机制保证数据能够可靠发送\",{\"1\":{\"18\":1}}],[\"那么优先查找messages\",{\"1\":{\"687\":1}}],[\"那么必须同时写明权限修饰符\",{\"1\":{\"667\":1}}],[\"那么切入点就是查询记录的\",{\"1\":{\"661\":1}}],[\"那么执行完不会退出\",{\"1\":{\"566\":1}}],[\"那么docker\",{\"1\":{\"531\":1}}],[\"那么能不能直接删除正在运行中的容器呢\",{\"1\":{\"526\":1}}],[\"那么会直接使用这些镜像\",{\"1\":{\"491\":1}}],[\"那么有没有一种更为简单的方法呢\",{\"1\":{\"477\":1}}],[\"那么说明该对象可以被删除销毁\",{\"1\":{\"472\":1}}],[\"那么验证操作的复杂度将会是o\",{\"1\":{\"471\":1}}],[\"那么验证操作的复杂度为o\",{\"1\":{\"471\":2}}],[\"那么当一个节点数据发生变化时\",{\"1\":{\"445\":1}}],[\"那么它每个元素占用的内存是一样的且取决于最大的那个元素\",{\"1\":{\"443\":1}}],[\"那么要一次性的进行\",{\"1\":{\"440\":1}}],[\"那么如果删除掉刚加入的int16类型时\",{\"1\":{\"434\":1}}],[\"那么如何解决这些问题呢\",{\"1\":{\"354\":1}}],[\"那么整个整数集合中的元素都会升级为\",{\"1\":{\"434\":1}}],[\"那么事务将被打断\",{\"1\":{\"401\":1}}],[\"那么\",{\"1\":{\"324\":1,\"440\":1,\"445\":1,\"466\":1}}],[\"那么可以像下面这样安装\",{\"1\":{\"307\":1}}],[\"那么选择这个存储引擎是非常合适的\",{\"1\":{\"239\":1}}],[\"那么innodb存储引擎是比较合适的选择\",{\"1\":{\"239\":1}}],[\"那么innodb引擎就会生成一个rowid作为隐藏的聚集索引\",{\"1\":{\"126\":1}}],[\"那么都是可以使用索引进行查询的\",{\"1\":{\"212\":1}}],[\"那么此时就无法仅依靠类型来创建对象\",{\"1\":{\"752\":1}}],[\"那么此时我们怎么进入容器呢\",{\"1\":{\"524\":1}}],[\"那么此时慢查询就无法满足我们的需求\",{\"1\":{\"229\":1}}],[\"那么此时需要将数据插入到页中\",{\"1\":{\"207\":1}}],[\"那么此时所有的数据在页内都会顺序排列\",{\"1\":{\"207\":1}}],[\"那么在删除该镜像之前\",{\"1\":{\"514\":1}}],[\"那么在删除数据时会进行缩容操作吗\",{\"1\":{\"434\":1}}],[\"那么在部署容器的时候就需要一个一个进行部署\",{\"1\":{\"477\":1}}],[\"那么在插入时会伴随页分裂\",{\"1\":{\"207\":1}}],[\"那么在主键乱序插入一组数据以后\",{\"1\":{\"207\":1}}],[\"那么在备份期间从库不能执行主库同步过来的二进制日志\",{\"1\":{\"142\":1}}],[\"那么在备份期间都不能执行更新\",{\"1\":{\"142\":1}}],[\"那么涉及的索引都不会被使用到\",{\"1\":{\"131\":1}}],[\"那么就在这个事务中运行\",{\"1\":{\"745\":1}}],[\"那么就需要两个版本的配置文件\",{\"1\":{\"686\":1}}],[\"那么就需要将异常传递给上层处理\",{\"1\":{\"598\":1}}],[\"那么就会导致\",{\"1\":{\"650\":1}}],[\"那么就会报错\",{\"1\":{\"514\":1}}],[\"那么就必须先删除使用该镜像的所有容器\",{\"1\":{\"514\":1}}],[\"那么就是多线程\",{\"1\":{\"460\":1}}],[\"那么就根据\",{\"1\":{\"345\":1}}],[\"那么就不可避免的会出现哈希碰撞\",{\"1\":{\"123\":1}}],[\"那么就存在当客户端发送的连接请求报文段阻塞时\",{\"1\":{\"18\":1}}],[\"那么对应的时间复杂度就是\",{\"1\":{\"25\":1}}],[\"那么对比于三次握手\",{\"1\":{\"18\":1}}],[\"那么各类官方文档是不是更为权威呢\",{\"1\":{\"2\":1}}],[\"那么为什么不去直接使用他们整理好的学习笔记呢\",{\"1\":{\"2\":1}}],[\"回到前一个工具窗口\",{\"1\":{\"556\":1}}],[\"回到步骤三\",{\"1\":{\"410\":1}}],[\"回表查询\",{\"0\":{\"127\":1},\"1\":{\"127\":1}}],[\"回滚\",{\"1\":{\"745\":1}}],[\"回滚策略\",{\"0\":{\"743\":1}}],[\"回滚事务\",{\"1\":{\"258\":1,\"734\":1}}],[\"回滚指针\",{\"1\":{\"84\":1}}],[\"回滚日志\",{\"1\":{\"78\":1,\"85\":1}}],[\"回滚段中\",{\"1\":{\"78\":1}}],[\"回滚段\",{\"1\":{\"60\":1}}],[\"常见实现类\",{\"1\":{\"689\":1}}],[\"常见的方法有\",{\"1\":{\"619\":1}}],[\"常见的异常捕获方式有\",{\"1\":{\"600\":1}}],[\"常见的内部类有\",{\"1\":{\"580\":1}}],[\"常见的nosql数据库有\",{\"1\":{\"365\":1}}],[\"常见的取值有simple\",{\"1\":{\"231\":1}}],[\"常见的聚合函数\",{\"1\":{\"191\":1}}],[\"常量命名\",{\"1\":{\"561\":1}}],[\"常常使用到不止一个容器\",{\"1\":{\"477\":1}}],[\"常用注解说明\",{\"1\":{\"682\":1}}],[\"常用来存储一个有序数据\",{\"1\":{\"380\":1}}],[\"常用的创建对象有这几种方式\",{\"1\":{\"581\":1}}],[\"常用的快捷键和一些好用的操作\",{\"1\":{\"546\":1}}],[\"常用的数据类型包括5种\",{\"1\":{\"423\":1}}],[\"常用的操作符\",{\"1\":{\"102\":1,\"103\":1,\"104\":1}}],[\"常用的操作符号\",{\"1\":{\"101\":1}}],[\"常用的几个如下所示\",{\"1\":{\"55\":1}}],[\"常规写法\",{\"1\":{\"336\":1}}],[\"常规索引\",{\"1\":{\"126\":2}}],[\"❌\",{\"1\":{\"125\":5,\"261\":6}}],[\"✅\",{\"1\":{\"125\":6,\"261\":6,\"524\":1}}],[\"思考题\",{\"0\":{\"128\":1},\"1\":{\"124\":1}}],[\"思考\",{\"0\":{\"124\":1,\"460\":1},\"1\":{\"324\":1,\"434\":1,\"446\":1}}],[\"无符号\",{\"1\":{\"737\":2}}],[\"无须使用绝对路径访问\",{\"1\":{\"708\":1}}],[\"无注解\",{\"1\":{\"646\":1}}],[\"无参构造法\",{\"1\":{\"622\":1}}],[\"无参数\",{\"1\":{\"588\":1}}],[\"无格式黏贴\",{\"1\":{\"555\":1}}],[\"无上限\",{\"1\":{\"408\":1}}],[\"无序\",{\"1\":{\"381\":1}}],[\"无关联\",{\"1\":{\"366\":1}}],[\"无需了解网络的存在\",{\"1\":{\"783\":1}}],[\"无需额外开销\",{\"1\":{\"678\":1}}],[\"无需预热即可实现最高性能\",{\"1\":{\"678\":1}}],[\"无需阻塞等待\",{\"1\":{\"413\":1}}],[\"无需重复拷贝\",{\"1\":{\"412\":1}}],[\"无需传递任何参数\",{\"1\":{\"412\":1}}],[\"无需关心缓存一致性问题\",{\"1\":{\"277\":1}}],[\"无需显示使用\",{\"1\":{\"146\":1}}],[\"无\",{\"1\":{\"276\":1,\"744\":6}}],[\"无数的请求访问会在瞬间给数据库带来巨大的冲击\",{\"1\":{\"274\":1}}],[\"无法制作更详细的\",{\"1\":{\"499\":1}}],[\"无法响应客户端请求\",{\"1\":{\"321\":1}}],[\"无法共享\",{\"1\":{\"282\":1}}],[\"无法再压缩sql的执行时间\",{\"1\":{\"229\":1}}],[\"无法利用索引完成排序操作\",{\"1\":{\"123\":1}}],[\"无论它是在文件系统上扩展还是直接从jar或其他地方\",{\"1\":{\"710\":1}}],[\"无论在那种环境下\",{\"1\":{\"613\":1}}],[\"无论版本如何\",{\"1\":{\"613\":1}}],[\"无论是在开发\",{\"1\":{\"504\":1}}],[\"无论是在远程连接或者本地连接\",{\"1\":{\"374\":1}}],[\"无论是否在执行bgsave\",{\"1\":{\"439\":1}}],[\"无论是否定义\",{\"1\":{\"166\":1}}],[\"无论是阻塞\",{\"1\":{\"406\":1}}],[\"无论是叶子结点还是非叶子结点\",{\"1\":{\"124\":1}}],[\"无论影响多少行\",{\"1\":{\"155\":1}}],[\"无论将哪张表放在左边\",{\"1\":{\"98\":1}}],[\"知识点\",{\"1\":{\"123\":1}}],[\"知识只有被系统性的归纳起来\",{\"1\":{\"2\":1}}],[\"哈希大小\",{\"1\":{\"438\":1}}],[\"哈希算法\",{\"1\":{\"437\":1}}],[\"哈希节点\",{\"1\":{\"437\":1,\"438\":1}}],[\"哈希表大小\",{\"1\":{\"439\":1}}],[\"哈希表大小的掩码\",{\"1\":{\"438\":1}}],[\"哈希表已保存节点数量\",{\"1\":{\"439\":1}}],[\"哈希表的\",{\"1\":{\"439\":2}}],[\"哈希表\",{\"1\":{\"437\":1,\"438\":1,\"469\":1}}],[\"哈希表dict\",{\"0\":{\"436\":1}}],[\"哈希结构与\",{\"1\":{\"419\":1}}],[\"哈希对象\",{\"1\":{\"471\":3}}],[\"哈希对象的编码可以是\",{\"1\":{\"419\":1}}],[\"哈希对象的键是一个字符串类型\",{\"1\":{\"419\":1}}],[\"哈希对象hash\",{\"0\":{\"419\":1}}],[\"哈希\",{\"0\":{\"379\":1}}],[\"哈希索引的特点\",{\"1\":{\"123\":1}}],[\"哈希索引就是采用一定的hash算法\",{\"1\":{\"123\":1}}],[\"哈希冲突\",{\"1\":{\"123\":1,\"437\":2}}],[\"相当于追踪程序的执行\",{\"1\":{\"700\":1}}],[\"相当于查询数据表a\",{\"1\":{\"96\":1}}],[\"相信很多人都和我有过相同的经历\",{\"1\":{\"636\":1}}],[\"相同目标方法上同时存在多个切面时\",{\"1\":{\"671\":1}}],[\"相同\",{\"1\":{\"644\":3}}],[\"相同点\",{\"1\":{\"592\":1}}],[\"相同的输入参数总是产生相同的结果\",{\"1\":{\"256\":1}}],[\"相互之间不会有任何接口\",{\"1\":{\"503\":1}}],[\"相反如果执行的是收缩操作\",{\"1\":{\"439\":1}}],[\"相比于\",{\"1\":{\"677\":1}}],[\"相比\",{\"1\":{\"410\":1}}],[\"相关术语\",{\"0\":{\"661\":1}}],[\"相关的依赖\",{\"1\":{\"651\":1}}],[\"相关的约束\",{\"1\":{\"643\":1,\"762\":1}}],[\"相关业务对数据安全性\",{\"1\":{\"366\":1}}],[\"相关信息\",{\"1\":{\"151\":1,\"375\":1,\"572\":1}}],[\"相对路径\",{\"1\":{\"709\":1}}],[\"相对于其他的\",{\"1\":{\"708\":1}}],[\"相对于铺天盖地的关系型数据库运用\",{\"1\":{\"365\":1}}],[\"相对于二叉树\",{\"1\":{\"124\":1}}],[\"相对完整\",{\"1\":{\"323\":1}}],[\"相邻的叶子结点会有一个单向的指针连接\",{\"1\":{\"121\":1}}],[\"待更新\",{\"1\":{\"629\":1,\"637\":1,\"649\":1,\"656\":1}}],[\"待更新b树\",{\"1\":{\"120\":1}}],[\"待查询时再创建缓存\",{\"1\":{\"277\":1}}],[\"待数据传输完成以后\",{\"1\":{\"19\":1}}],[\"树的度数指的是一个节点的子节点个数\",{\"1\":{\"120\":1}}],[\"树形结构\",{\"1\":{\"35\":1}}],[\"小张\",{\"1\":{\"579\":1}}],[\"小张就是三个该类的对象\",{\"1\":{\"579\":1}}],[\"小明\",{\"1\":{\"579\":1,\"761\":1}}],[\"小红\",{\"1\":{\"579\":2}}],[\"小驼峰命名法\",{\"1\":{\"561\":3}}],[\"小写轮流转换\",{\"1\":{\"553\":1}}],[\"小鹏\",{\"1\":{\"424\":5}}],[\"小米11\",{\"1\":{\"378\":1}}],[\"小于号在xml文档中用来定义标签的开始\",{\"1\":{\"757\":1}}],[\"小于redis\",{\"1\":{\"471\":1}}],[\"小于等于\",{\"1\":{\"189\":1}}],[\"小于\",{\"1\":{\"189\":1,\"302\":1,\"434\":2}}],[\"小贴士\",{\"1\":{\"133\":1,\"208\":1}}],[\"小知识\",{\"1\":{\"120\":1,\"135\":1,\"161\":1,\"207\":1,\"560\":1}}],[\"小结\",{\"0\":{\"330\":1,\"358\":1},\"1\":{\"19\":1}}],[\"红黑树虽然解决了退化为单链表的这种现象\",{\"1\":{\"119\":1}}],[\"红黑树\",{\"0\":{\"119\":1},\"1\":{\"119\":1}}],[\"二宝\",{\"1\":{\"760\":1}}],[\"二十三种设计模式中的一种\",{\"1\":{\"656\":1}}],[\"二进制安全\",{\"1\":{\"429\":1}}],[\"二级索引\",{\"1\":{\"126\":1}}],[\"二级索引通常情况下是非唯一的\",{\"1\":{\"64\":1}}],[\"二叉树\",{\"0\":{\"118\":1},\"1\":{\"118\":1}}],[\"快捷键\",{\"0\":{\"547\":1},\"1\":{\"549\":1}}],[\"快照\",{\"1\":{\"321\":1}}],[\"快照文件称为\",{\"1\":{\"321\":1}}],[\"快照读会退化为当前读\",{\"1\":{\"83\":1}}],[\"快照读读取的是记录数据的可见版本\",{\"1\":{\"83\":1}}],[\"快照读\",{\"0\":{\"83\":1}}],[\"快照读为mysql实现mvcc提供了一个非阻塞读功能\",{\"1\":{\"81\":1}}],[\"快速添加指定数值的书签\",{\"1\":{\"553\":1}}],[\"快速查看光标所在的方法\",{\"1\":{\"553\":1}}],[\"快速引进变量\",{\"1\":{\"552\":1}}],[\"快速部署\",{\"1\":{\"504\":1}}],[\"快速列表\",{\"1\":{\"468\":1}}],[\"快速列表quicklist\",{\"0\":{\"447\":1}}],[\"快速构造出足以胜任\",{\"1\":{\"306\":1}}],[\"快速入门\",{\"0\":{\"289\":1,\"353\":1}}],[\"快速定位特定数据\",{\"1\":{\"126\":1}}],[\"快速匹配文档的方式\",{\"1\":{\"117\":1}}],[\"只把最简洁的使用界面展示给我们\",{\"1\":{\"765\":1}}],[\"只在第二次的buybook\",{\"1\":{\"745\":1}}],[\"只读\",{\"0\":{\"741\":1}}],[\"只作用于字符串类型\",{\"1\":{\"682\":2}}],[\"只罗列了常用的几个异常和错误\",{\"1\":{\"593\":1}}],[\"只显示最后100行\",{\"1\":{\"529\":1}}],[\"只共享字符串对象\",{\"1\":{\"471\":1}}],[\"只要是能实现远程信息处理的系统或者能进一步达到资源共享的系统\",{\"1\":{\"781\":1}}],[\"只要返回的是\",{\"1\":{\"752\":1}}],[\"只要保证唯一性\",{\"1\":{\"752\":1}}],[\"只要出现如上的镜像链接\",{\"1\":{\"475\":1}}],[\"只要\",{\"1\":{\"466\":1}}],[\"只要求逻辑相邻\",{\"1\":{\"35\":1}}],[\"只包含设置了\",{\"1\":{\"456\":1}}],[\"只减不增\",{\"1\":{\"441\":1}}],[\"只需要将其中的\",{\"1\":{\"760\":1}}],[\"只需要运行时的一些类库\",{\"1\":{\"612\":1}}],[\"只需要把排序有关的\",{\"1\":{\"419\":1}}],[\"只需要执行一次\",{\"1\":{\"412\":1}}],[\"只会通知一次\",{\"1\":{\"410\":1}}],[\"只会通知用户进程有fd就绪\",{\"1\":{\"406\":1}}],[\"只会根据输⼊元素来计算基数\",{\"1\":{\"400\":1}}],[\"只接受新消息\",{\"1\":{\"395\":1}}],[\"只不过提供了一些封装了各种操作该数组的方法\",{\"1\":{\"621\":1}}],[\"只不过\",{\"1\":{\"530\":1}}],[\"只不过链表中的每个节点都是一个\",{\"1\":{\"446\":1}}],[\"只不过在没有元素时等待指定时间\",{\"1\":{\"380\":1}}],[\"只不过在写入之前会把\",{\"1\":{\"354\":1}}],[\"只不过是编码方式不同\",{\"1\":{\"378\":1}}],[\"只不过获取到的值为null\",{\"1\":{\"245\":1}}],[\"只复制了对应的页表\",{\"1\":{\"321\":1}}],[\"只是对继承方法的实现或是重写\",{\"1\":{\"580\":1}}],[\"只是针对我来说\",{\"1\":{\"543\":1}}],[\"只是字符串是异常信息\",{\"1\":{\"423\":1}}],[\"只是记录被标记\",{\"1\":{\"208\":1}}],[\"只是保存了查询的sql逻辑\",{\"1\":{\"164\":1}}],[\"只有在单例模式下\",{\"1\":{\"764\":1}}],[\"只有在7001这个master节点上可以执行写操作\",{\"1\":{\"300\":1}}],[\"只有一个方法\",{\"1\":{\"705\":1}}],[\"只有一个构造函数\",{\"1\":{\"646\":1}}],[\"只有finally块\",{\"1\":{\"597\":1}}],[\"只有公共接口对外部可见\",{\"1\":{\"575\":1}}],[\"只有指针才能够指向任意的地址\",{\"1\":{\"471\":1}}],[\"只有值\",{\"1\":{\"290\":1}}],[\"只有很少的更新和删除操作\",{\"1\":{\"239\":1}}],[\"只有这一个\",{\"1\":{\"238\":1}}],[\"只有当第一个字段的值相同时\",{\"1\":{\"193\":1}}],[\"只有共享锁和共享锁之间是兼容的\",{\"1\":{\"149\":1}}],[\"只有精确匹配索引列的查询才有效\",{\"1\":{\"117\":1}}],[\"只能够读取一次并且及时关闭以避免内存泄漏\",{\"1\":{\"705\":1}}],[\"只能是引用类型\",{\"1\":{\"619\":1}}],[\"只能访问外部类的静态属性\",{\"1\":{\"580\":1}}],[\"只能依次处理每一个\",{\"1\":{\"406\":1}}],[\"只能再次全量同步\",{\"1\":{\"303\":1}}],[\"只能将这些表作为临时表或者缓存使用\",{\"1\":{\"238\":1}}],[\"只能有一个\",{\"1\":{\"126\":1}}],[\"只能增加树的高度\",{\"1\":{\"124\":1}}],[\"底层存储\",{\"0\":{\"621\":1}}],[\"底层存储为\",{\"1\":{\"423\":1}}],[\"底层是数组加链表来解决哈希冲突\",{\"1\":{\"441\":1}}],[\"底层所使用的字符串表示\",{\"1\":{\"430\":1}}],[\"底层实现\",{\"0\":{\"428\":1,\"433\":1,\"438\":1,\"449\":1,\"454\":1,\"464\":1},\"1\":{\"434\":1}}],[\"底层同时使用了两种结构\",{\"1\":{\"421\":1}}],[\"底层同样基于\",{\"1\":{\"348\":1}}],[\"底层数据结构必须满足键值存储\",{\"1\":{\"421\":1}}],[\"底层数据结构是用哈希表实现的\",{\"1\":{\"117\":1}}],[\"底层采用二分查找方式来查询\",{\"1\":{\"435\":1}}],[\"底层采用的编码与\",{\"1\":{\"419\":1}}],[\"底层采用链表数据结构管理page\",{\"1\":{\"63\":1}}],[\"底层的实现是一个跳表\",{\"1\":{\"382\":1}}],[\"底层都是字节数组形式存储\",{\"1\":{\"378\":1}}],[\"底层利用\",{\"1\":{\"336\":1}}],[\"效果前面已经演示\",{\"1\":{\"722\":1}}],[\"效果相同\",{\"1\":{\"379\":1}}],[\"效果更佳\",{\"1\":{\"22\":1}}],[\"效率更高\",{\"1\":{\"417\":1}}],[\"效率\",{\"1\":{\"403\":1}}],[\"效率提升\",{\"1\":{\"241\":1}}],[\"效率排行\",{\"1\":{\"223\":1}}],[\"效率很高\",{\"1\":{\"221\":1}}],[\"效率相对较低\",{\"1\":{\"215\":1}}],[\"效率通常要高于b+tree索引\",{\"1\":{\"123\":1}}],[\"效率降低\",{\"1\":{\"116\":1}}],[\"优先级低\",{\"1\":{\"671\":1}}],[\"优先级低的切面\",{\"1\":{\"671\":1}}],[\"优先级高\",{\"1\":{\"671\":1}}],[\"优先级高的切面\",{\"1\":{\"671\":1}}],[\"优先级越高\",{\"1\":{\"328\":1}}],[\"优先执行重写后的方法\",{\"1\":{\"577\":1}}],[\"优先调用子类方法\",{\"1\":{\"577\":1}}],[\"优化编译器\",{\"1\":{\"678\":1}}],[\"优化导入的类\",{\"1\":{\"552\":1}}],[\"优化自定义序列化\",{\"0\":{\"357\":1}}],[\"优化思路\",{\"0\":{\"220\":1,\"222\":1}}],[\"优化场景\",{\"0\":{\"218\":1}}],[\"优化的b+树\",{\"0\":{\"122\":1}}],[\"优点\",{\"1\":{\"116\":1,\"236\":1,\"272\":2,\"274\":1,\"282\":2,\"322\":1,\"429\":1,\"575\":1,\"576\":1}}],[\"优缺点\",{\"0\":{\"116\":1}}],[\"gb\",{\"1\":{\"687\":2}}],[\"glassfish<\",{\"1\":{\"681\":1}}],[\"globle|session\",{\"1\":{\"230\":1}}],[\"global\",{\"1\":{\"204\":1,\"228\":2,\"244\":7}}],[\"governing\",{\"1\":{\"765\":1}}],[\"go\",{\"1\":{\"503\":1,\"677\":1}}],[\"go语言的go\",{\"1\":{\"376\":1}}],[\"gzip\",{\"1\":{\"634\":1}}],[\"gz\",{\"1\":{\"493\":1,\"700\":1}}],[\"given\",{\"1\":{\"434\":1}}],[\"git\",{\"0\":{\"544\":1},\"1\":{\"638\":1}}],[\"gitee\",{\"1\":{\"375\":1,\"769\":1}}],[\"gitee地址\",{\"1\":{\"375\":1}}],[\"githubusercontent\",{\"1\":{\"634\":1}}],[\"github地址\",{\"1\":{\"375\":1}}],[\"github\",{\"1\":{\"282\":2,\"283\":1,\"352\":1,\"375\":1,\"479\":1,\"512\":1,\"530\":2,\"531\":1,\"631\":1,\"638\":2,\"653\":2}}],[\"g\",{\"1\":{\"297\":6,\"333\":4,\"341\":1,\"346\":1,\"493\":1,\"549\":1}}],[\"gcc\",{\"1\":{\"307\":1}}],[\"gc\",{\"1\":{\"285\":1,\"626\":1}}],[\"guava\",{\"1\":{\"283\":2}}],[\"guavacache\",{\"1\":{\"282\":1}}],[\"gap\",{\"1\":{\"148\":1}}],[\"grow\",{\"1\":{\"623\":2,\"627\":3}}],[\"groupname\",{\"1\":{\"395\":5}}],[\"groups\",{\"1\":{\"387\":1,\"684\":1}}],[\"groupid>\",{\"1\":{\"336\":1,\"353\":2,\"355\":1,\"362\":1,\"642\":4,\"647\":1,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":3,\"749\":1,\"762\":2}}],[\"group\",{\"0\":{\"214\":1,\"396\":1},\"1\":{\"136\":1,\"168\":1,\"186\":1,\"187\":1,\"192\":1,\"195\":1,\"387\":2,\"395\":2,\"396\":6}}],[\"grep\",{\"1\":{\"342\":2,\"529\":1}}],[\"grained\",{\"1\":{\"765\":1}}],[\"graal\",{\"1\":{\"678\":1}}],[\"graalvm\",{\"0\":{\"678\":1},\"1\":{\"677\":1,\"678\":7}}],[\"grant\",{\"1\":{\"198\":1}}],[\"grants\",{\"1\":{\"198\":1}}],[\"graph类型\",{\"1\":{\"366\":1}}],[\"graph\",{\"1\":{\"111\":2}}],[\"geohash\",{\"1\":{\"398\":4}}],[\"georadiusbymember\",{\"1\":{\"398\":2}}],[\"georadius\",{\"1\":{\"398\":2}}],[\"geodist\",{\"1\":{\"398\":2}}],[\"geopos\",{\"1\":{\"398\":2}}],[\"geoadd\",{\"1\":{\"398\":2}}],[\"geographic\",{\"1\":{\"398\":1}}],[\"geo类型\",{\"0\":{\"398\":1}}],[\"geo\",{\"1\":{\"377\":1,\"397\":1,\"398\":1}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"355\":5,\"358\":1}}],[\"generally\",{\"1\":{\"765\":1}}],[\"general\",{\"0\":{\"70\":1}}],[\"gem\",{\"1\":{\"343\":1}}],[\"getobjecttype\",{\"1\":{\"765\":3}}],[\"getobject\",{\"1\":{\"765\":7}}],[\"getoutputstream\",{\"1\":{\"424\":1}}],[\"getusername\",{\"1\":{\"763\":1,\"764\":1}}],[\"geturi\",{\"1\":{\"705\":2,\"707\":1}}],[\"geturl\",{\"1\":{\"705\":2}}],[\"gethobbies\",{\"1\":{\"759\":1}}],[\"getjdbctemplate\",{\"1\":{\"746\":1}}],[\"getjedis\",{\"1\":{\"349\":1}}],[\"getdatasourcetransactionmanager\",{\"1\":{\"746\":1}}],[\"getdatasource\",{\"1\":{\"746\":1}}],[\"getdescription\",{\"1\":{\"705\":2,\"707\":1,\"708\":2,\"709\":2,\"718\":1,\"719\":1,\"723\":1}}],[\"getdefaultconstraintmessagetemplate\",{\"1\":{\"684\":1}}],[\"getdeclaredfields\",{\"1\":{\"650\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"581\":1}}],[\"getres\",{\"1\":{\"719\":1}}],[\"getresourceloader\",{\"1\":{\"718\":2}}],[\"getresources\",{\"1\":{\"650\":1}}],[\"getresource\",{\"1\":{\"349\":1,\"715\":1,\"716\":2,\"717\":3,\"718\":1,\"719\":1,\"723\":1}}],[\"getpassword\",{\"1\":{\"763\":1,\"764\":1}}],[\"getpricebybookid\",{\"1\":{\"737\":3,\"741\":1,\"742\":1,\"743\":1}}],[\"getproxy\",{\"1\":{\"658\":2}}],[\"getphone\",{\"1\":{\"683\":1}}],[\"getlogger\",{\"1\":{\"665\":1}}],[\"getlistlen\",{\"1\":{\"39\":1}}],[\"getstudents\",{\"1\":{\"760\":1}}],[\"getstring\",{\"1\":{\"687\":2,\"731\":2}}],[\"getsex\",{\"1\":{\"754\":1}}],[\"getsignature\",{\"1\":{\"665\":5,\"668\":2,\"669\":3,\"670\":1}}],[\"getsuppressed\",{\"1\":{\"600\":1}}],[\"getmessage\",{\"1\":{\"658\":1,\"690\":1}}],[\"getmapping\",{\"1\":{\"336\":2}}],[\"getteachermap\",{\"1\":{\"760\":1}}],[\"getteachername\",{\"1\":{\"760\":1}}],[\"getteacherid\",{\"1\":{\"760\":1}}],[\"gettype\",{\"1\":{\"650\":2}}],[\"getting\",{\"1\":{\"368\":1}}],[\"getvalue\",{\"1\":{\"650\":1}}],[\"getallerrors\",{\"1\":{\"681\":1}}],[\"getargs\",{\"1\":{\"665\":2,\"668\":2,\"669\":1,\"670\":1}}],[\"getannotation\",{\"1\":{\"650\":2}}],[\"getabsolutepath\",{\"1\":{\"650\":1}}],[\"getage\",{\"1\":{\"579\":1,\"580\":2,\"681\":3,\"682\":1,\"683\":1,\"754\":1,\"763\":1,\"764\":1}}],[\"getfilename\",{\"1\":{\"705\":2,\"707\":1,\"708\":2,\"709\":2,\"716\":2,\"718\":1,\"719\":1,\"723\":1}}],[\"getfile\",{\"1\":{\"650\":1,\"705\":2}}],[\"getconnection\",{\"1\":{\"762\":1}}],[\"getcontextclassloader\",{\"1\":{\"650\":1}}],[\"getclazz\",{\"1\":{\"758\":1}}],[\"getclazzname\",{\"1\":{\"758\":1}}],[\"getclazzid\",{\"1\":{\"758\":1}}],[\"getclassloader\",{\"1\":{\"658\":1}}],[\"getclass\",{\"1\":{\"622\":1,\"650\":5,\"658\":2,\"765\":1}}],[\"getname\",{\"1\":{\"580\":7,\"587\":1,\"650\":6,\"658\":4,\"665\":5,\"668\":2,\"669\":3,\"670\":1,\"681\":1,\"682\":2,\"683\":1,\"754\":1}}],[\"getid\",{\"1\":{\"754\":1,\"763\":1,\"764\":1}}],[\"getint\",{\"1\":{\"731\":2}}],[\"getinterfaces\",{\"1\":{\"650\":3,\"658\":1}}],[\"getinstance\",{\"1\":{\"687\":1}}],[\"getinputstream\",{\"1\":{\"424\":1,\"705\":2,\"707\":1,\"708\":1,\"709\":1}}],[\"getifpresent\",{\"1\":{\"284\":1}}],[\"getbundle\",{\"1\":{\"687\":2}}],[\"getbindingresult\",{\"1\":{\"681\":1}}],[\"getbit\",{\"1\":{\"399\":1}}],[\"getbeansoftype\",{\"1\":{\"765\":1}}],[\"getbean\",{\"1\":{\"646\":1,\"648\":1,\"650\":3,\"651\":1,\"665\":1,\"682\":2,\"683\":1,\"696\":1,\"718\":1,\"719\":1,\"746\":1,\"752\":3,\"754\":1,\"755\":1,\"762\":1,\"763\":2,\"764\":1,\"765\":1,\"766\":2}}],[\"getbytes\",{\"1\":{\"424\":1}}],[\"getbyindex\",{\"1\":{\"38\":1}}],[\"get方法\",{\"0\":{\"624\":1},\"1\":{\"356\":1}}],[\"getkey\",{\"1\":{\"336\":1}}],[\"get请求参数\",{\"1\":{\"313\":2}}],[\"get\",{\"1\":{\"284\":1,\"309\":2,\"336\":3,\"344\":1,\"353\":1,\"356\":1,\"362\":1,\"378\":1,\"424\":1,\"450\":1,\"487\":1,\"490\":2,\"493\":2,\"515\":2,\"550\":1,\"619\":1,\"624\":3,\"626\":2,\"650\":3,\"749\":1,\"765\":1}}],[\"getelem\",{\"1\":{\"37\":1}}],[\"图书的库存更新了\",{\"1\":{\"738\":1}}],[\"图书名称\",{\"1\":{\"737\":1}}],[\"图标即可进行安装\",{\"1\":{\"498\":1}}],[\"图标拖动至\",{\"1\":{\"498\":1}}],[\"图形化界⾯的客户端种类很多\",{\"1\":{\"375\":1}}],[\"图形化客户端\",{\"0\":{\"375\":1},\"1\":{\"373\":1,\"375\":1}}],[\"图形\",{\"1\":{\"111\":1}}],[\"图状结构或网状结构\",{\"1\":{\"35\":1}}],[\"注入同理\",{\"1\":{\"755\":1}}],[\"注入时\",{\"1\":{\"754\":1}}],[\"注入jdbctemplate\",{\"1\":{\"731\":1}}],[\"注入值\",{\"1\":{\"650\":1}}],[\"注入\",{\"1\":{\"646\":1,\"647\":1}}],[\"注解注入\",{\"1\":{\"753\":1}}],[\"注解组合这些对象\",{\"1\":{\"726\":1}}],[\"注解+扫描\",{\"1\":{\"665\":1}}],[\"注解使用时没有指定\",{\"1\":{\"647\":1}}],[\"注解属于\",{\"1\":{\"647\":1}}],[\"注解用在属性上\",{\"1\":{\"647\":2}}],[\"注解一起用\",{\"1\":{\"647\":1}}],[\"注解默认根据类型装配bytype\",{\"1\":{\"647\":1}}],[\"注解默认根据名称装配\",{\"1\":{\"647\":1}}],[\"注解是\",{\"1\":{\"647\":2}}],[\"注解有什么区别\",{\"1\":{\"647\":1}}],[\"注解也可以完成属性注入\",{\"1\":{\"647\":1}}],[\"注解上\",{\"1\":{\"646\":1}}],[\"注解\",{\"1\":{\"642\":1,\"643\":1,\"644\":1,\"745\":1}}],[\"注册\",{\"1\":{\"461\":1,\"464\":2}}],[\"注册的实例ip\",{\"1\":{\"341\":1}}],[\"注释仅在编写阶段可见\",{\"1\":{\"560\":1}}],[\"注释内容\",{\"1\":{\"175\":3}}],[\"注释\",{\"0\":{\"560\":1},\"1\":{\"175\":2,\"285\":1}}],[\"注\",{\"1\":{\"111\":4,\"499\":1}}],[\"注意其中的initmethod\",{\"1\":{\"764\":1}}],[\"注意这里要导入的类路径\",{\"1\":{\"665\":1}}],[\"注意ip地址替换为你自己的虚拟机ip\",{\"1\":{\"308\":1}}],[\"注意事项\",{\"0\":{\"213\":1,\"216\":1,\"225\":1}}],[\"注意\",{\"1\":{\"38\":1,\"49\":1,\"88\":1,\"98\":1,\"99\":1,\"116\":1,\"129\":1,\"141\":1,\"145\":1,\"182\":1,\"191\":1,\"192\":1,\"194\":1,\"197\":1,\"212\":1,\"242\":1,\"244\":1,\"245\":1,\"261\":1,\"303\":1,\"349\":1,\"355\":1,\"374\":1,\"382\":1,\"401\":1,\"463\":1,\"469\":1,\"471\":1,\"499\":1,\"512\":1,\"518\":1,\"524\":1,\"566\":1,\"576\":1,\"580\":2,\"581\":1,\"587\":1,\"600\":1,\"601\":1,\"604\":1,\"608\":1,\"643\":1,\"665\":1,\"723\":1,\"749\":1,\"752\":1,\"755\":1,\"762\":1,\"773\":1}}],[\"标签改为set标签即可\",{\"1\":{\"760\":1}}],[\"标签\",{\"1\":{\"749\":1}}],[\"标示\",{\"1\":{\"450\":2}}],[\"标示开始rehash\",{\"1\":{\"440\":2}}],[\"标识信息\",{\"1\":{\"428\":1}}],[\"标识符对应信息\",{\"1\":{\"428\":1}}],[\"标准统一\",{\"1\":{\"110\":1}}],[\"标量子查询指的是子查询的返回的结果是一行一列的一个值\",{\"1\":{\"101\":1}}],[\"标量子查询\",{\"0\":{\"101\":1},\"1\":{\"100\":1}}],[\"特殊值赋值\",{\"0\":{\"757\":1}}],[\"特殊值\",{\"1\":{\"450\":1}}],[\"特殊类型作为了解即可\",{\"1\":{\"377\":1,\"397\":1}}],[\"特殊类型\",{\"1\":{\"377\":1,\"397\":1}}],[\"特征也与linkedlist类似\",{\"1\":{\"380\":1}}],[\"特点\",{\"0\":{\"142\":1},\"1\":{\"110\":1,\"126\":2,\"236\":1,\"237\":1,\"238\":2,\"241\":1,\"576\":1,\"588\":1}}],[\"特性\",{\"1\":{\"88\":1}}],[\"建模共性行为\",{\"1\":{\"591\":1}}],[\"建议修改为\",{\"1\":{\"549\":1}}],[\"建议不开启\",{\"1\":{\"321\":1}}],[\"建议建立联合索引\",{\"1\":{\"135\":1}}],[\"建议使用索引\",{\"1\":{\"132\":1}}],[\"建立于spring\",{\"1\":{\"727\":1}}],[\"建立公共溢出区等方法解决\",{\"1\":{\"437\":1}}],[\"建立公共溢出区等方法进行解决\",{\"1\":{\"123\":1}}],[\"建立连接\",{\"1\":{\"424\":1}}],[\"建立前缀索引\",{\"1\":{\"136\":1}}],[\"建立索引时也会区分字段的排序规则\",{\"1\":{\"212\":1}}],[\"建立索引\",{\"1\":{\"134\":1,\"234\":1}}],[\"建立在关系模型基础上\",{\"1\":{\"110\":1}}],[\"建表后添加外键\",{\"1\":{\"51\":1}}],[\"建表时添加外键\",{\"1\":{\"51\":1}}],[\"商业版\",{\"1\":{\"108\":1}}],[\"免费\",{\"1\":{\"108\":1}}],[\"社区版\",{\"1\":{\"108\":1,\"503\":1}}],[\"又需要\",{\"1\":{\"693\":1}}],[\"又可以成为哈希类型\",{\"1\":{\"379\":1}}],[\"又可以分为3类\",{\"1\":{\"378\":1}}],[\"又可以分为两类\",{\"1\":{\"145\":1}}],[\"又可以分为以下两种\",{\"1\":{\"126\":1}}],[\"又发现数据已经存在\",{\"1\":{\"260\":1}}],[\"又会阻塞其他客户端的读\",{\"1\":{\"145\":1}}],[\"又叫组合索引\",{\"1\":{\"129\":1}}],[\"又叫架构话查询语言\",{\"1\":{\"106\":1}}],[\"又称为多路平衡查找树\",{\"1\":{\"120\":1}}],[\"又称为哈希\",{\"1\":{\"35\":1}}],[\"操作系统\",{\"1\":{\"636\":1}}],[\"操作系统控制\",{\"1\":{\"322\":1}}],[\"操作指令不太熟悉\",{\"1\":{\"506\":1}}],[\"操作指令\",{\"1\":{\"506\":1}}],[\"操作可以瞬间完成\",{\"1\":{\"440\":1}}],[\"操作是同步还是异步\",{\"1\":{\"415\":1}}],[\"操作时\",{\"1\":{\"413\":1}}],[\"操作会立即返回结果\",{\"1\":{\"405\":1}}],[\"操作并将结果保存在destkey中\",{\"1\":{\"399\":1}}],[\"操作redis指令\",{\"1\":{\"372\":1}}],[\"操作sortedset类型数据\",{\"1\":{\"361\":1}}],[\"操作set类型数据\",{\"1\":{\"361\":1}}],[\"操作string类型数据\",{\"1\":{\"361\":1}}],[\"操作list类型数据\",{\"1\":{\"361\":1}}],[\"操作hash类型数据\",{\"1\":{\"361\":1}}],[\"操作api\",{\"0\":{\"361\":1}}],[\"操作\",{\"1\":{\"358\":1,\"549\":1}}],[\"操作一个\",{\"1\":{\"354\":1}}],[\"操作较慢\",{\"1\":{\"321\":1}}],[\"操作效率较高\",{\"1\":{\"211\":1}}],[\"操作语法\",{\"0\":{\"165\":1}}],[\"操作的字段建立索引\",{\"1\":{\"136\":1}}],[\"操作关系型数据库的编程语言\",{\"1\":{\"106\":1}}],[\"操作符的左右操作必须有继承或实现关系\",{\"1\":{\"752\":1}}],[\"操作符\",{\"1\":{\"102\":1}}],[\"操纵和管理数据库的大型软件系统\",{\"1\":{\"106\":1}}],[\"简洁优雅\",{\"1\":{\"726\":1}}],[\"简化代码\",{\"1\":{\"661\":1}}],[\"简化\",{\"1\":{\"424\":1,\"641\":1}}],[\"简称为sds\",{\"1\":{\"427\":1}}],[\"简称\",{\"1\":{\"410\":2}}],[\"简称fd\",{\"1\":{\"406\":1}}],[\"简称replid\",{\"1\":{\"302\":1}}],[\"简介\",{\"0\":{\"351\":1,\"502\":1},\"1\":{\"695\":1,\"765\":1}}],[\"简述全量同步和增量同步的区别\",{\"1\":{\"304\":1}}],[\"简写为database\",{\"1\":{\"106\":2}}],[\"简单来讲\",{\"1\":{\"677\":2}}],[\"简单来说发布订阅\",{\"1\":{\"387\":1}}],[\"简单来说就是把内存中的所有数据都记录到磁盘中\",{\"1\":{\"321\":1}}],[\"简单来说\",{\"1\":{\"132\":1}}],[\"简单表\",{\"1\":{\"231\":1}}],[\"简单理解\",{\"1\":{\"164\":1,\"166\":1}}],[\"简单的来讲\",{\"1\":{\"753\":1}}],[\"简单的来说\",{\"1\":{\"164\":1}}],[\"简单的select语句\",{\"1\":{\"83\":1}}],[\"简单\",{\"0\":{\"24\":1},\"1\":{\"169\":1}}],[\"子类的\",{\"1\":{\"595\":1}}],[\"子类的所有构造方法会默认先运行\",{\"1\":{\"576\":1}}],[\"子类\",{\"1\":{\"577\":1}}],[\"子类引用指向父类对象\",{\"1\":{\"577\":1}}],[\"子类可以拥有自身独有的属性和方法\",{\"1\":{\"576\":1}}],[\"子类可以继承父类的属性\",{\"1\":{\"576\":1}}],[\"子进程\",{\"1\":{\"321\":1}}],[\"子进程读取内存数据并写入新的\",{\"1\":{\"321\":1}}],[\"子进程共享主进程的内存数据\",{\"1\":{\"321\":1}}],[\"子句声明抛出它\",{\"1\":{\"595\":1}}],[\"子句或者是操作表的顺序\",{\"1\":{\"231\":1}}],[\"子句创建视图时\",{\"1\":{\"166\":1}}],[\"子查询的返回列表的所有值都必须满足\",{\"1\":{\"102\":1}}],[\"子查询的返回列表中\",{\"1\":{\"102\":1}}],[\"子查询的结果为多行多列\",{\"1\":{\"100\":1}}],[\"子查询的结果为一行\",{\"1\":{\"100\":1}}],[\"子查询的结果为一列\",{\"1\":{\"100\":1}}],[\"子查询的结果为单个值\",{\"1\":{\"100\":1}}],[\"子查询的外部可以是insert\",{\"1\":{\"100\":1}}],[\"子查询又称为嵌套查询\",{\"1\":{\"100\":1}}],[\"子查询\",{\"0\":{\"100\":1}}],[\"子表将外键列设置成一个默认的值\",{\"1\":{\"52\":1}}],[\"别名2\",{\"1\":{\"188\":1}}],[\"别名1\",{\"1\":{\"188\":1}}],[\"别名b\",{\"1\":{\"98\":1}}],[\"别名a\",{\"1\":{\"98\":1}}],[\"别无其他关系\",{\"1\":{\"35\":1}}],[\"右方向键\",{\"1\":{\"549\":1,\"550\":1,\"552\":1,\"553\":1}}],[\"右外连接\",{\"1\":{\"97\":2}}],[\"右填充\",{\"1\":{\"55\":1}}],[\"查4个部分\",{\"1\":{\"181\":1}}],[\"查找动作\",{\"1\":{\"553\":1}}],[\"查找匹配上一个\",{\"1\":{\"551\":1}}],[\"查找光标所在的方法\",{\"1\":{\"550\":1}}],[\"查找类文件\",{\"1\":{\"549\":1}}],[\"查找\",{\"1\":{\"512\":1}}],[\"查找镜像\",{\"0\":{\"512\":1}}],[\"查找快\",{\"1\":{\"381\":1}}],[\"查找使用了索引\",{\"1\":{\"133\":2}}],[\"查找的元素在最后一个\",{\"1\":{\"38\":1}}],[\"查找的元素就在第一个\",{\"1\":{\"38\":1}}],[\"查看源码\",{\"1\":{\"646\":1}}],[\"查看项目当前文件\",{\"1\":{\"554\":1}}],[\"查看最近操作项目的变化情况列表\",{\"1\":{\"554\":1}}],[\"查看最近30分钟的日志\",{\"1\":{\"529\":1}}],[\"查看该输入内容的调试结果\",{\"1\":{\"550\":1}}],[\"查看端口映射信息\",{\"0\":{\"538\":1}}],[\"查看web应用容器\",{\"0\":{\"536\":1}}],[\"查看某时间段日志\",{\"1\":{\"529\":1}}],[\"查看某时间之后的日志\",{\"1\":{\"529\":1}}],[\"查看镜像列表\",{\"1\":{\"515\":1}}],[\"查看本地仓库是否有\",{\"1\":{\"495\":1,\"496\":1}}],[\"查看服务的日志输出\",{\"1\":{\"481\":1}}],[\"查看流和消费者组的相关信息\",{\"1\":{\"387\":1}}],[\"查看订阅与发布系统状态\",{\"1\":{\"383\":1}}],[\"查看⼀个key的剩余有效期\",{\"1\":{\"363\":1}}],[\"查看符合模板的所有key\",{\"1\":{\"363\":1}}],[\"查看集群信息时就能看到\",{\"1\":{\"345\":1}}],[\"查看集群状态\",{\"1\":{\"299\":1}}],[\"查看7002的日志\",{\"1\":{\"335\":1}}],[\"查看7003的日志\",{\"1\":{\"335\":1}}],[\"查看sentinel日志\",{\"1\":{\"335\":1}}],[\"查看openresty目录的nginx目录\",{\"1\":{\"308\":1}}],[\"查看状态\",{\"1\":{\"299\":1,\"372\":1}}],[\"查看事务的隔离级别\",{\"1\":{\"261\":1}}],[\"查看所有系统变量\",{\"1\":{\"244\":1}}],[\"查看系统变量\",{\"1\":{\"244\":1}}],[\"查看支持的存储引擎\",{\"1\":{\"234\":1}}],[\"查看指定时间后的日志\",{\"1\":{\"529\":1}}],[\"查看指定的脚本是否已经被保存在缓存当中\",{\"1\":{\"386\":1}}],[\"查看指定变量的值\",{\"1\":{\"244\":1}}],[\"查看指定query\",{\"1\":{\"230\":2}}],[\"查看指定表的索引\",{\"1\":{\"129\":1}}],[\"查看每一条执行过的sql语句的耗时情况\",{\"1\":{\"230\":1}}],[\"查看是否支持profile\",{\"1\":{\"230\":1}}],[\"查看慢日志文件中记录的信息\",{\"1\":{\"229\":1}}],[\"查看视图数据\",{\"1\":{\"165\":1}}],[\"查看创建视图语句\",{\"1\":{\"165\":1}}],[\"查看\",{\"1\":{\"157\":1,\"242\":1,\"258\":1}}],[\"查看意向锁及行锁的加锁情况\",{\"1\":{\"147\":1}}],[\"查看元数据锁\",{\"1\":{\"146\":1}}],[\"查看索引\",{\"1\":{\"129\":1}}],[\"查询图书的价格\",{\"1\":{\"737\":1,\"741\":1,\"742\":1,\"743\":1}}],[\"查询单行单列的值\",{\"1\":{\"731\":1}}],[\"查询多条数据为一个list集合\",{\"1\":{\"731\":1}}],[\"查询多个字段\",{\"1\":{\"188\":1}}],[\"查询分数\",{\"1\":{\"421\":1}}],[\"查询效率要求极高\",{\"1\":{\"420\":1}}],[\"查询效率高\",{\"1\":{\"123\":1}}],[\"查询速度快\",{\"1\":{\"382\":1}}],[\"查询速度一般\",{\"1\":{\"380\":1}}],[\"查询速度更快\",{\"1\":{\"124\":1}}],[\"查询方式\",{\"1\":{\"366\":1}}],[\"查询失败处理\",{\"1\":{\"309\":1}}],[\"查询redis数据为空\",{\"1\":{\"309\":1}}],[\"查询redis失败\",{\"1\":{\"309\":1}}],[\"查询redis\",{\"0\":{\"318\":1},\"1\":{\"309\":1}}],[\"查询redis的方法\",{\"1\":{\"309\":1}}],[\"查询缓存\",{\"1\":{\"274\":1}}],[\"查询语句\",{\"1\":{\"254\":1}}],[\"查询某个存储过程的定义\",{\"1\":{\"242\":1}}],[\"查询指定数据库的存储过程及状态信息\",{\"1\":{\"242\":1}}],[\"查询指定表的建表语句\",{\"1\":{\"179\":1}}],[\"查询数据等技术的实现方式\",{\"1\":{\"234\":1}}],[\"查询数据权限\",{\"1\":{\"198\":1}}],[\"查询类别\",{\"0\":{\"211\":1}}],[\"查询类型\",{\"0\":{\"187\":1,\"215\":1}}],[\"查询权限\",{\"1\":{\"198\":1}}],[\"查询用户\",{\"1\":{\"197\":1}}],[\"查询的序列号\",{\"1\":{\"231\":1}}],[\"查询的页码\",{\"1\":{\"194\":1}}],[\"查询的字段一般为聚合函数和分组字段\",{\"1\":{\"192\":1}}],[\"查询记录数\",{\"1\":{\"194\":2}}],[\"查询其他字段无任何意义\",{\"1\":{\"192\":1}}],[\"查询表结构\",{\"1\":{\"179\":1}}],[\"查询当前数据库的所有表\",{\"1\":{\"179\":1}}],[\"查询当前数据库\",{\"1\":{\"178\":1}}],[\"查询所有数据库\",{\"1\":{\"178\":1}}],[\"查询\",{\"1\":{\"165\":1,\"178\":1,\"179\":1,\"228\":1,\"336\":1,\"398\":1,\"440\":2}}],[\"查询时只能进行遍历\",{\"1\":{\"446\":1}}],[\"查询时\",{\"1\":{\"134\":1,\"136\":1}}],[\"查询使用了索引\",{\"1\":{\"133\":1}}],[\"查询条件的顺序为\",{\"1\":{\"131\":3}}],[\"查询了两次b+树\",{\"1\":{\"128\":1}}],[\"查询后的值为该字段对应的id值\",{\"1\":{\"128\":1}}],[\"查询性能大大降低\",{\"1\":{\"118\":1}}],[\"查询右表的所有数据\",{\"1\":{\"97\":1}}],[\"查询左表的所有数据\",{\"1\":{\"97\":1}}],[\"左键双击\",{\"1\":{\"554\":1}}],[\"左键单击\",{\"1\":{\"549\":2,\"551\":1,\"553\":1}}],[\"左方向键\",{\"1\":{\"549\":1,\"550\":1,\"552\":1,\"553\":1}}],[\"左外连接\",{\"1\":{\"97\":2}}],[\"左外连接和右外连接\",{\"1\":{\"97\":1}}],[\"左填充\",{\"1\":{\"55\":1}}],[\"外部bean\",{\"1\":{\"758\":2}}],[\"外部类的成员是属于对象的\",{\"1\":{\"580\":1}}],[\"外面\",{\"1\":{\"671\":1}}],[\"外连接有两种情况\",{\"1\":{\"97\":1}}],[\"外连接\",{\"0\":{\"97\":1}}],[\"外键\",{\"1\":{\"239\":1}}],[\"外键字段\",{\"1\":{\"52\":1}}],[\"外键字段名\",{\"1\":{\"51\":2}}],[\"外键名称\",{\"1\":{\"51\":3,\"52\":1}}],[\"外键约束\",{\"0\":{\"50\":1},\"1\":{\"49\":1}}],[\"条件语句\",{\"0\":{\"564\":1},\"1\":{\"568\":1}}],[\"条件处理程序handler可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤\",{\"1\":{\"255\":1}}],[\"条件处理程序\",{\"0\":{\"255\":1}}],[\"条件2\",{\"1\":{\"247\":1}}],[\"条件1\",{\"1\":{\"247\":1}}],[\"条件查询\",{\"0\":{\"189\":1},\"1\":{\"187\":1}}],[\"条件\",{\"0\":{\"292\":1},\"1\":{\"183\":1,\"184\":1,\"189\":1,\"251\":1}}],[\"条件列表\",{\"1\":{\"96\":1,\"98\":1,\"186\":1,\"189\":1,\"192\":1,\"195\":1,\"231\":1}}],[\"条件约束\",{\"1\":{\"49\":1}}],[\"隐式内连接\",{\"1\":{\"96\":1}}],[\"隐藏当前\",{\"1\":{\"551\":1}}],[\"隐藏主键\",{\"1\":{\"84\":1}}],[\"隐藏字段\",{\"1\":{\"84\":1}}],[\"笛卡尔积是指在数学中\",{\"1\":{\"95\":1}}],[\"笛卡尔积\",{\"1\":{\"95\":2}}],[\"然而在我们后续的复盘中常常会出现\",{\"1\":{\"636\":1}}],[\"然而在多表查询之前\",{\"1\":{\"95\":1}}],[\"然而缓存空间是有限的\",{\"1\":{\"275\":1}}],[\"然后运行\",{\"1\":{\"679\":1}}],[\"然后花费了大量的时间排查问题\",{\"1\":{\"636\":1}}],[\"然后拖动即可\",{\"1\":{\"634\":1}}],[\"然后替换为\",{\"1\":{\"634\":1}}],[\"然后导入\",{\"1\":{\"630\":1}}],[\"然后进行\",{\"1\":{\"677\":1}}],[\"然后进行执行\",{\"1\":{\"613\":1}}],[\"然后进行删除操作\",{\"1\":{\"275\":1}}],[\"然后通过该对象调用\",{\"1\":{\"585\":1}}],[\"然后通过命令来管理集群\",{\"1\":{\"343\":1}}],[\"然后才进行判断循环\",{\"1\":{\"570\":1}}],[\"然后才进行条件判断\",{\"1\":{\"291\":1}}],[\"然后删除\",{\"1\":{\"514\":1}}],[\"然后发布到任何流行的\",{\"1\":{\"503\":1}}],[\"然后输出结果\",{\"1\":{\"476\":1}}],[\"然后在代码中调用这个类\",{\"1\":{\"680\":1}}],[\"然后在容器里执行\",{\"1\":{\"476\":1}}],[\"然后在排序缓冲区sort\",{\"1\":{\"211\":1}}],[\"然后根据事件类型的不同\",{\"1\":{\"462\":1}}],[\"然后执行删除\",{\"1\":{\"457\":1}}],[\"然后利用\",{\"1\":{\"438\":1}}],[\"然后拷贝到用户缓冲区\",{\"1\":{\"403\":1}}],[\"然后写入设备\",{\"1\":{\"403\":1}}],[\"然后是疑似宕机\",{\"1\":{\"347\":1}}],[\"然后对\",{\"1\":{\"345\":1}}],[\"然后我们在s1目录创建一个sentinel\",{\"1\":{\"333\":1}}],[\"然后让所有节点都执行\",{\"1\":{\"330\":1}}],[\"然后让配置生效\",{\"1\":{\"307\":1}}],[\"然后判断\",{\"1\":{\"328\":1}}],[\"然后判定逻辑是否满足\",{\"1\":{\"252\":1}}],[\"然后每隔\",{\"1\":{\"322\":1}}],[\"然后访问页面\",{\"1\":{\"308\":1}}],[\"然后就可以像下面这样安装软件包\",{\"1\":{\"307\":1}}],[\"然后再通过\",{\"1\":{\"581\":1}}],[\"然后再重复上面的命令\",{\"1\":{\"307\":1}}],[\"然后再以一定的频率刷新到磁盘\",{\"1\":{\"63\":1}}],[\"然后连接\",{\"1\":{\"299\":1}}],[\"然后将原数组中的元素复制到新数组中\",{\"1\":{\"627\":1}}],[\"然后将更新后的\",{\"1\":{\"515\":1}}],[\"然后将键值对放到新的哈希表位置上\",{\"1\":{\"439\":1}}],[\"然后将s1\",{\"1\":{\"333\":1}}],[\"然后将redis\",{\"1\":{\"297\":1}}],[\"然后将新节点插入到当前链表的表头\",{\"1\":{\"39\":1}}],[\"然后累积计数\",{\"1\":{\"221\":1}}],[\"然后重新创建\",{\"1\":{\"179\":1}}],[\"然后存储在hash表中\",{\"1\":{\"123\":1}}],[\"然后这个隐藏列就相当于一个指针\",{\"1\":{\"60\":1}}],[\"例如检测某资源是否存在等\",{\"1\":{\"704\":1}}],[\"例如io流中执行完相应操作后\",{\"1\":{\"600\":1}}],[\"例如void\",{\"1\":{\"587\":1}}],[\"例如同一个接口被不同的类实现\",{\"1\":{\"577\":1}}],[\"例如更新包列表\",{\"1\":{\"490\":1}}],[\"例如安装软件包\",{\"1\":{\"489\":1}}],[\"例如使用的docker镜像\",{\"1\":{\"482\":1}}],[\"例如映像\",{\"1\":{\"474\":1}}],[\"例如ping命令\",{\"1\":{\"464\":2}}],[\"例如异步删除命令\",{\"1\":{\"460\":1}}],[\"例如一个内容为\",{\"1\":{\"429\":1}}],[\"例如一个user对象\",{\"1\":{\"378\":1}}],[\"例如存储\",{\"1\":{\"423\":1}}],[\"例如返回\",{\"1\":{\"423\":1}}],[\"例如常规文件\",{\"1\":{\"406\":1}}],[\"例如我们的项目名称叫\",{\"1\":{\"378\":1}}],[\"例如查看set指令的帮助文档\",{\"1\":{\"363\":1}}],[\"例如slave1\",{\"1\":{\"329\":1}}],[\"例如\",{\"1\":{\"93\":1,\"95\":1,\"166\":1,\"222\":1,\"242\":1,\"271\":1,\"276\":2,\"282\":2,\"345\":2,\"374\":1,\"378\":1,\"380\":1,\"423\":3,\"428\":1,\"464\":1,\"483\":3,\"562\":1,\"583\":1,\"644\":1,\"667\":5,\"705\":1,\"789\":2}}],[\"例如将最常用的字段抽取出来\",{\"1\":{\"92\":1}}],[\"例子\",{\"0\":{\"31\":1}}],[\"例子3\",{\"0\":{\"26\":1}}],[\"例子2\",{\"0\":{\"25\":1,\"29\":1}}],[\"例子1\",{\"0\":{\"24\":1,\"28\":1}}],[\"锁机制\",{\"1\":{\"238\":1}}],[\"锁定索引记录间隙\",{\"1\":{\"148\":1}}],[\"锁定单个行记录的锁\",{\"1\":{\"148\":1}}],[\"锁定粒度最小\",{\"1\":{\"148\":1}}],[\"锁定力度大\",{\"1\":{\"144\":1}}],[\"锁类型\",{\"1\":{\"146\":1}}],[\"锁对数据库而言显得尤其重要\",{\"1\":{\"138\":1}}],[\"锁冲突也是影响数据库并发访问性能的一个重要因素\",{\"1\":{\"138\":1}}],[\"锁是计算机协调多个进程或线程并发访问某一资源的机制\",{\"1\":{\"138\":1}}],[\"锁\",{\"0\":{\"137\":1},\"1\":{\"88\":1,\"172\":1}}],[\"仅为了直观的体现其在不同的层次\",{\"1\":{\"644\":1}}],[\"仅扫描指定组件\",{\"1\":{\"643\":1}}],[\"仅需更新实现类\",{\"1\":{\"577\":1}}],[\"仅需在指令中设置\",{\"1\":{\"528\":1}}],[\"仅对外提供一些公共操作方法\",{\"1\":{\"575\":1}}],[\"仅对普通容器进行了演示\",{\"1\":{\"534\":1}}],[\"仅能在该作用域内生效\",{\"1\":{\"580\":1}}],[\"仅能通过提供的公共接口来操作改对象\",{\"1\":{\"575\":1}}],[\"仅能包括合法的特殊字符\",{\"1\":{\"561\":1}}],[\"仅维护一份\",{\"1\":{\"572\":1,\"582\":1}}],[\"仅仅表示容器中的一个组件\",{\"1\":{\"644\":1}}],[\"仅仅只虚拟化所指定的依赖项\",{\"1\":{\"505\":1}}],[\"仅仅定义\",{\"1\":{\"34\":1}}],[\"仅此而已\",{\"1\":{\"494\":1}}],[\"仅在关键部分进行分层\",{\"1\":{\"491\":1}}],[\"仅在非叶子结点中存储索引\",{\"1\":{\"121\":1}}],[\"仅在事务中第一次执行快照读时生成readview\",{\"1\":{\"88\":1}}],[\"未知注入\",{\"1\":{\"647\":1}}],[\"未指定\",{\"1\":{\"647\":1}}],[\"未发生异常时\",{\"1\":{\"600\":1}}],[\"未设置该参数默认为全局函数\",{\"1\":{\"293\":1}}],[\"未命中\",{\"1\":{\"274\":1}}],[\"未提交\",{\"1\":{\"87\":1}}],[\"未被使用\",{\"1\":{\"63\":1}}],[\"读len个字节\",{\"1\":{\"424\":1}}],[\"读\",{\"1\":{\"408\":1,\"409\":1}}],[\"读数据是\",{\"1\":{\"403\":1}}],[\"读已提交\",{\"1\":{\"261\":1,\"744\":2}}],[\"读未提交\",{\"1\":{\"261\":1,\"744\":2}}],[\"读写效率\",{\"1\":{\"463\":1}}],[\"读写效率稍差\",{\"1\":{\"236\":1}}],[\"读写分离\",{\"0\":{\"170\":1},\"1\":{\"172\":1}}],[\"读锁不会阻塞其他客户端的读\",{\"1\":{\"145\":1}}],[\"读视图是快照读sql执行时mvcc提取数据的依据\",{\"1\":{\"87\":1}}],[\"读视图\",{\"0\":{\"87\":1}}],[\"读取请求数据到\",{\"1\":{\"464\":1}}],[\"读取首字节\",{\"1\":{\"424\":1}}],[\"读取\",{\"1\":{\"410\":1}}],[\"读取了\",{\"1\":{\"410\":1}}],[\"读取并处理数据\",{\"1\":{\"406\":1}}],[\"读取数量\",{\"1\":{\"396\":1}}],[\"读取数据以后\",{\"1\":{\"358\":1}}],[\"读取数据\",{\"1\":{\"344\":1}}],[\"读取消费组中的消息\",{\"1\":{\"396\":1}}],[\"读取消费者组中的消息\",{\"1\":{\"387\":1}}],[\"读取redis数据的api\",{\"1\":{\"309\":1}}],[\"读取本地内存\",{\"1\":{\"282\":1}}],[\"读取满足条件的数据行\",{\"1\":{\"211\":1}}],[\"读取时还要保证其他并发事务不能修改当前记录\",{\"1\":{\"82\":1}}],[\"读取的是记录的最新版本\",{\"1\":{\"82\":1}}],[\"读取下一个值\",{\"1\":{\"39\":1}}],[\"链表过长\",{\"1\":{\"439\":1}}],[\"链表的尾部是最早的旧数据\",{\"1\":{\"86\":1}}],[\"链表的头部是最新的旧数据\",{\"1\":{\"86\":1}}],[\"链地址法\",{\"1\":{\"437\":1}}],[\"链接\",{\"1\":{\"173\":1,\"653\":1}}],[\"链式存储\",{\"1\":{\"35\":2}}],[\"含义\",{\"1\":{\"84\":1,\"87\":1,\"126\":2,\"248\":1,\"763\":2}}],[\"记录为\",{\"1\":{\"458\":1}}],[\"记录就绪的\",{\"1\":{\"409\":1}}],[\"记录要监听的fd\",{\"1\":{\"409\":1}}],[\"记录要监听的fd集合\",{\"1\":{\"407\":1}}],[\"记录\",{\"1\":{\"388\":1}}],[\"记录了当前已经被客户端读取的消息\",{\"1\":{\"387\":1}}],[\"记录命令\",{\"1\":{\"323\":1}}],[\"记录每一次执行的命令\",{\"1\":{\"323\":1}}],[\"记录错误信息\",{\"1\":{\"309\":1}}],[\"记录慢查询日志\",{\"1\":{\"229\":1}}],[\"记录并维护系统当前活跃的事务\",{\"1\":{\"87\":1}}],[\"记录插入这条记录或最后一次修改该记录的事务id\",{\"1\":{\"84\":1}}],[\"记录中的隐藏字段分别为\",{\"1\":{\"84\":1}}],[\"记录的是事务提交时数据页的物理修改\",{\"1\":{\"77\":1}}],[\"都要开启新事务\",{\"1\":{\"745\":1}}],[\"都将其设置为最低的日志级别\",{\"1\":{\"700\":1}}],[\"都交给\",{\"1\":{\"693\":1}}],[\"都通过这一个代理类来实现\",{\"1\":{\"657\":1}}],[\"都可以使用相同的容器\",{\"1\":{\"504\":1}}],[\"都可以有多个\",{\"1\":{\"339\":1}}],[\"都保存在之前学习过的\",{\"1\":{\"456\":1}}],[\"都检查一下dict\",{\"1\":{\"440\":1}}],[\"都需要为applicationcontext指定配置文件\",{\"1\":{\"721\":1}}],[\"都需要提供资源位置\",{\"1\":{\"719\":1}}],[\"都需要把所有要监听的\",{\"1\":{\"412\":1}}],[\"都需求根据键获取值\",{\"1\":{\"419\":1}}],[\"都拷贝到内核空间\",{\"1\":{\"412\":1}}],[\"都必须等待\",{\"1\":{\"406\":1}}],[\"都有唯一的名称\",{\"1\":{\"387\":1}}],[\"都有位移的\",{\"1\":{\"302\":1}}],[\"都以\",{\"1\":{\"345\":1}}],[\"都是计算机网络\",{\"1\":{\"781\":1}}],[\"都是非构造方法\",{\"1\":{\"584\":1}}],[\"都是以处理二进制的方式来处理\",{\"1\":{\"427\":1}}],[\"都是键值存储\",{\"1\":{\"419\":1}}],[\"都是有效部分\",{\"1\":{\"345\":1}}],[\"都是一种当前读\",{\"1\":{\"82\":1}}],[\"都认为实例主观下线\",{\"1\":{\"330\":1}}],[\"都认为该实例主观下线\",{\"1\":{\"327\":1}}],[\"都互斥\",{\"1\":{\"147\":1}}],[\"都会被事务管理器管理事务\",{\"1\":{\"739\":1}}],[\"都会去检查添加元素的个数是否会超过当前数组的长度\",{\"1\":{\"627\":1}}],[\"都会默认执行一次构造方法\",{\"1\":{\"588\":1}}],[\"都会保存数据\",{\"1\":{\"124\":1}}],[\"都会把旧的版本写入到undo日志中\",{\"1\":{\"60\":1}}],[\"都会把对应的事务id赋值给trx\",{\"1\":{\"60\":1}}],[\"都生成一个快照读\",{\"1\":{\"83\":1}}],[\"使它们不会相互影响\",{\"1\":{\"744\":1}}],[\"使配置项生效即可\",{\"1\":{\"608\":1}}],[\"使用destroy\",{\"1\":{\"764\":1}}],[\"使用docker\",{\"1\":{\"481\":1,\"483\":1}}],[\"使用init\",{\"1\":{\"764\":1}}],[\"使用insert语句插入的性能不高\",{\"1\":{\"204\":1}}],[\"使用util\",{\"1\":{\"760\":1}}],[\"使用cdata节\",{\"1\":{\"757\":1}}],[\"使用classpathresource\",{\"1\":{\"708\":1}}],[\"使用xml实体来代替\",{\"1\":{\"757\":1}}],[\"使用value属性给bean的属性赋值时\",{\"1\":{\"757\":1}}],[\"使用数据库默认的隔离级别\",{\"1\":{\"744\":1}}],[\"使用数组形式对应\",{\"1\":{\"690\":1}}],[\"使用三\",{\"1\":{\"723\":1}}],[\"使用前缀指定访问策略\",{\"0\":{\"723\":1},\"1\":{\"721\":1}}],[\"使用applicationcontext实现类指定访问策略\",{\"1\":{\"721\":1}}],[\"使用applicationcontext访问资源时\",{\"1\":{\"717\":1}}],[\"使用依赖注入\",{\"1\":{\"719\":1}}],[\"使用resource\",{\"0\":{\"719\":1}}],[\"使用redis\",{\"1\":{\"299\":1,\"354\":1}}],[\"使用演示\",{\"0\":{\"716\":1}}],[\"使用filesystemresource\",{\"1\":{\"709\":1}}],[\"使用较多\",{\"1\":{\"700\":1}}],[\"使用注解设置校验规则\",{\"1\":{\"683\":1}}],[\"使用注解定义校验规则\",{\"1\":{\"682\":1}}],[\"使用注解定义bean\",{\"0\":{\"644\":1}}],[\"使用注解定义\",{\"1\":{\"641\":1}}],[\"使用org\",{\"1\":{\"682\":1}}],[\"使用jakarta\",{\"1\":{\"682\":1}}],[\"使用jaotc编译工具\",{\"1\":{\"677\":1}}],[\"使用两种不同的校验器实现\",{\"1\":{\"682\":1}}],[\"使用bean标签的autowire属性设置自动装配效果\",{\"1\":{\"766\":1}}],[\"使用bean\",{\"1\":{\"682\":1}}],[\"使用上述validator进行测试\",{\"1\":{\"681\":1}}],[\"使用try\",{\"1\":{\"661\":1,\"666\":1}}],[\"使用tcc等分布式事务方案\",{\"1\":{\"277\":1}}],[\"使用代理后\",{\"1\":{\"656\":1}}],[\"使用了递归\",{\"1\":{\"650\":1}}],[\"使用了大量的aio来处理io请求\",{\"1\":{\"75\":1}}],[\"使用这个\",{\"1\":{\"650\":1}}],[\"使用属性名作为\",{\"1\":{\"647\":1}}],[\"使用时只需将该注解标注在相应类上即可\",{\"1\":{\"644\":1}}],[\"使用其包装类即可\",{\"1\":{\"619\":1}}],[\"使用lock对象保证线程同步\",{\"1\":{\"600\":1}}],[\"使用接口可以间接地实现多重继承\",{\"1\":{\"592\":1}}],[\"使用新\",{\"1\":{\"551\":1}}],[\"使用助记符设定\",{\"1\":{\"549\":1}}],[\"使用教程\",{\"0\":{\"546\":1}}],[\"使用该镜像创建一个容器\",{\"1\":{\"515\":1}}],[\"使用官方的基础镜像\",{\"1\":{\"490\":1}}],[\"使用的是\",{\"1\":{\"514\":1,\"693\":1}}],[\"使用的是客户端\",{\"1\":{\"474\":1}}],[\"使用的\",{\"1\":{\"510\":1}}],[\"使用的三个步骤\",{\"1\":{\"478\":1}}],[\"使用远程\",{\"1\":{\"474\":1}}],[\"使用哈希表的sizemask属性和第一步得到的哈希值\",{\"1\":{\"437\":1}}],[\"使用字典设置的哈希函数\",{\"1\":{\"437\":1}}],[\"使用率暴增\",{\"1\":{\"405\":1}}],[\"使用自动注入获取对象\",{\"1\":{\"362\":1}}],[\"使用说明\",{\"1\":{\"361\":1}}],[\"使用对应的\",{\"1\":{\"358\":1}}],[\"使用到了\",{\"1\":{\"355\":1}}],[\"使用可视化工具查看\",{\"1\":{\"354\":1}}],[\"使用可视化工具查看一下\",{\"1\":{\"354\":1}}],[\"使用分片集群可以解决上述问题\",{\"1\":{\"339\":1}}],[\"使用场景\",{\"1\":{\"323\":1,\"366\":1,\"591\":1}}],[\"使用方式如下\",{\"1\":{\"374\":1}}],[\"使用方式二\",{\"1\":{\"299\":1}}],[\"使用方便\",{\"1\":{\"110\":1}}],[\"使用内存淘汰机制\",{\"1\":{\"276\":1}}],[\"使用就可以\",{\"1\":{\"245\":1}}],[\"使用中间表\",{\"1\":{\"215\":1}}],[\"使用索引\",{\"1\":{\"215\":1}}],[\"使用索引的效率越高\",{\"1\":{\"136\":1}}],[\"使用逗号分隔\",{\"1\":{\"198\":1}}],[\"使用\",{\"0\":{\"619\":1},\"1\":{\"175\":1,\"178\":1,\"197\":1,\"245\":1,\"285\":1,\"346\":1,\"358\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"476\":1,\"478\":2,\"487\":1,\"498\":1,\"509\":1,\"512\":3,\"524\":1,\"537\":1,\"539\":1,\"581\":1,\"598\":1,\"604\":1,\"630\":1,\"634\":1,\"666\":5,\"667\":3,\"671\":1,\"709\":1,\"726\":1,\"729\":1}}],[\"使用别名old和new来引用触发器中发生变化的记录内容\",{\"1\":{\"155\":1}}],[\"使用意向锁来减少表锁的检查\",{\"1\":{\"147\":1}}],[\"使用记录值的id再在聚集索引中查询\",{\"1\":{\"127\":1}}],[\"使用二叉树做索引结构\",{\"1\":{\"118\":1}}],[\"使用spring6国际化\",{\"0\":{\"690\":1}}],[\"使用save\",{\"1\":{\"518\":1}}],[\"使用select\",{\"1\":{\"245\":1}}],[\"使用set\",{\"1\":{\"245\":1}}],[\"使用sql语言操作\",{\"1\":{\"110\":1}}],[\"使用some的地方均可以使用any\",{\"1\":{\"102\":1}}],[\"使用表存储数据\",{\"1\":{\"110\":1}}],[\"使得开发人员可以轻松共享和获取镜像\",{\"1\":{\"504\":1}}],[\"使得应用程序之间相互独立\",{\"1\":{\"504\":1}}],[\"使得\",{\"1\":{\"346\":1}}],[\"使得表锁不用检查每行数据是否加锁\",{\"1\":{\"147\":1}}],[\"使得提高查询的效率\",{\"1\":{\"92\":1}}],[\"使得读写操作没有冲突\",{\"1\":{\"81\":1}}],[\"内的代码\",{\"1\":{\"600\":1}}],[\"内的语句\",{\"1\":{\"600\":2}}],[\"内\",{\"1\":{\"475\":1}}],[\"内置不同的\",{\"1\":{\"438\":1}}],[\"内容为\",{\"1\":{\"757\":1}}],[\"内容可能包括空字符串\",{\"1\":{\"427\":1}}],[\"内容如下\",{\"1\":{\"308\":1,\"312\":1,\"341\":1}}],[\"内核的系统上\",{\"1\":{\"499\":1}}],[\"内核环境\",{\"1\":{\"499\":1}}],[\"内核中会处理大量请求\",{\"1\":{\"414\":1}}],[\"内核等待数据就绪并拷贝到用户空间后才会递交信号\",{\"1\":{\"414\":1}}],[\"内核遍历\",{\"1\":{\"408\":1}}],[\"内核会将就绪的\",{\"1\":{\"412\":1}}],[\"内核会将数据拷贝到用户线程\",{\"1\":{\"404\":1}}],[\"内核会去查看数据是否准备就绪\",{\"1\":{\"404\":1}}],[\"内核空间中遍历拷贝后的\",{\"1\":{\"407\":1}}],[\"内核空间可以执行特权命令\",{\"1\":{\"403\":1}}],[\"内核空间\",{\"1\":{\"403\":1}}],[\"内核与硬件交互\",{\"1\":{\"403\":1}}],[\"内部bean只能用于给属性赋值\",{\"1\":{\"758\":1}}],[\"内部bean\",{\"1\":{\"758\":2}}],[\"内部使用的接口\",{\"1\":{\"695\":1}}],[\"内部内是可以访问外部类的成员变量的\",{\"1\":{\"580\":1}}],[\"内部类\",{\"0\":{\"580\":1}}],[\"内部调用\",{\"1\":{\"464\":1}}],[\"内部会调用\",{\"1\":{\"464\":2}}],[\"内部有触发\",{\"1\":{\"321\":1}}],[\"内部的缓存使用的就是\",{\"1\":{\"282\":1}}],[\"内部包含\",{\"1\":{\"78\":1}}],[\"内存不足错误\",{\"1\":{\"595\":1}}],[\"内存不够时还会进行扩容\",{\"1\":{\"434\":1}}],[\"内存存储数据库\",{\"1\":{\"456\":1}}],[\"内存占用低\",{\"1\":{\"677\":1}}],[\"内存占用较低\",{\"1\":{\"446\":1}}],[\"内存占用小\",{\"1\":{\"272\":1}}],[\"内存预分配\",{\"0\":{\"429\":1}}],[\"内存的寻址空间划分为两部分\",{\"1\":{\"403\":1}}],[\"内存\",{\"1\":{\"366\":1,\"400\":1}}],[\"内存淘汰就是当\",{\"1\":{\"458\":1}}],[\"内存淘汰\",{\"1\":{\"276\":1}}],[\"内存是硬盘的缓存\",{\"1\":{\"271\":1}}],[\"内存策略\",{\"0\":{\"456\":1},\"1\":{\"267\":1}}],[\"内存使用达到设置的阈值时\",{\"1\":{\"458\":1}}],[\"内存使用\",{\"1\":{\"238\":1}}],[\"内存储的是segment段\",{\"1\":{\"206\":1}}],[\"内存结构\",{\"0\":{\"62\":1},\"1\":{\"62\":1}}],[\"内连接分为两种类型\",{\"1\":{\"96\":1}}],[\"内连接\",{\"0\":{\"96\":1},\"1\":{\"96\":1}}],[\"存活时间\",{\"1\":{\"456\":1}}],[\"存放每一个\",{\"1\":{\"456\":1}}],[\"存放所有\",{\"1\":{\"456\":1}}],[\"存放在内存中\",{\"1\":{\"238\":1}}],[\"存放在前面介绍的rollback\",{\"1\":{\"78\":1}}],[\"存入\",{\"1\":{\"356\":1}}],[\"存数据\",{\"1\":{\"284\":1}}],[\"存在一个能为用户自动管理资源的网络操作系统\",{\"1\":{\"783\":1}}],[\"存在就抛异常\",{\"1\":{\"745\":1}}],[\"存在就挂起\",{\"1\":{\"745\":1}}],[\"存在的话就注入\",{\"1\":{\"646\":1}}],[\"存在下面的问题\",{\"1\":{\"281\":1}}],[\"存在误判可能\",{\"1\":{\"272\":1}}],[\"存在以下问题\",{\"1\":{\"142\":1}}],[\"存储bean的容器\",{\"1\":{\"650\":1}}],[\"存储上限为\",{\"1\":{\"417\":1}}],[\"存储方式\",{\"1\":{\"366\":1}}],[\"存储的\",{\"1\":{\"354\":1}}],[\"存储一个数据\",{\"1\":{\"344\":1}}],[\"存储能力问题\",{\"1\":{\"320\":1}}],[\"存储容量有限\",{\"1\":{\"282\":1}}],[\"存储容量更大\",{\"1\":{\"282\":1}}],[\"存储函数是通过函数调用\",{\"1\":{\"256\":1}}],[\"存储函数的范围\",{\"1\":{\"256\":1}}],[\"存储函数的参数只能是in类型的\",{\"1\":{\"256\":1}}],[\"存储函数就是必须有返回值的存储过程\",{\"1\":{\"256\":1}}],[\"存储函数就是有返回值的存储过程\",{\"1\":{\"256\":1}}],[\"存储函数名称\",{\"1\":{\"256\":1}}],[\"存储函数\",{\"0\":{\"256\":1}}],[\"存储限制\",{\"1\":{\"238\":1}}],[\"存储索引\",{\"1\":{\"237\":1}}],[\"存储表结构信息\",{\"1\":{\"237\":1,\"238\":1}}],[\"存储该表的表架构\",{\"1\":{\"236\":1}}],[\"存储层位于mysql结构体系的最底层\",{\"1\":{\"233\":1}}],[\"存储层\",{\"1\":{\"233\":1}}],[\"存储过程的范围\",{\"1\":{\"256\":1}}],[\"存储过程名称\",{\"1\":{\"242\":3,\"248\":1}}],[\"存储过程思想上很简单\",{\"1\":{\"241\":1}}],[\"存储过程是事先经过编译并且存储在数据库中的一段sql语句的集合\",{\"1\":{\"241\":1}}],[\"存储过程\",{\"0\":{\"240\":1},\"1\":{\"172\":1}}],[\"存储引擎选择\",{\"0\":{\"239\":1}}],[\"存储引擎特点\",{\"0\":{\"235\":1}}],[\"存储引擎列表\",{\"1\":{\"234\":1}}],[\"存储引擎是基于表的\",{\"1\":{\"234\":1}}],[\"存储引擎就是存储数据\",{\"1\":{\"234\":1}}],[\"存储引擎简介\",{\"0\":{\"234\":1}}],[\"存储引擎\",{\"0\":{\"232\":1},\"1\":{\"172\":1}}],[\"存储引擎支持\",{\"0\":{\"125\":1},\"1\":{\"123\":1}}],[\"存储数据\",{\"1\":{\"237\":1,\"344\":1}}],[\"存储数据文件的路径地址\",{\"1\":{\"204\":1}}],[\"存储数据库\",{\"1\":{\"111\":1}}],[\"存储数据域\",{\"1\":{\"39\":1}}],[\"存储用户创建的临时表等数据\",{\"1\":{\"72\":1}}],[\"存储\",{\"1\":{\"35\":1}}],[\"存储结构\",{\"1\":{\"35\":2}}],[\"亦然\",{\"1\":{\"78\":1}}],[\"多例模式\",{\"1\":{\"764\":1}}],[\"多了定时刷新功能\",{\"1\":{\"689\":1}}],[\"多实现\",{\"1\":{\"576\":2}}],[\"多重继承\",{\"1\":{\"576\":2}}],[\"多继承\",{\"1\":{\"576\":2}}],[\"多态最常用的就是接口引用指向实现类对象\",{\"1\":{\"577\":1}}],[\"多态的实现方式包括方法重载和方法重写\",{\"1\":{\"577\":1}}],[\"多态允许不同的对象对同一消息做出响应\",{\"1\":{\"577\":1}}],[\"多态是指同一行为具有多个不同的表现形式或者形态\",{\"1\":{\"577\":1}}],[\"多态\",{\"0\":{\"577\":1},\"1\":{\"574\":1}}],[\"多线程网络模型\",{\"0\":{\"463\":1}}],[\"多线程会导致过多的上下文切换\",{\"1\":{\"460\":1}}],[\"多行字符串\",{\"1\":{\"423\":1,\"424\":1}}],[\"多行注释\",{\"1\":{\"175\":1,\"560\":2}}],[\"多路复用模块依然是由主线程执行\",{\"1\":{\"463\":1}}],[\"多路复用来提高网络性能\",{\"1\":{\"461\":1}}],[\"多路复用的实现方案\",{\"1\":{\"407\":1}}],[\"多路复用的技术有三种方式\",{\"1\":{\"406\":1}}],[\"多路复用\",{\"1\":{\"403\":1,\"462\":1}}],[\"多次写操作\",{\"1\":{\"322\":1}}],[\"多个异常使用\",{\"1\":{\"598\":1}}],[\"多个docker容器可以在同一台主机上并发运行\",{\"1\":{\"504\":1}}],[\"多个单词之间用\",{\"1\":{\"378\":1}}],[\"多个参数以逗号隔开\",{\"1\":{\"293\":1}}],[\"多个权限之间\",{\"1\":{\"198\":1}}],[\"多级缓存就是充分利用请求处理的每个环节\",{\"1\":{\"281\":1}}],[\"多级缓存方案\",{\"1\":{\"281\":1}}],[\"多级缓存\",{\"0\":{\"305\":1},\"1\":{\"266\":1}}],[\"多字段排序\",{\"1\":{\"213\":1}}],[\"多字段排序时\",{\"1\":{\"213\":1}}],[\"多选之\",{\"1\":{\"189\":1}}],[\"多选一\",{\"1\":{\"102\":1}}],[\"多张表的列数必须保持一致\",{\"1\":{\"99\":1}}],[\"多对多\",{\"0\":{\"94\":1}}],[\"多表关系\",{\"0\":{\"91\":1}}],[\"多表查询是指从多张数据表中查询数据\",{\"1\":{\"95\":1}}],[\"多表查询\",{\"0\":{\"90\":1,\"95\":1},\"1\":{\"172\":1}}],[\"多版本并发控制\",{\"1\":{\"78\":1,\"81\":1}}],[\"多层循环\",{\"1\":{\"22\":1}}],[\"提出并创立\",{\"1\":{\"725\":1}}],[\"提出进一步的需求\",{\"1\":{\"657\":1}}],[\"提出问题\",{\"1\":{\"655\":1}}],[\"提倡运用非关系型的数据存储\",{\"1\":{\"365\":1}}],[\"提升为\",{\"1\":{\"326\":1}}],[\"提升服务性能\",{\"1\":{\"281\":1}}],[\"提交的描述信息\",{\"1\":{\"515\":1}}],[\"提交容器副本\",{\"1\":{\"515\":1}}],[\"提交自己的\",{\"1\":{\"304\":1}}],[\"提交事务\",{\"1\":{\"258\":1,\"734\":1}}],[\"提取码\",{\"1\":{\"173\":1,\"630\":1,\"631\":1,\"634\":1,\"639\":1,\"653\":1}}],[\"提高可靠性\",{\"0\":{\"792\":1}}],[\"提高开发效率\",{\"1\":{\"735\":1}}],[\"提高程序扩展力\",{\"1\":{\"693\":1}}],[\"提高程序的可重用性\",{\"1\":{\"660\":1}}],[\"提高内聚性\",{\"1\":{\"661\":1}}],[\"提高代码复用性\",{\"1\":{\"576\":1}}],[\"提高了代码的复用性​\",{\"1\":{\"575\":1}}],[\"提高了代码的安全性\",{\"1\":{\"575\":1}}],[\"提高了系统的效率\",{\"1\":{\"504\":1}}],[\"提高了应用程序的部署速度\",{\"1\":{\"504\":1}}],[\"提高了效率\",{\"1\":{\"491\":1}}],[\"提高读写效率\",{\"1\":{\"271\":1}}],[\"提高并发访问性能\",{\"1\":{\"236\":1}}],[\"提高查询效率\",{\"1\":{\"136\":1}}],[\"提高区间访问的性能\",{\"1\":{\"122\":1}}],[\"提高数据检索的效率\",{\"1\":{\"116\":1}}],[\"提供如下两个标志性接口\",{\"1\":{\"715\":1}}],[\"提供的资源访问策略\",{\"1\":{\"719\":1}}],[\"提供的资料也是适配\",{\"1\":{\"636\":1}}],[\"提供的\",{\"1\":{\"709\":2}}],[\"提供两种运行\",{\"1\":{\"678\":1}}],[\"提供快速修复选择\",{\"1\":{\"550\":1}}],[\"提供了很多inputstreamsource所没有的方法\",{\"1\":{\"705\":1}}],[\"提供了很多操作集群的命令\",{\"1\":{\"346\":1}}],[\"提供了ioc\",{\"1\":{\"695\":1}}],[\"提供了以下多个注解\",{\"1\":{\"644\":1}}],[\"提供了更多高级特性\",{\"1\":{\"695\":1}}],[\"提供了更优雅的方式来实现资源的自动释放\",{\"1\":{\"600\":1}}],[\"提供了更强大的跨平台性\",{\"1\":{\"504\":1}}],[\"提供了灵活性和可扩展性\",{\"1\":{\"577\":1}}],[\"提供了灵活的构造器去创建一个拥有下列特性的缓存\",{\"1\":{\"283\":1}}],[\"提供了统一的高性能事件库\",{\"1\":{\"461\":1}}],[\"提供了一个配置项\",{\"1\":{\"450\":1}}],[\"提供了三个函数\",{\"1\":{\"409\":1}}],[\"提供了三种缓存驱逐策略\",{\"1\":{\"285\":1}}],[\"提供了经纬度设置\",{\"1\":{\"398\":1}}],[\"提供了消息的持久化和主备复制功能\",{\"1\":{\"387\":1}}],[\"提供了\",{\"1\":{\"360\":1}}],[\"提供了对不同\",{\"1\":{\"360\":1}}],[\"提供了哨兵\",{\"1\":{\"326\":1}}],[\"提供了各种\",{\"1\":{\"313\":1}}],[\"提供了适配器以供简单的迁移策略\",{\"1\":{\"283\":1}}],[\"提供了近乎最佳命中率的高性能的本地缓存库\",{\"1\":{\"282\":1}}],[\"提供良好的事务管理\",{\"1\":{\"236\":1}}],[\"提供专业技术支持\",{\"1\":{\"108\":1}}],[\"提供回滚\",{\"1\":{\"78\":1}}],[\"提示下\",{\"1\":{\"687\":1}}],[\"提示\",{\"1\":{\"2\":1,\"91\":1,\"100\":1,\"107\":1,\"179\":2,\"193\":1,\"198\":1,\"203\":1,\"225\":1,\"245\":1,\"252\":1,\"253\":1,\"259\":1,\"358\":1,\"476\":1,\"494\":1,\"498\":1,\"506\":1,\"507\":1,\"514\":1,\"531\":1,\"565\":1,\"568\":1,\"607\":1,\"644\":1,\"656\":1,\"753\":1}}],[\"作为bean的id在ioc容器中匹配相对应的bean进行赋值\",{\"1\":{\"766\":1}}],[\"作为\",{\"1\":{\"757\":1}}],[\"作为属性\",{\"0\":{\"719\":1}}],[\"作为存档\",{\"1\":{\"700\":1}}],[\"作为构建的起点\",{\"1\":{\"493\":1}}],[\"作为值写入\",{\"1\":{\"354\":1}}],[\"作为新的\",{\"1\":{\"330\":1}}],[\"作为事务在未提交情况下回滚的依据\",{\"1\":{\"86\":1}}],[\"作用是维护消费者的未确认的\",{\"1\":{\"387\":1}}],[\"作用是跳过当前循环剩下的语句\",{\"1\":{\"253\":1}}],[\"作用\",{\"1\":{\"271\":1,\"661\":1}}],[\"作用包含两个\",{\"1\":{\"78\":1}}],[\"作者相关\",{\"0\":{\"11\":1}}],[\"要注意在\",{\"1\":{\"752\":1}}],[\"要注意的是\",{\"1\":{\"525\":1}}],[\"要注意的是lua中\",{\"1\":{\"292\":1}}],[\"要校验用户名不能为空\",{\"1\":{\"680\":1}}],[\"要实际去增强的方法\",{\"1\":{\"661\":1}}],[\"要实现克隆\",{\"1\":{\"581\":1}}],[\"要实现开机启动\",{\"1\":{\"372\":1}}],[\"要抽取的代码在方法内部\",{\"1\":{\"655\":1}}],[\"要导出的镜像\",{\"1\":{\"518\":1}}],[\"要导出的文件名\",{\"1\":{\"518\":1}}],[\"要在一次\",{\"1\":{\"440\":1}}],[\"要在同一台虚拟机开启3个实例\",{\"1\":{\"297\":1,\"333\":1}}],[\"要插入的位置\",{\"1\":{\"434\":1}}],[\"要插入数据的数据表名称\",{\"1\":{\"204\":1}}],[\"要执行的操作\",{\"1\":{\"409\":1}}],[\"要监听的事件类型\",{\"1\":{\"408\":1,\"409\":1}}],[\"要监听的\",{\"1\":{\"408\":1,\"409\":1}}],[\"要监听异常事件的fd集合\",{\"1\":{\"407\":1}}],[\"要监听写事件的fd集合\",{\"1\":{\"407\":1}}],[\"要监听读事件的fd集合\",{\"1\":{\"407\":1}}],[\"要监视的fd\",{\"1\":{\"407\":1}}],[\"要从设备读取数据到内核缓冲区\",{\"1\":{\"403\":1}}],[\"要把用户缓冲数据拷贝到内核缓冲区\",{\"1\":{\"403\":1}}],[\"要进行其他指令操作时\",{\"1\":{\"370\":1}}],[\"要进一步提高\",{\"1\":{\"295\":1}}],[\"要求transaction01只能读取transaction02已提交的修改\",{\"1\":{\"744\":1}}],[\"要求只能存储\",{\"1\":{\"357\":1}}],[\"要求非空且唯一\",{\"1\":{\"49\":1}}],[\"要配置主从可以使用replicaof\",{\"1\":{\"299\":1}}],[\"要想不失效\",{\"1\":{\"244\":1}}],[\"要么是另一事务修改它之后的状态\",{\"1\":{\"733\":1}}],[\"要么需要使用\",{\"1\":{\"719\":1}}],[\"要么已声明异常\",{\"1\":{\"599\":1}}],[\"要么过于精炼\",{\"1\":{\"543\":1}}],[\"要么同时失败\",{\"1\":{\"257\":1}}],[\"要么通过sql的执行时间来判断sql是否需要优化\",{\"1\":{\"231\":1}}],[\"要么全部不完成\",{\"1\":{\"733\":1}}],[\"要么全部不执行\",{\"1\":{\"401\":1,\"733\":1}}],[\"要么全部完成\",{\"1\":{\"733\":1}}],[\"要么全部失败\",{\"1\":{\"76\":1,\"259\":1}}],[\"要么全部成功\",{\"1\":{\"76\":1,\"259\":1}}],[\"要使视图可以更新\",{\"1\":{\"168\":1}}],[\"要控制索引的数量\",{\"1\":{\"136\":1}}],[\"要遵守最左前缀法则\",{\"1\":{\"131\":1}}],[\"要保存大量数据\",{\"1\":{\"124\":1}}],[\"就不会当作xml标签或属性来解析\",{\"1\":{\"757\":1}}],[\"就不需要类似于javac编译器这种工具\",{\"1\":{\"612\":1}}],[\"就称之为依赖注入\",{\"1\":{\"753\":1}}],[\"就都买不了\",{\"1\":{\"745\":1}}],[\"就在这个事务里再嵌套一个完全独立的事务\",{\"1\":{\"745\":1}}],[\"就以非事务方式执行\",{\"1\":{\"745\":1}}],[\"就能够明确告诉数据库\",{\"1\":{\"741\":1}}],[\"就能知道就绪的\",{\"1\":{\"412\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"733\":1}}],[\"就意味着spring使用响应的资源访问策略\",{\"1\":{\"722\":1}}],[\"就需要先创建一个\",{\"1\":{\"693\":1}}],[\"就需要搭建主从集群\",{\"1\":{\"295\":1}}],[\"就往上套\",{\"1\":{\"661\":1}}],[\"就有十个横切关注点\",{\"1\":{\"661\":1}}],[\"就拿日志功能来说\",{\"1\":{\"657\":1}}],[\"就将该类装配到容器中\",{\"1\":{\"643\":1}}],[\"就将其全部归纳到字段操作里\",{\"1\":{\"179\":1}}],[\"就很容易的理解\",{\"1\":{\"612\":1}}],[\"就很容易理解\",{\"1\":{\"443\":1}}],[\"就说明我们使用了该镜像创建了容器\",{\"1\":{\"514\":1}}],[\"就必须安装一个虚拟\",{\"1\":{\"499\":1}}],[\"就选择\",{\"1\":{\"498\":1}}],[\"就选择apple芯片\",{\"1\":{\"498\":1}}],[\"就显示已经安装\",{\"1\":{\"498\":1}}],[\"就返回null\",{\"1\":{\"470\":1}}],[\"就返回\",{\"1\":{\"464\":1}}],[\"就要通过\",{\"1\":{\"439\":1}}],[\"就会从默认的\",{\"1\":{\"510\":1}}],[\"就会从镜像仓库\",{\"1\":{\"476\":1}}],[\"就会去第二个哈希表上进行查找\",{\"1\":{\"440\":1}}],[\"就会使用整数集合作为集合键的底层实现\",{\"1\":{\"432\":1}}],[\"就会出现页合并\",{\"1\":{\"207\":1}}],[\"就绪时\",{\"1\":{\"413\":1}}],[\"就绪\",{\"1\":{\"410\":1,\"461\":1}}],[\"就绪的同时\",{\"1\":{\"406\":1}}],[\"就把对应的fd加入到rdlist这个就绪列表中\",{\"1\":{\"409\":1}}],[\"就可以认定为和类型匹配\",{\"1\":{\"752\":1}}],[\"就可以得到通知\",{\"1\":{\"410\":1}}],[\"就可以计算接近\",{\"1\":{\"400\":1}}],[\"就可以从undo\",{\"1\":{\"78\":1}}],[\"就形成了带有顺序指针的b+tree\",{\"1\":{\"122\":1}}],[\"就是一种控制反转的思想\",{\"1\":{\"694\":1}}],[\"就是一个被高并发访问并且缓存重建业务较复杂的\",{\"1\":{\"274\":1}}],[\"就是动态参数\",{\"1\":{\"690\":1}}],[\"就是如何将bean\",{\"1\":{\"682\":1}}],[\"就是如上界面\",{\"1\":{\"370\":1}}],[\"就是底层的支持\",{\"1\":{\"678\":1}}],[\"就是spring允许你使用通知的地方\",{\"1\":{\"661\":1}}],[\"就是你想要增强的功能\",{\"1\":{\"661\":1}}],[\"就是咱们放在容器的对象\",{\"1\":{\"650\":1}}],[\"就是基于jvm的\",{\"1\":{\"613\":1}}],[\"就是jdk帮我们在\",{\"1\":{\"562\":1}}],[\"就是已经配置成功了\",{\"1\":{\"475\":1}}],[\"就是数据库名\",{\"1\":{\"730\":1}}],[\"就是数据库密码\",{\"1\":{\"730\":1}}],[\"就是数据库账号\",{\"1\":{\"730\":1}}],[\"就是数据库sql语言层面的代码封装与重用\",{\"1\":{\"241\":1}}],[\"就是数组结合单向链表的实现\",{\"1\":{\"439\":1}}],[\"就是在等待数据和拷贝数据到用户空间两个阶段过程中都必须阻塞等待\",{\"1\":{\"404\":1}}],[\"就是在sql语句中加入一些人为的提示来达到优化的目的\",{\"1\":{\"132\":1}}],[\"就是元素的2维坐标\",{\"1\":{\"398\":1}}],[\"就是写数据到\",{\"1\":{\"312\":1}}],[\"就是把多次查询的结果合并起来\",{\"1\":{\"99\":1}}],[\"就是快照读\",{\"1\":{\"83\":1}}],[\"就看你是从那个视角去看待这段关系\",{\"1\":{\"93\":1}}],[\"就用它来回收\",{\"1\":{\"75\":1}}],[\"就好像缓存穿透一般\",{\"1\":{\"2\":1}}],[\"职责\",{\"1\":{\"75\":1}}],[\"线程就会被阻塞\",{\"1\":{\"406\":1}}],[\"线程无需等待\",{\"1\":{\"274\":1}}],[\"线程需要等待\",{\"1\":{\"274\":1}}],[\"线程类型\",{\"1\":{\"75\":1}}],[\"线性表长度\",{\"1\":{\"38\":1}}],[\"线性表长度加\",{\"1\":{\"38\":1}}],[\"线性表中元素的位序是从\",{\"1\":{\"38\":1}}],[\"线性表的链式存储成为单链表\",{\"1\":{\"39\":1}}],[\"线性表的顺序存储类型描述\",{\"1\":{\"38\":1}}],[\"线性表的顺序结构又称为顺序表\",{\"1\":{\"38\":1}}],[\"线性表的基本操作\",{\"1\":{\"37\":1}}],[\"线性表是具有相同数据类型的n个数据元素的有限集序列\",{\"1\":{\"37\":1}}],[\"线性表定义和操作\",{\"0\":{\"37\":1}}],[\"线性表\",{\"0\":{\"36\":1},\"1\":{\"37\":1}}],[\"线性结构\",{\"1\":{\"35\":2}}],[\"后不为空串\",{\"1\":{\"682\":1}}],[\"后者提前编译\",{\"1\":{\"677\":1}}],[\"后者是在磁盘中\",{\"1\":{\"74\":1,\"77\":1}}],[\"后置通知\",{\"1\":{\"661\":1,\"666\":3}}],[\"后端资料下载\",{\"1\":{\"630\":1}}],[\"后端环境搭建\",{\"0\":{\"630\":1}}],[\"后方向键\",{\"1\":{\"549\":1,\"550\":1,\"552\":1,\"553\":1,\"554\":1}}],[\"后结果为实际值\",{\"1\":{\"444\":1}}],[\"后就可以去做其他事情\",{\"1\":{\"414\":1}}],[\"后台模式与进入\",{\"0\":{\"524\":1}}],[\"后台启动\",{\"0\":{\"371\":1}}],[\"后台线程主要有四类\",{\"1\":{\"75\":1}}],[\"后台线程的作用就是将innodb缓冲池\",{\"1\":{\"75\":1}}],[\"后台线程\",{\"0\":{\"75\":1}}],[\"后读取内存数据并写入\",{\"1\":{\"321\":1}}],[\"后面的4个字节用来表示encoding中存储的字符串长度\",{\"1\":{\"444\":1}}],[\"后面的字段索引失效\",{\"1\":{\"131\":1}}],[\"后面跟上数组元素个数\",{\"1\":{\"423\":1}}],[\"后面跟上数字格式的字符串\",{\"1\":{\"423\":1}}],[\"后面跟上单行字符串\",{\"1\":{\"423\":1}}],[\"后面是openresty安装目录下的nginx的目录\",{\"1\":{\"307\":1}}],[\"后\",{\"1\":{\"281\":1,\"329\":1}}],[\"后续会更新\",{\"1\":{\"499\":1}}],[\"后续指令将在该目录下执行\",{\"1\":{\"493\":1}}],[\"后续命令则记录在repl\",{\"1\":{\"304\":1}}],[\"后续的dml的写语句\",{\"1\":{\"140\":1}}],[\"后续复用该readview\",{\"1\":{\"88\":1}}],[\"发起命令时\",{\"1\":{\"462\":1}}],[\"发起连接请求时\",{\"1\":{\"462\":1}}],[\"发出请求\",{\"1\":{\"424\":1}}],[\"发布命令\",{\"1\":{\"383\":1}}],[\"发布消息\",{\"1\":{\"383\":1}}],[\"发布者客户端向指定的频道\",{\"1\":{\"383\":1}}],[\"发布订阅\",{\"0\":{\"383\":1},\"1\":{\"264\":1,\"383\":1,\"387\":1}}],[\"发现服务都已经正常启动\",{\"1\":{\"342\":1}}],[\"发现\",{\"1\":{\"303\":1}}],[\"发现不一致\",{\"1\":{\"302\":1}}],[\"发生异常之后的代码是不会被执行的\",{\"1\":{\"600\":1}}],[\"发生异常时\",{\"1\":{\"600\":1}}],[\"发生锁冲突的概率最低\",{\"1\":{\"148\":1}}],[\"发生锁冲突的概率最高\",{\"1\":{\"144\":1}}],[\"发生错误时\",{\"1\":{\"74\":1,\"77\":1}}],[\"发送一条命令\",{\"1\":{\"423\":1}}],[\"发送了\",{\"1\":{\"410\":1}}],[\"发送消息\",{\"1\":{\"383\":1}}],[\"发送者\",{\"1\":{\"383\":1}}],[\"发送http请求\",{\"1\":{\"309\":1}}],[\"发送\",{\"1\":{\"302\":1,\"304\":1,\"329\":1}}],[\"发送确认报文段\",{\"1\":{\"18\":1,\"19\":1}}],[\"发送报文段的同时为该tcp连接分配对应的缓存和变量\",{\"1\":{\"17\":1}}],[\"发送请求报文段\",{\"1\":{\"17\":1}}],[\"先删除掉该镜像\",{\"1\":{\"518\":1}}],[\"先下载一个\",{\"1\":{\"515\":1}}],[\"先查看\",{\"1\":{\"514\":1}}],[\"先查询图书的价格\",{\"1\":{\"738\":1}}],[\"先查询\",{\"1\":{\"281\":1}}],[\"先读长度\",{\"1\":{\"424\":1}}],[\"先判断\",{\"1\":{\"302\":1}}],[\"先判定条件\",{\"1\":{\"251\":1}}],[\"先操作数据库\",{\"1\":{\"277\":1}}],[\"先操作缓冲池中的数据\",{\"1\":{\"63\":1}}],[\"先执行一次逻辑\",{\"1\":{\"252\":1}}],[\"先开启一个新的数据页\",{\"1\":{\"207\":1}}],[\"先通过筛选条件在二级索引中查找对应的记录值\",{\"1\":{\"127\":1}}],[\"先将数据页写入双写缓冲区文件中\",{\"1\":{\"73\":1}}],[\"独立表空间\",{\"0\":{\"69\":1}}],[\"系统返回到原始状态\",{\"1\":{\"733\":1}}],[\"系统处于有效状态\",{\"1\":{\"733\":1}}],[\"系统将搜索类加载路径\",{\"1\":{\"723\":1}}],[\"系统将会自动创建filesystemresource对象\",{\"1\":{\"709\":1}}],[\"系统会自动创建classpathresource对象\",{\"1\":{\"708\":1}}],[\"系统会进行拦截\",{\"1\":{\"498\":1}}],[\"系统设置\",{\"1\":{\"552\":1}}],[\"系统上被输入法占用\",{\"1\":{\"549\":1}}],[\"系统\",{\"1\":{\"515\":1}}],[\"系统库等\",{\"1\":{\"504\":1}}],[\"系统工具\",{\"1\":{\"504\":1}}],[\"系统为了提高\",{\"1\":{\"403\":1}}],[\"系统的发行版\",{\"1\":{\"403\":1}}],[\"系统的设计选择是一个权衡的过程\",{\"1\":{\"275\":1}}],[\"系统资源占用\",{\"1\":{\"323\":1}}],[\"系统中添加\",{\"1\":{\"307\":1}}],[\"系统变量名\",{\"1\":{\"244\":3}}],[\"系统变量是mysql服务器提供\",{\"1\":{\"244\":1}}],[\"系统变量\",{\"0\":{\"244\":1}}],[\"系统表空间是更改缓冲区的存储区域\",{\"1\":{\"68\":1}}],[\"系统表空间\",{\"0\":{\"68\":1}}],[\"系列学习笔记\",{\"1\":{\"506\":1}}],[\"系列芯片\",{\"1\":{\"498\":1}}],[\"系列文档\",{\"1\":{\"268\":1}}],[\"系列\",{\"0\":{\"10\":1}}],[\"自治计算机\",{\"1\":{\"782\":1}}],[\"自\",{\"1\":{\"725\":1}}],[\"自诞生以来备受青睐\",{\"1\":{\"725\":1}}],[\"自然会启动bytype进行注入\",{\"1\":{\"647\":1}}],[\"自减操作\",{\"1\":{\"378\":2}}],[\"自定义校验注解\",{\"1\":{\"684\":1}}],[\"自定义网络端口映射\",{\"0\":{\"537\":1}}],[\"自定义的类型多为引用数据类型\",{\"1\":{\"562\":1}}],[\"自定义的名称\",{\"1\":{\"528\":1}}],[\"自定义的序列化方式也加进去了对引用类型的序列化\",{\"1\":{\"356\":1}}],[\"自定义客户端\",{\"0\":{\"424\":1}}],[\"自定义redistemplate\",{\"1\":{\"358\":1}}],[\"自定义序列化方式\",{\"0\":{\"356\":1}}],[\"自定义\",{\"1\":{\"333\":1,\"424\":1}}],[\"自动为指定的bean中所依赖的类类型或接口类型属性赋值\",{\"1\":{\"766\":1}}],[\"自动装配方式\",{\"1\":{\"766\":2}}],[\"自动装配\",{\"1\":{\"766\":3}}],[\"自动扩容\",{\"0\":{\"627\":1}}],[\"自动释放的资源需要是实现了\",{\"1\":{\"600\":1}}],[\"自动结束代码\",{\"1\":{\"553\":1}}],[\"自动将下一行合并到当前行末尾\",{\"1\":{\"553\":1}}],[\"自动构建\",{\"1\":{\"512\":1}}],[\"自动提升一个\",{\"1\":{\"347\":1}}],[\"自动故障恢复\",{\"1\":{\"326\":1}}],[\"自动加载元素到缓存当中\",{\"1\":{\"283\":1}}],[\"自适应hash就是innodb存储引擎根据我们的查询条件\",{\"1\":{\"123\":1}}],[\"自适应哈希索引无需人工干预\",{\"1\":{\"66\":1}}],[\"自适应哈希索引\",{\"0\":{\"66\":1},\"1\":{\"66\":1}}],[\"自连接可以是内连接\",{\"1\":{\"98\":1}}],[\"自连接是不区分左连接和右连接的\",{\"1\":{\"98\":1}}],[\"自连接查询必须使用表别名\",{\"1\":{\"98\":1}}],[\"自连接顾名思义就是自己连接自己\",{\"1\":{\"98\":1}}],[\"自连接\",{\"0\":{\"98\":1}}],[\"自己写代码实现功能\",{\"1\":{\"735\":1}}],[\"自己写总结的目的是为了记录自己对知识点的掌握程度\",{\"1\":{\"2\":1}}],[\"自己构建了一种新的字符串结构\",{\"1\":{\"427\":1}}],[\"自己计数\",{\"1\":{\"222\":1}}],[\"自己对知识的学习笔记和总结\",{\"1\":{\"1\":1}}],[\"参数异常\",{\"1\":{\"658\":1}}],[\"参数正常\",{\"1\":{\"658\":1}}],[\"参数正常时可以正常运行\",{\"1\":{\"658\":1}}],[\"参数是\",{\"1\":{\"655\":4,\"657\":1}}],[\"参数个数不同或者二者都不同\",{\"1\":{\"586\":1}}],[\"参数用于向方法传递数据\",{\"1\":{\"583\":1}}],[\"参数映射到主机上的端口是随机的\",{\"1\":{\"537\":1}}],[\"参数创建容器时\",{\"1\":{\"524\":1}}],[\"参数指定\",{\"1\":{\"486\":1}}],[\"参数解析代码示例\",{\"1\":{\"313\":1}}],[\"参数示例\",{\"1\":{\"313\":1}}],[\"参数格式\",{\"1\":{\"313\":1}}],[\"参数类型不同\",{\"1\":{\"586\":1}}],[\"参数类型\",{\"1\":{\"248\":1}}],[\"参数名\",{\"1\":{\"248\":1}}],[\"参数列表完全相同的方法\",{\"1\":{\"586\":1}}],[\"参数列表\",{\"1\":{\"242\":2,\"256\":1,\"572\":1,\"583\":2}}],[\"参数说明\",{\"1\":{\"204\":1,\"206\":1}}],[\"参数\",{\"0\":{\"248\":1},\"1\":{\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"236\":1,\"658\":1,\"665\":1,\"668\":2,\"669\":1}}],[\"参考基于注解的声明式事务\",{\"1\":{\"748\":1}}],[\"参考基于注解的aop环境\",{\"1\":{\"673\":1}}],[\"参考前面\",{\"1\":{\"707\":1}}],[\"参考本站内的\",{\"1\":{\"649\":1}}],[\"参考本篇文章\",{\"1\":{\"607\":1}}],[\"参考资料\",{\"0\":{\"173\":1,\"268\":1,\"639\":1,\"653\":1,\"769\":1}}],[\"参考了b站的数据结构\",{\"1\":{\"22\":1}}],[\"参考与鸣谢\",{\"0\":{\"3\":1}}],[\"日期等简单的形式\",{\"1\":{\"101\":1}}],[\"日期函数\",{\"0\":{\"57\":1}}],[\"日志等\",{\"1\":{\"661\":1}}],[\"日志管理\",{\"1\":{\"661\":1}}],[\"日志功能还是分散的\",{\"1\":{\"657\":1}}],[\"日志记录\",{\"1\":{\"155\":1}}],[\"日志不仅在回滚时需要\",{\"1\":{\"85\":1}}],[\"日志只在回滚时需要\",{\"1\":{\"85\":1}}],[\"日志\",{\"0\":{\"152\":1},\"1\":{\"81\":1,\"172\":1,\"341\":1,\"655\":8,\"657\":2,\"658\":4}}],[\"日志在每次事务提交后写入\",{\"1\":{\"65\":1}}],[\"日志在每次事务提交时写入并刷新到磁盘\",{\"1\":{\"65\":1}}],[\"日志刷新到磁盘时机\",{\"1\":{\"65\":1}}],[\"日志缓冲区中的数据会定期刷新到磁盘中\",{\"1\":{\"65\":1}}],[\"日志缓冲区\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"减\",{\"1\":{\"444\":1}}],[\"减轻\",{\"1\":{\"281\":1}}],[\"减少对目标方法的调用和打扰\",{\"1\":{\"656\":1}}],[\"减少内存分配次数\",{\"1\":{\"429\":1}}],[\"减少\",{\"1\":{\"303\":2,\"677\":1}}],[\"减少数据库的压力\",{\"1\":{\"282\":1}}],[\"减少数据在数据库和应用服务器之间的传输\",{\"1\":{\"241\":1}}],[\"减少网络交互\",{\"1\":{\"241\":1}}],[\"减少单列索引\",{\"1\":{\"136\":1}}],[\"减少select\",{\"1\":{\"133\":1}}],[\"减少阻塞\",{\"1\":{\"75\":1}}],[\"减少磁盘io\",{\"1\":{\"64\":1}}],[\"减1\",{\"1\":{\"38\":1}}],[\"有三种方式\",{\"1\":{\"758\":1}}],[\"有事务的话\",{\"1\":{\"745\":1}}],[\"有就加入\",{\"1\":{\"745\":3}}],[\"有可能因为遇到某些问题\",{\"1\":{\"742\":1}}],[\"有可能是历史数据\",{\"1\":{\"83\":1}}],[\"有如下两种解决方案\",{\"1\":{\"719\":1}}],[\"有更好的解决方法\",{\"1\":{\"719\":1}}],[\"有运行时性能加成\",{\"1\":{\"677\":1}}],[\"有几个类名是相同的\",{\"1\":{\"665\":1}}],[\"有十个附加功能\",{\"1\":{\"661\":1}}],[\"有涉及到文件的路径转换\",{\"1\":{\"650\":1}}],[\"有多个兼容类型的bean能够为属性赋值\",{\"1\":{\"766\":1}}],[\"有多个构造方法时呢\",{\"1\":{\"646\":1}}],[\"有多个事务需要对同一个数据进行操作\",{\"1\":{\"86\":1}}],[\"有时我们需要在捕获到异常并且处理结束后\",{\"1\":{\"600\":1}}],[\"有时候即便我们创建了联合索引\",{\"1\":{\"135\":1}}],[\"有时候需要索引很长的字符串\",{\"1\":{\"134\":1}}],[\"有些是不可以处理的\",{\"1\":{\"594\":1}}],[\"有些指令只能针对某些特定的类型\",{\"1\":{\"466\":1}}],[\"有兼容的返回类型\",{\"1\":{\"586\":1}}],[\"有一个连接系统允许将多个容器连接在一起\",{\"1\":{\"484\":1}}],[\"有两个\",{\"1\":{\"456\":1}}],[\"有关\",{\"1\":{\"440\":1}}],[\"有数据可读时\",{\"1\":{\"410\":3}}],[\"有user和product两种不同类型的数据\",{\"1\":{\"378\":1}}],[\"有效期到期时该key会被⾃动删除\",{\"1\":{\"363\":1}}],[\"有效地变成一个强大的通用\",{\"1\":{\"306\":1}}],[\"有效性是所有数据库必须解决的一个问题\",{\"1\":{\"138\":1}}],[\"有效性和完整性\",{\"1\":{\"48\":1}}],[\"有临时和永久两种模式\",{\"1\":{\"299\":1}}],[\"有点类似格式化\",{\"1\":{\"552\":1}}],[\"有点相似\",{\"1\":{\"283\":1}}],[\"有点繁琐\",{\"1\":{\"151\":1}}],[\"有额外内存消耗\",{\"1\":{\"274\":1}}],[\"有\",{\"1\":{\"238\":2,\"486\":1,\"744\":6}}],[\"有not\",{\"1\":{\"223\":1}}],[\"有asc和desc两种\",{\"1\":{\"212\":1}}],[\"有字段存在符合的索引\",{\"1\":{\"212\":1}}],[\"有回表查询\",{\"1\":{\"128\":1}}],[\"有序集\",{\"1\":{\"469\":1}}],[\"有序集合对象\",{\"1\":{\"471\":2}}],[\"有序集合对象zset\",{\"0\":{\"421\":1}}],[\"有序集合\",{\"0\":{\"382\":1}}],[\"有序等特征\",{\"1\":{\"432\":1}}],[\"有序\",{\"1\":{\"115\":1,\"380\":1,\"435\":1}}],[\"有任意一个满足即可\",{\"1\":{\"102\":1}}],[\"有了change\",{\"1\":{\"64\":1}}],[\"脏读\",{\"1\":{\"260\":1,\"261\":1,\"744\":1}}],[\"脏page\",{\"1\":{\"63\":1}}],[\"脏页\",{\"1\":{\"63\":1}}],[\"空event\",{\"1\":{\"409\":1}}],[\"空转\",{\"1\":{\"405\":1}}],[\"空间使用\",{\"1\":{\"238\":1}}],[\"空间占用比较大\",{\"1\":{\"236\":1}}],[\"空间索引是myisam引擎的一个特殊索引\",{\"1\":{\"117\":1}}],[\"空间复杂度是很容易判断的\",{\"1\":{\"32\":1}}],[\"空间复杂度\",{\"0\":{\"32\":1}}],[\"空闲page\",{\"1\":{\"63\":1}}],[\"加入后置处理器的执行结果\",{\"1\":{\"764\":1}}],[\"加入到对应子模块中的\",{\"1\":{\"762\":1}}],[\"加入依赖\",{\"1\":{\"762\":1}}],[\"加入事务\",{\"0\":{\"739\":1}}],[\"加入键的时候如果过限\",{\"1\":{\"278\":3,\"458\":3}}],[\"加入键的时候\",{\"1\":{\"278\":1,\"458\":1}}],[\"加一\",{\"1\":{\"472\":1}}],[\"加\",{\"1\":{\"382\":1}}],[\"加上\",{\"1\":{\"374\":1}}],[\"加上参数\",{\"1\":{\"204\":1}}],[\"加载其他资源\",{\"1\":{\"718\":1}}],[\"加载动态生成的代理类的类加载器\",{\"1\":{\"658\":1}}],[\"加载\",{\"1\":{\"311\":2}}],[\"加载openresty的lua模块\",{\"1\":{\"309\":1}}],[\"加载master\",{\"1\":{\"302\":1}}],[\"加的行锁与表锁的冲突\",{\"1\":{\"147\":1}}],[\"加mdl写锁\",{\"1\":{\"146\":1}}],[\"加mdl读锁\",{\"1\":{\"146\":1}}],[\"加锁\",{\"1\":{\"141\":1,\"145\":1}}],[\"加锁后整个实例就处于只读状态\",{\"1\":{\"140\":1}}],[\"加快处理速度\",{\"1\":{\"63\":1}}],[\"加我微信免费拉你进星球\",{\"1\":{\"4\":1}}],[\"b>\",{\"1\":{\"765\":6}}],[\"bxucccwqtr3ynura\",{\"1\":{\"630\":1,\"631\":1}}],[\"b234f112186d\",{\"1\":{\"526\":2}}],[\"bm\",{\"1\":{\"449\":1}}],[\"blank\",{\"1\":{\"684\":1}}],[\"blog\",{\"1\":{\"607\":1}}],[\"blob\",{\"1\":{\"499\":1}}],[\"blocking\",{\"1\":{\"403\":1,\"456\":1}}],[\"block\",{\"1\":{\"394\":1,\"396\":1}}],[\"blpop和brpop\",{\"1\":{\"380\":1}}],[\"bgrewriteaof\",{\"1\":{\"322\":1,\"439\":2}}],[\"bgsave\",{\"1\":{\"321\":5,\"439\":1}}],[\"bgsave命令\",{\"1\":{\"321\":1}}],[\"brew\",{\"1\":{\"498\":1,\"634\":4}}],[\"break和continue关键字的用法\",{\"1\":{\"253\":1}}],[\"break\",{\"1\":{\"204\":2,\"434\":1,\"566\":3,\"570\":1}}],[\"bridge\",{\"1\":{\"486\":2}}],[\"broken\",{\"1\":{\"307\":1}}],[\"balance\",{\"1\":{\"737\":2}}],[\"bar\",{\"1\":{\"550\":1}}],[\"basis\",{\"1\":{\"765\":1}}],[\"bash\",{\"1\":{\"487\":2,\"520\":1,\"524\":2,\"634\":1}}],[\"basenames\",{\"1\":{\"690\":1}}],[\"basename是必须的\",{\"1\":{\"687\":1}}],[\"basename\",{\"1\":{\"687\":1}}],[\"baselocale\",{\"1\":{\"687\":2}}],[\"basepackage\",{\"1\":{\"650\":4}}],[\"base\",{\"1\":{\"366\":1,\"643\":5,\"665\":1,\"674\":1,\"687\":2,\"700\":1,\"737\":1}}],[\"back\",{\"1\":{\"483\":3}}],[\"backward\",{\"1\":{\"454\":1}}],[\"backup\",{\"1\":{\"321\":1}}],[\"baklog\",{\"1\":{\"302\":2,\"303\":2,\"304\":4}}],[\"baidu\",{\"1\":{\"173\":1,\"630\":1,\"631\":1,\"634\":1,\"639\":1,\"653\":1}}],[\"both\",{\"1\":{\"765\":1}}],[\"boyd\",{\"1\":{\"485\":2,\"538\":2}}],[\"book\",{\"1\":{\"737\":4}}],[\"bookdaoimpl\",{\"1\":{\"737\":1}}],[\"bookdao\",{\"1\":{\"737\":7,\"741\":3,\"742\":3,\"743\":3}}],[\"bookids\",{\"1\":{\"745\":5}}],[\"bookid\",{\"1\":{\"737\":12,\"741\":3,\"742\":3,\"743\":3,\"745\":2}}],[\"bookserviceimpl\",{\"1\":{\"737\":1}}],[\"bookservice\",{\"1\":{\"737\":5,\"745\":3}}],[\"bookcontroller\",{\"1\":{\"737\":1,\"738\":3,\"746\":4}}],[\"book`\",{\"1\":{\"737\":2}}],[\"bookmarks\",{\"1\":{\"449\":1}}],[\"bookmark\",{\"1\":{\"449\":1}}],[\"bootstrap\",{\"1\":{\"765\":1}}],[\"boot\",{\"0\":{\"362\":1},\"1\":{\"336\":1,\"362\":2,\"769\":1}}],[\"boot<\",{\"1\":{\"336\":1,\"362\":1}}],[\"boolean\",{\"1\":{\"290\":1,\"623\":6,\"626\":2,\"646\":1,\"647\":1,\"681\":1,\"682\":4,\"684\":1,\"705\":4,\"765\":1}}],[\"bool\",{\"1\":{\"38\":2}}],[\"body\",{\"1\":{\"293\":2,\"309\":1}}],[\"buybook\",{\"1\":{\"737\":4,\"738\":1,\"741\":1,\"742\":1,\"743\":1,\"745\":1,\"746\":1}}],[\"busy\",{\"1\":{\"539\":1,\"540\":1,\"541\":2}}],[\"but\",{\"1\":{\"434\":1,\"646\":1,\"752\":1,\"765\":1}}],[\"buf\",{\"1\":{\"427\":1,\"428\":5,\"464\":1}}],[\"bufferedreader\",{\"1\":{\"424\":2}}],[\"buffer中完成排序操作\",{\"1\":{\"211\":1}}],[\"buffer\",{\"0\":{\"63\":1,\"64\":1,\"65\":1,\"73\":1},\"1\":{\"64\":4,\"65\":1,\"75\":2,\"77\":1,\"213\":1,\"430\":1,\"621\":2}}],[\"buildconstraintviolationwithtemplate\",{\"1\":{\"684\":1}}],[\"builder\",{\"1\":{\"493\":1}}],[\"build\",{\"1\":{\"284\":1,\"285\":2,\"481\":1}}],[\"bv1rt4y1u7q5\",{\"1\":{\"653\":1}}],[\"bv1kr4y1b7qc\",{\"1\":{\"653\":1}}],[\"bv1kr4y1i7ru\",{\"1\":{\"173\":1}}],[\"bv1tp411v7v6\",{\"1\":{\"633\":1,\"639\":1}}],[\"bv1cr4y1671t\",{\"1\":{\"268\":1}}],[\"bit\",{\"1\":{\"467\":1}}],[\"bits\",{\"1\":{\"407\":1,\"428\":4,\"449\":4,\"458\":1,\"467\":1}}],[\"bits是long类型数组\",{\"1\":{\"407\":1}}],[\"bitop是⼀个复合操作\",{\"1\":{\"399\":1}}],[\"bitop\",{\"1\":{\"399\":1}}],[\"bitcount\",{\"1\":{\"399\":1}}],[\"bitmap不是⼀种数据类型\",{\"1\":{\"399\":1}}],[\"bitmap类型\",{\"0\":{\"399\":1}}],[\"bitmap\",{\"1\":{\"377\":1,\"397\":1}}],[\"bin\",{\"1\":{\"372\":1,\"476\":3,\"479\":1,\"487\":2,\"496\":2,\"520\":1,\"524\":2,\"634\":1}}],[\"bindexception\",{\"1\":{\"682\":6}}],[\"binder\",{\"1\":{\"681\":4}}],[\"bindingresult\",{\"1\":{\"681\":2}}],[\"bind\",{\"1\":{\"341\":1,\"371\":1}}],[\"binlog\",{\"1\":{\"142\":1}}],[\"bigint\",{\"1\":{\"246\":1}}],[\"bilibili\",{\"1\":{\"173\":1,\"268\":1,\"633\":1,\"639\":1,\"653\":2}}],[\"been\",{\"1\":{\"765\":1}}],[\"because\",{\"1\":{\"765\":1}}],[\"behavioral\",{\"1\":{\"765\":1}}],[\"behavior\",{\"1\":{\"623\":2}}],[\"behind\",{\"1\":{\"277\":1}}],[\"be\",{\"1\":{\"434\":2,\"449\":1,\"599\":1,\"621\":1,\"622\":1,\"623\":3,\"625\":1,\"626\":2,\"627\":1,\"687\":1,\"765\":13}}],[\"beandefinition\",{\"1\":{\"765\":1}}],[\"beandefinitions\",{\"1\":{\"727\":1}}],[\"beanname\",{\"1\":{\"764\":4}}],[\"beanpostprocessor\",{\"1\":{\"764\":1}}],[\"beanpropertyrowmapper<>\",{\"1\":{\"731\":2}}],[\"bean后置处理器不是单独针对某一个bean生效\",{\"1\":{\"764\":1}}],[\"bean的后置处理器要放入ioc容器才能生效\",{\"1\":{\"764\":1}}],[\"bean的后置处理器会在生命周期的初始化前后添加额外的操作\",{\"1\":{\"764\":1}}],[\"bean的后置处理器\",{\"1\":{\"764\":3}}],[\"bean的作用域\",{\"0\":{\"763\":1}}],[\"bean对象销毁\",{\"1\":{\"764\":1}}],[\"bean对象就绪可以使用\",{\"1\":{\"764\":1}}],[\"bean对象初始化\",{\"1\":{\"764\":1}}],[\"bean对象创建\",{\"1\":{\"764\":1}}],[\"bean对象的创建\",{\"1\":{\"694\":1}}],[\"bean生命周期\",{\"0\":{\"764\":1}}],[\"bean=\",{\"1\":{\"760\":9}}],[\"bean配置装载创建的核心实现\",{\"1\":{\"727\":1}}],[\"bean管理说的是\",{\"1\":{\"694\":1}}],[\"beanvalidation\",{\"1\":{\"683\":2}}],[\"bean>\",{\"1\":{\"651\":1,\"690\":1,\"718\":1,\"719\":1,\"730\":2,\"739\":1,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"762\":1,\"764\":1}}],[\"beanfactoryaware\",{\"1\":{\"765\":1}}],[\"beanfactory和bean的装配管理\",{\"1\":{\"727\":1}}],[\"beanfactory\",{\"1\":{\"650\":7,\"695\":2,\"727\":2,\"765\":6}}],[\"bean注解标识\",{\"1\":{\"650\":1}}],[\"bean注解\",{\"1\":{\"650\":1}}],[\"beansexception\",{\"1\":{\"764\":2}}],[\"beans>\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"762\":1}}],[\"beans的自动扫描功能\",{\"1\":{\"643\":1}}],[\"beans\",{\"1\":{\"642\":2,\"643\":4,\"646\":2,\"651\":6,\"665\":5,\"682\":2,\"690\":5,\"700\":5,\"702\":3,\"717\":1,\"718\":5,\"719\":1,\"723\":2,\"727\":2,\"730\":5,\"731\":2,\"738\":1,\"739\":4,\"746\":1,\"751\":1,\"752\":3,\"754\":3,\"755\":2,\"760\":4,\"761\":4,\"762\":4,\"765\":6}}],[\"bean\",{\"0\":{\"682\":1},\"1\":{\"336\":2,\"355\":1,\"641\":1,\"642\":1,\"643\":1,\"644\":6,\"646\":2,\"650\":6,\"651\":3,\"682\":1,\"683\":2,\"691\":1,\"693\":1,\"695\":2,\"700\":1,\"701\":1,\"702\":1,\"717\":2,\"718\":1,\"719\":3,\"723\":3,\"746\":4,\"751\":1,\"752\":7,\"754\":2,\"755\":3,\"758\":7,\"759\":2,\"760\":7,\"761\":1,\"762\":1,\"763\":3,\"764\":8,\"765\":13,\"766\":8}}],[\"ben\",{\"1\":{\"282\":1,\"283\":1}}],[\"begin\",{\"1\":{\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"242\":1,\"248\":1,\"253\":1,\"256\":1,\"258\":1}}],[\"before>\",{\"1\":{\"674\":1}}],[\"before注解标识\",{\"1\":{\"666\":1}}],[\"beforemethod\",{\"1\":{\"665\":1,\"668\":2,\"669\":1,\"674\":1}}],[\"beforesleep\",{\"1\":{\"464\":2}}],[\"beforeeach\",{\"1\":{\"353\":1}}],[\"before\",{\"1\":{\"157\":1,\"464\":1,\"665\":1,\"668\":2,\"669\":1,\"674\":1}}],[\"between\",{\"1\":{\"123\":1,\"189\":1}}],[\"bytype\",{\"1\":{\"766\":7}}],[\"bytype注入时\",{\"1\":{\"647\":1}}],[\"bytearrayresource\",{\"0\":{\"712\":1},\"1\":{\"706\":1}}],[\"bytes\",{\"1\":{\"444\":5,\"449\":2,\"634\":1}}],[\"byte\",{\"1\":{\"428\":1,\"562\":1,\"708\":2,\"709\":2}}],[\"byname\",{\"1\":{\"647\":1,\"766\":8}}],[\"by查询时是直接通过索引进行查询\",{\"1\":{\"211\":1}}],[\"by优化\",{\"0\":{\"210\":1,\"214\":1}}],[\"by\",{\"1\":{\"136\":2,\"168\":1,\"186\":2,\"187\":2,\"192\":1,\"193\":1,\"195\":2,\"197\":2,\"204\":2,\"212\":1,\"311\":1,\"313\":1,\"622\":1,\"623\":3,\"627\":2,\"741\":1,\"765\":7}}],[\"b+tree索引\",{\"1\":{\"125\":1,\"238\":1}}],[\"b+树支持范围匹配和排序操作\",{\"1\":{\"124\":1}}],[\"b+树具有更少的层级\",{\"1\":{\"124\":1}}],[\"b+树是b树的一个变种\",{\"1\":{\"121\":1}}],[\"b+树\",{\"0\":{\"121\":1},\"1\":{\"121\":1}}],[\"b\",{\"1\":{\"120\":1,\"549\":1,\"552\":1,\"553\":1,\"562\":2,\"587\":2,\"693\":4,\"708\":3,\"709\":3,\"745\":1,\"757\":3}}],[\"b树知识点\",{\"1\":{\"120\":1}}],[\"b树随着数据的插入或者删除会自动进行节点的裂变和合并\",{\"1\":{\"120\":1}}],[\"b树\",{\"0\":{\"120\":1},\"1\":{\"120\":2}}],[\"bdb等存储引擎中\",{\"1\":{\"144\":1}}],[\"bdb\",{\"1\":{\"111\":1}}],[\"b之间的交集部分\",{\"1\":{\"96\":1}}],[\"由功能完善的软件实现资源共享和信息传递的系统\",{\"1\":{\"780\":1}}],[\"由spring为我们提供\",{\"1\":{\"753\":1}}],[\"由并发事务所做的修改必须与任何其他并发事务所做的修改隔离\",{\"1\":{\"733\":1}}],[\"由append属性决定\",{\"1\":{\"700\":1}}],[\"由新颖的\",{\"1\":{\"677\":1}}],[\"由该部分的源码可以看出\",{\"1\":{\"622\":1}}],[\"由一系列特殊编码的连续内存块组成\",{\"1\":{\"442\":1}}],[\"由三部分组成\",{\"1\":{\"437\":1}}],[\"由redis自己维护\",{\"1\":{\"341\":1}}],[\"由操作系统决定何时将缓冲区内容写回磁盘\",{\"1\":{\"322\":1}}],[\"由\",{\"1\":{\"290\":1,\"321\":1,\"621\":1,\"725\":1}}],[\"由其他线程异步的将缓存数据持久化到数据库\",{\"1\":{\"277\":1}}],[\"由服务来维护一致性\",{\"1\":{\"277\":1}}],[\"由缓存的调用者\",{\"1\":{\"277\":1}}],[\"由于使用了spring的声明式事务\",{\"1\":{\"739\":1}}],[\"由于applicationcontext的实现类都实现了resourceloader接口\",{\"1\":{\"718\":1}}],[\"由于软件发行可能面向多个国家\",{\"1\":{\"686\":1}}],[\"由于person对象中的属性为空\",{\"1\":{\"681\":1}}],[\"由于是静态提前编译\",{\"1\":{\"677\":1}}],[\"由于是存储在内存汇总\",{\"1\":{\"282\":1}}],[\"由于无法对\",{\"1\":{\"619\":1}}],[\"由于涉及到应用的安装\",{\"1\":{\"498\":1}}],[\"由于\",{\"1\":{\"445\":1,\"619\":1}}],[\"由于redis的作者仅编写了linux环境下的版本\",{\"1\":{\"368\":1}}],[\"由于受到硬件问题\",{\"1\":{\"238\":1}}],[\"由于数据量的巨大\",{\"1\":{\"229\":1}}],[\"由于数据在页内存储会根据主键排序\",{\"1\":{\"207\":1}}],[\"由于要保证page之间有序\",{\"1\":{\"207\":1}}],[\"由于对表字段的修改\",{\"1\":{\"179\":1}}],[\"由于服务端的资源是在第二次握手时创建的\",{\"1\":{\"17\":1}}],[\"由多张相互连接的二维表组成的数据库\",{\"1\":{\"110\":1}}],[\"由瑞典mysql\",{\"1\":{\"106\":1}}],[\"由图可知\",{\"1\":{\"62\":1}}],[\"具有巨大的经济效益\",{\"1\":{\"793\":1}}],[\"具有独立功能的计算机系统\",{\"1\":{\"780\":1}}],[\"具有启动\",{\"1\":{\"695\":1}}],[\"具有以下特性\",{\"1\":{\"678\":1}}],[\"具有崩溃恢复特征\",{\"1\":{\"61\":1}}],[\"具备类型升级机制\",{\"1\":{\"435\":1}}],[\"具备一些特点\",{\"1\":{\"435\":1}}],[\"具体操作过程中\",{\"1\":{\"734\":1}}],[\"具体操作如下\",{\"1\":{\"24\":1,\"204\":1}}],[\"具体如下\",{\"1\":{\"623\":1}}],[\"具体方法\",{\"1\":{\"591\":1}}],[\"具体底层就是同一个镜像的不同引用而已\",{\"1\":{\"517\":1}}],[\"具体流程如下\",{\"1\":{\"407\":1}}],[\"具体语法如下\",{\"1\":{\"256\":1}}],[\"具体语法为\",{\"1\":{\"251\":1,\"252\":1,\"255\":1}}],[\"具体的生命周期过程\",{\"1\":{\"764\":1}}],[\"具体的资源访问由该接口的实现类完成\",{\"1\":{\"706\":1}}],[\"具体的实现底层对用户来说是透明的\",{\"1\":{\"466\":1}}],[\"具体的\",{\"1\":{\"461\":1}}],[\"具体的核心实现如下\",{\"1\":{\"428\":1}}],[\"具体的可以参考redis官方提供的文档\",{\"1\":{\"376\":1}}],[\"具体的流程如下\",{\"1\":{\"347\":1}}],[\"具体的放到下一个小节来说\",{\"1\":{\"275\":1}}],[\"具体的事务回滚\",{\"1\":{\"86\":1}}],[\"具体的删除\",{\"1\":{\"52\":1}}],[\"具体的步骤如下\",{\"1\":{\"17\":1,\"19\":1,\"434\":1,\"440\":1}}],[\"具体是怎么做的\",{\"1\":{\"31\":1}}],[\"它为边缘部分提供连通性和交换服务\",{\"1\":{\"786\":1}}],[\"它能够调用用户所需要的资源\",{\"1\":{\"783\":1}}],[\"它有多种解释\",{\"1\":{\"753\":1}}],[\"它有一个消息链表\",{\"1\":{\"387\":1}}],[\"它对数据库所做的更新就必须保存下来\",{\"1\":{\"733\":1}}],[\"它对数据库中数据的改变就是永久的\",{\"1\":{\"76\":1,\"259\":1}}],[\"它对于从任何给定的字节数组加载内容非常有用\",{\"1\":{\"712\":1}}],[\"它始终支持流\",{\"1\":{\"710\":1}}],[\"它解释相关web应用程序根目录中的相对路径\",{\"1\":{\"710\":1}}],[\"它支持url的绝对路径\",{\"1\":{\"707\":1}}],[\"它本身并不提供任何资源访问实现\",{\"1\":{\"706\":1}}],[\"它贯穿了\",{\"1\":{\"691\":1}}],[\"它与使用关键字\",{\"1\":{\"691\":1}}],[\"它不是一门技术\",{\"1\":{\"691\":1}}],[\"它允许通过编程的方式提供国际化信息\",{\"1\":{\"689\":1}}],[\"它实现了上面bean\",{\"1\":{\"682\":1}}],[\"它通过c语言实现了一个超微缩的运行时组件\",{\"1\":{\"679\":1}}],[\"它生成更快\",{\"1\":{\"678\":1}}],[\"它以通过预编译方式和运行期动态代理方式实现\",{\"1\":{\"660\":1}}],[\"它主要用于回收在try块里打开的物力资源\",{\"1\":{\"597\":1}}],[\"它使计算机网络中的资源互通有无\",{\"1\":{\"790\":1}}],[\"它使网络具有数据传输\",{\"1\":{\"787\":1}}],[\"它使用类和方法作为连接点的查询条件\",{\"1\":{\"661\":1}}],[\"它使用yaml格式来描述和配置您的应用服务\",{\"1\":{\"482\":1}}],[\"它使代码更具可重用性\",{\"1\":{\"585\":1}}],[\"它具有访问外部类成员的权限\",{\"1\":{\"580\":1}}],[\"它定义了对象的属性和方法\",{\"1\":{\"579\":1}}],[\"它依赖于已存在并运行的\",{\"1\":{\"499\":1}}],[\"它会逐行执行其中的指令\",{\"1\":{\"489\":1}}],[\"它被用在几乎所有的\",{\"1\":{\"430\":1}}],[\"它就是\",{\"1\":{\"387\":1}}],[\"它们不保证关系数据的acid特性\",{\"1\":{\"365\":1}}],[\"它的isopen\",{\"1\":{\"711\":1}}],[\"它的使用场景在没有特定的资源实现的时候使用\",{\"1\":{\"711\":1}}],[\"它的作用就是通过提供一个代理类\",{\"1\":{\"656\":1}}],[\"它的refcount属性被设置为1\",{\"1\":{\"472\":1}}],[\"它的性能瓶颈是网络延迟而不是执行速度\",{\"1\":{\"460\":1}}],[\"它的\",{\"1\":{\"357\":1}}],[\"它count\",{\"1\":{\"221\":1}}],[\"它可以做多个bitmaps的and\",{\"1\":{\"399\":1}}],[\"它可以更好地确定哪个索引更有效地用于查询\",{\"1\":{\"136\":1}}],[\"它可以减轻\",{\"1\":{\"75\":1}}],[\"它记录一条对应相反的update记录\",{\"1\":{\"78\":1}}],[\"它是计算机网络最基本和最重要的功能用来实现联网计算机之间各种信息的传输\",{\"1\":{\"789\":1}}],[\"它是面向对象编程的一种补充和完善\",{\"1\":{\"660\":1}}],[\"它是代码中的一种特殊标记\",{\"1\":{\"641\":1}}],[\"它是java运行时环境\",{\"1\":{\"612\":1}}],[\"它是一个泛化的概念\",{\"1\":{\"644\":1}}],[\"它是一个双端链表\",{\"1\":{\"446\":1}}],[\"它是一个不可分割的工作单位\",{\"1\":{\"76\":1}}],[\"它是\",{\"1\":{\"430\":1}}],[\"它是逻辑日志\",{\"1\":{\"78\":1}}],[\"它也可能包含表和索引数据\",{\"1\":{\"68\":1}}],[\"它擅长事务处理\",{\"1\":{\"61\":1}}],[\"它完成第四层传输层所指定的功能\",{\"1\":{\"16\":1}}],[\"架构模式\",{\"1\":{\"474\":1}}],[\"架构的软件\",{\"1\":{\"423\":1}}],[\"架构\",{\"0\":{\"61\":1},\"1\":{\"535\":1}}],[\"行末自动添加分号\",{\"1\":{\"553\":1}}],[\"行数据\",{\"1\":{\"207\":1}}],[\"行\",{\"1\":{\"206\":1}}],[\"行内数据字段分隔符号\",{\"1\":{\"204\":1}}],[\"行和列数据来自定义视图中使用的表\",{\"1\":{\"164\":1}}],[\"行级触发器\",{\"1\":{\"157\":1}}],[\"行级触发\",{\"1\":{\"155\":1}}],[\"行级锁\",{\"0\":{\"148\":1},\"1\":{\"148\":1,\"236\":1}}],[\"行锁和间隙锁组合\",{\"1\":{\"148\":1}}],[\"行锁\",{\"0\":{\"149\":1},\"1\":{\"148\":1,\"238\":1}}],[\"行锁是通过对索引上的索引项加锁来实现的\",{\"1\":{\"148\":1}}],[\"行子查询指的是子查询返回的结果是一行\",{\"1\":{\"103\":1}}],[\"行子查询\",{\"0\":{\"103\":1},\"1\":{\"100\":1}}],[\"行row\",{\"1\":{\"60\":1}}],[\"行为就像required一样\",{\"1\":{\"745\":1}}],[\"行为\",{\"1\":{\"52\":1}}],[\"5level\",{\"1\":{\"700\":2}}],[\"51520179\",{\"1\":{\"607\":1}}],[\"512\",{\"1\":{\"417\":1,\"423\":1}}],[\"55001\",{\"1\":{\"537\":2}}],[\"55000\",{\"1\":{\"536\":3}}],[\"5种io模型\",{\"1\":{\"403\":1}}],[\"5种基本数据类型\",{\"0\":{\"377\":1},\"1\":{\"264\":1}}],[\"5以后\",{\"1\":{\"236\":1}}],[\"5中引入了mdl\",{\"1\":{\"146\":1}}],[\"5\",{\"0\":{\"300\":1,\"777\":1,\"793\":1},\"1\":{\"125\":1,\"131\":3,\"134\":1,\"195\":1,\"203\":2,\"293\":1,\"295\":2,\"299\":1,\"343\":1,\"347\":1,\"355\":1,\"375\":2,\"387\":1,\"407\":2,\"424\":1,\"428\":7,\"439\":1,\"445\":1,\"450\":1,\"468\":1,\"469\":1,\"585\":3,\"587\":1,\"627\":2,\"641\":2,\"681\":1,\"727\":1,\"742\":1,\"764\":1,\"765\":1}}],[\"5版本开始\",{\"1\":{\"61\":1}}],[\"5个区\",{\"1\":{\"60\":1}}],[\"50mb\",{\"1\":{\"700\":1}}],[\"50x\",{\"1\":{\"308\":2,\"634\":3}}],[\"504\",{\"1\":{\"308\":1,\"634\":1}}],[\"503\",{\"1\":{\"308\":1,\"634\":1}}],[\"502\",{\"1\":{\"308\":1,\"634\":1}}],[\"5001\",{\"1\":{\"535\":2,\"537\":2}}],[\"5000\",{\"1\":{\"333\":1,\"341\":1,\"490\":1,\"535\":2,\"536\":1,\"537\":3,\"538\":2}}],[\"500\",{\"1\":{\"308\":1,\"634\":1}}],[\"50\",{\"1\":{\"38\":1,\"737\":2}}],[\"页合并\",{\"0\":{\"208\":1}}],[\"页内剩余空间不足时\",{\"1\":{\"207\":1}}],[\"页可以为空\",{\"1\":{\"207\":1}}],[\"页分裂\",{\"0\":{\"207\":1}}],[\"页\",{\"1\":{\"206\":1}}],[\"页中数据与磁盘中数据产生了不一致\",{\"1\":{\"63\":1}}],[\"页是innodb存储引擎磁盘管理的最小单元\",{\"1\":{\"60\":1}}],[\"页page\",{\"1\":{\"60\":1}}],[\"区\",{\"1\":{\"206\":1}}],[\"区分度越高\",{\"1\":{\"136\":1}}],[\"区别在于前者实现的是编译时的多态性\",{\"1\":{\"586\":1}}],[\"区别于关系数据库\",{\"1\":{\"365\":1}}],[\"区别\",{\"1\":{\"106\":1,\"192\":1}}],[\"区是表空间中的单元结构\",{\"1\":{\"60\":1}}],[\"区extent\",{\"1\":{\"60\":1}}],[\"段\",{\"1\":{\"206\":1}}],[\"段用来管理多个extent区\",{\"1\":{\"60\":1}}],[\"段分为数据段\",{\"1\":{\"60\":1}}],[\"段segment\",{\"1\":{\"60\":1}}],[\"逻辑运算符\",{\"1\":{\"563\":1}}],[\"逻辑过期\",{\"1\":{\"274\":2}}],[\"逻辑存储结构\",{\"0\":{\"60\":1},\"1\":{\"206\":1}}],[\"逻辑结构\",{\"1\":{\"35\":2}}],[\"获取ioc容器\",{\"1\":{\"765\":1}}],[\"获取的\",{\"1\":{\"752\":3}}],[\"获取的资源\",{\"1\":{\"704\":1}}],[\"获取对象\",{\"1\":{\"752\":1}}],[\"获取bean时\",{\"1\":{\"763\":1}}],[\"获取bean\",{\"0\":{\"752\":1}}],[\"获取bitmaps中某个偏移量的值\",{\"1\":{\"399\":1}}],[\"获取resourceloader对象\",{\"1\":{\"718\":1}}],[\"获取文件内容\",{\"1\":{\"708\":1,\"709\":1}}],[\"获取文件描述\",{\"1\":{\"708\":1,\"709\":1}}],[\"获取文件名\",{\"1\":{\"708\":1,\"709\":1}}],[\"获取资源内容\",{\"1\":{\"707\":1}}],[\"获取资源描述\",{\"1\":{\"707\":1}}],[\"获取资源名\",{\"1\":{\"707\":1}}],[\"获取默认提示信息\",{\"1\":{\"684\":1}}],[\"获取目标方法到的实参信息\",{\"1\":{\"669\":1}}],[\"获取通知的相关信息\",{\"0\":{\"669\":1}}],[\"获取c\",{\"1\":{\"464\":1}}],[\"获取当前客户端\",{\"1\":{\"464\":1}}],[\"获取当前值编码\",{\"1\":{\"434\":1}}],[\"获取字符串长度的时间复杂度为\",{\"1\":{\"429\":1}}],[\"获取字符串长度需要进行运算\",{\"1\":{\"427\":1}}],[\"获取数组大小\",{\"1\":{\"424\":1}}],[\"获取授权\",{\"1\":{\"424\":1}}],[\"获取输出流\",{\"1\":{\"424\":1}}],[\"获取地理位置的坐标\",{\"1\":{\"398\":1}}],[\"获取消息列表\",{\"1\":{\"387\":1,\"392\":1,\"393\":1}}],[\"获取流包含的元素数量\",{\"1\":{\"387\":1,\"391\":1}}],[\"获取指定下标的元素\",{\"1\":{\"624\":1}}],[\"获取指定位置的元素\",{\"1\":{\"619\":1}}],[\"获取指定score范围内的元素\",{\"1\":{\"382\":1}}],[\"获取指定排名范围内的元素\",{\"1\":{\"382\":1}}],[\"获取指定日期date的天数\",{\"1\":{\"57\":1}}],[\"获取指定日期date的月份\",{\"1\":{\"57\":1}}],[\"获取指定日期date的年份\",{\"1\":{\"57\":1}}],[\"获取sorted\",{\"1\":{\"382\":3}}],[\"获取set中的所有元素\",{\"1\":{\"381\":1}}],[\"获取一个转换数组\",{\"1\":{\"619\":1}}],[\"获取一个hash类型的key中的所有的value\",{\"1\":{\"379\":1}}],[\"获取一个hash类型的key中的所有的field\",{\"1\":{\"379\":1}}],[\"获取一个hash类型的key中的所有的field和value\",{\"1\":{\"379\":1}}],[\"获取一个hash类型key的field的值\",{\"1\":{\"379\":1}}],[\"获取一个\",{\"1\":{\"361\":1}}],[\"获取一个连接\",{\"1\":{\"309\":1}}],[\"获取一条\",{\"1\":{\"356\":1,\"362\":1}}],[\"获取连接点的签名信息\",{\"1\":{\"669\":1}}],[\"获取连接点信息可以在通知方法的参数位置设置joinpoint类型的形参\",{\"1\":{\"669\":1}}],[\"获取连接\",{\"1\":{\"353\":1}}],[\"获取jedis对象\",{\"1\":{\"349\":1}}],[\"获取\",{\"1\":{\"304\":1,\"362\":1,\"464\":1,\"752\":3}}],[\"获取锁\",{\"1\":{\"274\":1}}],[\"获取游标记录\",{\"1\":{\"254\":1}}],[\"获取表l中第i个位置的数据元素的值\",{\"1\":{\"37\":1}}],[\"向网络用户提供共享其他计算机上的硬件资源\",{\"1\":{\"787\":1}}],[\"向环境索取资源变成环境将资源准备好\",{\"1\":{\"726\":1}}],[\"向\",{\"1\":{\"678\":1}}],[\"向目标对象应用通知之后创建的代理对象\",{\"1\":{\"661\":1}}],[\"向下转型\",{\"1\":{\"577\":2}}],[\"向下取整\",{\"1\":{\"56\":1}}],[\"向上转型\",{\"1\":{\"577\":2}}],[\"向上取整\",{\"1\":{\"56\":1}}],[\"向服务端\",{\"1\":{\"423\":1}}],[\"向其中添加关注的fd\",{\"1\":{\"408\":1}}],[\"向队列添加消息\",{\"1\":{\"388\":1}}],[\"向set中添加一个或多个元素\",{\"1\":{\"381\":1}}],[\"向列表右侧插入一个或多个元素\",{\"1\":{\"380\":1}}],[\"向列表左侧插入一个或多个元素\",{\"1\":{\"380\":1}}],[\"向集群中添加一个新\",{\"1\":{\"346\":1}}],[\"向tomcat发送http请求\",{\"0\":{\"315\":1}}],[\"向客户端发送连接释放报文段\",{\"1\":{\"19\":1}}],[\"向客户端发送确认报文段并且将syn同步位和ack都置为1\",{\"1\":{\"17\":1}}],[\"数字\",{\"1\":{\"424\":1}}],[\"数值\",{\"1\":{\"423\":1}}],[\"数值函数\",{\"0\":{\"56\":1}}],[\"数\",{\"1\":{\"400\":1}}],[\"数量增多而产生显著的下降\",{\"1\":{\"412\":1}}],[\"数量\",{\"1\":{\"389\":1,\"392\":1,\"393\":1,\"394\":1,\"408\":1}}],[\"数组类型属性赋值\",{\"0\":{\"759\":1}}],[\"数组则会进行扩容\",{\"1\":{\"627\":1}}],[\"数组查询\",{\"1\":{\"434\":1}}],[\"数组扩容\",{\"0\":{\"434\":1},\"1\":{\"434\":2}}],[\"数组的最大长度\",{\"1\":{\"409\":1}}],[\"数组的索引可以是数字\",{\"1\":{\"290\":1}}],[\"数组到用户空间\",{\"1\":{\"408\":1}}],[\"数组拷贝到内核空间\",{\"1\":{\"408\":1}}],[\"数组拷贝到内核空间中\",{\"1\":{\"407\":1}}],[\"数组大小自定义\",{\"1\":{\"408\":1}}],[\"数组元素个数\",{\"1\":{\"408\":1}}],[\"数组\",{\"1\":{\"407\":1,\"408\":2,\"409\":1,\"423\":1,\"438\":1,\"464\":1}}],[\"数组中保存的是指向\",{\"1\":{\"438\":1}}],[\"数组中\",{\"1\":{\"313\":1,\"432\":1}}],[\"数据链路层\",{\"0\":{\"794\":1}}],[\"数据资源的利用率\",{\"1\":{\"790\":1}}],[\"数据共享\",{\"1\":{\"790\":1}}],[\"数据通信\",{\"0\":{\"789\":1}}],[\"数据赋值\",{\"0\":{\"756\":1}}],[\"数据一致性就越好\",{\"1\":{\"744\":1}}],[\"数据一致性成本\",{\"1\":{\"271\":1}}],[\"数据所处的状态要么是另一事务修改它之前的状态\",{\"1\":{\"733\":1}}],[\"数据源\",{\"1\":{\"730\":1,\"762\":1}}],[\"数据校验\",{\"0\":{\"680\":1}}],[\"数据校验等操作\",{\"1\":{\"155\":1}}],[\"数据缓存都属于横切关注点\",{\"1\":{\"661\":1}}],[\"数据注入\",{\"0\":{\"645\":1}}],[\"数据指针\",{\"1\":{\"458\":1}}],[\"数据拆分存储以后比较分散\",{\"1\":{\"446\":1}}],[\"数据读写的io操作\",{\"1\":{\"415\":1}}],[\"数据就绪或超时后\",{\"1\":{\"408\":1}}],[\"数据就绪以后\",{\"1\":{\"405\":1}}],[\"数据不可读或者不可写\",{\"1\":{\"406\":1}}],[\"数据关联\",{\"1\":{\"366\":1}}],[\"数据时\",{\"1\":{\"361\":1}}],[\"数据迁移\",{\"1\":{\"347\":1}}],[\"数据恢复优先级\",{\"1\":{\"323\":1}}],[\"数据完整性\",{\"1\":{\"323\":1}}],[\"数据快照\",{\"1\":{\"321\":1}}],[\"数据备份文件\",{\"1\":{\"321\":1}}],[\"数据持久化解决\",{\"1\":{\"320\":1}}],[\"数据丢失问题\",{\"1\":{\"320\":1}}],[\"数据落后于\",{\"1\":{\"302\":1}}],[\"数据同步原理\",{\"0\":{\"301\":1}}],[\"数据经常发生改变\",{\"1\":{\"276\":1}}],[\"数据和索引\",{\"1\":{\"236\":1}}],[\"数据按主键排序\",{\"1\":{\"207\":1}}],[\"数据控制语言\",{\"1\":{\"176\":1,\"196\":1}}],[\"数据查询语言\",{\"1\":{\"176\":1}}],[\"数据操作除了插入和查询之外\",{\"1\":{\"239\":1}}],[\"数据操作语言\",{\"1\":{\"176\":1}}],[\"数据操作流程\",{\"1\":{\"77\":1}}],[\"数据表权限\",{\"1\":{\"198\":2}}],[\"数据表操作\",{\"0\":{\"179\":1}}],[\"数据表\",{\"1\":{\"176\":1}}],[\"数据定义语言\",{\"1\":{\"176\":1}}],[\"数据也是一种供许多用户共享的资源\",{\"1\":{\"138\":1}}],[\"数据分布影响\",{\"1\":{\"131\":1}}],[\"数据是有组织的进行存储\",{\"1\":{\"106\":1}}],[\"数据是信息的载体\",{\"1\":{\"34\":1}}],[\"数据被修改过\",{\"1\":{\"63\":1}}],[\"数据段就是b+树的叶子结点\",{\"1\":{\"60\":1}}],[\"数据域\",{\"1\":{\"39\":1}}],[\"数据的读取速度是非常快的\",{\"1\":{\"282\":1}}],[\"数据的变化频率低\",{\"1\":{\"276\":1}}],[\"数据的安全性也越高\",{\"1\":{\"261\":1}}],[\"数据的组织方式\",{\"0\":{\"206\":1}}],[\"数据的查询\",{\"1\":{\"66\":1}}],[\"数据的逻辑结构和存储结构是密不可分的两个方面\",{\"1\":{\"35\":1}}],[\"数据的运算\",{\"1\":{\"35\":2}}],[\"数据都不是独立存在的\",{\"1\":{\"34\":1}}],[\"数据结构不固定\",{\"1\":{\"366\":1}}],[\"数据结构固定2\",{\"1\":{\"366\":1}}],[\"数据结构的底层实现\",{\"0\":{\"425\":1},\"1\":{\"267\":1}}],[\"数据结构的基本概念\",{\"0\":{\"33\":1}}],[\"数据结构包含三个要素\",{\"1\":{\"35\":1}}],[\"数据结构三要素\",{\"0\":{\"35\":1}}],[\"数据结构\",{\"0\":{\"44\":1},\"1\":{\"34\":1,\"366\":1}}],[\"数据类型中\",{\"1\":{\"448\":1}}],[\"数据类型是一个值的集合和定义在此集合上的一组操作的总称\",{\"1\":{\"34\":1}}],[\"数据类型\",{\"0\":{\"469\":1,\"562\":1},\"1\":{\"34\":1,\"51\":1,\"180\":1,\"290\":1,\"469\":1}}],[\"数据对象是具有相同性质的数据元素的集合\",{\"1\":{\"34\":1}}],[\"数据对象\",{\"1\":{\"34\":1}}],[\"数据项是构成数据元素的不可分割的最小单位\",{\"1\":{\"34\":1}}],[\"数据元素\",{\"1\":{\"34\":1}}],[\"数据\",{\"1\":{\"34\":1,\"115\":1,\"321\":1,\"345\":1,\"410\":1}}],[\"数据库还能恢复到事务成功结束时的状态\",{\"1\":{\"733\":1}}],[\"数据库事务\",{\"1\":{\"733\":1}}],[\"数据库密码\",{\"1\":{\"631\":1}}],[\"数据库账号\",{\"1\":{\"631\":1}}],[\"数据库环境搭建\",{\"0\":{\"631\":1}}],[\"数据库连接代码时\",{\"1\":{\"600\":1}}],[\"数据库数量\",{\"1\":{\"341\":1}}],[\"数据库发生修改则直接删除对应的缓存\",{\"1\":{\"277\":1}}],[\"数据库中余额字段设置了无符号\",{\"1\":{\"738\":1}}],[\"数据库中也不存在\",{\"1\":{\"272\":1}}],[\"数据库中加全局锁\",{\"1\":{\"142\":1}}],[\"数据库提供的隔离机制\",{\"1\":{\"259\":1}}],[\"数据库名称\",{\"1\":{\"631\":1}}],[\"数据库名和表名可以使用\",{\"1\":{\"198\":1}}],[\"数据库名\",{\"1\":{\"178\":3,\"198\":2}}],[\"数据库操作\",{\"0\":{\"178\":1}}],[\"数据库可以授权\",{\"1\":{\"169\":1}}],[\"数据库系统必须具有隔离并发运行各个事务的能力\",{\"1\":{\"744\":1}}],[\"数据库系统还维护着满足特定查找算法的数据结构\",{\"1\":{\"115\":1}}],[\"数据库系统提供的隔离机制\",{\"1\":{\"76\":1}}],[\"数据库类型\",{\"0\":{\"109\":1}}],[\"数据库管理系统\",{\"1\":{\"106\":1}}],[\"数据库是存储数据的仓库\",{\"1\":{\"106\":1}}],[\"数据库\",{\"0\":{\"6\":1,\"171\":1,\"262\":1},\"1\":{\"106\":1,\"111\":1,\"176\":1}}],[\"达到n个字符串长度\",{\"1\":{\"55\":2}}],[\"功能丰富\",{\"1\":{\"367\":1}}],[\"功能\",{\"1\":{\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"189\":1,\"191\":1,\"229\":1,\"322\":1,\"549\":1,\"623\":1}}],[\"函数可以接受可变数目的参数\",{\"1\":{\"293\":1}}],[\"函数返回值\",{\"1\":{\"293\":1}}],[\"函数中需要执行的代码语句块\",{\"1\":{\"293\":1}}],[\"函数体\",{\"1\":{\"293\":1}}],[\"函数也可以不带参数\",{\"1\":{\"293\":1}}],[\"函数参数\",{\"1\":{\"293\":1}}],[\"函数等\",{\"1\":{\"233\":1}}],[\"函数是一段可以直接被另一段程序调用的程序或者代码\",{\"1\":{\"54\":1}}],[\"函数\",{\"0\":{\"54\":1,\"293\":1},\"1\":{\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"172\":1,\"191\":1,\"312\":1,\"408\":1,\"438\":1,\"457\":1}}],[\"默认情况\",{\"1\":{\"745\":1}}],[\"默认情况下会在当前目录生成一个\",{\"1\":{\"321\":1}}],[\"默认情况下profile是关闭的\",{\"1\":{\"230\":1}}],[\"默认情况下\",{\"1\":{\"60\":1,\"307\":1}}],[\"默认采用与applicationcontext相同的资源访问策略\",{\"1\":{\"716\":1}}],[\"默认错误消息\",{\"1\":{\"684\":1}}],[\"默认byname注入\",{\"1\":{\"647\":1}}],[\"默认根据类型装配\",{\"1\":{\"646\":1}}],[\"默认不使用注解装配\",{\"1\":{\"643\":1}}],[\"默认容量\",{\"1\":{\"622\":1}}],[\"默认方法\",{\"1\":{\"590\":1}}],[\"默认方法和静态方法\",{\"1\":{\"590\":1}}],[\"默认构造方法\",{\"1\":{\"588\":1}}],[\"默认在\",{\"1\":{\"549\":1}}],[\"默认使用的仓库为\",{\"1\":{\"530\":1}}],[\"默认使用的还是\",{\"1\":{\"423\":1}}],[\"默认使用innodb存储引擎\",{\"1\":{\"61\":1}}],[\"默认64字节\",{\"1\":{\"419\":1}}],[\"默认512\",{\"1\":{\"419\":1}}],[\"默认提供了一个\",{\"1\":{\"357\":1}}],[\"默认的流程\",{\"1\":{\"347\":1}}],[\"默认的聚集索引就是主键索引\",{\"1\":{\"206\":1}}],[\"默认会加载这个文件\",{\"1\":{\"321\":1}}],[\"默认是bytype\",{\"1\":{\"646\":1}}],[\"默认是latest\",{\"1\":{\"476\":1}}],[\"默认是6379\",{\"1\":{\"374\":1}}],[\"默认是127\",{\"1\":{\"371\":1,\"374\":1}}],[\"默认是采用\",{\"1\":{\"354\":1}}],[\"默认是下标为0的库\",{\"1\":{\"353\":1}}],[\"默认是关闭的\",{\"1\":{\"322\":2}}],[\"默认是在\",{\"1\":{\"321\":1}}],[\"默认是保存在当前运行目录\",{\"1\":{\"321\":1}}],[\"默认是session\",{\"1\":{\"244\":1}}],[\"默认\",{\"1\":{\"248\":1,\"458\":1,\"744\":2,\"745\":1,\"763\":1}}],[\"默认10秒\",{\"1\":{\"229\":1}}],[\"默认值是true\",{\"1\":{\"646\":1}}],[\"默认值为0\",{\"1\":{\"450\":1}}],[\"默认值为\",{\"1\":{\"450\":1}}],[\"默认值为cascaded\",{\"1\":{\"166\":1}}],[\"默认值\",{\"1\":{\"193\":1,\"421\":2}}],[\"默认自动创建\",{\"1\":{\"126\":1}}],[\"默认个数\",{\"1\":{\"75\":1}}],[\"默认打开\",{\"1\":{\"69\":1}}],[\"默认为public\",{\"1\":{\"591\":1}}],[\"默认为10\",{\"1\":{\"457\":1}}],[\"默认为256k\",{\"1\":{\"213\":1}}],[\"默认为asc\",{\"1\":{\"212\":1}}],[\"默认为页的50\",{\"1\":{\"208\":1}}],[\"默认为当前数据库\",{\"1\":{\"157\":1}}],[\"默认为\",{\"1\":{\"65\":1,\"457\":1,\"458\":1,\"634\":1}}],[\"默认大小为16mb\",{\"1\":{\"65\":1}}],[\"默认行为\",{\"1\":{\"52\":2}}],[\"默认约束\",{\"1\":{\"49\":1}}],[\"添加如下配置\",{\"1\":{\"754\":1}}],[\"添加注解\",{\"1\":{\"739\":1}}],[\"添加功能\",{\"1\":{\"731\":1}}],[\"添加java类\",{\"0\":{\"701\":1}}],[\"添加配置文件\",{\"0\":{\"700\":1}}],[\"添加依赖\",{\"1\":{\"642\":1,\"664\":1}}],[\"添加元素\",{\"1\":{\"623\":2}}],[\"添加元数据\",{\"1\":{\"493\":1}}],[\"添加并判断是否添加成功\",{\"1\":{\"623\":1}}],[\"添加书签\",{\"1\":{\"556\":1}}],[\"添加键值对时\",{\"1\":{\"438\":1}}],[\"添加到收藏夹\",{\"1\":{\"554\":1}}],[\"添加到红黑树\",{\"1\":{\"412\":1}}],[\"添加到指定的key中\",{\"1\":{\"398\":1}}],[\"添加地理位置的坐标\",{\"1\":{\"398\":1}}],[\"添加消息到末尾\",{\"1\":{\"387\":1}}],[\"添加一个或多个元素到sorted\",{\"1\":{\"382\":1}}],[\"添加一个hash类型的key的field值\",{\"1\":{\"379\":1}}],[\"添加一个string类型的键值对\",{\"1\":{\"378\":2}}],[\"添加或者修改hash类型key的field的值\",{\"1\":{\"379\":1}}],[\"添加或者修改已经存在的一个string类型的键值对\",{\"1\":{\"378\":1}}],[\"添加\",{\"1\":{\"330\":1,\"336\":1,\"346\":1,\"554\":1,\"646\":1}}],[\"添加对\",{\"1\":{\"311\":2}}],[\"添加下面的内容\",{\"1\":{\"289\":1,\"333\":1}}],[\"添加数据\",{\"0\":{\"182\":1}}],[\"添加字段\",{\"1\":{\"180\":1}}],[\"添加了外键之后\",{\"1\":{\"52\":1}}],[\"添加外键\",{\"1\":{\"51\":1}}],[\"更不用说帮我们创建\",{\"1\":{\"696\":1}}],[\"更不会去调试\",{\"1\":{\"614\":1}}],[\"更优良的程序\",{\"1\":{\"691\":1}}],[\"更精简的代码\",{\"1\":{\"678\":1}}],[\"更加具有通用性\",{\"1\":{\"647\":1}}],[\"更改\",{\"1\":{\"634\":1}}],[\"更改缓冲区\",{\"0\":{\"64\":1},\"1\":{\"64\":1}}],[\"更重要的是容器性能开销极低\",{\"1\":{\"503\":1}}],[\"更重要的是还免\",{\"1\":{\"375\":1}}],[\"更新库存和更新余额都没有执行\",{\"1\":{\"739\":1}}],[\"更新库存和更新余额要么都成功要么都失败\",{\"1\":{\"738\":1}}],[\"更新用户的余额\",{\"1\":{\"737\":1,\"741\":1,\"742\":1,\"743\":1}}],[\"更新图书的库存\",{\"1\":{\"737\":1,\"741\":1,\"742\":1,\"743\":1}}],[\"更新资源的信息\",{\"1\":{\"689\":1}}],[\"更新语句\",{\"1\":{\"568\":1}}],[\"更新后\",{\"1\":{\"515\":1}}],[\"更新镜像\",{\"0\":{\"515\":1}}],[\"更新系统等\",{\"1\":{\"493\":1}}],[\"更新缓存\",{\"1\":{\"276\":1}}],[\"更新完以后\",{\"1\":{\"274\":1}}],[\"更新数据权限\",{\"1\":{\"198\":1}}],[\"更新及作用\",{\"0\":{\"167\":1}}],[\"更新触发器\",{\"0\":{\"160\":1}}],[\"更新外键在子表中的记录\",{\"1\":{\"52\":1}}],[\"更新\",{\"1\":{\"52\":2,\"166\":1,\"228\":1,\"234\":1,\"515\":1,\"744\":1}}],[\"更新对应记录时\",{\"1\":{\"52\":3}}],[\"更新行\",{\"1\":{\"52\":1}}],[\"更新行为\",{\"0\":{\"52\":1},\"1\":{\"52\":1}}],[\"更好的记忆与吸收知识\",{\"1\":{\"2\":1}}],[\"字面量就是数据本身所代表的值\",{\"1\":{\"757\":1}}],[\"字面量值\",{\"1\":{\"757\":1}}],[\"字典内输出的内容都是相同的\",{\"1\":{\"613\":1}}],[\"字典dict\",{\"1\":{\"468\":1}}],[\"字典排序\",{\"1\":{\"455\":1}}],[\"字典的删除查找更新等操作可能会在两个哈希表上进行\",{\"1\":{\"440\":1}}],[\"字典\",{\"0\":{\"436\":1},\"1\":{\"437\":1,\"438\":1}}],[\"字节数组的resource实现类\",{\"1\":{\"712\":1}}],[\"字节码包括所有应用程序类\",{\"1\":{\"679\":1}}],[\"字节以上\",{\"1\":{\"445\":1}}],[\"字节以下变到\",{\"1\":{\"445\":1}}],[\"字节时\",{\"1\":{\"418\":1}}],[\"字节\",{\"1\":{\"417\":2,\"432\":5}}],[\"字段和构造方法\",{\"1\":{\"591\":1}}],[\"字段的描述信息\",{\"1\":{\"560\":1}}],[\"字段的长度较长\",{\"1\":{\"136\":1}}],[\"字段注释\",{\"1\":{\"180\":2}}],[\"字段数据类型\",{\"1\":{\"180\":1}}],[\"字段操作\",{\"0\":{\"180\":1}}],[\"字段n注释\",{\"1\":{\"179\":1}}],[\"字段n类型\",{\"1\":{\"179\":1}}],[\"字段n\",{\"1\":{\"179\":1,\"182\":2}}],[\"字段3注释\",{\"1\":{\"179\":1}}],[\"字段3类型\",{\"1\":{\"179\":1}}],[\"字段3\",{\"1\":{\"179\":1,\"188\":1}}],[\"字段2注释\",{\"1\":{\"179\":1}}],[\"字段2类型\",{\"1\":{\"179\":1}}],[\"字段2\",{\"1\":{\"179\":1,\"182\":2,\"188\":2,\"193\":1}}],[\"字段1注释\",{\"1\":{\"179\":1}}],[\"字段1类型\",{\"1\":{\"179\":1}}],[\"字段1\",{\"1\":{\"179\":1,\"182\":2,\"188\":2,\"193\":1}}],[\"字段类型也需要保持一致\",{\"1\":{\"99\":1}}],[\"字段列表\",{\"1\":{\"96\":2,\"97\":2,\"98\":1,\"99\":2,\"186\":1,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"231\":1}}],[\"字段\",{\"1\":{\"87\":1,\"176\":1,\"223\":2,\"443\":2}}],[\"字段解释\",{\"1\":{\"60\":1}}],[\"字段名2\",{\"1\":{\"183\":1}}],[\"字段名1\",{\"1\":{\"183\":1}}],[\"字段名\",{\"1\":{\"51\":1,\"180\":3,\"245\":1,\"246\":1}}],[\"字符的含义\",{\"1\":{\"757\":1}}],[\"字符集名\",{\"1\":{\"179\":1}}],[\"字符集\",{\"1\":{\"178\":1}}],[\"字符串不为空\",{\"1\":{\"682\":2}}],[\"字符串可存储特殊字符\",{\"1\":{\"429\":1}}],[\"字符串对象string\",{\"0\":{\"417\":1}}],[\"字符串类型和数组类型\",{\"1\":{\"562\":1}}],[\"字符串类型的最大空间不能超过512m\",{\"1\":{\"378\":1}}],[\"字符串类型不加引号\",{\"1\":{\"131\":1}}],[\"字符串或表类型\",{\"1\":{\"290\":1}}],[\"字符串由一对双引号或者单引号来表示\",{\"1\":{\"290\":1}}],[\"字符串和日期型数据应该包含在引号之中\",{\"1\":{\"182\":1}}],[\"字符串\",{\"0\":{\"378\":1},\"1\":{\"101\":1,\"360\":1,\"430\":1,\"444\":1,\"464\":1,\"469\":1}}],[\"字符串拼接\",{\"1\":{\"55\":1}}],[\"字符串函数\",{\"0\":{\"55\":1}}],[\"字符及所能输入到计算机中并能被计算机程序识别和处理的符号的集合\",{\"1\":{\"34\":1}}],[\"表明这个资源是否代表了一个文件系统的文件\",{\"1\":{\"705\":1}}],[\"表明资源的目录读取是否通过getinputstream\",{\"1\":{\"705\":1}}],[\"表明某个资源是否以物理形式存在\",{\"1\":{\"705\":1}}],[\"表达式的值\",{\"1\":{\"566\":2}}],[\"表达式\",{\"1\":{\"566\":1}}],[\"表现出来的效果跟\",{\"1\":{\"551\":1}}],[\"表数据都是根据主键顺序组织存放的\",{\"1\":{\"206\":1}}],[\"表内字段修改\",{\"1\":{\"179\":1}}],[\"表注释\",{\"1\":{\"179\":1}}],[\"表独占写锁\",{\"1\":{\"145\":1}}],[\"表共享读锁\",{\"1\":{\"145\":1}}],[\"表锁\",{\"0\":{\"145\":1},\"1\":{\"144\":1,\"238\":2}}],[\"表级锁\",{\"0\":{\"143\":1},\"1\":{\"144\":1}}],[\"表子查询指的是子查询返回的结果是多行多列的数据集\",{\"1\":{\"104\":1}}],[\"表子查询\",{\"0\":{\"104\":1},\"1\":{\"100\":1}}],[\"表b\",{\"1\":{\"99\":1}}],[\"表b的行数\",{\"1\":{\"95\":1}}],[\"表a\",{\"1\":{\"98\":2,\"99\":1}}],[\"表a的行数\",{\"1\":{\"95\":1}}],[\"表2\",{\"1\":{\"96\":2,\"97\":2,\"99\":1}}],[\"表1\",{\"1\":{\"96\":2,\"97\":2,\"99\":1}}],[\"表空间\",{\"1\":{\"206\":1}}],[\"表空间用来管理多个segment段\",{\"1\":{\"60\":1}}],[\"表空间tablespace\",{\"1\":{\"60\":1}}],[\"表名语句能够将所有的数据清空\",{\"1\":{\"179\":1}}],[\"表名\",{\"1\":{\"51\":3,\"52\":1,\"145\":1,\"179\":6,\"180\":4,\"182\":4,\"183\":1,\"184\":1,\"186\":1,\"188\":4,\"189\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"198\":2,\"231\":1,\"245\":1,\"246\":1}}],[\"表示不管当前线程上是否有已经开启的事务\",{\"1\":{\"745\":1}}],[\"表示如果当前线程上有已经开启的事务可用\",{\"1\":{\"745\":1}}],[\"表示参数列表以一个int类型的参数开头\",{\"1\":{\"667\":1}}],[\"表示参数列表任意\",{\"1\":{\"667\":1}}],[\"表示类名任意\",{\"1\":{\"667\":1}}],[\"表示包名任意\",{\"1\":{\"667\":1}}],[\"表示这一层是任意的\",{\"1\":{\"667\":1}}],[\"表示将spring的基础引入了\",{\"1\":{\"664\":1}}],[\"表示将spring的基础依赖引入了\",{\"1\":{\"642\":1,\"651\":1,\"699\":1}}],[\"表示注入的bean存在或者不存在都没关系\",{\"1\":{\"646\":1}}],[\"表示注释\",{\"1\":{\"492\":1}}],[\"表示在注入的时候要求被注入的bean必须是存在的\",{\"1\":{\"646\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"595\":1}}],[\"表示点赞\",{\"1\":{\"512\":1}}],[\"表示镜像的仓库源\",{\"1\":{\"511\":1}}],[\"表示该对象最后一次被访问的时间\",{\"1\":{\"467\":1}}],[\"表示未进行\",{\"1\":{\"438\":1}}],[\"表示二进制安全的字符串\",{\"1\":{\"423\":1}}],[\"表示\",{\"1\":{\"398\":1,\"520\":1,\"521\":1,\"587\":1}}],[\"表示从尾部开始消费\",{\"1\":{\"395\":1}}],[\"表示最大值\",{\"1\":{\"392\":1,\"393\":1}}],[\"表示最小值\",{\"1\":{\"392\":1,\"393\":1}}],[\"表示由\",{\"1\":{\"388\":1}}],[\"表示每执行一次写命令\",{\"1\":{\"322\":1}}],[\"表示禁用\",{\"1\":{\"321\":1}}],[\"表示函数有可变的参数\",{\"1\":{\"293\":1}}],[\"表示双精度类型的实浮点数\",{\"1\":{\"290\":1}}],[\"表示一个无效值\",{\"1\":{\"290\":1}}],[\"表示查询返回结果的行数占需要的读取行数的百分比\",{\"1\":{\"231\":1}}],[\"表示查询中执行\",{\"1\":{\"231\":1}}],[\"表示索引中使用的字节数\",{\"1\":{\"231\":1}}],[\"表示连接类型\",{\"1\":{\"231\":1}}],[\"表示select的类型\",{\"1\":{\"231\":1}}],[\"表示感谢\",{\"1\":{\"173\":1,\"268\":1}}],[\"表示结束\",{\"1\":{\"39\":1}}],[\"表示插入失败\",{\"1\":{\"38\":1}}],[\"表示同意断开连接\",{\"1\":{\"19\":2}}],[\"表示请求连接断开\",{\"1\":{\"19\":1}}],[\"c等就代表的是实际的值\",{\"1\":{\"757\":1}}],[\"cglib\",{\"1\":{\"663\":1,\"727\":1}}],[\"cglib动态代理动态生成的代理类会和目标在在相同的包下\",{\"1\":{\"663\":1}}],[\"cj\",{\"1\":{\"631\":1,\"730\":1,\"746\":1,\"762\":1}}],[\"ctx\",{\"1\":{\"716\":4,\"717\":3,\"718\":3,\"719\":2,\"723\":7}}],[\"ctrl\",{\"0\":{\"549\":1,\"552\":1,\"553\":1,\"555\":1},\"1\":{\"549\":49,\"552\":19,\"553\":33,\"555\":4}}],[\"ctl\",{\"1\":{\"409\":1,\"412\":1,\"461\":1}}],[\"circular\",{\"1\":{\"765\":1}}],[\"ci\",{\"1\":{\"504\":1}}],[\"cmd\",{\"1\":{\"490\":2,\"493\":2}}],[\"cst\",{\"1\":{\"742\":1}}],[\"csdn\",{\"1\":{\"607\":1}}],[\"cs架构一般指服务器\",{\"1\":{\"423\":1}}],[\"cs架构\",{\"1\":{\"423\":2}}],[\"cs\",{\"1\":{\"423\":1}}],[\"c++一样的aot编译\",{\"1\":{\"679\":1}}],[\"c++一样通过编译器直接将代码编译成机器代码\",{\"1\":{\"679\":1}}],[\"c++\",{\"1\":{\"367\":1}}],[\"c语言\",{\"1\":{\"367\":1}}],[\"crlf\",{\"1\":{\"423\":1}}],[\"crc16\",{\"1\":{\"345\":1}}],[\"creation\",{\"1\":{\"765\":3}}],[\"creating\",{\"1\":{\"687\":1,\"765\":1}}],[\"creator\",{\"1\":{\"87\":1,\"88\":1}}],[\"creates\",{\"1\":{\"765\":3}}],[\"createsocketaccepthandler\",{\"1\":{\"464\":1}}],[\"createrelative\",{\"1\":{\"705\":2}}],[\"createinstance\",{\"1\":{\"687\":1}}],[\"createconstant\",{\"1\":{\"687\":1}}],[\"created\",{\"1\":{\"511\":1,\"765\":2}}],[\"create\",{\"0\":{\"395\":1},\"1\":{\"51\":1,\"70\":3,\"129\":1,\"134\":1,\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"165\":3,\"178\":1,\"179\":2,\"197\":1,\"198\":1,\"234\":1,\"242\":2,\"248\":1,\"256\":1,\"343\":3,\"387\":2,\"395\":4,\"409\":1,\"461\":1,\"464\":1,\"486\":1,\"730\":2,\"737\":2,\"765\":1}}],[\"c参数才可以\",{\"1\":{\"344\":1}}],[\"custom\",{\"1\":{\"493\":1,\"765\":1}}],[\"customize\",{\"1\":{\"336\":1}}],[\"curl\",{\"1\":{\"479\":1,\"500\":1,\"634\":1}}],[\"currentthread\",{\"1\":{\"650\":1}}],[\"currently\",{\"1\":{\"623\":1}}],[\"current\",{\"1\":{\"449\":3,\"765\":1}}],[\"cur\",{\"1\":{\"434\":5}}],[\"curenc\",{\"1\":{\"434\":2}}],[\"cursor\",{\"1\":{\"254\":1,\"456\":1,\"623\":2}}],[\"curtime\",{\"1\":{\"57\":1}}],[\"curdate\",{\"1\":{\"57\":1}}],[\"c模块\",{\"1\":{\"309\":1}}],[\"ce\",{\"1\":{\"503\":1}}],[\"centos7\",{\"1\":{\"496\":1}}],[\"centos容器样例\",{\"0\":{\"496\":1}}],[\"centos\",{\"1\":{\"307\":2,\"476\":4,\"496\":4}}],[\"ceil\",{\"1\":{\"56\":1}}],[\"cpanj7dtdlfni7mw\",{\"1\":{\"634\":1}}],[\"cpath\",{\"1\":{\"309\":1,\"311\":1}}],[\"cp\",{\"1\":{\"297\":4,\"333\":3,\"341\":1}}],[\"cpu\",{\"1\":{\"138\":1,\"230\":1,\"321\":1,\"405\":2,\"406\":2,\"460\":1}}],[\"cdata就表示纯文本数据\",{\"1\":{\"757\":1}}],[\"cdata中的c代表character\",{\"1\":{\"757\":1}}],[\"cdata\",{\"1\":{\"757\":2}}],[\"cd\",{\"1\":{\"297\":1,\"333\":1,\"341\":3,\"342\":1,\"343\":1,\"504\":1}}],[\"c\",{\"1\":{\"288\":1,\"290\":1,\"293\":1,\"306\":1,\"311\":1,\"344\":1,\"423\":2,\"427\":5,\"428\":1,\"430\":1,\"461\":1,\"464\":24,\"474\":1,\"475\":1,\"480\":1,\"549\":1,\"553\":1,\"554\":1,\"555\":1,\"600\":1,\"622\":4,\"623\":10,\"634\":1,\"709\":1,\"733\":1}}],[\"cnblogs\",{\"1\":{\"499\":1}}],[\"cn\",{\"1\":{\"283\":1,\"306\":1,\"475\":4,\"499\":1,\"603\":1,\"687\":5,\"690\":1}}],[\"cnf\",{\"1\":{\"229\":1,\"244\":1}}],[\"clear\",{\"1\":{\"626\":1}}],[\"cleaner\",{\"1\":{\"75\":1}}],[\"clean\",{\"1\":{\"63\":1}}],[\"clazztwo\",{\"1\":{\"760\":2}}],[\"clazzinner\",{\"1\":{\"758\":1}}],[\"clazzid=\",{\"1\":{\"758\":1}}],[\"clazzid\",{\"1\":{\"758\":12,\"760\":2}}],[\"clazzone\",{\"1\":{\"758\":3,\"759\":1,\"760\":2,\"761\":1}}],[\"clazzname=\",{\"1\":{\"758\":1}}],[\"clazzname\",{\"1\":{\"758\":12,\"760\":2}}],[\"clazz\",{\"1\":{\"581\":2,\"650\":3,\"681\":2,\"758\":23,\"759\":1,\"760\":5,\"761\":1}}],[\"classes\",{\"1\":{\"708\":1}}],[\"classpath通配符使用\",{\"1\":{\"723\":1}}],[\"classpath前缀使用\",{\"1\":{\"723\":1}}],[\"classpathresource实例可使用classpathresource构造器显式地创建\",{\"1\":{\"708\":1}}],[\"classpathresourcedemo\",{\"1\":{\"708\":1}}],[\"classpathresource\",{\"0\":{\"708\":1},\"1\":{\"706\":1,\"708\":5,\"719\":1}}],[\"classpath\",{\"1\":{\"702\":2,\"719\":1,\"723\":8,\"730\":1,\"731\":1,\"738\":1,\"762\":1}}],[\"classpathxmlapplicationcontext获取resource实例\",{\"1\":{\"716\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"646\":1,\"651\":2,\"665\":2,\"690\":2,\"695\":1,\"696\":1,\"716\":2,\"718\":2,\"719\":2,\"722\":1,\"723\":4,\"752\":1,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":2}}],[\"classloader\",{\"1\":{\"658\":4}}],[\"class=\",{\"1\":{\"651\":1,\"690\":1,\"718\":1,\"719\":1,\"730\":2,\"739\":1,\"752\":2,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"762\":1,\"763\":2,\"764\":2,\"765\":1,\"766\":8}}],[\"class后缀\",{\"1\":{\"650\":1}}],[\"classnotfoundexception\",{\"1\":{\"581\":1,\"650\":1}}],[\"class<\",{\"1\":{\"581\":1,\"647\":1,\"650\":2,\"658\":1,\"681\":1,\"684\":2,\"765\":2}}],[\"class\",{\"1\":{\"336\":1,\"349\":1,\"355\":1,\"362\":1,\"424\":1,\"579\":2,\"580\":8,\"581\":3,\"600\":1,\"601\":1,\"621\":1,\"622\":2,\"631\":1,\"646\":8,\"647\":7,\"648\":3,\"650\":14,\"651\":3,\"655\":2,\"657\":1,\"658\":1,\"664\":1,\"665\":4,\"677\":1,\"681\":4,\"682\":9,\"683\":6,\"684\":2,\"687\":1,\"690\":1,\"696\":1,\"700\":2,\"701\":1,\"702\":2,\"707\":1,\"708\":1,\"709\":1,\"716\":2,\"718\":3,\"719\":3,\"723\":1,\"731\":5,\"737\":4,\"738\":1,\"743\":1,\"745\":1,\"746\":4,\"752\":4,\"754\":2,\"755\":1,\"758\":2,\"760\":1,\"762\":1,\"763\":3,\"764\":3,\"765\":3,\"766\":5}}],[\"clonenotsupportedexception\",{\"1\":{\"581\":2}}],[\"cloneable\",{\"1\":{\"581\":2}}],[\"clone\",{\"1\":{\"581\":9}}],[\"closeable\",{\"1\":{\"600\":2,\"765\":1}}],[\"close\",{\"1\":{\"254\":1,\"309\":2,\"353\":1,\"424\":3,\"600\":5,\"627\":1,\"634\":1,\"695\":1,\"734\":1,\"764\":2,\"765\":2}}],[\"cluster或者\",{\"1\":{\"343\":1}}],[\"cluster\",{\"1\":{\"341\":3,\"343\":4,\"346\":4,\"347\":2,\"348\":1}}],[\"cli的交互控制台\",{\"1\":{\"374\":1}}],[\"cli客户端查看\",{\"1\":{\"354\":1}}],[\"cli客户端连接redis服务时\",{\"1\":{\"374\":1}}],[\"cli客户端连接对应的redis服务器后\",{\"1\":{\"354\":1}}],[\"cli客户端连接到redis服务\",{\"1\":{\"299\":1}}],[\"client1\",{\"1\":{\"383\":1}}],[\"client5\",{\"1\":{\"383\":1}}],[\"client2\",{\"1\":{\"383\":1}}],[\"clients\",{\"1\":{\"376\":1,\"464\":2}}],[\"clients<\",{\"1\":{\"353\":1}}],[\"client\",{\"1\":{\"351\":1,\"423\":1,\"462\":3,\"464\":3}}],[\"clientconfigurationbuilder\",{\"1\":{\"336\":4}}],[\"cli加上\",{\"1\":{\"344\":1}}],[\"cli中\",{\"1\":{\"343\":2}}],[\"cli连接7003\",{\"1\":{\"300\":1}}],[\"cli连接7002\",{\"1\":{\"300\":1}}],[\"cli连接7001\",{\"1\":{\"300\":1}}],[\"cli命令连接7003\",{\"1\":{\"299\":1}}],[\"cli命令连接7002\",{\"1\":{\"299\":1}}],[\"cli\",{\"1\":{\"298\":1,\"299\":3,\"342\":1,\"343\":3,\"344\":2,\"346\":4,\"374\":2}}],[\"caused\",{\"1\":{\"741\":1}}],[\"capacity\",{\"1\":{\"621\":2,\"622\":7,\"627\":7}}],[\"capture\",{\"1\":{\"309\":1}}],[\"cat\",{\"1\":{\"577\":10,\"580\":15}}],[\"catch用来捕获try语句块中发生的异常\",{\"1\":{\"597\":1}}],[\"catch\",{\"1\":{\"424\":2,\"581\":1,\"595\":1,\"597\":1,\"600\":14,\"623\":1,\"650\":3,\"658\":1,\"661\":1,\"665\":1,\"666\":1,\"670\":1,\"707\":1,\"734\":1,\"742\":1}}],[\"cannotblank\",{\"1\":{\"684\":3}}],[\"cannotblankvalidator\",{\"1\":{\"684\":2}}],[\"cannot\",{\"1\":{\"434\":1,\"765\":1}}],[\"can\",{\"1\":{\"434\":2,\"449\":1,\"499\":1,\"627\":2,\"684\":1,\"765\":10}}],[\"calsspath\",{\"1\":{\"717\":1}}],[\"calculatortest\",{\"1\":{\"665\":2}}],[\"calculatorstaticproxy\",{\"1\":{\"657\":2}}],[\"calculatorlogimpl\",{\"1\":{\"655\":1,\"658\":1}}],[\"calculatorimpl\",{\"1\":{\"655\":1,\"664\":1,\"665\":5,\"669\":3,\"670\":1,\"674\":2}}],[\"calculator\",{\"1\":{\"655\":4,\"657\":3,\"658\":2,\"664\":2,\"665\":5}}],[\"calculatecapacity\",{\"1\":{\"627\":1}}],[\"caltback触发时\",{\"1\":{\"409\":1}}],[\"called\",{\"1\":{\"687\":1,\"765\":2}}],[\"callback\",{\"1\":{\"409\":1}}],[\"call\",{\"1\":{\"242\":1,\"464\":2,\"623\":3,\"626\":1,\"765\":3}}],[\"caffeine缓存驱逐策略\",{\"0\":{\"285\":1}}],[\"caffeine示例\",{\"0\":{\"284\":1}}],[\"caffeine\",{\"0\":{\"283\":1},\"1\":{\"282\":3,\"283\":6,\"284\":1,\"285\":4}}],[\"caching\",{\"1\":{\"277\":1}}],[\"cached\",{\"1\":{\"765\":2}}],[\"cache<string\",{\"1\":{\"284\":1,\"285\":2}}],[\"cache\",{\"1\":{\"271\":2,\"277\":1,\"283\":2,\"284\":4,\"285\":2,\"309\":2}}],[\"cabinet\",{\"1\":{\"111\":1}}],[\"cassandra\",{\"1\":{\"111\":1}}],[\"case\",{\"0\":{\"249\":1},\"1\":{\"58\":2,\"249\":5,\"424\":5,\"434\":1,\"566\":4,\"765\":3}}],[\"cascaded会强制检查当前视图和其依赖的视图的筛选条件\",{\"1\":{\"166\":1}}],[\"cascaded\",{\"1\":{\"165\":3,\"166\":1}}],[\"cascade\",{\"1\":{\"52\":3}}],[\"china\",{\"1\":{\"690\":1}}],[\"china为国际化为语言\",{\"1\":{\"690\":1}}],[\"chinacloudapi\",{\"1\":{\"499\":1}}],[\"child\",{\"1\":{\"650\":4}}],[\"childrenfiles\",{\"1\":{\"650\":4}}],[\"channel2\",{\"1\":{\"383\":1}}],[\"channel1\",{\"1\":{\"383\":3}}],[\"channel\",{\"1\":{\"383\":4}}],[\"changed\",{\"1\":{\"623\":2,\"626\":1}}],[\"change\",{\"0\":{\"64\":1},\"1\":{\"64\":2,\"180\":1}}],[\"char\",{\"1\":{\"204\":2,\"246\":1,\"428\":10,\"449\":6,\"464\":1,\"562\":1}}],[\"characterencoding=utf8\",{\"1\":{\"730\":1,\"746\":1}}],[\"characteristic说明\",{\"1\":{\"256\":1}}],[\"characteristic\",{\"1\":{\"256\":1}}],[\"character\",{\"1\":{\"179\":1,\"387\":1}}],[\"charset=utf8\",{\"1\":{\"737\":2}}],[\"charset=utf8mb4\",{\"1\":{\"730\":1}}],[\"charset\",{\"1\":{\"178\":1,\"687\":1}}],[\"checkout\",{\"1\":{\"745\":5}}],[\"checkoutserviceimpl\",{\"1\":{\"745\":1}}],[\"checkoutservice\",{\"1\":{\"745\":5}}],[\"checkforcomodification\",{\"1\":{\"623\":2}}],[\"checknumber\",{\"1\":{\"599\":1}}],[\"check\",{\"1\":{\"49\":1,\"165\":3,\"166\":1,\"307\":1,\"434\":1,\"765\":1}}],[\"corresponding\",{\"1\":{\"765\":1}}],[\"core提供了ioc\",{\"1\":{\"727\":1}}],[\"core\",{\"1\":{\"499\":1,\"705\":1,\"707\":1,\"708\":1,\"709\":1,\"716\":2,\"718\":3,\"719\":1,\"723\":1,\"727\":2,\"730\":1,\"731\":1,\"746\":1,\"765\":1}}],[\"core<\",{\"1\":{\"355\":1,\"642\":1,\"664\":1,\"699\":1}}],[\"code\",{\"1\":{\"600\":1,\"623\":3,\"627\":2,\"765\":14}}],[\"coder\",{\"1\":{\"312\":1,\"356\":2}}],[\"codermast1\",{\"1\":{\"485\":2}}],[\"codermast\",{\"1\":{\"284\":1,\"336\":1,\"349\":1,\"353\":3,\"354\":2,\"356\":1,\"362\":3,\"371\":2,\"424\":2,\"485\":1,\"486\":1,\"487\":6,\"493\":1,\"515\":4,\"517\":4,\"518\":4,\"520\":2,\"522\":1,\"525\":6,\"528\":2,\"530\":2,\"533\":3,\"580\":2,\"581\":3,\"631\":1,\"638\":1,\"643\":6,\"648\":1,\"650\":2,\"651\":3,\"653\":1,\"665\":7,\"669\":3,\"670\":1,\"674\":2,\"681\":1,\"682\":1,\"690\":5,\"700\":1,\"701\":1,\"702\":1,\"707\":2,\"708\":1,\"716\":2,\"718\":2,\"719\":2,\"723\":1,\"731\":2,\"737\":1,\"746\":4,\"749\":1,\"752\":3,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"763\":2,\"764\":1,\"765\":1,\"766\":8}}],[\"codermast888\",{\"1\":{\"4\":1}}],[\"copyright\",{\"1\":{\"765\":1}}],[\"copy日志文件\",{\"1\":{\"700\":1}}],[\"copyof\",{\"1\":{\"622\":1,\"627\":1}}],[\"copy\",{\"1\":{\"321\":1,\"490\":2,\"493\":2,\"765\":1}}],[\"course\",{\"1\":{\"765\":1}}],[\"country\",{\"1\":{\"687\":3}}],[\"count的用法\",{\"0\":{\"223\":1}}],[\"count优化\",{\"0\":{\"221\":1}}],[\"count\",{\"1\":{\"134\":4,\"168\":1,\"187\":1,\"191\":1,\"223\":9,\"389\":2,\"392\":3,\"393\":3,\"394\":3,\"396\":4,\"398\":4,\"449\":5,\"731\":3}}],[\"couchdb\",{\"1\":{\"111\":1}}],[\"collection<\",{\"1\":{\"622\":1,\"623\":4}}],[\"collection\",{\"0\":{\"617\":1},\"1\":{\"622\":4,\"623\":12}}],[\"collision\",{\"1\":{\"437\":1}}],[\"collate\",{\"1\":{\"178\":1,\"179\":1}}],[\"column\",{\"1\":{\"134\":1}}],[\"column1\",{\"1\":{\"100\":2}}],[\"col\",{\"1\":{\"129\":1}}],[\"com为资源文件的key值\",{\"1\":{\"690\":1}}],[\"com=欢迎\",{\"1\":{\"690\":1}}],[\"com=welcome\",{\"1\":{\"690\":1}}],[\"computer\",{\"0\":{\"798\":1}}],[\"compliance\",{\"1\":{\"765\":1}}],[\"components\",{\"1\":{\"765\":1}}],[\"componentscan\",{\"1\":{\"648\":1,\"682\":1,\"683\":2,\"746\":2}}],[\"component注解保证这个切面类能够放入ioc容器\",{\"1\":{\"665\":1}}],[\"component\",{\"1\":{\"643\":10,\"644\":4,\"664\":1,\"665\":2,\"674\":2,\"700\":1,\"701\":2,\"711\":1,\"737\":1}}],[\"compose可以作为一个简单的部署工具\",{\"1\":{\"483\":1}}],[\"compose主要用于开发环境\",{\"1\":{\"483\":1}}],[\"compose进行部署\",{\"1\":{\"483\":1}}],[\"compose会在运行时使用该值\",{\"1\":{\"483\":1}}],[\"compose允许您通过环境变量或\",{\"1\":{\"483\":1}}],[\"compose允许您定义和使用自己的网络\",{\"1\":{\"482\":1}}],[\"compose中\",{\"1\":{\"483\":2}}],[\"compose高级应用\",{\"0\":{\"483\":1}}],[\"compose项目的核心\",{\"1\":{\"482\":1}}],[\"compose文件结构\",{\"0\":{\"482\":1}}],[\"compose的常见命令包括\",{\"1\":{\"481\":1}}],[\"compose基本命令\",{\"0\":{\"481\":1}}],[\"compose样例\",{\"0\":{\"480\":1}}],[\"compose安装\",{\"0\":{\"479\":1}}],[\"compose简介\",{\"0\":{\"478\":1}}],[\"compose\",{\"0\":{\"477\":1},\"1\":{\"474\":1,\"478\":6,\"479\":7,\"480\":1,\"481\":5,\"482\":4,\"487\":1}}],[\"comp\",{\"1\":{\"449\":1}}],[\"compression\",{\"1\":{\"449\":1}}],[\"compress\",{\"1\":{\"449\":5,\"450\":2}}],[\"compressed\",{\"1\":{\"449\":2}}],[\"commonpointcut\",{\"1\":{\"668\":1}}],[\"commonds为命令\",{\"1\":{\"374\":1}}],[\"commonds\",{\"1\":{\"374\":1}}],[\"commons<groupid>\",{\"1\":{\"362\":1}}],[\"common\",{\"1\":{\"309\":1,\"765\":1}}],[\"command\",{\"1\":{\"363\":1,\"480\":1}}],[\"comma\",{\"1\":{\"293\":2}}],[\"comment\",{\"1\":{\"179\":5,\"180\":2,\"730\":3,\"737\":7}}],[\"community\",{\"1\":{\"108\":1,\"503\":1}}],[\"committed\",{\"1\":{\"261\":2,\"744\":4}}],[\"commited\",{\"1\":{\"88\":1}}],[\"commit\",{\"1\":{\"65\":1,\"83\":1,\"202\":1,\"258\":1,\"515\":1,\"734\":1}}],[\"com\",{\"1\":{\"107\":1,\"173\":2,\"228\":5,\"268\":2,\"282\":1,\"283\":1,\"293\":2,\"352\":1,\"353\":2,\"375\":2,\"475\":6,\"479\":1,\"493\":2,\"498\":1,\"499\":2,\"500\":1,\"501\":3,\"512\":1,\"603\":1,\"630\":1,\"631\":2,\"633\":1,\"634\":2,\"638\":1,\"639\":2,\"643\":7,\"648\":1,\"650\":2,\"651\":3,\"653\":4,\"665\":7,\"668\":2,\"669\":3,\"670\":1,\"674\":2,\"682\":1,\"683\":2,\"690\":1,\"700\":1,\"701\":1,\"702\":1,\"707\":2,\"718\":1,\"719\":1,\"730\":1,\"731\":1,\"737\":1,\"746\":5,\"749\":1,\"752\":3,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"762\":1,\"763\":3,\"764\":2,\"765\":1,\"766\":8,\"769\":2}}],[\"connread\",{\"1\":{\"464\":1}}],[\"conngetprivatedata\",{\"1\":{\"464\":1}}],[\"connsetreadhandler\",{\"1\":{\"464\":1}}],[\"conncreatesocket\",{\"1\":{\"464\":1}}],[\"conn\",{\"1\":{\"464\":5,\"734\":5}}],[\"connector\",{\"1\":{\"730\":1,\"762\":1}}],[\"connection\",{\"1\":{\"464\":3,\"634\":1,\"734\":1,\"741\":1,\"762\":3}}],[\"connections\",{\"1\":{\"308\":1,\"634\":1}}],[\"connect\",{\"1\":{\"309\":1}}],[\"conf中的注释部分删除\",{\"1\":{\"308\":1}}],[\"conf中添加一行配置\",{\"1\":{\"299\":1}}],[\"conf\",{\"1\":{\"297\":11,\"298\":3,\"308\":1,\"311\":2,\"321\":1,\"322\":3,\"333\":5,\"334\":3,\"341\":4,\"342\":1,\"346\":2,\"371\":1,\"372\":1,\"634\":1}}],[\"conf文件中的配置项\",{\"1\":{\"371\":1}}],[\"conf文件中指定每一个实例的绑定ip信息\",{\"1\":{\"297\":1}}],[\"conf文件拷贝到s2\",{\"1\":{\"333\":1}}],[\"conf文件拷贝到三个目录中\",{\"1\":{\"297\":1}}],[\"conf文件\",{\"0\":{\"311\":1},\"1\":{\"297\":1,\"308\":1,\"333\":1,\"341\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"695\":1}}],[\"configuration>\",{\"1\":{\"700\":1}}],[\"configuration\",{\"1\":{\"355\":1,\"648\":1,\"682\":1,\"683\":2,\"746\":2}}],[\"config>\",{\"1\":{\"674\":2,\"749\":2}}],[\"config\",{\"1\":{\"275\":1,\"307\":1,\"341\":1,\"450\":1,\"746\":1,\"765\":1}}],[\"contract\",{\"1\":{\"765\":1}}],[\"controller层执行结束\",{\"1\":{\"646\":2}}],[\"controller\",{\"1\":{\"336\":1,\"643\":4,\"644\":2,\"646\":2,\"737\":1,\"746\":1,\"766\":2}}],[\"control\",{\"1\":{\"81\":1,\"176\":1,\"196\":1,\"691\":1,\"726\":1}}],[\"context之上\",{\"1\":{\"727\":1}}],[\"context上下文\",{\"1\":{\"727\":1}}],[\"contextconfiguration\",{\"1\":{\"702\":2}}],[\"context\",{\"1\":{\"643\":10,\"646\":2,\"648\":2,\"651\":2,\"665\":6,\"674\":1,\"682\":6,\"683\":7,\"684\":4,\"690\":5,\"696\":2,\"700\":4,\"702\":3,\"716\":4,\"718\":3,\"719\":2,\"723\":2,\"727\":1,\"730\":4,\"731\":1,\"739\":4,\"746\":6,\"752\":4,\"762\":5}}],[\"context=\",{\"1\":{\"643\":1,\"665\":1,\"700\":1,\"730\":1,\"739\":1,\"762\":1}}],[\"context<\",{\"1\":{\"642\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"context依赖之后\",{\"1\":{\"642\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"context依赖\",{\"1\":{\"642\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"contentlength\",{\"1\":{\"705\":1}}],[\"contents\",{\"1\":{\"432\":2,\"433\":1}}],[\"content\",{\"1\":{\"311\":1,\"313\":1,\"444\":2}}],[\"contained\",{\"1\":{\"626\":2}}],[\"container\",{\"1\":{\"449\":1,\"527\":1,\"647\":2,\"765\":1}}],[\"contain\",{\"1\":{\"626\":1}}],[\"containing\",{\"1\":{\"622\":1,\"623\":2,\"765\":1}}],[\"contains\",{\"1\":{\"621\":1,\"650\":1,\"684\":2}}],[\"continue\",{\"1\":{\"255\":1,\"570\":1}}],[\"conditions\",{\"1\":{\"765\":1}}],[\"condition2\",{\"1\":{\"249\":1}}],[\"condition1\",{\"1\":{\"249\":1}}],[\"condition\",{\"1\":{\"133\":1,\"255\":3,\"291\":2}}],[\"concurrentmodificationexception\",{\"1\":{\"623\":1}}],[\"concurrentmap\",{\"1\":{\"283\":2}}],[\"concurrency\",{\"1\":{\"81\":1}}],[\"concat\",{\"1\":{\"55\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"consider\",{\"1\":{\"765\":1}}],[\"consistency\",{\"1\":{\"76\":1,\"259\":1,\"733\":1}}],[\"console>\",{\"1\":{\"700\":1}}],[\"conscious\",{\"1\":{\"627\":2}}],[\"consumername\",{\"1\":{\"395\":1}}],[\"consumer\",{\"1\":{\"387\":3,\"395\":2,\"396\":4}}],[\"constants\",{\"1\":{\"687\":1}}],[\"constructditest\",{\"1\":{\"755\":1}}],[\"constructor\",{\"1\":{\"646\":1,\"684\":2,\"755\":1}}],[\"constructs\",{\"1\":{\"622\":3}}],[\"constraintannotation\",{\"1\":{\"684\":1}}],[\"constraintvalidator<cannotblank\",{\"1\":{\"684\":1}}],[\"constraintvalidatorcontext\",{\"1\":{\"684\":2}}],[\"constraintvalidator\",{\"1\":{\"684\":1}}],[\"constraintviolation\",{\"1\":{\"682\":1}}],[\"constraints\",{\"1\":{\"682\":3,\"683\":2}}],[\"constraint\",{\"1\":{\"51\":2,\"52\":1,\"684\":2}}],[\"const\",{\"1\":{\"231\":1,\"449\":1}}],[\"保护模式\",{\"1\":{\"341\":1}}],[\"保存成功\",{\"1\":{\"766\":1}}],[\"保存后\",{\"1\":{\"475\":1}}],[\"保存不同数据\",{\"1\":{\"339\":1}}],[\"保存数据时\",{\"1\":{\"49\":1}}],[\"保留有效部分\",{\"1\":{\"308\":1}}],[\"保留y位小数\",{\"1\":{\"56\":1}}],[\"保持共同的基础配置\",{\"1\":{\"483\":1}}],[\"保持与\",{\"1\":{\"302\":1}}],[\"保持数据的一致性\",{\"1\":{\"75\":1}}],[\"保证锁一定被释放\",{\"1\":{\"600\":1}}],[\"保证元素唯一\",{\"1\":{\"420\":1}}],[\"保证最终一致\",{\"1\":{\"277\":1}}],[\"保证一致性\",{\"1\":{\"274\":1}}],[\"保证读写的正确性\",{\"1\":{\"146\":1}}],[\"保证读者能够对知识点进行刨根问题\",{\"1\":{\"3\":1}}],[\"保证数据的完整性和正确性\",{\"1\":{\"236\":1}}],[\"保证数据的完整性\",{\"1\":{\"140\":1}}],[\"保证数据的一致性和完整性\",{\"1\":{\"49\":1}}],[\"保证所需要的所有数据都能够通过索引查询到\",{\"1\":{\"133\":1}}],[\"保证事务在不受外部并发操作影响的独立环境下运行\",{\"1\":{\"76\":1,\"259\":1}}],[\"保证字段值满足指定的条件\",{\"1\":{\"49\":1}}],[\"保证该字段的所有数据都是唯一\",{\"1\":{\"49\":1}}],[\"主机\",{\"1\":{\"499\":1}}],[\"主机名可以使用\",{\"1\":{\"197\":1}}],[\"主机名\",{\"1\":{\"197\":3,\"198\":3}}],[\"主动挑选部分\",{\"1\":{\"458\":1}}],[\"主动更新策略\",{\"0\":{\"277\":1}}],[\"主动更新\",{\"1\":{\"276\":2}}],[\"主节点的ip和端口\",{\"1\":{\"333\":1}}],[\"主节点名称\",{\"1\":{\"333\":1}}],[\"主观下线\",{\"1\":{\"327\":1}}],[\"主进程得到一个子进程\",{\"1\":{\"321\":1}}],[\"主进程得到子进程\",{\"1\":{\"321\":1}}],[\"主进程来执行\",{\"1\":{\"321\":1}}],[\"主\",{\"1\":{\"303\":1}}],[\"主从和哨兵可以解决高可用\",{\"1\":{\"339\":1}}],[\"主从集群\",{\"1\":{\"303\":1,\"336\":1}}],[\"主从第一次同步是全量同步\",{\"1\":{\"302\":1,\"303\":1}}],[\"主从复制\",{\"0\":{\"89\":1},\"1\":{\"172\":1}}],[\"主查询\",{\"1\":{\"231\":1}}],[\"主表字段名\",{\"1\":{\"52\":1}}],[\"主表名\",{\"1\":{\"52\":1}}],[\"主表列名\",{\"1\":{\"51\":2}}],[\"主表\",{\"1\":{\"51\":2}}],[\"主键不可能为null\",{\"1\":{\"223\":1}}],[\"主键\",{\"1\":{\"223\":2,\"737\":2}}],[\"主键设计原则\",{\"0\":{\"209\":1}}],[\"主键有序插入比主键乱序插入的速度要快\",{\"1\":{\"203\":1}}],[\"主键有序\",{\"1\":{\"203\":1}}],[\"主键乱序插入\",{\"1\":{\"207\":3}}],[\"主键乱序\",{\"1\":{\"203\":1}}],[\"主键顺序插入数据\",{\"1\":{\"207\":1}}],[\"主键顺序插入\",{\"0\":{\"203\":1},\"1\":{\"207\":2}}],[\"主键即使为bigint\",{\"1\":{\"128\":1}}],[\"主键索引就是聚集索引\",{\"1\":{\"126\":1}}],[\"主键索引\",{\"1\":{\"126\":2}}],[\"主键是一行数据的唯一标识\",{\"1\":{\"49\":1}}],[\"主键约束\",{\"1\":{\"49\":1}}],[\"主要使用\",{\"1\":{\"634\":1}}],[\"主要用途是被子类调用\",{\"1\":{\"591\":1}}],[\"主要用于消息队列\",{\"1\":{\"387\":1}}],[\"主要用于地理空间数据类型\",{\"1\":{\"117\":1}}],[\"主要用于回收事务已经提交了的\",{\"1\":{\"75\":1}}],[\"主要特征\",{\"1\":{\"591\":1}}],[\"主要基于对象这个概念\",{\"1\":{\"573\":1}}],[\"主要还是减少开销的权衡\",{\"1\":{\"434\":1}}],[\"主要由\",{\"1\":{\"306\":1}}],[\"主要是对junit的封装\",{\"1\":{\"727\":1}}],[\"主要是磁盘io资源但aof重写时会占用大量cpu和内存资源\",{\"1\":{\"323\":1}}],[\"主要是将数据存储在文件系统之上\",{\"1\":{\"233\":1}}],[\"主要是mysql中的ibd文件\",{\"1\":{\"60\":1}}],[\"主要完成大多书的核心服务功能\",{\"1\":{\"233\":1}}],[\"主要完成一些类似于连接处理\",{\"1\":{\"233\":1}}],[\"主要的性能瓶颈在命令的读写处理和命令的响应输出两个方面\",{\"1\":{\"463\":1}}],[\"主要的工作就落在创建这条sql查询语句上\",{\"1\":{\"164\":1}}],[\"主要的存储结构有\",{\"1\":{\"35\":1}}],[\"主要应用在innodb存储引擎中\",{\"1\":{\"148\":1}}],[\"主要包含以下几种\",{\"1\":{\"117\":1}}],[\"主要有以下几个\",{\"1\":{\"461\":1}}],[\"主要有\",{\"1\":{\"111\":4}}],[\"主要负责调度其他线程\",{\"1\":{\"75\":1}}],[\"主要分为两种类型\",{\"1\":{\"595\":1}}],[\"主要分为以下三类\",{\"1\":{\"148\":1}}],[\"主要分为以下三种类型\",{\"1\":{\"144\":1}}],[\"主要分为三个部分\",{\"1\":{\"62\":1}}],[\"主要分为\",{\"1\":{\"35\":1}}],[\"描述\",{\"1\":{\"49\":1,\"102\":1,\"117\":1,\"260\":1,\"290\":1,\"363\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"398\":1,\"399\":1,\"400\":1}}],[\"约束是作用于表中字段上的\",{\"1\":{\"49\":1}}],[\"约束是作用于表中字段上的规则\",{\"1\":{\"47\":1}}],[\"约束\",{\"0\":{\"46\":1},\"1\":{\"49\":1,\"172\":1,\"180\":2}}],[\"循环体内要执行的语句\",{\"1\":{\"570\":1}}],[\"循环只适用于遍历集合\",{\"1\":{\"568\":1}}],[\"循环语句\",{\"0\":{\"567\":1}}],[\"循环语句是由循环体及循环的终止条件两部分组成的\",{\"1\":{\"291\":1}}],[\"循环监听事件\",{\"1\":{\"464\":1}}],[\"循环结构是在一定条件下反复执行某段程序的流程结构\",{\"1\":{\"291\":1}}],[\"循环结束的条件为\",{\"1\":{\"24\":1}}],[\"循环\",{\"0\":{\"250\":1,\"291\":1},\"1\":{\"252\":1,\"291\":1,\"568\":2}}],[\"循环链表\",{\"0\":{\"41\":1},\"1\":{\"41\":1}}],[\"双击安装\",{\"1\":{\"498\":1}}],[\"双击打开即可\",{\"1\":{\"498\":1}}],[\"双端链表\",{\"1\":{\"446\":1,\"468\":1}}],[\"双端队列示意图\",{\"1\":{\"380\":1}}],[\"双写缓冲区\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"双链表\",{\"0\":{\"40\":1},\"1\":{\"40\":1}}],[\"双方都可以进行数据的发送\",{\"1\":{\"17\":1}}],[\"总需要提供\",{\"1\":{\"719\":1}}],[\"总的来说对云原生的要求不算高短期内可以继续使用\",{\"1\":{\"678\":1}}],[\"总体而言\",{\"1\":{\"504\":1}}],[\"总等于\",{\"1\":{\"438\":1}}],[\"总结\",{\"0\":{\"304\":1,\"412\":1,\"717\":1},\"1\":{\"646\":1,\"647\":1}}],[\"总结的一份有自己思考成分的笔记\",{\"1\":{\"3\":1}}],[\"总时间复杂度为\",{\"1\":{\"39\":1}}],[\"赋指针\",{\"1\":{\"39\":1}}],[\"赋值运算符\",{\"1\":{\"563\":1}}],[\"赋值给dict\",{\"1\":{\"440\":2}}],[\"赋值\",{\"1\":{\"39\":1,\"245\":1,\"246\":1}}],[\"创建外部属性配置文件jdbc\",{\"1\":{\"762\":1}}],[\"创建构造器\",{\"1\":{\"755\":1}}],[\"创建接口userdao\",{\"1\":{\"766\":1}}],[\"创建接口userservice\",{\"1\":{\"766\":1}}],[\"创建接口checkoutservice\",{\"1\":{\"745\":1}}],[\"创建接口bookdao\",{\"1\":{\"737\":1}}],[\"创建接口bookservice\",{\"1\":{\"737\":1}}],[\"创建bookcontroller\",{\"1\":{\"737\":1}}],[\"创建bean的后置处理器\",{\"1\":{\"764\":1}}],[\"创建bean\",{\"1\":{\"718\":1}}],[\"创建applicationcontext时\",{\"1\":{\"723\":1}}],[\"创建applicationcontext对象时\",{\"1\":{\"722\":1}}],[\"创建依赖注入类\",{\"1\":{\"719\":1}}],[\"创建类userdaoimpl实现接口userdao\",{\"1\":{\"766\":1}}],[\"创建类userserviceimpl实现接口userservice\",{\"1\":{\"766\":1}}],[\"创建类usercontroller\",{\"1\":{\"766\":1}}],[\"创建类userfactorybean\",{\"1\":{\"765\":1}}],[\"创建类\",{\"1\":{\"718\":1}}],[\"创建类实现validator接口\",{\"1\":{\"681\":1}}],[\"创建此资源的相关资源\",{\"1\":{\"705\":1}}],[\"创建spring配置文件\",{\"1\":{\"690\":1,\"719\":1}}],[\"创建serversocket\",{\"1\":{\"464\":1}}],[\"创建codermast\",{\"1\":{\"690\":2}}],[\"创建资源文件\",{\"1\":{\"690\":1}}],[\"创建配置类\",{\"1\":{\"682\":1,\"683\":1}}],[\"创建配置文件\",{\"1\":{\"651\":1}}],[\"创建person对应的databinder\",{\"1\":{\"681\":1}}],[\"创建person对象\",{\"1\":{\"681\":1}}],[\"创建实现类checkoutserviceimpl\",{\"1\":{\"745\":1}}],[\"创建实现类bookdaoimpl\",{\"1\":{\"737\":1}}],[\"创建实现类bookserviceimpl\",{\"1\":{\"737\":1}}],[\"创建实例\",{\"1\":{\"719\":2}}],[\"创建实例目录\",{\"1\":{\"346\":1}}],[\"创建实体类\",{\"1\":{\"681\":1,\"682\":1,\"683\":1}}],[\"创建切面类并配置\",{\"0\":{\"665\":1}}],[\"创建静态代理类\",{\"1\":{\"657\":1}}],[\"创建带日志功能的实现类\",{\"1\":{\"655\":1}}],[\"创建测试类\",{\"1\":{\"651\":1,\"690\":1,\"731\":1}}],[\"创建java类\",{\"1\":{\"651\":1}}],[\"创建user\",{\"1\":{\"752\":1}}],[\"创建userserviceimpl实现类\",{\"1\":{\"650\":1}}],[\"创建userservice接口\",{\"1\":{\"650\":1}}],[\"创建userdaoimpl实现\",{\"1\":{\"650\":1}}],[\"创建子模块spring6\",{\"1\":{\"687\":1}}],[\"创建子模块\",{\"0\":{\"642\":1,\"650\":1,\"751\":1},\"1\":{\"681\":1}}],[\"创建的对象和我们使用\",{\"1\":{\"693\":1}}],[\"创建的\",{\"1\":{\"581\":4,\"691\":1,\"693\":1}}],[\"创建对象的时机\",{\"1\":{\"763\":1}}],[\"创建对象\",{\"0\":{\"581\":1},\"1\":{\"764\":1}}],[\"创建挂载点\",{\"1\":{\"493\":1}}],[\"创建另一个容器并连接到该网络\",{\"1\":{\"487\":1}}],[\"创建一般实现类\",{\"1\":{\"655\":1}}],[\"创建一个新配置文件\",{\"1\":{\"754\":1}}],[\"创建一个\",{\"1\":{\"707\":1,\"708\":1}}],[\"创建一个maven子模块spring6\",{\"1\":{\"707\":1}}],[\"创建一个代理实例\",{\"1\":{\"658\":1}}],[\"创建一个容器\",{\"1\":{\"535\":1}}],[\"创建一个容器并连接到该网络\",{\"1\":{\"487\":1}}],[\"创建一个该镜像的容器\",{\"1\":{\"515\":1}}],[\"创建一张名为users的表\",{\"1\":{\"234\":1}}],[\"创建一张表并且指定引擎\",{\"1\":{\"234\":1}}],[\"创建网络\",{\"0\":{\"486\":1}}],[\"创建后修改名称\",{\"1\":{\"485\":1}}],[\"创建时自定义名称\",{\"1\":{\"485\":1}}],[\"创建多路复用程序\",{\"1\":{\"461\":1}}],[\"创建dictht\",{\"1\":{\"440\":2}}],[\"创建消费者组\",{\"1\":{\"387\":1,\"395\":1}}],[\"创建序列化对象\",{\"1\":{\"355\":1}}],[\"创建redistemplate对象\",{\"1\":{\"355\":1}}],[\"创建集群\",{\"0\":{\"343\":1},\"1\":{\"343\":1}}],[\"创建目录\",{\"1\":{\"297\":2,\"333\":1,\"341\":1}}],[\"创建缓存对象\",{\"1\":{\"284\":1,\"285\":2}}],[\"创建数据库\",{\"1\":{\"198\":1}}],[\"创建用户\",{\"1\":{\"197\":1}}],[\"创建\",{\"1\":{\"157\":1,\"165\":1,\"178\":1,\"179\":1,\"242\":1,\"321\":1,\"346\":1,\"408\":1,\"464\":1,\"579\":1,\"642\":1,\"650\":1,\"651\":1,\"754\":2,\"755\":1,\"758\":1,\"760\":1,\"763\":1}}],[\"创建索引\",{\"1\":{\"129\":1}}],[\"创建表并且指定表空间\",{\"1\":{\"70\":1}}],[\"创建表空间\",{\"1\":{\"70\":1}}],[\"创建新节点\",{\"1\":{\"39\":1}}],[\"创建头结点\",{\"1\":{\"39\":1}}],[\"输出日志信息到控制台\",{\"1\":{\"700\":1}}],[\"输出错误信息\",{\"1\":{\"700\":1}}],[\"输出警告的信息\",{\"1\":{\"700\":1}}],[\"输出重要的信息\",{\"1\":{\"700\":1}}],[\"输出结果\",{\"1\":{\"681\":1}}],[\"输出操作\",{\"1\":{\"37\":1}}],[\"输入刚才jdk的安装路径\",{\"1\":{\"606\":1}}],[\"输入即可\",{\"1\":{\"498\":1}}],[\"输入流\",{\"1\":{\"424\":1}}],[\"输入\",{\"1\":{\"39\":1}}],[\"输入结点的值\",{\"1\":{\"39\":1}}],[\"逆向建立单链表\",{\"1\":{\"39\":1}}],[\"hh\",{\"1\":{\"700\":3}}],[\"hugecapacity\",{\"1\":{\"627\":1}}],[\"hub查找\",{\"1\":{\"512\":1}}],[\"hub\",{\"1\":{\"475\":1,\"476\":1,\"504\":1,\"508\":1,\"510\":1,\"512\":2,\"530\":3,\"531\":2,\"532\":1,\"533\":1}}],[\"h文件中实现如下\",{\"1\":{\"467\":1}}],[\"hz影响\",{\"1\":{\"457\":1}}],[\"hz\",{\"1\":{\"457\":1}}],[\"highly\",{\"1\":{\"765\":1}}],[\"hibernate\",{\"1\":{\"681\":1}}],[\"hi\",{\"1\":{\"429\":1}}],[\"hincrby\",{\"1\":{\"379\":1}}],[\"hvals\",{\"1\":{\"379\":1}}],[\"hkeys\",{\"1\":{\"379\":1}}],[\"hmget\",{\"1\":{\"379\":1}}],[\"hmset\",{\"1\":{\"379\":2}}],[\"hgetall\",{\"1\":{\"379\":1}}],[\"hget\",{\"1\":{\"379\":1}}],[\"hsetnx\",{\"1\":{\"379\":1}}],[\"hset\",{\"1\":{\"379\":2}}],[\"hyperloglog类型\",{\"0\":{\"400\":1}}],[\"hyperloglog\",{\"1\":{\"377\":1,\"397\":1,\"400\":4}}],[\"h\",{\"1\":{\"374\":1,\"428\":1,\"438\":2,\"549\":1,\"552\":1,\"553\":1}}],[\"hoeller\",{\"1\":{\"765\":1}}],[\"hobbies\",{\"1\":{\"759\":6,\"760\":2}}],[\"hotspot\",{\"1\":{\"677\":1,\"678\":2}}],[\"hold\",{\"1\":{\"627\":2,\"765\":1}}],[\"hodgkin\",{\"1\":{\"539\":1,\"540\":1,\"541\":2}}],[\"host\",{\"1\":{\"362\":1,\"424\":2,\"631\":1}}],[\"however\",{\"1\":{\"428\":1,\"765\":1}}],[\"how\",{\"1\":{\"346\":1}}],[\"homebrew\",{\"0\":{\"545\":1},\"1\":{\"498\":1,\"634\":2}}],[\"home=\",{\"1\":{\"307\":1}}],[\"home\",{\"1\":{\"283\":1,\"307\":2,\"549\":1,\"550\":1,\"551\":1,\"552\":1}}],[\"ht\",{\"1\":{\"419\":1,\"420\":1,\"421\":2,\"438\":1,\"439\":1,\"440\":21,\"441\":2,\"468\":1,\"469\":3}}],[\"htm\",{\"1\":{\"308\":1,\"634\":1}}],[\"html\",{\"1\":{\"293\":1,\"308\":5,\"475\":1,\"499\":1,\"634\":7}}],[\"http\",{\"1\":{\"306\":1,\"308\":2,\"309\":5,\"310\":1,\"311\":1,\"336\":2,\"475\":1,\"634\":6,\"643\":7,\"651\":4,\"665\":10,\"690\":4,\"700\":7,\"707\":2,\"717\":1,\"718\":4,\"719\":1,\"730\":7,\"739\":10,\"760\":7,\"761\":8,\"762\":7}}],[\"https\",{\"1\":{\"107\":1,\"173\":2,\"268\":3,\"282\":1,\"283\":1,\"288\":1,\"293\":1,\"306\":1,\"307\":1,\"352\":1,\"353\":2,\"360\":1,\"368\":1,\"375\":2,\"376\":1,\"475\":6,\"479\":1,\"493\":2,\"498\":1,\"499\":3,\"500\":1,\"501\":3,\"512\":1,\"603\":1,\"607\":1,\"630\":1,\"631\":1,\"633\":1,\"634\":2,\"638\":1,\"639\":2,\"653\":4,\"707\":1,\"765\":1,\"769\":2}}],[\"hence\",{\"1\":{\"765\":1}}],[\"heavily\",{\"1\":{\"765\":1}}],[\"header\",{\"1\":{\"428\":4,\"454\":1,\"634\":2}}],[\"head\",{\"1\":{\"409\":1,\"417\":1,\"449\":1,\"634\":1}}],[\"headinsert\",{\"1\":{\"39\":1}}],[\"here\",{\"1\":{\"428\":1,\"765\":2}}],[\"help\",{\"1\":{\"363\":2,\"475\":1}}],[\"help指令\",{\"1\":{\"363\":1}}],[\"help指令查看\",{\"1\":{\"346\":1}}],[\"hello匹配com\",{\"1\":{\"667\":1}}],[\"helloworldtest\",{\"1\":{\"651\":1}}],[\"helloworld\",{\"0\":{\"494\":1},\"1\":{\"651\":9}}],[\"hello字符串\",{\"1\":{\"423\":1}}],[\"hello\",{\"0\":{\"495\":1},\"1\":{\"284\":1,\"289\":5,\"290\":1,\"476\":3,\"495\":4,\"496\":2,\"514\":3,\"667\":2}}],[\"has\",{\"1\":{\"765\":2}}],[\"haserrors\",{\"1\":{\"682\":1}}],[\"hasmoreelements\",{\"1\":{\"650\":1}}],[\"hashtable\",{\"1\":{\"419\":1,\"439\":1}}],[\"hash表\",{\"1\":{\"382\":1,\"468\":1}}],[\"hash的常见命令有\",{\"1\":{\"379\":1}}],[\"hash结构可以将对象中的每个字段独立存储\",{\"1\":{\"379\":1}}],[\"hash类型的数据\",{\"1\":{\"379\":1}}],[\"hash类型\",{\"1\":{\"379\":1}}],[\"hashoperations\",{\"1\":{\"361\":1}}],[\"hashvalue\",{\"1\":{\"355\":1}}],[\"hashkey\",{\"1\":{\"355\":1}}],[\"hashmap<>\",{\"1\":{\"650\":1}}],[\"hashmap<class\",{\"1\":{\"650\":1}}],[\"hashmap\",{\"1\":{\"282\":1}}],[\"hash索引是存储引擎根据b+tree索引在指定条件下自动构建的\",{\"1\":{\"123\":1}}],[\"hash索引只能用于对等比较\",{\"1\":{\"123\":1}}],[\"hash索引\",{\"1\":{\"117\":1,\"125\":1,\"238\":1}}],[\"hash\",{\"0\":{\"66\":1,\"123\":1,\"379\":1},\"1\":{\"35\":1,\"66\":1,\"345\":2,\"358\":1,\"377\":1,\"397\":1,\"419\":5,\"437\":2,\"438\":3,\"469\":1}}],[\"handle\",{\"1\":{\"600\":6}}],[\"handleresponse\",{\"1\":{\"424\":6}}],[\"handler\",{\"1\":{\"255\":3}}],[\"have\",{\"1\":{\"230\":1}}],[\"having\",{\"1\":{\"168\":1,\"186\":1,\"192\":3,\"195\":1}}],[\"hbase\",{\"1\":{\"111\":1,\"366\":1}}],[\"该接口仅有这个方法\",{\"1\":{\"715\":1}}],[\"该接口实现类的实例将获得一个resourceloader的引用\",{\"1\":{\"715\":1}}],[\"该接口实现类的实例可以获得一个resource实例\",{\"1\":{\"715\":1}}],[\"该前缀用于从文件系统中读取资源\",{\"1\":{\"707\":1}}],[\"该前缀用于访问基于ftp协议的网络资源\",{\"1\":{\"707\":1}}],[\"该前缀用于访问基于http协议的网络资源\",{\"1\":{\"707\":1}}],[\"该注解有一个required属性\",{\"1\":{\"646\":1}}],[\"该注解可以标注在哪里\",{\"1\":{\"646\":1}}],[\"该注解通常作用在控制层\",{\"1\":{\"644\":1}}],[\"该注解通常作用在业务层\",{\"1\":{\"644\":1}}],[\"该注解用于将数据访问层\",{\"1\":{\"644\":1}}],[\"该注解用于描述\",{\"1\":{\"644\":1}}],[\"该方法将会有spring容器负责调用\",{\"1\":{\"718\":1}}],[\"该方法将由spring容器负责调用\",{\"1\":{\"718\":1}}],[\"该方法接受一个代表资源路径的字符串参数\",{\"1\":{\"708\":1,\"709\":1}}],[\"该方法会根据他的参数对该类的构造函数进行搜索并返回对应的构造函数\",{\"1\":{\"581\":1}}],[\"该方法调用无参构造器\",{\"1\":{\"581\":1}}],[\"该方法从一个空表开始\",{\"1\":{\"39\":1}}],[\"该循环执行时\",{\"1\":{\"570\":1}}],[\"该指令是无法直接删除运行中的容器\",{\"1\":{\"541\":1}}],[\"该指令即查看名为\",{\"1\":{\"538\":1}}],[\"该指令一次性清除所有的停止状态的容器\",{\"1\":{\"527\":1}}],[\"该字节的后六位表示entry中存储的string长度\",{\"1\":{\"444\":1}}],[\"该类型\",{\"1\":{\"398\":1}}],[\"该类参数作为输出\",{\"1\":{\"248\":1}}],[\"该类参数作为输入\",{\"1\":{\"248\":1}}],[\"该参数是可选的指定函数是全局函数还是局部函数\",{\"1\":{\"293\":1}}],[\"该参数有三个值\",{\"1\":{\"65\":1}}],[\"该sql代表的意思是\",{\"1\":{\"234\":1}}],[\"该值为索引字段最大可能长度\",{\"1\":{\"231\":1}}],[\"该日志文件由两部分组成\",{\"1\":{\"74\":1,\"77\":1}}],[\"该项目主要记录了本人在计算机技术学习道路上的收获和总结\",{\"1\":{\"1\":1}}],[\"头插法建立单链表\",{\"1\":{\"39\":1}}],[\"浪费内存\",{\"1\":{\"443\":1}}],[\"浪费大量的磁盘io\",{\"1\":{\"134\":1}}],[\"浪费了存储空间\",{\"1\":{\"39\":1}}],[\"浪费更多的资源\",{\"1\":{\"18\":1}}],[\"指的是只要事务成功结束\",{\"1\":{\"733\":1}}],[\"指的是在并发环境中\",{\"1\":{\"733\":1}}],[\"指示此资源是否具有开放流的句柄\",{\"1\":{\"705\":1}}],[\"指spring创建对象的过程中\",{\"1\":{\"694\":1}}],[\"指运行前编译\",{\"1\":{\"677\":1}}],[\"指令官方文档\",{\"1\":{\"493\":1}}],[\"指令汇总\",{\"0\":{\"493\":1}}],[\"指令顺序执行\",{\"1\":{\"492\":1}}],[\"指令检测\",{\"1\":{\"487\":1}}],[\"指令追加消息时自动创建\",{\"1\":{\"387\":1}}],[\"指令\",{\"1\":{\"363\":1,\"480\":1,\"496\":1,\"515\":1}}],[\"指定参数名\",{\"1\":{\"755\":1}}],[\"指定参数所在位置的索引\",{\"1\":{\"755\":1}}],[\"指定属性值\",{\"1\":{\"754\":1}}],[\"指定属性名\",{\"1\":{\"754\":1}}],[\"指定的类型\",{\"1\":{\"752\":1}}],[\"指定方法名\",{\"1\":{\"749\":1}}],[\"指定配置文件时使用通配符\",{\"1\":{\"723\":1}}],[\"指定多个时使用\",{\"1\":{\"684\":1}}],[\"指定bean的名字\",{\"1\":{\"646\":1}}],[\"指定在原有扫描规则的基础上追加的规则\",{\"1\":{\"643\":1}}],[\"指定排除规则\",{\"1\":{\"643\":1}}],[\"指定内容的构造法\",{\"1\":{\"622\":1}}],[\"指定容量的构造法\",{\"1\":{\"622\":1}}],[\"指定返回值的数据类型\",{\"1\":{\"583\":1}}],[\"指定断点进入条件\",{\"1\":{\"553\":1}}],[\"指定目录内文件\",{\"1\":{\"553\":2}}],[\"指定镜像作者\",{\"1\":{\"515\":1}}],[\"指定基础镜像\",{\"1\":{\"493\":1}}],[\"指定了基础镜像\",{\"1\":{\"490\":1}}],[\"指定要排除的组件\",{\"1\":{\"643\":1}}],[\"指定要创建的目标镜像名\",{\"1\":{\"515\":1}}],[\"指定要运行的镜像\",{\"1\":{\"476\":1}}],[\"指定要连接的redis节点的端口\",{\"1\":{\"374\":1}}],[\"指定要连接的redis节点的ip地址\",{\"1\":{\"374\":1}}],[\"指定redis的访问密码\",{\"1\":{\"374\":1}}],[\"指定分片集群的每一个节点信息\",{\"1\":{\"348\":1}}],[\"指定集群中每个master的副本个数为1\",{\"1\":{\"343\":1}}],[\"指定主节点信息\",{\"1\":{\"333\":1}}],[\"指定函数名称\",{\"1\":{\"293\":1}}],[\"指定字段\",{\"1\":{\"188\":1}}],[\"指定字段添加数据\",{\"1\":{\"182\":1}}],[\"指在insert\",{\"1\":{\"155\":1}}],[\"指针\",{\"1\":{\"467\":1}}],[\"指针的跨度不同\",{\"1\":{\"453\":1}}],[\"指针位置\",{\"1\":{\"417\":1}}],[\"指针跟着减少\",{\"1\":{\"124\":1}}],[\"指针域\",{\"1\":{\"39\":1}}],[\"指向了\",{\"1\":{\"577\":1}}],[\"指向数据的真实存储空间地址\",{\"1\":{\"467\":1}}],[\"指向真实数据\",{\"1\":{\"458\":1}}],[\"指向\",{\"1\":{\"115\":1}}],[\"指向的一的一方的主键\",{\"1\":{\"93\":1}}],[\"指向上一个版本\",{\"1\":{\"84\":1}}],[\"指向这条记录的上一个版本\",{\"1\":{\"84\":1}}],[\"指维护一个数据的多个版本\",{\"1\":{\"81\":1}}],[\"指出运算的具体操作步骤\",{\"1\":{\"35\":1}}],[\"指出运算的功能\",{\"1\":{\"35\":1}}],[\"通俗说\",{\"1\":{\"661\":3}}],[\"通信设备和相应的网络协议组成\",{\"1\":{\"787\":1}}],[\"通信子网由各种传输介质\",{\"1\":{\"787\":1}}],[\"通信链路\",{\"1\":{\"785\":1}}],[\"通信一般分两步\",{\"1\":{\"423\":1}}],[\"通信协议resp\",{\"0\":{\"422\":1},\"1\":{\"267\":1}}],[\"通知用户进程\",{\"1\":{\"414\":1}}],[\"通知\",{\"1\":{\"326\":1,\"330\":1,\"661\":1}}],[\"通配符其他使用\",{\"1\":{\"723\":1}}],[\"通配\",{\"1\":{\"197\":1}}],[\"通用\",{\"1\":{\"461\":1}}],[\"通用命令\",{\"1\":{\"361\":1}}],[\"通用语法\",{\"0\":{\"175\":1}}],[\"通用表空间需要通过\",{\"1\":{\"70\":1}}],[\"通用表空间\",{\"0\":{\"70\":1}}],[\"通过通信设备与线路连接起来\",{\"1\":{\"780\":1}}],[\"通过这种机制\",{\"1\":{\"765\":1}}],[\"通过ioc容器获取bean并使用\",{\"1\":{\"764\":1}}],[\"通过组件类的setxxx\",{\"1\":{\"754\":1}}],[\"通过配置让框架实现功能\",{\"1\":{\"735\":1}}],[\"通过配置项\",{\"1\":{\"450\":1}}],[\"通过servlet或listener来初始化ioc容器\",{\"1\":{\"727\":1}}],[\"通过classloader的getresource方法实现\",{\"1\":{\"723\":1}}],[\"通过搜索文件系统路径下的xml文件创建applicationcontext\",{\"1\":{\"723\":1}}],[\"通过applicationcontext访问资源\",{\"1\":{\"716\":1}}],[\"通过给定的数组创建了一个bytearrayinputstream\",{\"1\":{\"712\":1}}],[\"通过读取类路径下的\",{\"1\":{\"695\":1}}],[\"通过注解\",{\"1\":{\"739\":1}}],[\"通过注解操作对象\",{\"1\":{\"683\":1}}],[\"通过注解实现自动装配的步骤如下\",{\"1\":{\"641\":1}}],[\"通过validator接口实现\",{\"0\":{\"681\":1}}],[\"通过云原生技术为公司实现降本增效\",{\"1\":{\"677\":1}}],[\"通过继承被代理的目标类\",{\"1\":{\"663\":1}}],[\"通过目标对象来实现核心业务逻辑\",{\"1\":{\"657\":1}}],[\"通过bean标签配置ioc容器所管理的bean\",{\"1\":{\"651\":1}}],[\"通过文件系统路径读取\",{\"1\":{\"695\":1}}],[\"通过文件路径转变成全类名\",{\"1\":{\"650\":1}}],[\"通过文件名定位\",{\"1\":{\"553\":1}}],[\"通过name找不到的话会自动启动通过类型bytype\",{\"1\":{\"647\":1}}],[\"通过jvm解释的含义都是相同的\",{\"1\":{\"613\":1}}],[\"通过finally可以保证锁会被释放\",{\"1\":{\"600\":1}}],[\"通过反序列化\",{\"1\":{\"581\":1}}],[\"通过反射机制\",{\"1\":{\"581\":1}}],[\"通过方法来控制成员变量的操作\",{\"1\":{\"575\":1}}],[\"通过封装\",{\"1\":{\"575\":1}}],[\"通过该配置文件导入的也是\",{\"1\":{\"525\":1}}],[\"通过编写\",{\"1\":{\"490\":1}}],[\"通过编码实现\",{\"1\":{\"421\":1}}],[\"通过适当的配置和环境准备\",{\"1\":{\"483\":1}}],[\"通过使用extends关键字\",{\"1\":{\"483\":1}}],[\"通过一个单独的\",{\"1\":{\"478\":1}}],[\"通过一个迭代器函数来遍历所有值\",{\"1\":{\"291\":1}}],[\"通过前面的描述\",{\"1\":{\"470\":1}}],[\"通过对单线程网络模型的分析\",{\"1\":{\"463\":1}}],[\"通过首字节的字符来区分不同数据类型\",{\"1\":{\"423\":1}}],[\"通过命令可以查看集群状态\",{\"1\":{\"343\":1}}],[\"通过ps查看状态\",{\"1\":{\"342\":1}}],[\"通过执行\",{\"1\":{\"322\":1}}],[\"通过实现\",{\"1\":{\"320\":1}}],[\"通过汇聚各种设计精良的\",{\"1\":{\"306\":1}}],[\"通过redis\",{\"1\":{\"299\":2}}],[\"通过have\",{\"1\":{\"230\":1}}],[\"通过慢查询日志\",{\"1\":{\"229\":1}}],[\"通过以下指令重新启动mysql服务器进行测试\",{\"1\":{\"229\":1}}],[\"通过以下sql\",{\"1\":{\"147\":1}}],[\"通过如下指令\",{\"1\":{\"228\":1}}],[\"通过\",{\"1\":{\"228\":1,\"307\":1,\"461\":1,\"474\":1,\"539\":2,\"540\":2,\"643\":1,\"691\":1,\"693\":2}}],[\"通过创建覆盖索引能够比较好地提高性能\",{\"1\":{\"220\":1}}],[\"通过有序索引顺序扫描直接返回有序数据\",{\"1\":{\"211\":1}}],[\"通过表的索引或全表扫描\",{\"1\":{\"211\":1}}],[\"通过视图用户只能查询和修改他们所能见到的数据\",{\"1\":{\"169\":1}}],[\"通过索引列对数据进行排序\",{\"1\":{\"116\":1}}],[\"通过节点中存储后续节点的指针来进行连接\",{\"1\":{\"39\":1}}],[\"通常可以使用如下实现类\",{\"1\":{\"722\":1}}],[\"通常也是以resource的方式来访问配置文件的\",{\"1\":{\"721\":1}}],[\"通常建议采用第二种方法\",{\"1\":{\"719\":1}}],[\"通常来讲\",{\"1\":{\"686\":1}}],[\"通常是原来容量的\",{\"1\":{\"627\":1}}],[\"通常是用户进行使用\",{\"1\":{\"614\":1}}],[\"通常是dba\",{\"1\":{\"197\":1}}],[\"通常有\",{\"1\":{\"595\":1}}],[\"通常包含\",{\"1\":{\"560\":1}}],[\"通常用于描述镜像\",{\"1\":{\"493\":1}}],[\"通常用于安装软件包\",{\"1\":{\"493\":1}}],[\"通常用于临时表及缓存\",{\"1\":{\"239\":1}}],[\"通常只需要掌握基本数据类型即可\",{\"1\":{\"377\":1,\"397\":1}}],[\"通常只需要一次检索就可以了\",{\"1\":{\"123\":1}}],[\"通常情况下\",{\"1\":{\"599\":1}}],[\"通常情况下用于指示发生了异常情况\",{\"1\":{\"595\":1}}],[\"通常情况下不会使用\",{\"1\":{\"357\":1}}],[\"通常情况下使用数组来表述线性表的顺序存储结构\",{\"1\":{\"38\":1}}],[\"通常会被配置成自动驱逐缓存中元素\",{\"1\":{\"283\":1}}],[\"通常会给定查询条件\",{\"1\":{\"127\":1}}],[\"通常使用较少\",{\"1\":{\"117\":1}}],[\"通常头指针来标示一个单链表\",{\"1\":{\"39\":1}}],[\"通常作为一个整体进行考虑和处理\",{\"1\":{\"34\":1}}],[\"单例模式\",{\"1\":{\"764\":1}}],[\"单元测试junit\",{\"0\":{\"696\":1}}],[\"单独使用\",{\"1\":{\"646\":1}}],[\"单独作为一个章节\",{\"1\":{\"181\":1}}],[\"单行字符串\",{\"1\":{\"423\":1,\"424\":1}}],[\"单行注释\",{\"1\":{\"175\":1,\"560\":2}}],[\"单个\",{\"1\":{\"401\":1}}],[\"单线程网络模型的整个过程\",{\"1\":{\"462\":1}}],[\"单线程网络模型\",{\"0\":{\"462\":1}}],[\"单线程\",{\"1\":{\"367\":1}}],[\"单点能存储的数据量难以满足海量数据需求\",{\"1\":{\"320\":1}}],[\"单点redis的问题\",{\"1\":{\"320\":1}}],[\"单节点上的内存占用不要太大\",{\"1\":{\"303\":1}}],[\"单节点\",{\"1\":{\"295\":1,\"320\":1}}],[\"单体系统\",{\"1\":{\"277\":1}}],[\"单位是毫秒\",{\"1\":{\"309\":1}}],[\"单位\",{\"1\":{\"229\":1,\"349\":1}}],[\"单列\",{\"0\":{\"135\":1}}],[\"单列索引\",{\"1\":{\"129\":1,\"135\":1}}],[\"单链表上基本操作的实现\",{\"1\":{\"39\":1}}],[\"单链表元素离散的分布在存储空间中\",{\"1\":{\"39\":1}}],[\"单链表的特点\",{\"1\":{\"39\":1}}],[\"单链表中节点类型的描述\",{\"1\":{\"39\":1}}],[\"单链表\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"单层循环相对来讲是比较简单的\",{\"1\":{\"23\":1}}],[\"单层循环\",{\"0\":{\"23\":1},\"1\":{\"22\":1}}],[\">目标对象方法执行完毕\",{\"1\":{\"665\":1,\"670\":1}}],[\">目标对象方法执行之前\",{\"1\":{\"665\":1,\"670\":1}}],[\">目标对象方法出现异常时\",{\"1\":{\"665\":1,\"670\":1}}],[\">目标对象方法返回值之后\",{\"1\":{\"665\":1,\"670\":1}}],[\">异常通知\",{\"1\":{\"665\":1,\"669\":1}}],[\">返回通知\",{\"1\":{\"665\":1,\"669\":1}}],[\">后置通知\",{\"1\":{\"665\":1}}],[\">前置通知\",{\"1\":{\"665\":1,\"668\":2,\"669\":1}}],[\"><\",{\"1\":{\"643\":1,\"651\":1,\"674\":6,\"718\":1,\"739\":1,\"749\":1,\"757\":2,\"761\":1}}],[\">子类\",{\"1\":{\"577\":1}}],[\">父类\",{\"1\":{\"577\":1}}],[\">包装类型\",{\"1\":{\"562\":1}}],[\">基础类型\",{\"1\":{\"562\":1}}],[\">5000\",{\"1\":{\"536\":1}}],[\">reply\",{\"1\":{\"464\":1}}],[\">buf写不下\",{\"1\":{\"464\":1}}],[\">beforesleep\",{\"1\":{\"464\":1}}],[\">proc\",{\"1\":{\"464\":1}}],[\">ptr\",{\"1\":{\"464\":5}}],[\">lastcmd\",{\"1\":{\"464\":1}}],[\">length\",{\"1\":{\"434\":12}}],[\">cmd\",{\"1\":{\"464\":2}}],[\">conn\",{\"1\":{\"464\":1}}],[\">argv\",{\"1\":{\"464\":3}}],[\">guerybuf+qblen\",{\"1\":{\"464\":1}}],[\">querybuf\",{\"1\":{\"464\":2}}],[\">querybuf缓冲区大小\",{\"1\":{\"464\":1}}],[\">stop\",{\"1\":{\"464\":2}}],[\">ht\",{\"1\":{\"437\":1}}],[\">hashfunction\",{\"1\":{\"437\":1}}],[\">type\",{\"1\":{\"437\":1}}],[\">>=\",{\"1\":{\"563\":1}}],[\">>>\",{\"1\":{\"563\":1}}],[\">>\",{\"1\":{\"434\":1,\"529\":1,\"563\":1,\"627\":1}}],[\">encoding\",{\"1\":{\"434\":3}}],[\">data\",{\"1\":{\"39\":1}}],[\">next\",{\"1\":{\"39\":4}}],[\">\",{\"1\":{\"38\":1,\"88\":1,\"101\":1,\"123\":1,\"131\":3,\"141\":1,\"142\":1,\"189\":1,\"192\":2,\"207\":2,\"256\":1,\"284\":1,\"293\":2,\"336\":1,\"353\":2,\"355\":1,\"362\":2,\"396\":1,\"434\":3,\"439\":1,\"518\":1,\"525\":1,\"537\":2,\"563\":1,\"581\":1,\"622\":1,\"623\":3,\"626\":1,\"627\":3,\"642\":4,\"643\":18,\"647\":1,\"650\":4,\"651\":6,\"658\":1,\"664\":6,\"665\":5,\"674\":3,\"677\":3,\"681\":2,\"684\":1,\"690\":5,\"699\":5,\"700\":22,\"718\":2,\"719\":4,\"730\":17,\"731\":1,\"737\":2,\"739\":6,\"749\":19,\"752\":3,\"754\":8,\"755\":6,\"757\":12,\"758\":29,\"759\":8,\"760\":50,\"761\":2,\"762\":11,\"763\":3,\"764\":9,\"765\":3,\"766\":10}}],[\">=\",{\"1\":{\"26\":1,\"38\":4,\"101\":1,\"189\":1,\"434\":1,\"439\":1,\"563\":1}}],[\"用instanceof关键字做判断时\",{\"1\":{\"752\":1}}],[\"用\",{\"1\":{\"600\":1,\"667\":1}}],[\"用在方法签名中\",{\"1\":{\"597\":1}}],[\"用弹出框的方式找出来\",{\"1\":{\"552\":1}}],[\"用得最多\",{\"1\":{\"550\":1}}],[\"用此快捷键就可以在子视图中切换\",{\"1\":{\"550\":2}}],[\"用面向对象的思想来看\",{\"1\":{\"508\":1}}],[\"用这种消耗去换取内存空间\",{\"1\":{\"471\":1}}],[\"用当前时间减去最后一次访问时间\",{\"1\":{\"458\":1}}],[\"用以节省内存\",{\"1\":{\"419\":1}}],[\"用最少的命令达到相同效果\",{\"1\":{\"322\":1}}],[\"用新的\",{\"1\":{\"321\":1}}],[\"用标准的\",{\"1\":{\"288\":1}}],[\"用法如下\",{\"1\":{\"598\":1,\"600\":1}}],[\"用法\",{\"1\":{\"248\":1}}],[\"用户使用网络就像使用一台单一的超级计算机\",{\"1\":{\"783\":1}}],[\"用户透明性观点\",{\"0\":{\"783\":1}}],[\"用户的余额为\",{\"1\":{\"738\":1}}],[\"用户余额为50\",{\"1\":{\"738\":1}}],[\"用户购买图书\",{\"1\":{\"738\":1}}],[\"用户进行只是使用\",{\"1\":{\"614\":1}}],[\"用户进程调用完异步\",{\"1\":{\"414\":1}}],[\"用户进程无需遍历所有\",{\"1\":{\"412\":1}}],[\"用户进程判断\",{\"1\":{\"408\":1}}],[\"用户进程在两个阶段都是非阻塞的状态\",{\"1\":{\"414\":1}}],[\"用户进程在两个阶段都是阻塞状态\",{\"1\":{\"404\":1}}],[\"用户进程在第一个阶段是非阻塞的\",{\"1\":{\"405\":1}}],[\"用户拿到的只是的打包好的jar包或者war包\",{\"1\":{\"612\":1}}],[\"用户在使用时\",{\"1\":{\"612\":1}}],[\"用户登录后\",{\"1\":{\"533\":1}}],[\"用户也可以自建私有仓库来存储和管理自己的\",{\"1\":{\"508\":1}}],[\"用户不需要单独安装\",{\"1\":{\"479\":2}}],[\"用户应用在一阶段都是需要调用\",{\"1\":{\"406\":1}}],[\"用户应用与内核是分离的\",{\"1\":{\"403\":1}}],[\"用户线程才解除阻塞状态\",{\"1\":{\"404\":1}}],[\"用户线程处于阻塞状态\",{\"1\":{\"404\":1}}],[\"用户线程发出\",{\"1\":{\"404\":1}}],[\"用户空间中执行\",{\"1\":{\"407\":1}}],[\"用户空间中创建\",{\"1\":{\"407\":1}}],[\"用户空间内只能执行受限的指令\",{\"1\":{\"403\":1}}],[\"用户空间\",{\"1\":{\"403\":1}}],[\"用户空间与内核空间\",{\"0\":{\"403\":1}}],[\"用户定义的变量无需对其进行声明或者初始化\",{\"1\":{\"245\":1}}],[\"用户变量不用提前声明\",{\"1\":{\"245\":1}}],[\"用户自定义变量是用户根据需要自己定义的变量\",{\"1\":{\"245\":1}}],[\"用户自定义变量\",{\"0\":{\"245\":1}}],[\"用户名长度不超过20个字符\",{\"1\":{\"680\":1}}],[\"用户名\",{\"1\":{\"197\":3,\"198\":3,\"737\":1}}],[\"用户控制\",{\"0\":{\"197\":1}}],[\"用户\",{\"1\":{\"196\":1}}],[\"用户数据报协议是同一层内另一个重要的传输协议\",{\"1\":{\"16\":1}}],[\"用or分割开的条件\",{\"1\":{\"131\":1}}],[\"用来进行通信和资源共享\",{\"1\":{\"786\":1}}],[\"用来访问类加载路径下的资源\",{\"1\":{\"708\":1}}],[\"用来访问网络资源\",{\"1\":{\"707\":1}}],[\"用来输出错误的日志\",{\"1\":{\"705\":1}}],[\"用来将通知方法的某个形参\",{\"1\":{\"669\":2}}],[\"用来将程序员写好的java代码编译成class文件\",{\"1\":{\"611\":1}}],[\"用来rehash\",{\"1\":{\"441\":1}}],[\"用来存储元素\",{\"1\":{\"420\":1}}],[\"用来关联\",{\"1\":{\"406\":1}}],[\"用来获取不同类型的请求参数\",{\"1\":{\"313\":1}}],[\"用来迭代数组\",{\"1\":{\"291\":1}}],[\"用来创建一个空表\",{\"1\":{\"290\":1}}],[\"用来创建数据库用户\",{\"1\":{\"176\":1}}],[\"用来管理数据库\",{\"1\":{\"196\":1}}],[\"用来对数据库中的数据进行查询操作\",{\"1\":{\"176\":1}}],[\"用来对数据库表中的数据进行增删改\",{\"1\":{\"176\":1}}],[\"用来定义数据库对象\",{\"1\":{\"176\":1}}],[\"用来保存要写入到磁盘中的log日志数据\",{\"1\":{\"65\":1}}],[\"用来让两张表的数据之间建立连接\",{\"1\":{\"49\":1}}],[\"用于取代传统java\",{\"1\":{\"727\":1}}],[\"用于服务之间相互通信\",{\"1\":{\"727\":1}}],[\"用于简化jdbc操作\",{\"1\":{\"727\":1}}],[\"用于返回一个resource实例\",{\"1\":{\"715\":1}}],[\"用于抽象对低级资源的访问\",{\"1\":{\"705\":1}}],[\"用于将控制层的类标识为\",{\"1\":{\"644\":1}}],[\"用于将业务层的类标识为\",{\"1\":{\"644\":1}}],[\"用于声明该方法可能抛出的异常\",{\"1\":{\"597\":1}}],[\"用于抛出异常\",{\"1\":{\"597\":1}}],[\"用于捕获异常\",{\"1\":{\"597\":1}}],[\"用于监听\",{\"1\":{\"597\":1}}],[\"用于监听多个fd的集合\",{\"1\":{\"407\":1}}],[\"用于设置对象的初始状态\",{\"1\":{\"588\":1}}],[\"用于在程序中调用方法\",{\"1\":{\"583\":1}}],[\"用于在刷新脏页到磁盘\",{\"1\":{\"77\":1}}],[\"用于在刷新脏页到磁盘时\",{\"1\":{\"74\":1}}],[\"用于持久化数据\",{\"1\":{\"493\":1}}],[\"用于记录对象引用数量\",{\"1\":{\"472\":1}}],[\"用于记录数据被修改前的信息\",{\"1\":{\"78\":1}}],[\"用于对键处理的命令占据一大部分\",{\"1\":{\"466\":1}}],[\"用于\",{\"1\":{\"448\":1}}],[\"用于接收就绪的\",{\"1\":{\"409\":1}}],[\"用于方便地搭建能够处理超高并发\",{\"1\":{\"306\":1}}],[\"用于配合undo\",{\"1\":{\"84\":1}}],[\"用于存储undo\",{\"1\":{\"71\":1}}],[\"用于存储记录\",{\"1\":{\"60\":1}}],[\"用于优化对buffer\",{\"1\":{\"66\":1}}],[\"用于限制存储在表中的数据\",{\"1\":{\"47\":1}}],[\"用字符串pad对str的右边进行填充\",{\"1\":{\"55\":1}}],[\"用字符串pad对str的左边进行填充\",{\"1\":{\"55\":1}}],[\"用引用变量\",{\"1\":{\"38\":1}}],[\"中回滚\",{\"1\":{\"745\":1}}],[\"中被调用\",{\"1\":{\"745\":1}}],[\"中可以使用\",{\"1\":{\"726\":1}}],[\"中可以将一个类定义在另外一个类里面或者方法里面\",{\"1\":{\"580\":1}}],[\"中添加\",{\"1\":{\"643\":1,\"762\":1}}],[\"中需要我们自定义的绝大多数都是\",{\"1\":{\"601\":1}}],[\"中大部分的功能语句都是在方法中执行\",{\"1\":{\"598\":1}}],[\"中所有错误与异常的超类\",{\"1\":{\"595\":1}}],[\"中所有的整数按照升序依次保存在\",{\"1\":{\"432\":1}}],[\"中禁止在匿名内部类中修改外部局部变量\",{\"1\":{\"580\":1}}],[\"中数据类型分\",{\"1\":{\"562\":1}}],[\"中文句\",{\"1\":{\"553\":2,\"554\":2}}],[\"中文句的右侧开头位置\",{\"1\":{\"549\":1,\"553\":1}}],[\"中文句的左侧开头位置\",{\"1\":{\"549\":1,\"553\":1}}],[\"中文字符\",{\"1\":{\"423\":1}}],[\"中管理自己的镜像时\",{\"1\":{\"532\":1}}],[\"中搜索即可\",{\"1\":{\"512\":1}}],[\"中提供的查找功能\",{\"1\":{\"512\":1}}],[\"中提供了\",{\"1\":{\"361\":1,\"623\":1}}],[\"中写入如下内容\",{\"1\":{\"475\":1}}],[\"中有\",{\"1\":{\"472\":1}}],[\"中根据存储的数据类型不同\",{\"1\":{\"469\":1}}],[\"中会根据存储的数据类型不同\",{\"1\":{\"468\":1}}],[\"中四种实现方式\",{\"1\":{\"461\":1}}],[\"中尝试做内存淘汰\",{\"1\":{\"458\":1}}],[\"中抽样的索引位置\",{\"1\":{\"456\":1}}],[\"中间节点可以压缩\",{\"1\":{\"451\":1}}],[\"中间节点压缩\",{\"1\":{\"450\":2}}],[\"中间某条指令的失败不会导致前面已做指令的回滚\",{\"1\":{\"401\":1}}],[\"中每个\",{\"1\":{\"443\":1}}],[\"中解决哈希冲的方法是\",{\"1\":{\"437\":1}}],[\"中并没有直接使用\",{\"1\":{\"427\":1}}],[\"中保存的\",{\"1\":{\"427\":1}}],[\"中采用的是\",{\"1\":{\"423\":1}}],[\"中相邻的两个\",{\"1\":{\"419\":1}}],[\"中最常见的一种数据结构\",{\"1\":{\"427\":1}}],[\"中最常见的数据存储类型\",{\"1\":{\"417\":1}}],[\"中最早的\",{\"1\":{\"407\":1}}],[\"中监听\",{\"1\":{\"412\":1}}],[\"中一切皆文件\",{\"1\":{\"406\":1}}],[\"中⼼点是由给定的位置元素决定\",{\"1\":{\"398\":1}}],[\"中使用\",{\"0\":{\"362\":1}}],[\"中操作数据的模块\",{\"1\":{\"360\":1}}],[\"中不包含\",{\"1\":{\"345\":1}}],[\"中至少包含\",{\"1\":{\"345\":1}}],[\"中包含数百万的\",{\"1\":{\"440\":1}}],[\"中包含\",{\"1\":{\"345\":1}}],[\"中选择一个作为新的\",{\"1\":{\"328\":1}}],[\"中能找到\",{\"1\":{\"304\":1}}],[\"中从\",{\"1\":{\"304\":1}}],[\"中的所有操作\",{\"1\":{\"733\":1}}],[\"中的扩容是通过\",{\"1\":{\"627\":1}}],[\"中的底层数组进行操作\",{\"1\":{\"619\":1}}],[\"中的集成配置\",{\"1\":{\"604\":1}}],[\"中的集合\",{\"1\":{\"420\":1}}],[\"中的仓库就是存放\",{\"1\":{\"531\":1}}],[\"中的命令\",{\"1\":{\"464\":1}}],[\"中的命令发送给\",{\"1\":{\"302\":1}}],[\"中的每一个\",{\"1\":{\"450\":1}}],[\"中的每一个dictentry都rehash到dict\",{\"1\":{\"440\":1}}],[\"中的entry\",{\"1\":{\"443\":1}}],[\"中的元素依次添加到列表的\",{\"1\":{\"623\":1}}],[\"中的元素依次添加到列表的末尾\",{\"1\":{\"623\":1}}],[\"中的元素按照升序进行排列存储\",{\"1\":{\"453\":1}}],[\"中的元素唯一\",{\"1\":{\"435\":1}}],[\"中的元素数量超过了\",{\"1\":{\"419\":1}}],[\"中的实现在\",{\"1\":{\"428\":1}}],[\"中的单列集合\",{\"1\":{\"420\":1}}],[\"中的任意数据类型的键和值都会被封装为一个\",{\"1\":{\"467\":1}}],[\"中的任意\",{\"1\":{\"419\":1}}],[\"中的事件类型\",{\"1\":{\"408\":1}}],[\"中的一个文件\",{\"1\":{\"406\":1}}],[\"中的指定元素的排名\",{\"1\":{\"382\":1}}],[\"中的部分是有效部分\",{\"1\":{\"345\":1}}],[\"中的\",{\"1\":{\"304\":1,\"419\":1,\"420\":1,\"439\":1,\"444\":1,\"600\":1,\"626\":1,\"644\":4,\"758\":1}}],[\"中的表\",{\"1\":{\"290\":1}}],[\"中的数据类型\",{\"1\":{\"619\":1}}],[\"中的数据类型有个简单的了解\",{\"1\":{\"290\":1}}],[\"中的数据增多而逐渐增大\",{\"1\":{\"302\":1}}],[\"中的数据\",{\"1\":{\"75\":1}}],[\"中配置\",{\"1\":{\"244\":1,\"303\":1,\"322\":1}}],[\"中配置如下信息\",{\"1\":{\"229\":1}}],[\"中等\",{\"1\":{\"238\":1}}],[\"中等难度\",{\"0\":{\"25\":1}}],[\"中创建名为index\",{\"1\":{\"129\":1}}],[\"中是可以访问该版本的\",{\"1\":{\"88\":1}}],[\"中记录下每一次操作的原数据\",{\"1\":{\"86\":1}}],[\"中\",{\"1\":{\"64\":2,\"312\":1,\"423\":1,\"432\":1,\"445\":1,\"450\":1,\"466\":1,\"475\":1,\"624\":1,\"705\":1,\"718\":1,\"752\":1}}],[\"中查找值与\",{\"1\":{\"434\":1}}],[\"中查找位序为\",{\"1\":{\"38\":1}}],[\"中查找第一个元素值等于\",{\"1\":{\"38\":1}}],[\"中第\",{\"1\":{\"38\":1}}],[\"p=\",{\"1\":{\"761\":1}}],[\"p=5\",{\"1\":{\"633\":1}}],[\"p命名空间\",{\"0\":{\"761\":1}}],[\"phone\",{\"1\":{\"683\":5}}],[\"pwd=45nc\",{\"1\":{\"653\":1}}],[\"pwd=s5ru\",{\"1\":{\"639\":1}}],[\"pwd=sbcw\",{\"1\":{\"630\":1,\"631\":1}}],[\"pwd=6cyn0\",{\"1\":{\"634\":1}}],[\"pwd=nrtj\",{\"1\":{\"173\":1}}],[\"py\",{\"1\":{\"485\":1,\"490\":1,\"493\":1,\"535\":2,\"537\":1}}],[\"python3\",{\"1\":{\"490\":3,\"493\":1}}],[\"python等\",{\"1\":{\"367\":1}}],[\"python\",{\"1\":{\"290\":1,\"485\":1,\"493\":1,\"535\":2,\"537\":1,\"678\":1}}],[\"plain\",{\"1\":{\"765\":1}}],[\"plain==1\",{\"1\":{\"449\":1}}],[\"placeholder>\",{\"1\":{\"762\":1}}],[\"placeholder\",{\"1\":{\"730\":1,\"762\":1}}],[\"placed\",{\"1\":{\"622\":1}}],[\"plan\",{\"1\":{\"346\":1}}],[\"pfmerge\",{\"1\":{\"400\":1}}],[\"pfcount\",{\"1\":{\"400\":1}}],[\"pfadd\",{\"1\":{\"400\":1}}],[\"pending\",{\"1\":{\"387\":2,\"464\":2}}],[\"permissions\",{\"1\":{\"765\":1}}],[\"personvalidator\",{\"1\":{\"681\":2}}],[\"person4\",{\"1\":{\"581\":1}}],[\"person3\",{\"1\":{\"579\":3}}],[\"person2\",{\"1\":{\"579\":3}}],[\"person1\",{\"1\":{\"579\":3}}],[\"persontest\",{\"1\":{\"579\":1}}],[\"person\",{\"1\":{\"579\":10,\"580\":6,\"581\":23,\"585\":4,\"681\":10}}],[\"percentage\",{\"1\":{\"322\":1}}],[\"per\",{\"1\":{\"236\":2}}],[\"performance\",{\"1\":{\"146\":1,\"147\":1,\"351\":1}}],[\"psubscribe\",{\"1\":{\"383\":1}}],[\"ps\",{\"1\":{\"342\":2,\"514\":1,\"521\":1,\"536\":1}}],[\"pid\",{\"1\":{\"634\":2}}],[\"pip3\",{\"1\":{\"490\":1}}],[\"pip\",{\"1\":{\"490\":1}}],[\"ping\",{\"1\":{\"327\":1,\"330\":1,\"339\":1,\"374\":1,\"487\":2}}],[\"pi​\",{\"1\":{\"38\":3}}],[\"pcre\",{\"1\":{\"307\":1}}],[\"purposes\",{\"1\":{\"765\":1}}],[\"purge\",{\"1\":{\"75\":1}}],[\"push\",{\"1\":{\"530\":1,\"533\":2}}],[\"pull\",{\"1\":{\"495\":1,\"496\":1,\"513\":2,\"515\":1,\"535\":1}}],[\"punsubscribe\",{\"1\":{\"383\":1}}],[\"pubsub\",{\"1\":{\"383\":1,\"423\":1}}],[\"publish\",{\"1\":{\"383\":2}}],[\"public\",{\"1\":{\"336\":6,\"349\":2,\"353\":1,\"355\":2,\"356\":1,\"362\":1,\"424\":1,\"572\":1,\"579\":5,\"580\":14,\"581\":3,\"583\":1,\"587\":1,\"590\":2,\"598\":1,\"599\":1,\"600\":3,\"601\":3,\"622\":3,\"623\":10,\"624\":2,\"625\":1,\"626\":4,\"627\":1,\"646\":27,\"647\":12,\"648\":2,\"650\":17,\"651\":4,\"655\":11,\"657\":3,\"658\":5,\"664\":6,\"665\":9,\"667\":1,\"668\":3,\"669\":4,\"670\":1,\"681\":10,\"682\":14,\"683\":13,\"684\":4,\"687\":2,\"690\":2,\"701\":2,\"702\":2,\"705\":2,\"707\":4,\"708\":3,\"709\":3,\"716\":4,\"718\":5,\"719\":6,\"723\":2,\"731\":7,\"737\":10,\"738\":2,\"741\":1,\"742\":1,\"743\":1,\"745\":4,\"746\":6,\"754\":12,\"755\":2,\"758\":10,\"759\":2,\"760\":12,\"762\":1,\"763\":13,\"764\":19,\"765\":5,\"766\":11}}],[\"pub\",{\"1\":{\"383\":2,\"387\":2}}],[\"put\",{\"1\":{\"284\":1,\"650\":2}}],[\"pdai\",{\"1\":{\"268\":1}}],[\"pdf下载\",{\"1\":{\"173\":1}}],[\"p\",{\"1\":{\"204\":1,\"298\":1,\"299\":3,\"342\":1,\"343\":1,\"344\":2,\"374\":1,\"458\":1,\"485\":1,\"499\":1,\"535\":4,\"537\":2,\"549\":1,\"681\":3,\"761\":6}}],[\"p1234\",{\"1\":{\"141\":1,\"142\":1}}],[\"ptr\",{\"1\":{\"84\":2,\"417\":1,\"458\":1,\"467\":1}}],[\"prune\",{\"1\":{\"527\":1}}],[\"provided\",{\"1\":{\"765\":1}}],[\"properly\",{\"1\":{\"765\":1}}],[\"property标签\",{\"1\":{\"754\":1}}],[\"property\",{\"1\":{\"730\":1,\"762\":2}}],[\"property>\",{\"1\":{\"690\":1,\"739\":1,\"757\":3,\"758\":1,\"759\":1,\"760\":4}}],[\"propertes\",{\"1\":{\"687\":1}}],[\"propertes和messages\",{\"1\":{\"687\":1}}],[\"propertes配置文件\",{\"1\":{\"687\":1}}],[\"propertes两个配置文件\",{\"1\":{\"687\":1}}],[\"properties配置文件\",{\"1\":{\"687\":1}}],[\"properties和messages\",{\"1\":{\"687\":1}}],[\"properties\",{\"1\":{\"687\":1,\"690\":3,\"730\":2,\"762\":2}}],[\"propagation=\",{\"1\":{\"749\":3}}],[\"propagation属性\",{\"1\":{\"749\":1}}],[\"propagation\",{\"1\":{\"745\":4}}],[\"proposed\",{\"1\":{\"346\":1}}],[\"programmatically\",{\"1\":{\"765\":1}}],[\"programmatic\",{\"1\":{\"765\":1}}],[\"programming\",{\"1\":{\"660\":1,\"726\":1}}],[\"progress\",{\"1\":{\"623\":1}}],[\"proxy包下\",{\"1\":{\"663\":1}}],[\"proxyfactorybean\",{\"1\":{\"765\":2}}],[\"proxyfactory\",{\"1\":{\"658\":4}}],[\"proxy\",{\"1\":{\"634\":8,\"658\":6,\"727\":1}}],[\"project\",{\"1\":{\"549\":1,\"550\":1}}],[\"prototypes\",{\"1\":{\"765\":2}}],[\"prototype\",{\"1\":{\"763\":2,\"764\":1,\"765\":1}}],[\"protocol\",{\"1\":{\"423\":1}}],[\"protected以及\",{\"1\":{\"580\":1}}],[\"protected\",{\"1\":{\"341\":1,\"572\":1,\"580\":1,\"583\":1}}],[\"product\",{\"1\":{\"378\":2}}],[\"product相关的key\",{\"1\":{\"378\":1}}],[\"prohects\",{\"1\":{\"360\":1}}],[\"prority\",{\"1\":{\"328\":1}}],[\"processor\",{\"1\":{\"765\":1}}],[\"process\",{\"1\":{\"764\":1,\"765\":1}}],[\"processinputbuffer\",{\"1\":{\"464\":1}}],[\"processcommand\",{\"1\":{\"458\":1,\"464\":3}}],[\"processes\",{\"1\":{\"308\":1,\"634\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"665\":1,\"670\":1}}],[\"proceed\",{\"1\":{\"346\":1,\"665\":1,\"670\":1}}],[\"procedure\",{\"1\":{\"242\":3,\"248\":1}}],[\"profiling\",{\"1\":{\"230\":1}}],[\"profiling参数\",{\"1\":{\"230\":1}}],[\"profiles\",{\"1\":{\"230\":1}}],[\"profiles分析能够在做sql优化时帮助我们了解时间都耗费到哪去了\",{\"1\":{\"230\":1}}],[\"profile\",{\"1\":{\"230\":3,\"307\":2}}],[\"profile分析\",{\"0\":{\"230\":1}}],[\"profession\",{\"1\":{\"132\":3}}],[\"pro\",{\"1\":{\"132\":3}}],[\"prevent\",{\"1\":{\"449\":1}}],[\"prev\",{\"1\":{\"449\":1}}],[\"previously\",{\"1\":{\"625\":1}}],[\"previous\",{\"1\":{\"445\":1,\"449\":1}}],[\"prelen\",{\"1\":{\"443\":1}}],[\"present\",{\"1\":{\"434\":1,\"626\":2}}],[\"prepend\",{\"1\":{\"434\":3}}],[\"prefix\",{\"1\":{\"424\":2}}],[\"preferred\",{\"1\":{\"336\":2}}],[\"pre\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"price\",{\"1\":{\"378\":1,\"737\":6,\"741\":2,\"742\":2,\"743\":2}}],[\"privdata\",{\"1\":{\"438\":1}}],[\"privatetmp=true\",{\"1\":{\"372\":1}}],[\"private\",{\"1\":{\"336\":1,\"349\":1,\"353\":1,\"362\":2,\"424\":3,\"572\":1,\"575\":1,\"580\":3,\"583\":1,\"600\":1,\"621\":2,\"622\":1,\"627\":3,\"646\":5,\"647\":4,\"650\":5,\"657\":1,\"658\":1,\"665\":1,\"681\":2,\"682\":4,\"683\":3,\"687\":1,\"702\":1,\"718\":1,\"719\":1,\"731\":5,\"737\":3,\"738\":1,\"745\":2,\"754\":4,\"758\":3,\"759\":1,\"760\":4,\"763\":4,\"764\":4,\"766\":2}}],[\"privileges\",{\"1\":{\"198\":1}}],[\"priority值\",{\"1\":{\"328\":1}}],[\"printstacktrace\",{\"1\":{\"424\":2,\"581\":1,\"650\":2,\"658\":1,\"665\":1,\"670\":1,\"742\":1}}],[\"printwriter\",{\"1\":{\"424\":2}}],[\"printf\",{\"1\":{\"297\":1,\"298\":1,\"341\":1,\"342\":2}}],[\"print\",{\"1\":{\"289\":1,\"291\":1,\"293\":1,\"342\":1,\"646\":6,\"647\":5,\"650\":3}}],[\"println\",{\"1\":{\"284\":2,\"353\":2,\"356\":1,\"362\":1,\"424\":7,\"579\":2,\"580\":5,\"581\":2,\"587\":1,\"646\":7,\"647\":5,\"650\":6,\"651\":1,\"655\":16,\"657\":2,\"658\":4,\"664\":4,\"665\":8,\"668\":2,\"669\":3,\"670\":4,\"681\":1,\"682\":2,\"684\":1,\"687\":2,\"690\":1,\"701\":1,\"702\":1,\"707\":4,\"708\":3,\"709\":3,\"716\":2,\"718\":3,\"719\":2,\"723\":4,\"731\":4,\"741\":1,\"742\":1,\"743\":1,\"752\":3,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":8,\"765\":2,\"766\":1}}],[\"printlist\",{\"1\":{\"37\":1}}],[\"primery\",{\"0\":{\"205\":1}}],[\"primary\",{\"1\":{\"49\":1,\"126\":1,\"231\":1,\"234\":1,\"730\":1,\"737\":2}}],[\"payload>\",{\"1\":{\"684\":1}}],[\"payload\",{\"1\":{\"684\":2}}],[\"pass\",{\"1\":{\"634\":4}}],[\"password=\",{\"1\":{\"763\":1,\"764\":1}}],[\"password=123456\",{\"1\":{\"730\":1,\"762\":1}}],[\"password\",{\"1\":{\"159\":2,\"160\":2,\"161\":2,\"197\":1,\"362\":1,\"631\":1,\"730\":3,\"762\":2,\"763\":9,\"764\":10}}],[\"pauserehash\",{\"1\":{\"438\":1}}],[\"packed==2\",{\"1\":{\"449\":1}}],[\"packed\",{\"1\":{\"428\":5}}],[\"packagedirname\",{\"1\":{\"650\":4}}],[\"package=\",{\"1\":{\"643\":4,\"665\":1,\"674\":1,\"700\":1,\"737\":1}}],[\"package\",{\"1\":{\"307\":1,\"309\":2,\"311\":2,\"643\":1,\"646\":1,\"647\":1,\"651\":2,\"683\":1,\"701\":1,\"731\":1,\"763\":1,\"765\":1}}],[\"participate\",{\"1\":{\"765\":1}}],[\"parameter\",{\"1\":{\"646\":1,\"684\":2}}],[\"param\",{\"1\":{\"622\":2,\"623\":4,\"624\":1,\"625\":2,\"626\":2,\"627\":2,\"650\":1,\"765\":1}}],[\"params\",{\"1\":{\"293\":2,\"309\":2}}],[\"parse\",{\"1\":{\"719\":2}}],[\"parseint\",{\"1\":{\"424\":2}}],[\"parselong\",{\"1\":{\"424\":1}}],[\"pattern=\",{\"1\":{\"700\":3}}],[\"pattern\",{\"1\":{\"277\":3,\"383\":4,\"682\":1,\"683\":1,\"765\":1}}],[\"pathwithclass\",{\"1\":{\"650\":4}}],[\"pathvariable\",{\"1\":{\"336\":3}}],[\"path=$\",{\"1\":{\"307\":1}}],[\"path\",{\"1\":{\"68\":1,\"204\":2,\"309\":5,\"311\":1,\"707\":2,\"708\":2,\"709\":1}}],[\"pan\",{\"1\":{\"173\":1,\"630\":1,\"631\":1,\"634\":1,\"639\":1,\"653\":1,\"773\":1}}],[\"pages\",{\"1\":{\"634\":1}}],[\"page2\",{\"1\":{\"207\":1}}],[\"page1\",{\"1\":{\"207\":1}}],[\"page3\",{\"1\":{\"207\":2}}],[\"page\",{\"1\":{\"63\":3,\"75\":1,\"206\":1,\"308\":1,\"634\":3}}],[\"pad\",{\"1\":{\"55\":2}}],[\"pong是\",{\"1\":{\"464\":1}}],[\"pong\",{\"1\":{\"464\":3}}],[\"pointcut=\",{\"1\":{\"749\":1}}],[\"pointcut\",{\"1\":{\"661\":1,\"668\":4,\"674\":12}}],[\"points\",{\"1\":{\"449\":1}}],[\"pointer\",{\"1\":{\"60\":1}}],[\"polyglot\",{\"1\":{\"678\":1}}],[\"poli\",{\"1\":{\"409\":1}}],[\"poll函数\",{\"1\":{\"408\":1}}],[\"pollnval\",{\"1\":{\"408\":1}}],[\"pollerr\",{\"1\":{\"408\":1}}],[\"pollout\",{\"1\":{\"408\":1}}],[\"pollin\",{\"1\":{\"408\":1}}],[\"pollfd数组\",{\"1\":{\"408\":1}}],[\"pollfd结构\",{\"1\":{\"408\":1}}],[\"pollfd\",{\"1\":{\"408\":8}}],[\"poll\",{\"0\":{\"408\":1},\"1\":{\"75\":1,\"406\":2,\"408\":3,\"409\":1,\"412\":2,\"461\":1,\"464\":1}}],[\"pom\",{\"1\":{\"336\":1,\"650\":1,\"762\":1}}],[\"possibly\",{\"1\":{\"765\":1}}],[\"possible\",{\"1\":{\"231\":1,\"765\":1}}],[\"positive\",{\"1\":{\"599\":1}}],[\"position\",{\"1\":{\"434\":4,\"623\":2,\"624\":2,\"625\":3,\"626\":1}}],[\"pos+1\",{\"1\":{\"434\":1}}],[\"pos\",{\"1\":{\"434\":21}}],[\"post\",{\"1\":{\"765\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"764\":1}}],[\"postprocessbeforeinitialization\",{\"1\":{\"764\":1}}],[\"postgres\",{\"1\":{\"480\":3,\"482\":2,\"483\":2}}],[\"postgresql\",{\"1\":{\"306\":1,\"482\":1,\"483\":1}}],[\"post表单参数\",{\"1\":{\"313\":2}}],[\"port变量\",{\"1\":{\"483\":1}}],[\"ports\",{\"1\":{\"480\":2,\"482\":2,\"483\":1}}],[\"port\",{\"1\":{\"296\":1,\"309\":2,\"332\":1,\"333\":2,\"340\":1,\"341\":1,\"362\":1,\"424\":2,\"464\":1,\"483\":1,\"538\":1,\"631\":1}}],[\"pool2<\",{\"1\":{\"362\":1}}],[\"pool刷新到磁盘前\",{\"1\":{\"73\":1}}],[\"pool中\",{\"1\":{\"64\":1}}],[\"pool\",{\"0\":{\"63\":1},\"1\":{\"64\":1,\"66\":1,\"309\":4,\"362\":1,\"730\":1,\"746\":1,\"762\":1}}],[\"假如我们要给\",{\"1\":{\"429\":1}}],[\"假如要监听\",{\"1\":{\"407\":1}}],[\"假如是两次握手时\",{\"1\":{\"18\":1}}],[\"假设用户id为1的用户\",{\"1\":{\"738\":1}}],[\"假设要支撑两种语言\",{\"1\":{\"686\":1}}],[\"假设一个客户端\",{\"1\":{\"410\":1}}],[\"假设\",{\"1\":{\"38\":3,\"128\":1}}],[\"最强王者班\",{\"1\":{\"758\":1}}],[\"最基础的web支持\",{\"1\":{\"727\":1}}],[\"最基本的扫描方式\",{\"1\":{\"643\":1}}],[\"最终获取到对象\",{\"1\":{\"696\":1}}],[\"最终并不会对外部类产生效果\",{\"1\":{\"580\":1}}],[\"最终都会被转发到正确节点\",{\"1\":{\"339\":1}}],[\"最常用的就是使用\",{\"1\":{\"575\":1}}],[\"最常见的创建方式\",{\"1\":{\"581\":1}}],[\"最常见的引用数据类型就是\",{\"1\":{\"562\":1}}],[\"最常见的解释就是nosql\",{\"1\":{\"111\":1}}],[\"最核心的知识\",{\"1\":{\"507\":1}}],[\"最新版替换v后面的版本号即可\",{\"1\":{\"479\":1}}],[\"最新的\",{\"1\":{\"476\":1}}],[\"最少频率使用\",{\"1\":{\"458\":1}}],[\"最少最近使用\",{\"1\":{\"458\":1}}],[\"最多支持\",{\"1\":{\"453\":1}}],[\"最多丢失1秒数据\",{\"1\":{\"322\":1}}],[\"最佳的上限该怎么办\",{\"1\":{\"446\":1}}],[\"最简单的构造表达式是\",{\"1\":{\"290\":1}}],[\"最根本的区别是\",{\"1\":{\"283\":1}}],[\"最大程度地简化了\",{\"1\":{\"719\":1}}],[\"最大支持\",{\"1\":{\"423\":1}}],[\"最大不超过\",{\"1\":{\"412\":1}}],[\"最大的连接数\",{\"1\":{\"362\":1}}],[\"最大空闲连接\",{\"1\":{\"349\":1,\"362\":1}}],[\"最大连接\",{\"1\":{\"349\":1}}],[\"最大缓存设置多少\",{\"1\":{\"275\":1}}],[\"最大值\",{\"1\":{\"191\":1}}],[\"最后合并成一个applicationcontext\",{\"1\":{\"723\":1}}],[\"最后一部分的文件名\",{\"1\":{\"705\":1}}],[\"最后一个激活的工具窗口\",{\"1\":{\"551\":1}}],[\"最后执行\",{\"1\":{\"600\":1}}],[\"最后编写一个释放资源的方法\",{\"1\":{\"353\":1}}],[\"最后是确定下线\",{\"1\":{\"347\":1}}],[\"最后是判断\",{\"1\":{\"328\":1}}],[\"最后\",{\"0\":{\"640\":1},\"1\":{\"329\":1,\"478\":1,\"627\":1,\"687\":1}}],[\"最后返回累计值\",{\"1\":{\"223\":1}}],[\"最后以分号结尾\",{\"1\":{\"179\":1}}],[\"最小空闲连接\",{\"1\":{\"349\":1,\"362\":1}}],[\"最小值\",{\"1\":{\"191\":1}}],[\"最小活跃事务id\",{\"1\":{\"87\":1}}],[\"最左前缀法则指的是查询从索引的最左列开始\",{\"1\":{\"131\":1}}],[\"最左前缀法则\",{\"1\":{\"131\":1}}],[\"最近修改事务的id\",{\"1\":{\"84\":1}}],[\"最坏和平均复杂度都是\",{\"1\":{\"38\":1}}],[\"最坏情况\",{\"1\":{\"38\":3}}],[\"最好情况\",{\"1\":{\"38\":3}}],[\"判断一下有没有接口\",{\"1\":{\"650\":1}}],[\"判断一个元素是否存在于set中\",{\"1\":{\"381\":1}}],[\"判断是否为空\",{\"1\":{\"619\":1}}],[\"判断是否就绪\",{\"1\":{\"408\":1}}],[\"判断元素是大于\",{\"1\":{\"434\":1}}],[\"判断编码是不是超过了当前\",{\"1\":{\"434\":1}}],[\"判断数据类型标示\",{\"1\":{\"424\":1}}],[\"判断key是否存在\",{\"1\":{\"363\":1}}],[\"判断相等的运算符是\",{\"1\":{\"245\":1}}],[\"判断条件不同\",{\"1\":{\"192\":1}}],[\"判断\",{\"1\":{\"38\":2}}],[\"判空操作\",{\"1\":{\"37\":1}}],[\"返回某个文件\",{\"1\":{\"705\":1}}],[\"返回资源的描述\",{\"1\":{\"705\":1}}],[\"返回false\",{\"1\":{\"705\":1}}],[\"返回通知或异常通知\",{\"1\":{\"666\":2}}],[\"返回通知\",{\"1\":{\"661\":1,\"666\":1}}],[\"返回值\",{\"1\":{\"583\":1,\"667\":2}}],[\"返回值类型\",{\"1\":{\"361\":1,\"572\":1,\"583\":2}}],[\"返回数据结构的操作结果作为命令的返回值\",{\"1\":{\"470\":1}}],[\"返回类型错误\",{\"1\":{\"470\":1}}],[\"返回响应结果给客户端\",{\"1\":{\"423\":1}}],[\"返回对应的句柄epfd\",{\"1\":{\"409\":1}}],[\"返回就绪\",{\"1\":{\"408\":1}}],[\"返回输⼊的各个元素\",{\"1\":{\"400\":1}}],[\"返回两个给定位置之间的距离\",{\"1\":{\"398\":1}}],[\"返回⼀个或多个位置元素的\",{\"1\":{\"398\":1}}],[\"返回⼀个或多个位置对象的\",{\"1\":{\"398\":1}}],[\"返回set中元素的个数\",{\"1\":{\"381\":1}}],[\"返回一个资源的uri句柄\",{\"1\":{\"705\":1}}],[\"返回一个url句柄\",{\"1\":{\"705\":1}}],[\"返回一个布尔值\",{\"1\":{\"705\":2}}],[\"返回一个inputstream以从资源中读取\",{\"1\":{\"705\":1}}],[\"返回一个日期\",{\"1\":{\"57\":1}}],[\"返回一段角标范围内的所有元素\",{\"1\":{\"380\":1}}],[\"返回的结果是无\",{\"1\":{\"354\":1}}],[\"返回假数据\",{\"1\":{\"312\":1}}],[\"返回404\",{\"1\":{\"309\":1}}],[\"返回给服务层\",{\"1\":{\"223\":3}}],[\"返回resourceloader对象的应用\",{\"1\":{\"718\":1}}],[\"返回res2\",{\"1\":{\"58\":1}}],[\"返回res1\",{\"1\":{\"58\":1}}],[\"返回起始时间date1和结束时间\",{\"1\":{\"57\":1}}],[\"返回当前时间\",{\"1\":{\"57\":1}}],[\"返回当前日期和时间\",{\"1\":{\"57\":1}}],[\"返回当前日期\",{\"1\":{\"57\":1}}],[\"返回0～1之间的随机数\",{\"1\":{\"56\":1}}],[\"返回字符串str从start位置开始的len个长度的字符串\",{\"1\":{\"55\":1}}],[\"返回其位序\",{\"1\":{\"38\":1}}],[\"返回\",{\"1\":{\"38\":2,\"219\":1}}],[\"返回线性表l的长度\",{\"1\":{\"37\":1}}],[\"插入自定义动态代码模板\",{\"1\":{\"549\":1}}],[\"插入如下配置即可\",{\"1\":{\"475\":1}}],[\"插入新的哈希表\",{\"1\":{\"440\":1}}],[\"插入新元素\",{\"1\":{\"434\":2}}],[\"插入队尾\",{\"1\":{\"434\":1}}],[\"插入队首\",{\"1\":{\"434\":1}}],[\"插入元素\",{\"1\":{\"434\":1}}],[\"插入和删除快\",{\"1\":{\"380\":1}}],[\"插入一条\",{\"1\":{\"356\":1,\"362\":1}}],[\"插入了一个\",{\"1\":{\"354\":1}}],[\"插入到page3的末尾\",{\"1\":{\"207\":1}}],[\"插入数据时\",{\"1\":{\"209\":1}}],[\"插入数据时指定的字段顺序需要于值的顺序是一一对应的\",{\"1\":{\"182\":1}}],[\"插入数据权限\",{\"1\":{\"198\":1}}],[\"插入的数据大小\",{\"1\":{\"182\":1}}],[\"插入\",{\"1\":{\"166\":1,\"228\":1,\"475\":1}}],[\"插入触发器\",{\"0\":{\"159\":1}}],[\"插入或者删除许多行的事务\",{\"1\":{\"65\":1}}],[\"插入结点操作\",{\"1\":{\"39\":1}}],[\"插入成功\",{\"1\":{\"38\":1}}],[\"插入操作\",{\"1\":{\"37\":1,\"38\":1}}],[\"腾出一个空位置插入新元素\",{\"1\":{\"38\":1}}],[\"否则无法进行注入\",{\"1\":{\"754\":1}}],[\"否则没意义\",{\"1\":{\"658\":1}}],[\"否则容易造成无法反射和注入对应的类和对象\",{\"1\":{\"650\":1}}],[\"否则就会报错\",{\"1\":{\"647\":1}}],[\"否则子类也必须定义为抽象类\",{\"1\":{\"591\":1}}],[\"否则该类要定义接口中的所有方法\",{\"1\":{\"590\":1}}],[\"否则结束\",{\"1\":{\"457\":2}}],[\"否则不执行\",{\"1\":{\"378\":1,\"379\":1}}],[\"否则不加\",{\"1\":{\"223\":1}}],[\"否则\",{\"1\":{\"251\":1}}],[\"否则会从行锁升级为表锁\",{\"1\":{\"225\":1}}],[\"否则为using\",{\"1\":{\"212\":1}}],[\"否则返回0\",{\"1\":{\"400\":1}}],[\"否则返回defult\",{\"1\":{\"58\":2}}],[\"否则返回value2\",{\"1\":{\"58\":1}}],[\"否则返回f\",{\"1\":{\"58\":1}}],[\"否则返回false\",{\"1\":{\"37\":1,\"752\":1}}],[\"否则将第\",{\"1\":{\"38\":1}}],[\"个人区域网\",{\"1\":{\"773\":1}}],[\"个人理解\",{\"1\":{\"241\":1}}],[\"个大版本\",{\"1\":{\"725\":1}}],[\"个服务\",{\"1\":{\"480\":1}}],[\"个比特位\",{\"1\":{\"467\":1}}],[\"个节点不压缩\",{\"1\":{\"450\":2}}],[\"个字节来保存这个长度\",{\"1\":{\"445\":1}}],[\"个字节\",{\"1\":{\"443\":1,\"444\":1,\"467\":1}}],[\"个字符\",{\"1\":{\"345\":1}}],[\"个数不同\",{\"1\":{\"586\":1}}],[\"个数的最大值\",{\"1\":{\"450\":1}}],[\"个数\",{\"1\":{\"438\":1}}],[\"个数据\",{\"1\":{\"128\":2}}],[\"个不同元素的基\",{\"1\":{\"400\":1}}],[\"个插槽分配到不同的实例\",{\"1\":{\"345\":1}}],[\"个插槽\",{\"1\":{\"345\":1,\"346\":1}}],[\"个\",{\"1\":{\"321\":3,\"412\":1,\"467\":1,\"623\":1}}],[\"个值\",{\"1\":{\"95\":1}}],[\"个undo\",{\"1\":{\"78\":1}}],[\"个位置结点的概率\",{\"1\":{\"38\":1}}],[\"个位置后的元素前移\",{\"1\":{\"38\":1}}],[\"个位置的元素\",{\"1\":{\"38\":1}}],[\"个位置上插入的一个结点的概率\",{\"1\":{\"38\":2}}],[\"个位置插入新元素\",{\"1\":{\"38\":1}}],[\"个元素的值\",{\"1\":{\"38\":1}}],[\"个元素的存储位置后面紧接着存储的是第\",{\"1\":{\"38\":1}}],[\"个元素及之后的元素后移\",{\"1\":{\"38\":1}}],[\"个元素及其后的所有元素依次往后移动一个位置\",{\"1\":{\"38\":1}}],[\"个元素\",{\"1\":{\"38\":1}}],[\"说明配置成功\",{\"1\":{\"608\":1}}],[\"说明对象的个性较大\",{\"1\":{\"471\":1}}],[\"说明是替换原来的视图\",{\"1\":{\"165\":1}}],[\"说明\",{\"1\":{\"38\":1,\"52\":1,\"146\":1,\"179\":2,\"181\":1,\"198\":1,\"258\":1,\"276\":1,\"302\":1,\"361\":1,\"377\":1,\"397\":1,\"468\":1,\"469\":1,\"644\":1,\"646\":1,\"650\":1}}],[\"开头\",{\"1\":{\"444\":2}}],[\"开机启动\",{\"0\":{\"372\":1}}],[\"开始之前\",{\"0\":{\"636\":1}}],[\"开始新一行\",{\"1\":{\"551\":1}}],[\"开始监听事件循环\",{\"1\":{\"464\":1}}],[\"开始递增的无符号整数\",{\"1\":{\"406\":1}}],[\"开始事务\",{\"1\":{\"401\":2}}],[\"开始值\",{\"1\":{\"392\":1,\"393\":1}}],[\"开始从新的\",{\"1\":{\"329\":1}}],[\"开始时会\",{\"1\":{\"321\":1}}],[\"开始和结束的下标\",{\"1\":{\"293\":1}}],[\"开始\",{\"1\":{\"290\":1,\"641\":1}}],[\"开始的\",{\"1\":{\"38\":6}}],[\"开发应用程序时结构清晰\",{\"1\":{\"726\":1}}],[\"开发应用程序时\",{\"1\":{\"726\":1}}],[\"开发人员可以通过注解在不改变原有代码和逻辑的情况下\",{\"1\":{\"641\":1}}],[\"开发人员和系统工程师可以使用\",{\"1\":{\"306\":1}}],[\"开发者可以将应用程序的构建过程和运行时环境的配置以代码的方式进行描述\",{\"1\":{\"490\":1}}],[\"开发的提供了近乎最佳命中率的高性能的缓存库\",{\"1\":{\"283\":1}}],[\"开发的\",{\"1\":{\"282\":1}}],[\"开发工具\",{\"0\":{\"7\":1}}],[\"开启的新事务和之前的事务不存在嵌套关系\",{\"1\":{\"745\":1}}],[\"开启的话需要在mysql的配置文件\",{\"1\":{\"229\":1}}],[\"开启一个新的事务\",{\"1\":{\"745\":1}}],[\"开启aspectj的自动代理\",{\"1\":{\"665\":1}}],[\"开启此功能后\",{\"1\":{\"643\":1}}],[\"开启组件扫描功能\",{\"1\":{\"643\":1}}],[\"开启组件扫描\",{\"0\":{\"643\":1},\"1\":{\"641\":1}}],[\"开启redis开机自启动\",{\"1\":{\"372\":1}}],[\"开启rdb\",{\"1\":{\"297\":1}}],[\"开启集群功能\",{\"1\":{\"341\":1}}],[\"开启子进程执行\",{\"1\":{\"321\":1}}],[\"开启共享词典\",{\"1\":{\"309\":1}}],[\"开启主从关系\",{\"0\":{\"299\":1}}],[\"开启事务的注解驱动\",{\"1\":{\"739\":1}}],[\"开启事务\",{\"1\":{\"258\":1,\"734\":1}}],[\"开启事务后第一个select语句才是快照读的地方\",{\"1\":{\"83\":1}}],[\"开启profile\",{\"1\":{\"230\":1}}],[\"开启mysql中的慢查询\",{\"1\":{\"229\":1}}],[\"开启从本地加载文件导入数据库的开关\",{\"1\":{\"204\":1}}],[\"开放寻址法\",{\"1\":{\"123\":1}}],[\"每条指令都会创建一个新的镜像层\",{\"1\":{\"492\":1}}],[\"每条保留字指令都必须为大写字母且后面要跟随至少一个参数\",{\"1\":{\"492\":1}}],[\"每种数据类型使用的编码方式如下\",{\"1\":{\"469\":1}}],[\"每部分占用的字节大小为\",{\"1\":{\"432\":1}}],[\"每一次插入数据时都会判断数据是否为整数\",{\"1\":{\"420\":1}}],[\"每一个横切位置看成x轴方向\",{\"1\":{\"661\":1}}],[\"每一个横切关注点上要做的事情都需要写一个方法来实现\",{\"1\":{\"661\":1}}],[\"每一个\",{\"1\":{\"302\":1}}],[\"每隔\",{\"1\":{\"327\":1,\"330\":1}}],[\"每秒刷盘\",{\"1\":{\"322\":1}}],[\"每秒将日志写入并刷新到磁盘一次\",{\"1\":{\"65\":1}}],[\"每页显示的记录数\",{\"1\":{\"194\":1}}],[\"每次购买图书都是在buybook\",{\"1\":{\"745\":1}}],[\"每次实现功能都需要自己编写代码\",{\"1\":{\"734\":1}}],[\"每次大小超过size\",{\"1\":{\"700\":1}}],[\"每次扩容后会变为原来容量的\",{\"1\":{\"627\":1}}],[\"每次向数组中添加元素时\",{\"1\":{\"627\":1}}],[\"每次创建对象时\",{\"1\":{\"588\":1}}],[\"每次访问dict时执行一次rehash\",{\"1\":{\"441\":1}}],[\"每次执行新增\",{\"1\":{\"440\":1}}],[\"每次收缩是根据已使用空间缩小一倍创建一个新的哈希表\",{\"1\":{\"439\":1}}],[\"每次删除元素时\",{\"1\":{\"439\":1}}],[\"每次都要遍历所有\",{\"1\":{\"412\":1}}],[\"每次\",{\"1\":{\"412\":1}}],[\"每次遍历消耗的时间也越久\",{\"1\":{\"408\":1}}],[\"每次操作锁住对应的行数据\",{\"1\":{\"148\":1}}],[\"每次操作锁住整张表\",{\"1\":{\"144\":1}}],[\"每次select\",{\"1\":{\"83\":1}}],[\"每次对某条引记录进行改动时\",{\"1\":{\"60\":1}}],[\"每次对某条记录产生改动时\",{\"1\":{\"60\":1}}],[\"每次递归时\",{\"1\":{\"32\":2}}],[\"每个事务都有各自的完整数据空间\",{\"1\":{\"733\":1}}],[\"每个实现类代表一种资源访问策略\",{\"1\":{\"706\":1}}],[\"每个类的方法中都包含多个连接点\",{\"1\":{\"661\":1}}],[\"每个类都可以有一个或多个构造方法\",{\"1\":{\"588\":1}}],[\"每个对象的属性和方法各自独立\",{\"1\":{\"579\":1}}],[\"每个对象内都维护一份\",{\"1\":{\"572\":1,\"582\":1}}],[\"每个对象都有自己的属性值\",{\"1\":{\"571\":1}}],[\"每个指令都对应一个操作\",{\"1\":{\"489\":1}}],[\"每个服务可以使用不同的镜像\",{\"1\":{\"482\":1}}],[\"每个执行周期100ms\",{\"1\":{\"457\":1}}],[\"每个节点都可以包含多层指针\",{\"1\":{\"455\":1}}],[\"每个节点都包含\",{\"1\":{\"455\":1}}],[\"每个元素都小于\",{\"1\":{\"421\":1}}],[\"每个bit位代表一个fd\",{\"1\":{\"407\":1}}],[\"每个消费组会有个游标\",{\"1\":{\"387\":1}}],[\"每个消息都有一个唯一的\",{\"1\":{\"387\":1}}],[\"每个命令具备原子性\",{\"1\":{\"367\":1}}],[\"每个master包含一个slave节点\",{\"1\":{\"340\":1}}],[\"每个\",{\"1\":{\"339\":2,\"387\":1,\"400\":1,\"412\":1,\"450\":5}}],[\"每个目录都要改\",{\"1\":{\"297\":1}}],[\"每个值以逗号隔开\",{\"1\":{\"293\":1}}],[\"每个页包含了\",{\"1\":{\"207\":1}}],[\"每个页的大小默认为16kb\",{\"1\":{\"60\":1}}],[\"每个page页占据16k\",{\"1\":{\"206\":1}}],[\"每个extent区占据1m\",{\"1\":{\"206\":1}}],[\"每个表的文件表空间包含单个innodb表的数据和索引\",{\"1\":{\"69\":1}}],[\"每个区的大小为1m\",{\"1\":{\"60\":1}}],[\"每个结点插入的时间为\",{\"1\":{\"39\":1}}],[\"每个结点只存储数据元素\",{\"1\":{\"38\":1}}],[\"称为接口静态方法\",{\"1\":{\"590\":1}}],[\"称为内存预分配\",{\"1\":{\"429\":1}}],[\"称为简单动态字符串\",{\"1\":{\"427\":1}}],[\"称之为自适应哈希索引\",{\"1\":{\"66\":1}}],[\"称\",{\"1\":{\"38\":1}}],[\"所购买的两本图书的价格为80和50\",{\"1\":{\"745\":1}}],[\"所在的位置\",{\"1\":{\"719\":1}}],[\"所需要的各种数据在哪里去找即可\",{\"1\":{\"753\":1}}],[\"所需要移动结点的平均次数为\",{\"1\":{\"38\":2}}],[\"所需依赖的基础上再加入下面依赖即可\",{\"1\":{\"664\":1}}],[\"所执行的过程也就会不相同\",{\"1\":{\"577\":1}}],[\"所谓自动拆箱装箱\",{\"1\":{\"562\":1}}],[\"所存储的\",{\"1\":{\"354\":1}}],[\"所设置的全局参数会失效\",{\"1\":{\"244\":1}}],[\"所有细节都需要程序员自己来完成\",{\"1\":{\"734\":1}}],[\"所有键值对都迁徙完毕后\",{\"1\":{\"439\":1}}],[\"所有其它客户端\",{\"1\":{\"406\":1}}],[\"所有没有被sqlwarning或者not\",{\"1\":{\"255\":1}}],[\"所有以02开头的sqlstate代码的简写\",{\"1\":{\"255\":1}}],[\"所有以01开头的sqlstate代码的简写\",{\"1\":{\"255\":1}}],[\"所有存储引擎的功能也在这一层实现\",{\"1\":{\"233\":1}}],[\"所有不是通过索引直接返回排序结果的排序都叫做filesort排序\",{\"1\":{\"211\":1}}],[\"所有权限\",{\"1\":{\"198\":1}}],[\"所有字段\",{\"1\":{\"188\":1}}],[\"所有的配置文件必须放在classpath中\",{\"1\":{\"687\":1}}],[\"所有的排名默认都是升序\",{\"1\":{\"382\":1}}],[\"所有的用户信息和用户权限信息都存储于mysql数据库内的表中\",{\"1\":{\"197\":1}}],[\"所有的刨根问底都造成了真实伤害\",{\"1\":{\"2\":1}}],[\"所有的技术和知识点笔记都是基于官方文档展开编写的\",{\"1\":{\"2\":1}}],[\"所以cdata节中写什么符号都随意\",{\"1\":{\"757\":1}}],[\"所以框架就可以将固定模式的代码抽取出来\",{\"1\":{\"735\":1}}],[\"所以applicationcontext完全支持classpathresource\",{\"1\":{\"721\":1}}],[\"所以校验不通过\",{\"1\":{\"681\":1}}],[\"所以最终效果是动态的\",{\"1\":{\"663\":1}}],[\"所以连接点是类中客观存在的事物\",{\"1\":{\"661\":1}}],[\"所以需要引入新的技术\",{\"1\":{\"655\":1}}],[\"所以需要数据淘汰策略\",{\"1\":{\"275\":1}}],[\"所以根据类型注入就会报错\",{\"1\":{\"647\":1}}],[\"所以不在\",{\"1\":{\"647\":1}}],[\"所以不需要目标类实现接口\",{\"1\":{\"663\":1}}],[\"所以不需要考虑这个问题\",{\"1\":{\"443\":1}}],[\"所以不需要回表查询数据\",{\"1\":{\"133\":1}}],[\"所以该注解是标准注解\",{\"1\":{\"647\":1}}],[\"所以只需要进行运行就可以了\",{\"1\":{\"614\":1}}],[\"所以这里就必须包括编译运行的相关工具\",{\"1\":{\"614\":1}}],[\"所以这里通过位序或者索引进行查找的最好\",{\"1\":{\"38\":1}}],[\"所以我们是没有办法使用命令行运行javac程序的\",{\"1\":{\"604\":1}}],[\"所以我们在创建视图的时候\",{\"1\":{\"164\":1}}],[\"所以一般都是捕获异常或者再往上抛\",{\"1\":{\"599\":1}}],[\"所以一共能存储\",{\"1\":{\"128\":1}}],[\"所以匿名内部类的使用范围非常有限\",{\"1\":{\"580\":1}}],[\"所以首尾是不压缩的\",{\"1\":{\"450\":1}}],[\"所以entry中存储的string长度不能超过63\",{\"1\":{\"444\":1}}],[\"所以为了解决遍历\",{\"1\":{\"443\":1}}],[\"所以增加了\",{\"1\":{\"443\":1}}],[\"所以增加\",{\"1\":{\"443\":1}}],[\"所以读一行\",{\"1\":{\"424\":1}}],[\"所以\",{\"1\":{\"401\":1,\"440\":1,\"443\":1,\"466\":1,\"592\":1,\"735\":1}}],[\"所以hyperloglog\",{\"1\":{\"400\":1}}],[\"所以市面上就出现了很多的客户端\",{\"1\":{\"373\":1}}],[\"所以在使用之前需要导入\",{\"1\":{\"355\":1}}],[\"所以在更新操作时\",{\"1\":{\"225\":1}}],[\"所以可以直接启动服务\",{\"1\":{\"342\":1}}],[\"所以运行方式与nginx基本一致\",{\"1\":{\"308\":1}}],[\"所以推荐使用\",{\"1\":{\"245\":1}}],[\"所以存储引擎也可以被称为表的类型\",{\"1\":{\"234\":1}}],[\"所以插入和删除操作需要移动大量元素\",{\"1\":{\"38\":1}}],[\"dd\",{\"1\":{\"700\":3}}],[\"ddl\",{\"1\":{\"176\":1}}],[\"ddl语句\",{\"0\":{\"177\":1},\"1\":{\"140\":1}}],[\"d3a11e669e88\",{\"1\":{\"522\":1,\"523\":2,\"524\":2}}],[\"dmg\",{\"1\":{\"498\":1}}],[\"dml操作遵循acid模型\",{\"1\":{\"236\":1}}],[\"dml语句\",{\"0\":{\"181\":1}}],[\"dml\",{\"1\":{\"176\":1}}],[\"dynamic\",{\"1\":{\"427\":1}}],[\"druid\",{\"1\":{\"730\":1,\"746\":1,\"762\":1}}],[\"druiddatasource\",{\"1\":{\"730\":3,\"739\":1,\"746\":3,\"762\":2}}],[\"driverclassname\",{\"1\":{\"730\":1,\"762\":1}}],[\"driver=com\",{\"1\":{\"730\":1,\"762\":1}}],[\"driver\",{\"1\":{\"631\":2,\"730\":2,\"746\":1,\"762\":2}}],[\"driven\",{\"1\":{\"403\":1,\"739\":1,\"749\":1,\"765\":1}}],[\"drop\",{\"1\":{\"51\":1,\"129\":1,\"157\":1,\"165\":1,\"178\":1,\"179\":1,\"180\":1,\"197\":1,\"198\":1,\"242\":1}}],[\"during\",{\"1\":{\"765\":1}}],[\"durability\",{\"1\":{\"259\":1,\"733\":1}}],[\"durablity\",{\"1\":{\"76\":1}}],[\"duration\",{\"1\":{\"146\":1,\"285\":1}}],[\"due\",{\"1\":{\"687\":1}}],[\"dump\",{\"1\":{\"321\":2}}],[\"d+\",{\"1\":{\"313\":1}}],[\"dcl全称为data\",{\"1\":{\"196\":1}}],[\"dcl语句\",{\"0\":{\"196\":1}}],[\"dcl\",{\"1\":{\"176\":1}}],[\"dql语法\",{\"0\":{\"186\":1}}],[\"dql语句\",{\"0\":{\"185\":1}}],[\"dql\",{\"1\":{\"176\":1}}],[\"div\",{\"1\":{\"655\":5,\"658\":2,\"664\":2}}],[\"di\",{\"1\":{\"649\":1,\"650\":3,\"693\":1,\"694\":2,\"727\":1,\"754\":3,\"755\":2}}],[\"dict采用渐进式rehash\",{\"1\":{\"441\":1}}],[\"dict收缩\",{\"1\":{\"441\":1}}],[\"dict扩容\",{\"1\":{\"441\":1}}],[\"dict包含两个哈希表\",{\"1\":{\"441\":1}}],[\"dict小结\",{\"0\":{\"441\":1}}],[\"dict的伸缩\",{\"1\":{\"441\":1}}],[\"dict的结构\",{\"1\":{\"441\":1}}],[\"dict的\",{\"1\":{\"440\":1}}],[\"dict在每次新增键值对时都会检查负载因子\",{\"1\":{\"439\":1}}],[\"dicttype\",{\"1\":{\"438\":1}}],[\"dictht\",{\"1\":{\"438\":3}}],[\"dicthashtable\",{\"1\":{\"437\":1}}],[\"dictentry\",{\"1\":{\"437\":1,\"438\":4}}],[\"dictionary\",{\"1\":{\"367\":1}}],[\"dict\",{\"1\":{\"309\":1,\"419\":1,\"420\":2,\"421\":1,\"437\":6,\"438\":4,\"439\":2,\"440\":7,\"456\":10}}],[\"disposablebean\",{\"1\":{\"765\":1}}],[\"disabledefaultconstraintviolation\",{\"1\":{\"684\":1}}],[\"discard\",{\"1\":{\"401\":1}}],[\"diskless\",{\"1\":{\"303\":1}}],[\"distributed\",{\"1\":{\"765\":2}}],[\"distanct\",{\"1\":{\"134\":1}}],[\"distinct\",{\"1\":{\"134\":1,\"168\":1,\"188\":1}}],[\"dirs\",{\"1\":{\"650\":4}}],[\"direction\",{\"1\":{\"449\":1}}],[\"directly\",{\"1\":{\"428\":1,\"765\":1}}],[\"dir\",{\"1\":{\"297\":6,\"321\":1,\"333\":1,\"341\":1,\"480\":1}}],[\"dirty\",{\"1\":{\"63\":1}}],[\"does\",{\"1\":{\"626\":1,\"765\":1}}],[\"dog\",{\"1\":{\"580\":5}}],[\"dokcer\",{\"1\":{\"515\":1}}],[\"dont\",{\"1\":{\"449\":1}}],[\"done\",{\"1\":{\"346\":1}}],[\"docker的教程网络上非常多\",{\"1\":{\"543\":1}}],[\"docker仓库\",{\"0\":{\"530\":1},\"1\":{\"508\":1}}],[\"docker镜像\",{\"0\":{\"510\":1},\"1\":{\"508\":1}}],[\"docker镜像加速\",{\"0\":{\"475\":1}}],[\"docker和普通虚拟机的区别\",{\"0\":{\"505\":1}}],[\"docker通过容器化技术提供了一种便捷\",{\"1\":{\"504\":1}}],[\"docker通过优化资源使用\",{\"1\":{\"504\":1}}],[\"docker拥有丰富的生态系统\",{\"1\":{\"504\":1}}],[\"docker容器\",{\"0\":{\"519\":1},\"1\":{\"508\":1}}],[\"docker容器提供了进程级别的隔离\",{\"1\":{\"504\":1}}],[\"docker容器可以快速启动\",{\"1\":{\"504\":1}}],[\"docker容器可以在不同的操作系统和云平台上运行\",{\"1\":{\"504\":1}}],[\"docker容器的镜像可以被版本控制\",{\"1\":{\"504\":1}}],[\"docker容器共享宿主操作系统的内核\",{\"1\":{\"504\":1}}],[\"docker允许开发人员将应用程序及其所有依赖项打包到一个称为容器的独立单元中\",{\"1\":{\"504\":1}}],[\"docker是一种容器化平台\",{\"1\":{\"504\":1}}],[\"docker是什么\",{\"0\":{\"503\":1}}],[\"docker能干什么\",{\"0\":{\"504\":1}}],[\"dockerfile\",{\"0\":{\"488\":1},\"1\":{\"478\":1,\"489\":3,\"490\":2}}],[\"docker官方安装教程\",{\"0\":{\"501\":1}}],[\"docker官方提供了intel\",{\"1\":{\"498\":1}}],[\"docker官方\",{\"1\":{\"475\":1}}],[\"dockerhub\",{\"1\":{\"475\":1}}],[\"docker桌面\",{\"1\":{\"474\":1}}],[\"docker守护进程\",{\"1\":{\"474\":1}}],[\"docker服务端\",{\"1\":{\"474\":1}}],[\"docker客户端\",{\"1\":{\"474\":1}}],[\"docker架构\",{\"0\":{\"474\":1}}],[\"docker\",{\"0\":{\"473\":1,\"477\":1,\"484\":1,\"488\":1,\"494\":1,\"497\":1,\"502\":1,\"507\":1,\"531\":1,\"534\":1,\"542\":1},\"1\":{\"474\":19,\"475\":13,\"476\":10,\"478\":6,\"479\":9,\"480\":3,\"481\":5,\"482\":2,\"483\":3,\"484\":4,\"485\":4,\"486\":2,\"487\":3,\"489\":4,\"491\":1,\"493\":2,\"494\":5,\"495\":3,\"496\":3,\"498\":7,\"499\":9,\"500\":4,\"501\":6,\"503\":3,\"505\":4,\"506\":1,\"507\":1,\"508\":8,\"509\":15,\"510\":6,\"511\":1,\"512\":8,\"513\":4,\"514\":8,\"515\":9,\"517\":3,\"518\":2,\"519\":2,\"520\":1,\"521\":1,\"522\":1,\"523\":2,\"524\":6,\"525\":4,\"526\":2,\"527\":1,\"528\":1,\"529\":7,\"530\":9,\"531\":4,\"532\":3,\"533\":4,\"534\":1,\"535\":3,\"536\":3,\"537\":2,\"538\":2,\"539\":6,\"540\":4,\"541\":2,\"543\":3}}],[\"documented\",{\"1\":{\"646\":2,\"684\":2}}],[\"document\",{\"1\":{\"428\":1,\"475\":1}}],[\"docs\",{\"1\":{\"368\":1,\"376\":1,\"493\":1,\"498\":1,\"501\":3}}],[\"download\",{\"1\":{\"479\":1}}],[\"downloads\",{\"1\":{\"107\":1,\"603\":1}}],[\"down\",{\"1\":{\"328\":1,\"333\":1,\"481\":1}}],[\"do\",{\"0\":{\"570\":1},\"1\":{\"251\":1,\"252\":1,\"291\":4,\"346\":2,\"434\":1,\"570\":1,\"626\":1,\"765\":2}}],[\"double\",{\"0\":{\"73\":1},\"1\":{\"438\":1,\"454\":1,\"562\":1}}],[\"dbfilename\",{\"1\":{\"321\":1}}],[\"dbms\",{\"1\":{\"106\":1}}],[\"db\",{\"1\":{\"84\":6,\"106\":1,\"480\":4,\"482\":4,\"483\":4}}],[\"dao层执行结束\",{\"1\":{\"646\":2,\"647\":2,\"650\":1}}],[\"dao\",{\"1\":{\"644\":2,\"646\":1,\"650\":1,\"766\":3}}],[\"daemon\",{\"1\":{\"372\":1,\"475\":2,\"493\":1}}],[\"daemonize\",{\"1\":{\"341\":1,\"371\":1}}],[\"daydayup\",{\"1\":{\"499\":1}}],[\"day\",{\"1\":{\"57\":1}}],[\"datebind\",{\"1\":{\"355\":1}}],[\"date2\",{\"1\":{\"57\":2}}],[\"date1\",{\"1\":{\"57\":1}}],[\"datediff\",{\"1\":{\"57\":1}}],[\"date\",{\"1\":{\"57\":5,\"246\":1,\"690\":2,\"700\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"739\":1,\"746\":7}}],[\"datasource\",{\"1\":{\"730\":1,\"739\":2,\"746\":15,\"762\":6}}],[\"data的卷\",{\"1\":{\"483\":1}}],[\"data用于持久化数据库的数据\",{\"1\":{\"482\":1}}],[\"databinder\",{\"1\":{\"681\":3}}],[\"databind<\",{\"1\":{\"355\":1}}],[\"databind\",{\"1\":{\"355\":1}}],[\"databases\",{\"1\":{\"178\":1,\"341\":1}}],[\"database\",{\"1\":{\"106\":1,\"178\":3,\"197\":1,\"321\":1,\"456\":2,\"631\":1,\"730\":1}}],[\"datafile\",{\"1\":{\"70\":1}}],[\"data\",{\"1\":{\"38\":9,\"39\":1,\"68\":1,\"144\":1,\"147\":2,\"176\":4,\"204\":1,\"256\":1,\"336\":1,\"356\":1,\"360\":1,\"362\":1,\"443\":1,\"482\":3,\"483\":3,\"493\":1,\"727\":1,\"741\":1}}],[\"d\",{\"1\":{\"39\":2,\"438\":1,\"485\":1,\"486\":2,\"524\":1,\"528\":1,\"535\":3,\"537\":1,\"549\":1,\"683\":1,\"700\":6,\"733\":1}}],[\"deduced\",{\"1\":{\"765\":1}}],[\"demand\",{\"1\":{\"765\":1}}],[\"demo4\",{\"1\":{\"719\":1}}],[\"demo3\",{\"1\":{\"718\":1}}],[\"demo2\",{\"1\":{\"690\":1,\"716\":1}}],[\"demo1\",{\"1\":{\"687\":1,\"716\":1,\"723\":1}}],[\"deadline\",{\"1\":{\"742\":1}}],[\"debugger\",{\"1\":{\"550\":2}}],[\"debug\",{\"1\":{\"549\":1,\"550\":3,\"551\":3,\"553\":1,\"554\":2,\"556\":3,\"700\":3}}],[\"dev\",{\"1\":{\"480\":1,\"631\":1}}],[\"development\",{\"1\":{\"611\":1}}],[\"devel\",{\"1\":{\"307\":2}}],[\"details\",{\"1\":{\"607\":1}}],[\"detail\",{\"1\":{\"475\":1}}],[\"determinsric\",{\"1\":{\"256\":1}}],[\"decimalmin\",{\"1\":{\"682\":1}}],[\"decimalmax\",{\"1\":{\"682\":1}}],[\"decode\",{\"1\":{\"650\":1}}],[\"decay\",{\"1\":{\"458\":1}}],[\"declear\",{\"1\":{\"254\":1}}],[\"declaredfields\",{\"1\":{\"650\":2}}],[\"declare\",{\"1\":{\"246\":1,\"255\":1}}],[\"dependency\",{\"1\":{\"693\":1,\"694\":1,\"753\":1}}],[\"dependency>\",{\"1\":{\"336\":1,\"353\":2,\"355\":1,\"362\":2,\"642\":4,\"647\":1,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":3,\"749\":1,\"762\":2}}],[\"dependencies>\",{\"1\":{\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"681\":1,\"699\":1,\"730\":1}}],[\"depends\",{\"1\":{\"482\":1}}],[\"depth命令查看\",{\"1\":{\"450\":1}}],[\"depth\",{\"1\":{\"449\":1,\"450\":1}}],[\"delegate\",{\"1\":{\"765\":1}}],[\"delete操作的访问频次\",{\"1\":{\"228\":1}}],[\"delete语句只能按行删除数据\",{\"1\":{\"184\":1}}],[\"delete型触发器\",{\"1\":{\"156\":1}}],[\"delete之前或者之后\",{\"1\":{\"155\":1}}],[\"delete时\",{\"1\":{\"116\":1}}],[\"delete的时候\",{\"1\":{\"85\":1}}],[\"delete的时候产生的便于数据回滚的日志\",{\"1\":{\"85\":1}}],[\"delete\",{\"1\":{\"52\":1,\"82\":1,\"100\":1,\"146\":1,\"147\":1,\"157\":1,\"161\":3,\"184\":1,\"198\":1,\"228\":1,\"549\":2,\"731\":1,\"749\":1}}],[\"delconsumer\",{\"1\":{\"387\":1,\"395\":1}}],[\"delivered\",{\"1\":{\"387\":3}}],[\"delimiter\",{\"1\":{\"242\":1}}],[\"del\",{\"1\":{\"363\":1,\"409\":1}}],[\"design\",{\"1\":{\"765\":1}}],[\"designed\",{\"1\":{\"351\":1}}],[\"desired\",{\"1\":{\"627\":2}}],[\"destroymethod\",{\"1\":{\"764\":3}}],[\"destroy\",{\"1\":{\"387\":1,\"395\":1,\"764\":1,\"765\":1}}],[\"destroylist\",{\"1\":{\"37\":1}}],[\"desktop\",{\"1\":{\"375\":2,\"498\":1,\"499\":2,\"501\":6,\"512\":2}}],[\"description\",{\"1\":{\"512\":1,\"647\":1}}],[\"description=\",{\"1\":{\"493\":1}}],[\"description=redis\",{\"1\":{\"372\":1}}],[\"descriptor\",{\"1\":{\"406\":1}}],[\"desc\",{\"1\":{\"179\":1,\"193\":1,\"213\":1,\"231\":2}}],[\"defrag\",{\"1\":{\"456\":1}}],[\"definition\",{\"1\":{\"176\":1}}],[\"defined\",{\"1\":{\"765\":2}}],[\"define\",{\"1\":{\"38\":1,\"408\":4}}],[\"defaultrolloverstrategy属性如不设置\",{\"1\":{\"700\":1}}],[\"defaultencoding\",{\"1\":{\"690\":1}}],[\"defaultconstraintmessagetemplate\",{\"1\":{\"684\":2}}],[\"defaultcapacity\",{\"1\":{\"621\":1,\"622\":1,\"627\":1}}],[\"default\",{\"1\":{\"52\":1,\"179\":2,\"246\":1,\"308\":1,\"311\":1,\"424\":1,\"566\":1,\"572\":1,\"590\":2,\"621\":1,\"622\":2,\"627\":5,\"634\":2,\"643\":3,\"646\":1,\"647\":7,\"684\":4,\"730\":4,\"737\":7,\"744\":1,\"765\":2}}],[\"defult\",{\"1\":{\"49\":1,\"58\":2,\"178\":1,\"590\":1}}],[\"他们的实现方式不一定相同\",{\"1\":{\"577\":1}}],[\"他们存在着某种关系\",{\"1\":{\"34\":1}}],[\"他还会检查依赖视图中的规则以保持一致性\",{\"1\":{\"166\":1}}],[\"他是一个不可分隔的工作单位\",{\"1\":{\"257\":1}}],[\"他是通过一组任意的存储单元来存储线性表中的数据元素\",{\"1\":{\"39\":1}}],[\"他是用一组地址连续的存储单元依次存储线性表中的数据元素\",{\"1\":{\"38\":1}}],[\"顺序\",{\"1\":{\"690\":1}}],[\"顺序不同\",{\"1\":{\"586\":1}}],[\"顺序插入时\",{\"1\":{\"118\":1}}],[\"顺序表与链表的比较和选择\",{\"0\":{\"43\":1}}],[\"顺序表长度增加\",{\"1\":{\"38\":1}}],[\"顺序表上基本操作的实现\",{\"1\":{\"38\":1}}],[\"顺序表最重要的特点是支持随机访问\",{\"1\":{\"38\":1}}],[\"顺序表中第一个元素存储在线性表的起始位置\",{\"1\":{\"38\":1}}],[\"顺序表中元素的逻辑顺序和实际的物理顺序相同\",{\"1\":{\"38\":1}}],[\"顺序表的存储密度高\",{\"1\":{\"38\":1}}],[\"顺序表的特点\",{\"1\":{\"38\":1}}],[\"顺序表的类型定义\",{\"1\":{\"38\":1}}],[\"顺序表的元素\",{\"1\":{\"38\":1}}],[\"顺序表当前的长度\",{\"1\":{\"38\":1}}],[\"顺序表\",{\"0\":{\"38\":1},\"1\":{\"38\":1}}],[\"顺序存储\",{\"1\":{\"35\":2}}],[\"销毁方法\",{\"1\":{\"764\":1}}],[\"销毁\",{\"1\":{\"764\":1}}],[\"销毁线性表\",{\"1\":{\"37\":1}}],[\"销毁操作\",{\"1\":{\"37\":1}}],[\"按传输介质分类\",{\"0\":{\"778\":1}}],[\"按传输技术分类\",{\"0\":{\"774\":1}}],[\"按交换技术分类\",{\"0\":{\"777\":1}}],[\"按使用者分类\",{\"0\":{\"776\":1}}],[\"按拓扑结构分类\",{\"0\":{\"775\":1}}],[\"按分布范围分类\",{\"0\":{\"773\":1}}],[\"按归属来分\",{\"1\":{\"584\":1}}],[\"按功能来分\",{\"1\":{\"584\":1}}],[\"按住不放\",{\"1\":{\"554\":1}}],[\"按此快捷键可以直接定位到该类中\",{\"1\":{\"553\":1}}],[\"按\",{\"1\":{\"553\":1}}],[\"按钮\",{\"1\":{\"551\":2}}],[\"按切换当前已打开的窗口中的子视图\",{\"1\":{\"550\":1}}],[\"按照新的realesize申请内存空间\",{\"1\":{\"440\":2}}],[\"按照新的编码方式及元素的个数进行数组扩容\",{\"1\":{\"434\":1}}],[\"按照\",{\"1\":{\"421\":1,\"457\":1,\"595\":1}}],[\"按照score排序后\",{\"1\":{\"382\":2}}],[\"按道理来讲get\",{\"1\":{\"354\":1}}],[\"按序号查找结点值\",{\"1\":{\"39\":1}}],[\"按序号查询\",{\"1\":{\"38\":1}}],[\"按序号查询操作的算法\",{\"1\":{\"38\":1}}],[\"按值查找表节点\",{\"1\":{\"39\":1}}],[\"按值查找操作\",{\"1\":{\"37\":1}}],[\"按值查询\",{\"1\":{\"38\":2}}],[\"按前后顺序输出线性表l的所有元素值\",{\"1\":{\"37\":1}}],[\"按位查找操作\",{\"1\":{\"37\":1}}],[\"either\",{\"1\":{\"765\":2}}],[\"e>\",{\"1\":{\"622\":1,\"623\":4}}],[\"e650c5f208da\",{\"1\":{\"517\":2,\"518\":2}}],[\"ee\",{\"1\":{\"503\":1,\"725\":3}}],[\"et\",{\"1\":{\"410\":3}}],[\"etc\",{\"1\":{\"229\":1,\"244\":1,\"307\":2,\"372\":1,\"475\":1,\"634\":1}}],[\"edu\",{\"1\":{\"475\":1}}],[\"edgetriggered\",{\"1\":{\"410\":1}}],[\"edition\",{\"1\":{\"108\":1,\"503\":2}}],[\"epfd\",{\"1\":{\"409\":2}}],[\"epoll实例的句柄\",{\"1\":{\"409\":1}}],[\"epoll\",{\"0\":{\"409\":1},\"1\":{\"406\":2,\"409\":6,\"410\":5,\"411\":1,\"412\":4,\"461\":4,\"464\":1}}],[\"ewouldblock\",{\"1\":{\"405\":1}}],[\"evport\",{\"1\":{\"461\":2}}],[\"evalsha\",{\"1\":{\"386\":1}}],[\"eval\",{\"1\":{\"384\":1,\"385\":2,\"386\":1}}],[\"even\",{\"1\":{\"765\":1}}],[\"eventloop\",{\"1\":{\"464\":9}}],[\"event\",{\"1\":{\"409\":3}}],[\"eventpoll\",{\"1\":{\"409\":2}}],[\"events\",{\"1\":{\"308\":1,\"408\":1,\"409\":2,\"464\":1,\"634\":1}}],[\"everywhere\",{\"1\":{\"556\":1}}],[\"everysec\",{\"1\":{\"322\":2}}],[\"early\",{\"1\":{\"765\":1}}],[\"eagerly\",{\"1\":{\"765\":1}}],[\"eat\",{\"1\":{\"577\":1,\"579\":4}}],[\"ease\",{\"1\":{\"351\":1}}],[\"each\",{\"1\":{\"157\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"ef\",{\"1\":{\"342\":2}}],[\"err\",{\"1\":{\"309\":11}}],[\"errors\",{\"1\":{\"423\":1,\"681\":6,\"765\":1}}],[\"error\",{\"1\":{\"308\":3,\"423\":1,\"529\":2,\"594\":1,\"595\":4,\"601\":1,\"634\":9,\"681\":2,\"700\":2}}],[\"echo\",{\"1\":{\"297\":1,\"333\":1,\"341\":1,\"476\":3,\"496\":2}}],[\"equivalently\",{\"1\":{\"626\":1}}],[\"equals\",{\"1\":{\"626\":2,\"681\":1}}],[\"eq\",{\"1\":{\"231\":1}}],[\"ex\",{\"1\":{\"623\":1,\"665\":2,\"669\":2,\"674\":1}}],[\"exe\",{\"1\":{\"499\":2}}],[\"execution\",{\"1\":{\"665\":5,\"667\":2,\"668\":1,\"669\":3,\"670\":1,\"674\":1,\"749\":1}}],[\"exec\",{\"1\":{\"401\":3,\"524\":4}}],[\"execstart=\",{\"1\":{\"372\":1}}],[\"example\",{\"1\":{\"480\":1,\"482\":1,\"493\":1,\"765\":3}}],[\"exit\",{\"1\":{\"255\":1,\"309\":1,\"515\":1,\"600\":1}}],[\"exists\",{\"1\":{\"165\":1,\"178\":2,\"179\":1,\"242\":1,\"386\":1,\"626\":1,\"705\":2}}],[\"extended\",{\"1\":{\"765\":2}}],[\"extendwith\",{\"1\":{\"702\":2}}],[\"extends\",{\"1\":{\"600\":1,\"601\":1,\"622\":1,\"623\":4,\"684\":1,\"705\":1}}],[\"extension\",{\"1\":{\"702\":1}}],[\"extent\",{\"1\":{\"206\":1}}],[\"extra\",{\"1\":{\"231\":1,\"449\":1}}],[\"except\",{\"1\":{\"765\":1}}],[\"exception\",{\"1\":{\"594\":1,\"595\":6,\"600\":3,\"601\":2,\"650\":1,\"658\":1,\"707\":1,\"708\":2,\"709\":2,\"734\":1,\"749\":3,\"752\":2,\"765\":3}}],[\"exceptfds\",{\"1\":{\"407\":1}}],[\"exclude\",{\"1\":{\"643\":3}}],[\"excluding\",{\"1\":{\"428\":4}}],[\"exclusive\",{\"1\":{\"146\":1}}],[\"excute\",{\"1\":{\"159\":1,\"160\":1,\"161\":1,\"600\":1}}],[\"explicitly\",{\"1\":{\"765\":1}}],[\"explain执行计划各字段的含义\",{\"1\":{\"231\":1}}],[\"explain执行计划\",{\"0\":{\"231\":1}}],[\"explain\",{\"1\":{\"132\":3,\"231\":3}}],[\"expected\",{\"1\":{\"646\":1,\"752\":1}}],[\"expectedmodcount\",{\"1\":{\"623\":1}}],[\"expanded\",{\"1\":{\"621\":1}}],[\"exposing\",{\"1\":{\"765\":1}}],[\"exposes\",{\"1\":{\"765\":1}}],[\"exposed\",{\"1\":{\"765\":4}}],[\"expose\",{\"1\":{\"490\":2,\"493\":2,\"765\":1}}],[\"export\",{\"1\":{\"307\":2,\"525\":1}}],[\"expires\",{\"1\":{\"456\":2}}],[\"expire\",{\"1\":{\"363\":1,\"456\":1}}],[\"expireafterwrite\",{\"1\":{\"285\":1}}],[\"exp3\",{\"1\":{\"291\":1}}],[\"exp2\",{\"1\":{\"291\":1}}],[\"express\",{\"1\":{\"765\":1}}],[\"expression\",{\"1\":{\"727\":1,\"757\":2}}],[\"expression=\",{\"1\":{\"643\":4,\"674\":1}}],[\"expression中设置要排除的类型的全类名\",{\"1\":{\"643\":2}}],[\"expression中设置要排除的注解的全类名\",{\"1\":{\"643\":2}}],[\"expr的值等于val2\",{\"1\":{\"58\":1}}],[\"expr\",{\"1\":{\"57\":1,\"58\":1,\"245\":6}}],[\"empresult\",{\"1\":{\"731\":2}}],[\"emp\",{\"1\":{\"731\":23}}],[\"emp`\",{\"1\":{\"730\":1}}],[\"empty\",{\"1\":{\"37\":1,\"434\":1,\"621\":2,\"622\":6,\"627\":2,\"681\":1}}],[\"embstr的动态字符串\",{\"1\":{\"468\":1}}],[\"embstr\",{\"1\":{\"417\":1,\"468\":1,\"469\":1}}],[\"email\",{\"1\":{\"134\":2,\"682\":1}}],[\"estimate\",{\"1\":{\"765\":1}}],[\"esc\",{\"1\":{\"551\":1,\"553\":1,\"556\":1}}],[\"esists\",{\"1\":{\"363\":1}}],[\"es\",{\"1\":{\"117\":1}}],[\"en\",{\"1\":{\"687\":3,\"690\":1}}],[\"enumeration<url>\",{\"1\":{\"650\":1}}],[\"enum\",{\"1\":{\"647\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"627\":3}}],[\"ensure\",{\"1\":{\"627\":2}}],[\"ensurecapacityinternal\",{\"1\":{\"627\":1}}],[\"ensurecapacity\",{\"1\":{\"627\":2}}],[\"envirnment\",{\"1\":{\"611\":1}}],[\"environment\",{\"1\":{\"480\":1,\"482\":2,\"612\":1}}],[\"env\",{\"1\":{\"493\":2}}],[\"env文件中定义web\",{\"1\":{\"483\":1}}],[\"env文件来配置服务\",{\"1\":{\"483\":1}}],[\"encouraged\",{\"1\":{\"765\":1}}],[\"encoding=\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":2,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"encoding编码\",{\"0\":{\"444\":1}}],[\"encoding\",{\"1\":{\"421\":1,\"432\":1,\"433\":1,\"434\":2,\"443\":2,\"444\":4,\"449\":1,\"458\":1,\"467\":1,\"468\":10}}],[\"enc\",{\"1\":{\"432\":1}}],[\"enter\",{\"1\":{\"550\":1,\"551\":1,\"552\":1,\"553\":1}}],[\"enterprise\",{\"1\":{\"108\":1,\"503\":1}}],[\"entries时\",{\"1\":{\"420\":1}}],[\"entries\",{\"1\":{\"419\":1,\"421\":1,\"449\":1}}],[\"entry>\",{\"1\":{\"760\":4}}],[\"entryset\",{\"1\":{\"650\":1}}],[\"entry<class\",{\"1\":{\"650\":1}}],[\"entrypoint\",{\"1\":{\"493\":2}}],[\"entry\",{\"1\":{\"419\":2,\"421\":1,\"438\":4,\"440\":1,\"443\":1,\"445\":2,\"446\":1,\"449\":3,\"450\":2,\"650\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"746\":2}}],[\"enable\",{\"1\":{\"372\":1}}],[\"enabled\",{\"1\":{\"341\":1}}],[\"engine=innodb\",{\"1\":{\"234\":1,\"730\":1,\"737\":2}}],[\"engines\",{\"1\":{\"234\":1}}],[\"engine\",{\"1\":{\"70\":2,\"475\":1,\"493\":1}}],[\"end网络\",{\"1\":{\"483\":2}}],[\"end块\",{\"1\":{\"246\":1}}],[\"end\",{\"1\":{\"58\":2,\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"242\":1,\"247\":1,\"248\":1,\"249\":2,\"251\":1,\"252\":1,\"253\":2,\"256\":1,\"291\":3,\"292\":2,\"293\":1,\"309\":8,\"380\":1,\"392\":2,\"393\":2,\"399\":1,\"449\":1,\"483\":6,\"549\":1,\"551\":1,\"623\":2}}],[\"el<\",{\"1\":{\"681\":1}}],[\"el=\",{\"1\":{\"464\":1}}],[\"el\",{\"1\":{\"464\":2}}],[\"ele\",{\"1\":{\"421\":1,\"454\":1,\"455\":2}}],[\"elem\",{\"1\":{\"568\":1}}],[\"elementtype\",{\"1\":{\"646\":6,\"647\":4,\"650\":2,\"684\":11}}],[\"elementdata\",{\"1\":{\"621\":3,\"622\":9,\"623\":13,\"624\":1,\"625\":2,\"626\":6,\"627\":7}}],[\"elements\",{\"1\":{\"621\":2,\"622\":2,\"623\":6,\"626\":1,\"627\":2}}],[\"element在前\",{\"1\":{\"421\":1}}],[\"element\",{\"1\":{\"380\":2,\"400\":1,\"421\":1,\"449\":1,\"621\":1,\"623\":8,\"624\":3,\"625\":9,\"626\":10,\"627\":1}}],[\"elemetype\",{\"1\":{\"38\":1,\"39\":1}}],[\"elemtype\",{\"1\":{\"38\":4,\"568\":1}}],[\"elseif\",{\"1\":{\"247\":1}}],[\"else\",{\"1\":{\"58\":2,\"247\":1,\"249\":2,\"292\":1,\"434\":7,\"565\":9,\"622\":4,\"626\":1,\"650\":2,\"681\":1}}],[\"e\",{\"1\":{\"37\":3,\"38\":13,\"293\":2,\"297\":6,\"333\":4,\"424\":4,\"549\":1,\"553\":1,\"581\":2,\"600\":7,\"619\":1,\"623\":14,\"624\":2,\"625\":3,\"626\":3,\"650\":6,\"658\":2,\"707\":2,\"734\":1,\"742\":2}}],[\"求交集\",{\"1\":{\"420\":1}}],[\"求差集\",{\"1\":{\"382\":1}}],[\"求key1和key2的并集\",{\"1\":{\"381\":1}}],[\"求key1与key2的差集\",{\"1\":{\"381\":1}}],[\"求key1与key2的交集\",{\"1\":{\"381\":1}}],[\"求参数x的四舍五入值\",{\"1\":{\"56\":1}}],[\"求表长操作\",{\"1\":{\"39\":1}}],[\"求表长\",{\"1\":{\"37\":1}}],[\"求和\",{\"1\":{\"27\":1,\"28\":1,\"29\":1,\"191\":1}}],[\"lucy\",{\"1\":{\"682\":1}}],[\"lua文件\",{\"0\":{\"312\":1}}],[\"lualib\",{\"1\":{\"309\":2,\"311\":2}}],[\"lua函数可以返回多个结果值\",{\"1\":{\"293\":1}}],[\"lua语言函数可以返回多个值\",{\"1\":{\"293\":1}}],[\"lua语法\",{\"0\":{\"287\":1},\"1\":{\"266\":1}}],[\"lua认为false和nil为假\",{\"1\":{\"292\":1}}],[\"lua\",{\"0\":{\"288\":1},\"1\":{\"288\":2,\"289\":4,\"290\":7,\"293\":3,\"306\":4,\"309\":6,\"311\":10,\"312\":6,\"313\":3,\"384\":2,\"386\":1}}],[\"lua脚本\",{\"0\":{\"384\":1},\"1\":{\"264\":1}}],[\"lzf\",{\"1\":{\"449\":1}}],[\"lzf==2\",{\"1\":{\"449\":1}}],[\"lsb\",{\"1\":{\"428\":5}}],[\"lt\",{\"1\":{\"410\":3,\"757\":1}}],[\"lrange\",{\"1\":{\"380\":1}}],[\"lru\",{\"1\":{\"278\":2,\"285\":1,\"458\":7,\"467\":3}}],[\"lpop\",{\"1\":{\"380\":1}}],[\"lpush\",{\"1\":{\"380\":1}}],[\"lpad\",{\"1\":{\"55\":1}}],[\"lcoal\",{\"1\":{\"313\":1}}],[\"lfu\",{\"1\":{\"278\":2,\"458\":7}}],[\"lan\",{\"1\":{\"773\":1}}],[\"lang\",{\"1\":{\"646\":5,\"647\":5,\"684\":1,\"687\":2,\"743\":1,\"749\":3,\"765\":1}}],[\"language\",{\"1\":{\"106\":1,\"176\":4,\"196\":1,\"687\":1,\"765\":1}}],[\"lazy\",{\"1\":{\"765\":1}}],[\"lazily\",{\"1\":{\"765\":1}}],[\"law\",{\"1\":{\"765\":1}}],[\"label\",{\"1\":{\"493\":2}}],[\"lable\",{\"1\":{\"253\":4}}],[\"latest\",{\"1\":{\"476\":2,\"490\":1,\"493\":1,\"495\":1,\"515\":3,\"517\":1,\"518\":4,\"520\":2,\"522\":1,\"525\":6,\"528\":2,\"530\":2}}],[\"later\",{\"1\":{\"449\":1,\"456\":1}}],[\"latitude\",{\"1\":{\"398\":3}}],[\"larger\",{\"1\":{\"434\":1,\"627\":1}}],[\"layout\",{\"1\":{\"428\":1}}],[\"lastmodified\",{\"1\":{\"705\":2}}],[\"lastret\",{\"1\":{\"623\":1}}],[\"last\",{\"1\":{\"387\":3}}],[\"leifengyang\",{\"1\":{\"769\":2}}],[\"let\",{\"1\":{\"626\":1}}],[\"lettuceclientconfigurationbuilder\",{\"1\":{\"336\":1}}],[\"lettuceclientconfigurationbuildercustomizer\",{\"1\":{\"336\":4}}],[\"lettuceclientconfiguration\",{\"1\":{\"336\":1}}],[\"lettuce\",{\"1\":{\"336\":1,\"348\":1,\"360\":2,\"362\":1}}],[\"level资源的能力\",{\"1\":{\"704\":1}}],[\"level资源的访问\",{\"1\":{\"704\":1}}],[\"level=\",{\"1\":{\"700\":1}}],[\"level指定日志级别\",{\"1\":{\"700\":1}}],[\"leveltriggered\",{\"1\":{\"410\":1}}],[\"level\",{\"1\":{\"261\":1,\"454\":2}}],[\"leading\",{\"1\":{\"741\":1}}],[\"least\",{\"1\":{\"458\":2,\"627\":2}}],[\"leave和iterate相当于编程语言中的\",{\"1\":{\"253\":1}}],[\"leave\",{\"1\":{\"253\":2}}],[\"leaf\",{\"1\":{\"60\":2}}],[\"left\",{\"1\":{\"97\":1,\"626\":1}}],[\"len\",{\"1\":{\"55\":1,\"231\":1,\"424\":7,\"427\":1,\"428\":4,\"449\":1,\"464\":1}}],[\"length+prepend\",{\"1\":{\"434\":1}}],[\"length\",{\"1\":{\"37\":1,\"38\":10,\"39\":3,\"424\":2,\"428\":1,\"432\":1,\"433\":1,\"434\":3,\"443\":1,\"445\":1,\"454\":1,\"621\":1,\"622\":1,\"623\":4,\"627\":2,\"650\":5}}],[\"l为头指针\",{\"1\":{\"39\":1}}],[\"licenses\",{\"1\":{\"765\":1}}],[\"license\",{\"1\":{\"765\":8}}],[\"licensed\",{\"1\":{\"765\":1}}],[\"lifecycle\",{\"1\":{\"764\":1,\"765\":2}}],[\"lib\",{\"1\":{\"229\":1,\"482\":1,\"483\":1}}],[\"link\",{\"1\":{\"623\":1,\"765\":18}}],[\"linkedlist和ziplist\",{\"1\":{\"469\":1}}],[\"linkedlist\",{\"1\":{\"418\":1,\"448\":1,\"468\":1}}],[\"linklist\",{\"1\":{\"39\":5}}],[\"linux学习笔记\",{\"1\":{\"506\":1}}],[\"linux安装\",{\"0\":{\"500\":1}}],[\"linux环境中易于安装\",{\"1\":{\"474\":1}}],[\"linux\",{\"1\":{\"289\":1,\"375\":1,\"403\":3,\"406\":2,\"407\":1,\"479\":1,\"499\":5,\"501\":2,\"503\":1,\"506\":4,\"535\":2,\"650\":4}}],[\"line\",{\"1\":{\"204\":2}}],[\"lines\",{\"1\":{\"204\":1}}],[\"like\",{\"1\":{\"189\":1,\"228\":1,\"236\":1,\"244\":1,\"765\":1}}],[\"limitations\",{\"1\":{\"765\":1}}],[\"limit优化\",{\"0\":{\"217\":1}}],[\"limit\",{\"1\":{\"186\":1,\"187\":1,\"194\":1,\"195\":1}}],[\"listablebeanfactory\",{\"1\":{\"765\":1}}],[\"listaddnodehead\",{\"1\":{\"464\":1}}],[\"list集合类型的bean\",{\"1\":{\"760\":1}}],[\"list>\",{\"1\":{\"690\":1,\"760\":2}}],[\"listfiles\",{\"1\":{\"650\":1}}],[\"list<student>\",{\"1\":{\"760\":3}}],[\"list<emp>\",{\"1\":{\"731\":1}}],[\"list<e>\",{\"1\":{\"619\":1}}],[\"list<object>\",{\"1\":{\"424\":1}}],[\"listpacks\",{\"1\":{\"449\":1}}],[\"listpack\",{\"1\":{\"449\":2}}],[\"listoperations\",{\"1\":{\"361\":1}}],[\"listentoport\",{\"1\":{\"464\":1}}],[\"listen\",{\"1\":{\"308\":1,\"634\":1}}],[\"list3\",{\"1\":{\"202\":1}}],[\"list2\",{\"1\":{\"202\":1,\"249\":2}}],[\"list1\",{\"1\":{\"202\":1,\"249\":2}}],[\"list\",{\"0\":{\"380\":1},\"1\":{\"39\":1,\"201\":1,\"249\":2,\"358\":1,\"377\":1,\"397\":1,\"409\":1,\"418\":2,\"424\":3,\"448\":1,\"450\":4,\"456\":1,\"469\":1,\"618\":2,\"619\":3,\"622\":5,\"623\":12,\"624\":2,\"625\":1,\"626\":8,\"684\":1,\"731\":2,\"760\":4}}],[\"listdelete\",{\"1\":{\"37\":1,\"38\":1}}],[\"listinsert\",{\"1\":{\"37\":1,\"38\":1}}],[\"lnode\",{\"1\":{\"39\":7}}],[\"lowest\",{\"1\":{\"626\":1}}],[\"lower\",{\"1\":{\"55\":1}}],[\"lookup\",{\"1\":{\"647\":1}}],[\"lookupcommand\",{\"1\":{\"464\":1}}],[\"loop\",{\"1\":{\"253\":2}}],[\"loop可以配合以下两个语句使用\",{\"1\":{\"253\":1}}],[\"loop实现简单的循环\",{\"1\":{\"253\":1}}],[\"loop循环\",{\"0\":{\"253\":1}}],[\"long类型的整数的字符串\",{\"1\":{\"468\":1}}],[\"longval\",{\"1\":{\"449\":1}}],[\"longitude\",{\"1\":{\"398\":3}}],[\"long\",{\"1\":{\"229\":2,\"407\":2,\"417\":1,\"424\":1,\"438\":4,\"449\":5,\"454\":2,\"456\":3,\"464\":1,\"562\":1,\"705\":2}}],[\"loading模块\",{\"1\":{\"727\":1}}],[\"loadingcache\",{\"1\":{\"283\":1}}],[\"loadandreadurlresource\",{\"1\":{\"707\":4,\"708\":2,\"709\":2}}],[\"loaddi\",{\"1\":{\"650\":2}}],[\"loadbean\",{\"1\":{\"650\":3}}],[\"load即可\",{\"1\":{\"518\":1}}],[\"load\",{\"1\":{\"204\":1,\"386\":1,\"518\":1}}],[\"load指令可以将文件内的数据\",{\"1\":{\"204\":1}}],[\"location=\",{\"1\":{\"730\":1,\"762\":1}}],[\"locations\",{\"1\":{\"702\":1,\"731\":1,\"738\":1}}],[\"location\",{\"1\":{\"308\":2,\"309\":1,\"311\":1,\"313\":1,\"634\":5,\"715\":1}}],[\"locateelem\",{\"1\":{\"37\":1,\"38\":1}}],[\"locale\",{\"1\":{\"687\":5,\"690\":2}}],[\"locale创建默认locale对象时使用的静态方法\",{\"1\":{\"687\":1}}],[\"locale包含了language信息和country信息\",{\"1\":{\"687\":1}}],[\"locale用于指定当前用户所属的语言环境等信息\",{\"1\":{\"687\":1}}],[\"localvalidatorfactorybean\",{\"1\":{\"682\":2,\"683\":1}}],[\"localinnerclasstest\",{\"1\":{\"580\":1}}],[\"localinnerclass\",{\"1\":{\"580\":1}}],[\"localfactor\",{\"1\":{\"439\":3}}],[\"localhost\",{\"1\":{\"229\":1,\"308\":1,\"336\":2,\"537\":1,\"631\":1,\"634\":4,\"717\":1,\"730\":1,\"746\":1,\"762\":1}}],[\"local会检查当前视图\",{\"1\":{\"166\":1}}],[\"local\",{\"1\":{\"165\":3,\"166\":1,\"204\":4,\"290\":5,\"293\":1,\"307\":2,\"308\":1,\"309\":12,\"311\":2,\"372\":2,\"479\":1,\"634\":4,\"690\":1}}],[\"locks\",{\"1\":{\"146\":1,\"147\":1}}],[\"lock\",{\"1\":{\"82\":1,\"141\":1,\"144\":1,\"145\":3,\"146\":4,\"147\":4,\"148\":3,\"600\":2}}],[\"logaspect\",{\"1\":{\"665\":1}}],[\"loggers>\",{\"1\":{\"700\":1}}],[\"loggeraspect\",{\"1\":{\"674\":1}}],[\"loggerfactory\",{\"1\":{\"665\":2}}],[\"logger\",{\"1\":{\"646\":1,\"648\":1,\"665\":8,\"668\":2,\"669\":3,\"700\":1}}],[\"logging\",{\"1\":{\"642\":2,\"664\":2,\"699\":2}}],[\"log4j<\",{\"1\":{\"642\":2,\"664\":2,\"699\":2}}],[\"log4j2的依赖\",{\"1\":{\"642\":1,\"664\":1,\"699\":1}}],[\"log4j2\",{\"1\":{\"642\":1,\"700\":1}}],[\"login\",{\"1\":{\"530\":1,\"532\":1}}],[\"logs\",{\"1\":{\"159\":1,\"160\":1,\"161\":1,\"308\":1,\"481\":1,\"529\":8,\"634\":5}}],[\"log记录事务回滚的数据\",{\"1\":{\"86\":1}}],[\"log记录物理日志不一样\",{\"1\":{\"78\":1}}],[\"log采用段的方式进行管理和记录\",{\"1\":{\"78\":1}}],[\"log存储\",{\"1\":{\"78\":1}}],[\"log在事务执行时产生\",{\"1\":{\"78\":1}}],[\"log销毁\",{\"1\":{\"78\":1}}],[\"log中的逻辑记录读取到相应的内容并进行回滚\",{\"1\":{\"78\":1}}],[\"log中会记录一条对应的insert记录\",{\"1\":{\"78\":1}}],[\"log和redo\",{\"1\":{\"78\":1}}],[\"logout\",{\"1\":{\"532\":1}}],[\"logo\",{\"1\":{\"77\":1}}],[\"logfile\",{\"1\":{\"341\":1}}],[\"logfile1\",{\"1\":{\"74\":1}}],[\"logfile0\",{\"1\":{\"74\":1}}],[\"log日志\",{\"1\":{\"71\":1}}],[\"log等\",{\"1\":{\"68\":1}}],[\"log\",{\"0\":{\"65\":1,\"74\":1,\"77\":1,\"78\":1,\"85\":1,\"86\":1},\"1\":{\"65\":4,\"75\":3,\"77\":1,\"78\":2,\"81\":1,\"84\":1,\"85\":2,\"86\":3,\"88\":3,\"229\":2,\"302\":1,\"308\":2,\"309\":5,\"341\":1,\"458\":2,\"634\":9,\"700\":8}}],[\"log2​n\",{\"1\":{\"25\":1}}],[\"l\",{\"1\":{\"37\":10,\"38\":25,\"39\":9,\"479\":1,\"552\":1,\"700\":2}}],[\"若中央处理器之间的距离非常近\",{\"1\":{\"773\":1}}],[\"若在ioc中\",{\"1\":{\"766\":2}}],[\"若为\",{\"1\":{\"760\":1}}],[\"若是没有\",{\"1\":{\"581\":1}}],[\"若是在启动容器后\",{\"1\":{\"518\":1}}],[\"若是只想备份images\",{\"1\":{\"518\":1}}],[\"若超过指定数量\",{\"1\":{\"327\":1}}],[\"若缓冲池中没有所需数据\",{\"1\":{\"63\":1}}],[\"若\",{\"1\":{\"38\":1,\"600\":1}}],[\"若l表为空\",{\"1\":{\"37\":1}}],[\"若用l命名线性表\",{\"1\":{\"37\":1}}],[\"若服务端还有数据未完成传输\",{\"1\":{\"19\":1}}],[\"其目的是用于简化\",{\"1\":{\"725\":1}}],[\"其主要优势是方便访问类加载路径里的资源\",{\"1\":{\"708\":1}}],[\"其来源是英文单词\",{\"1\":{\"686\":1}}],[\"其实只是看\",{\"1\":{\"752\":1}}],[\"其实就是实现接口中对应的方法\",{\"1\":{\"681\":1}}],[\"其实是放入连接池\",{\"1\":{\"309\":1}}],[\"其实是一个\",{\"1\":{\"290\":1}}],[\"其功能与\",{\"1\":{\"644\":3}}],[\"其底层本质上还是一个数组\",{\"1\":{\"621\":1}}],[\"其本质就是一个编译器\",{\"1\":{\"611\":1}}],[\"其本质的镜像\",{\"1\":{\"517\":1}}],[\"其所有的成员方法都是public\",{\"1\":{\"592\":1}}],[\"其所有子类都会受到影响\",{\"1\":{\"576\":1}}],[\"其就是一个镜像的运行对象\",{\"1\":{\"508\":1}}],[\"其占用\",{\"1\":{\"467\":1}}],[\"其它操作在两个哈希表\",{\"1\":{\"441\":1}}],[\"其它节点都是slave节点\",{\"1\":{\"343\":1}}],[\"其基本编码方式是\",{\"1\":{\"417\":1}}],[\"其系统内核都是\",{\"1\":{\"403\":1}}],[\"其余的命令依然被执行\",{\"1\":{\"401\":1}}],[\"其余全是冲突的\",{\"1\":{\"149\":1}}],[\"其value是一个无序字典\",{\"1\":{\"379\":1}}],[\"其value是字符串\",{\"1\":{\"378\":1}}],[\"其节点会因为自动故障转移而发生变化\",{\"1\":{\"336\":1}}],[\"其内部集成了大量精良的\",{\"1\":{\"306\":1}}],[\"其内存储的是数据行\",{\"1\":{\"206\":1}}],[\"其内存储的是row行\",{\"1\":{\"206\":1}}],[\"其返回匹配串\",{\"1\":{\"293\":1}}],[\"其设计的目的是为了嵌入应用程序中\",{\"1\":{\"288\":1}}],[\"其语法如下\",{\"1\":{\"254\":1}}],[\"其作用域为当前的连接\",{\"1\":{\"245\":1}}],[\"其中一些重要的方法\",{\"1\":{\"705\":1}}],[\"其中一个是当前数据\",{\"1\":{\"438\":1}}],[\"其中validationutils\",{\"1\":{\"681\":1}}],[\"其中不乏特别优秀的\",{\"1\":{\"636\":1}}],[\"其中包括jvm\",{\"1\":{\"612\":1}}],[\"其中包含了创建\",{\"1\":{\"508\":1}}],[\"其中包含了网络和卷的定义\",{\"1\":{\"482\":1}}],[\"其中有三个参数\",{\"1\":{\"658\":1}}],[\"其中有些错误是可以处理的\",{\"1\":{\"594\":1}}],[\"其中有id和username两个字段\",{\"1\":{\"234\":1}}],[\"其中基础数据类型主要有boolean\",{\"1\":{\"562\":1}}],[\"其中存储了大量的公共和私有docker镜像\",{\"1\":{\"504\":1}}],[\"其中\",{\"1\":{\"485\":1,\"550\":1,\"687\":1}}],[\"其中值本身又是字符串对象\",{\"1\":{\"471\":1}}],[\"其中每一个元素都需要指定一个score\",{\"1\":{\"421\":1}}],[\"其中的commonds就是redis的操作命令\",{\"1\":{\"374\":1}}],[\"其中常见的options有\",{\"1\":{\"374\":1}}],[\"其中封装了各种对\",{\"1\":{\"361\":1}}],[\"其中对\",{\"1\":{\"360\":1}}],[\"其中只有分片集群的配置方式略有差异\",{\"1\":{\"348\":1}}],[\"其中n为表长\",{\"1\":{\"37\":1}}],[\"其存储的是page页\",{\"1\":{\"206\":1}}],[\"其存储的是extent区\",{\"1\":{\"206\":1}}],[\"其典型的使用场景是做全库的逻辑备份\",{\"1\":{\"140\":1}}],[\"其他方法\",{\"1\":{\"705\":1}}],[\"其他情况注入\",{\"1\":{\"647\":1}}],[\"其他类调用\",{\"1\":{\"585\":1}}],[\"其他运算符\",{\"1\":{\"563\":1}}],[\"其他\",{\"0\":{\"556\":1}}],[\"其他仓库同理\",{\"1\":{\"531\":1}}],[\"其他镜像的拉取同理\",{\"1\":{\"513\":1}}],[\"其他镜像的操作同理\",{\"1\":{\"512\":1}}],[\"其他服务商的配置同理\",{\"1\":{\"475\":1}}],[\"其他办法\",{\"1\":{\"437\":1}}],[\"其他客户端提交的命令请求不会插入到事务执行命令序列中\",{\"1\":{\"401\":1}}],[\"其他安装\",{\"1\":{\"368\":1}}],[\"其他数据全部丢弃\",{\"1\":{\"219\":1}}],[\"其他引擎不支持\",{\"1\":{\"123\":1}}],[\"其他5种约束的适用方法较为简单\",{\"1\":{\"50\":1}}],[\"其结果都是相同的\",{\"1\":{\"98\":1}}],[\"其一般表示为\",{\"1\":{\"37\":1}}],[\"其值可以在分解为若干变量的数据类型\",{\"1\":{\"34\":1}}],[\"其值不可再分的数据类型\",{\"1\":{\"34\":1}}],[\"施加在数据上的运算包括运算的定义和实现\",{\"1\":{\"35\":1}}],[\"根据指定的策略\",{\"1\":{\"766\":1}}],[\"根据类型匹配ioc容器中的某个兼容类型的bean\",{\"1\":{\"766\":1}}],[\"根据类型来获取bean时\",{\"1\":{\"752\":1}}],[\"根据类型获取对象\",{\"1\":{\"752\":1}}],[\"根据类型排除\",{\"1\":{\"643\":2}}],[\"根据自己实际的信息修改即可\",{\"1\":{\"730\":1}}],[\"根据自己的操作系统下载安装即可\",{\"1\":{\"107\":1}}],[\"根据算法计算出热点代码\",{\"1\":{\"677\":1}}],[\"根据包扫描加载bean\",{\"1\":{\"650\":1}}],[\"根据name找不到时\",{\"1\":{\"647\":1}}],[\"根据异常信息得知\",{\"1\":{\"647\":1}}],[\"根据名称进行装配了\",{\"1\":{\"646\":1}}],[\"根据注解排除\",{\"1\":{\"643\":2}}],[\"根据其意思我们可以看出来其是java开发时环境和所包含的配套元件\",{\"1\":{\"611\":1}}],[\"根据输入内容替换对应内容\",{\"1\":{\"553\":1}}],[\"根据输入内容查找整个项目\",{\"1\":{\"553\":1}}],[\"根据输入的\",{\"1\":{\"549\":1}}],[\"根据光标所在问题\",{\"1\":{\"550\":1}}],[\"根据redisobject的encoding属性所指定的编码\",{\"1\":{\"470\":1}}],[\"根据命令名称\",{\"1\":{\"464\":1}}],[\"根据不同的操作系统\",{\"1\":{\"461\":1}}],[\"根据新元素的数据类型\",{\"1\":{\"434\":1}}],[\"根据储存在位置集合⾥⾯的某个地点获取指定范围内的地理位置集合\",{\"1\":{\"398\":1}}],[\"根据⽤户给定的经纬度坐标来获取指定范围内的地理位置集合\",{\"1\":{\"398\":1}}],[\"根据给定的key\",{\"1\":{\"470\":1}}],[\"根据给定的\",{\"1\":{\"386\":1}}],[\"根据多个key获取多个string类型的value\",{\"1\":{\"378\":1}}],[\"根据key获取string类型的value\",{\"1\":{\"378\":1}}],[\"根据数据类型的不同获取对应的操作对象\",{\"1\":{\"361\":1}}],[\"根据\",{\"1\":{\"345\":1,\"647\":1,\"752\":5}}],[\"根据商品id对tomcat集群负载均衡\",{\"0\":{\"316\":1}}],[\"根据淘汰策略去选择要淘汰的数据\",{\"1\":{\"275\":1}}],[\"根据排序字段建立合适的索引\",{\"1\":{\"213\":1}}],[\"根据主键排序\",{\"1\":{\"207\":1}}],[\"根据索引关联字段的个数\",{\"1\":{\"129\":1}}],[\"根据索引的存储形式\",{\"1\":{\"126\":1}}],[\"根据子查询的结果不同\",{\"1\":{\"100\":1}}],[\"根据状态\",{\"1\":{\"63\":1}}],[\"根据元素的关键字直接计算出该元素的存储位置\",{\"1\":{\"35\":1}}],[\"根据循环的层次不同\",{\"1\":{\"22\":1}}],[\"关系运算符\",{\"1\":{\"563\":1}}],[\"关系型数据库\",{\"0\":{\"110\":1}}],[\"关键看数据在内核空间与用户空间的拷贝过程\",{\"1\":{\"415\":1}}],[\"关键字抛出异常\",{\"1\":{\"599\":1}}],[\"关键字声明\",{\"1\":{\"598\":1}}],[\"关键字创建\",{\"1\":{\"581\":1}}],[\"关键字定义\",{\"1\":{\"580\":1}}],[\"关键字修饰一个方法\",{\"1\":{\"590\":1}}],[\"关键字修饰\",{\"1\":{\"572\":1,\"575\":1,\"580\":1,\"582\":1,\"584\":2,\"589\":2,\"590\":2}}],[\"关键字说明\",{\"1\":{\"570\":1}}],[\"关键字建议使用大写\",{\"1\":{\"175\":1}}],[\"关键字\",{\"1\":{\"35\":1,\"49\":1,\"126\":1,\"572\":1,\"583\":1,\"599\":1,\"758\":1}}],[\"关闭事务的自动提交\",{\"1\":{\"734\":1}}],[\"关闭和刷新上下文的能力\",{\"1\":{\"695\":1}}],[\"关闭cpu\",{\"1\":{\"600\":1}}],[\"关闭连接操作等等\",{\"1\":{\"600\":1}}],[\"关闭相应资源\",{\"1\":{\"600\":1}}],[\"关闭某些资源\",{\"1\":{\"600\":1}}],[\"关闭当前编辑文件\",{\"1\":{\"549\":1}}],[\"关闭服务器\",{\"1\":{\"363\":1}}],[\"关闭redis连接的工具方法\",{\"1\":{\"309\":1}}],[\"关闭aof\",{\"1\":{\"297\":1}}],[\"关闭自动提交\",{\"1\":{\"258\":1}}],[\"关闭游标\",{\"1\":{\"254\":1}}],[\"关联事务管理器\",{\"1\":{\"749\":1}}],[\"关联\",{\"1\":{\"366\":1,\"464\":1}}],[\"关联数组\",{\"1\":{\"290\":1}}],[\"关联了两方多的主键\",{\"1\":{\"94\":1}}],[\"关联另外一方的主键\",{\"1\":{\"92\":1}}],[\"关于\",{\"0\":{\"5\":1}}],[\"索引和数据均存储在内存中\",{\"1\":{\"238\":1}}],[\"索引字段进行更新\",{\"1\":{\"225\":1}}],[\"索引的使用也是满足最左前缀法则的\",{\"1\":{\"216\":1}}],[\"索引越多\",{\"1\":{\"136\":1}}],[\"索引并不是多多益善\",{\"1\":{\"136\":1}}],[\"索引设计原则\",{\"0\":{\"136\":1}}],[\"索引选择性越高则查询效率越高\",{\"1\":{\"134\":1}}],[\"索引不会失效\",{\"1\":{\"131\":1}}],[\"索引将失效\",{\"1\":{\"131\":2}}],[\"索引将部分失效\",{\"1\":{\"131\":1}}],[\"索引失效场景\",{\"0\":{\"131\":1}}],[\"索引使用\",{\"0\":{\"130\":1}}],[\"索引列运算\",{\"1\":{\"131\":1}}],[\"索引列表只有一个字段\",{\"1\":{\"129\":1}}],[\"索引列也是要占用空间的\",{\"1\":{\"116\":1}}],[\"索引语法\",{\"0\":{\"129\":1}}],[\"索引主要分为4个类型\",{\"1\":{\"126\":1}}],[\"索引分类\",{\"0\":{\"126\":1}}],[\"索引结构的叶子结点关联的是对应的主键\",{\"1\":{\"126\":1}}],[\"索引结构的叶子结点保存了行数据\",{\"1\":{\"126\":1}}],[\"索引结构\",{\"0\":{\"117\":1},\"1\":{\"117\":1}}],[\"索引是一种典型的使用空间换时间的例子\",{\"1\":{\"116\":1}}],[\"索引是帮助mysql的数据结构\",{\"1\":{\"115\":1}}],[\"索引大大提高了查询效率\",{\"1\":{\"116\":1}}],[\"索引概述\",{\"0\":{\"114\":1}}],[\"索引\",{\"0\":{\"113\":1},\"1\":{\"125\":1,\"172\":1}}],[\"索引段即为b+树的非叶子结点\",{\"1\":{\"60\":1}}],[\"索引段\",{\"1\":{\"60\":1}}],[\"索引等数据\",{\"1\":{\"60\":1}}],[\"索引项的一般形式为\",{\"1\":{\"35\":1}}],[\"索引表中的每项称为索引项\",{\"1\":{\"35\":1}}],[\"索引存储\",{\"1\":{\"35\":2}}],[\"还提供整合其他技术和框架的能力\",{\"1\":{\"725\":1}}],[\"还有另外一种实现java\",{\"1\":{\"679\":1}}],[\"还支持url解压缩和tar文件自动解压\",{\"1\":{\"493\":1}}],[\"还可以实现自定义校验\",{\"1\":{\"680\":1}}],[\"还可以对节点的\",{\"1\":{\"450\":1}}],[\"还可以使用开放地址法\",{\"1\":{\"437\":1}}],[\"还可以作为缓冲区\",{\"1\":{\"430\":1}}],[\"还可以是数组\",{\"1\":{\"423\":1}}],[\"还可以根据实际情况选择多种存储引擎进行组合\",{\"1\":{\"239\":1}}],[\"还采用\",{\"1\":{\"421\":1}}],[\"还是开启一个新的事务\",{\"1\":{\"745\":1}}],[\"还是通过\",{\"1\":{\"719\":1}}],[\"还是老规矩\",{\"1\":{\"655\":1}}],[\"还是和前面的几个章节一致\",{\"1\":{\"650\":1}}],[\"还是根据\",{\"1\":{\"647\":1}}],[\"还是队尾\",{\"1\":{\"434\":1}}],[\"还是\",{\"1\":{\"434\":1,\"650\":1}}],[\"还是非阻塞\",{\"1\":{\"406\":1}}],[\"还是以\",{\"1\":{\"242\":1}}],[\"还能保证消息不丢失\",{\"1\":{\"387\":1}}],[\"还包括了这些服务的配置\",{\"1\":{\"482\":1}}],[\"还包括脏页的刷新\",{\"1\":{\"75\":1}}],[\"还包含很多的更新\",{\"1\":{\"239\":1}}],[\"还阅读了\",{\"1\":{\"173\":1}}],[\"还依靠readview\",{\"1\":{\"86\":1}}],[\"还需要编写程序相关的工具\",{\"1\":{\"614\":1}}],[\"还需要申请新的空间等问题\",{\"1\":{\"445\":1}}],[\"还需要调整页间指针的方向\",{\"1\":{\"207\":1}}],[\"还需要依赖于数据库记录中的三个隐藏字段\",{\"1\":{\"81\":1}}],[\"还需要向服务端发送一个报文段\",{\"1\":{\"17\":1}}],[\"还负责将缓冲池中的数据异步刷新到磁盘中\",{\"1\":{\"75\":1}}],[\"还存储指针域\",{\"1\":{\"39\":1}}],[\"还建立附加的索引表\",{\"1\":{\"35\":1}}],[\"两次备份之间会丢失\",{\"1\":{\"323\":1}}],[\"两次\",{\"1\":{\"321\":1}}],[\"两个\",{\"1\":{\"752\":1}}],[\"两个或多个不同的键\",{\"1\":{\"437\":1}}],[\"两个从节点\",{\"1\":{\"296\":1}}],[\"两个集合a和b的所有组合情况\",{\"1\":{\"95\":1}}],[\"两种方式均可\",{\"1\":{\"702\":1}}],[\"两种类型\",{\"1\":{\"562\":1}}],[\"两种\",{\"1\":{\"35\":1}}],[\"两层循环\",{\"0\":{\"27\":1},\"1\":{\"22\":1}}],[\"非侵入式\",{\"1\":{\"726\":1}}],[\"非运行时异常是\",{\"1\":{\"595\":1}}],[\"非运行时异常\",{\"1\":{\"595\":2}}],[\"非代码性错误\",{\"1\":{\"595\":1}}],[\"非构造方法\",{\"1\":{\"584\":1}}],[\"非访问控制修饰符\",{\"1\":{\"572\":1}}],[\"非二进制安全\",{\"1\":{\"427\":1}}],[\"非常类似\",{\"1\":{\"419\":1}}],[\"非常感谢大家的支持\",{\"1\":{\"3\":1}}],[\"非阻塞式reactive\",{\"1\":{\"727\":1}}],[\"非阻塞io\",{\"0\":{\"405\":1}}],[\"非阻塞\",{\"1\":{\"403\":1,\"405\":2,\"406\":1,\"727\":1}}],[\"非sql查询\",{\"1\":{\"366\":1}}],[\"非结构化\",{\"1\":{\"366\":1}}],[\"非\",{\"1\":{\"189\":1}}],[\"非关系型可以分为以下几种类型\",{\"1\":{\"111\":1}}],[\"非关系型的\",{\"1\":{\"111\":1}}],[\"非关系型数据库\",{\"0\":{\"111\":1}}],[\"非空约束\",{\"1\":{\"49\":1}}],[\"非线性结构\",{\"1\":{\"35\":1}}],[\"分工协作\",{\"1\":{\"790\":1}}],[\"分布在不同地理位置的多台独立的\",{\"1\":{\"782\":1}}],[\"分布式处理\",{\"0\":{\"791\":1}}],[\"分布式缓存\",{\"1\":{\"282\":1}}],[\"分布式系统\",{\"1\":{\"277\":1}}],[\"分布式的\",{\"1\":{\"111\":1}}],[\"分析和优化资源消耗\",{\"1\":{\"678\":1}}],[\"分散在每个各个模块中解决同一样的问题\",{\"1\":{\"661\":1}}],[\"分发和运行应用程序及其依赖项\",{\"1\":{\"504\":1}}],[\"分发\",{\"1\":{\"474\":1}}],[\"分钟\",{\"1\":{\"458\":1}}],[\"分两种情况\",{\"1\":{\"345\":1}}],[\"分片集群\",{\"1\":{\"367\":1}}],[\"分片集群需要的节点数量较多\",{\"1\":{\"340\":1}}],[\"分片集群特征\",{\"1\":{\"339\":1}}],[\"分别访问多个配置文件\",{\"1\":{\"723\":1}}],[\"分别加载文件中的配置定义\",{\"1\":{\"723\":1}}],[\"分别记录\",{\"1\":{\"456\":1}}],[\"分别是\",{\"1\":{\"437\":1,\"622\":1}}],[\"分别保存\",{\"1\":{\"419\":1}}],[\"分别启动3个redis实例\",{\"1\":{\"298\":1,\"334\":1}}],[\"分别添加缓存\",{\"1\":{\"281\":1}}],[\"分别为创建唯一索引和全文索引\",{\"1\":{\"129\":1}}],[\"分别为\",{\"1\":{\"35\":1}}],[\"分页查询是数据库的方言\",{\"1\":{\"194\":1}}],[\"分页查询\",{\"0\":{\"194\":1},\"1\":{\"187\":1}}],[\"分页参数\",{\"1\":{\"186\":1,\"195\":1}}],[\"分组操作时\",{\"1\":{\"216\":1}}],[\"分组以后\",{\"1\":{\"192\":1}}],[\"分组后的过滤条件\",{\"1\":{\"192\":1}}],[\"分组后条件列表\",{\"1\":{\"186\":1,\"195\":1}}],[\"分组字段名\",{\"1\":{\"192\":1}}],[\"分组字段列表\",{\"1\":{\"186\":1,\"195\":1}}],[\"分组查询\",{\"0\":{\"192\":1},\"1\":{\"187\":1}}],[\"分组\",{\"1\":{\"136\":1,\"684\":1}}],[\"分为类方法和对象方法\",{\"1\":{\"572\":1,\"583\":1}}],[\"分为类属性和对象属性\",{\"1\":{\"572\":1,\"582\":1}}],[\"分为5种情况\",{\"1\":{\"450\":1}}],[\"分为全面变量\",{\"1\":{\"244\":1}}],[\"分为\",{\"1\":{\"100\":1}}],[\"分为三个类别\",{\"1\":{\"22\":1}}],[\"分库分表\",{\"0\":{\"53\":1},\"1\":{\"172\":1}}],[\"分类\",{\"0\":{\"49\":1},\"1\":{\"126\":2,\"145\":1}}],[\"对增删改操作设置只读会抛出下面异常\",{\"1\":{\"741\":1}}],[\"对功能性组件也只需要使用几个简单的注解进行标记\",{\"1\":{\"726\":1}}],[\"对领域模型可以做到零污染\",{\"1\":{\"726\":1}}],[\"对代理模式还不熟悉的朋友\",{\"1\":{\"656\":1}}],[\"对核心业务功能有干扰\",{\"1\":{\"655\":1}}],[\"对类进行\",{\"1\":{\"650\":1}}],[\"对类的抽象\",{\"1\":{\"589\":1}}],[\"对该方法进行异常的声明\",{\"1\":{\"598\":1}}],[\"对行为的抽象\",{\"1\":{\"589\":1}}],[\"对外部隐藏对象的具体实现细节\",{\"1\":{\"575\":1}}],[\"对一个查询操作来说\",{\"1\":{\"741\":1}}],[\"对一段代码能够实现特定功能代码的封装\",{\"1\":{\"572\":1}}],[\"对一致性\",{\"1\":{\"366\":1}}],[\"对当前类生成单元测试类\",{\"1\":{\"553\":1}}],[\"对当前打开的文件\",{\"1\":{\"551\":1}}],[\"对选中的代码进行大\",{\"1\":{\"553\":1}}],[\"对选中的代码弹出环绕选项弹出层\",{\"1\":{\"552\":1}}],[\"对文件\",{\"1\":{\"551\":1}}],[\"对上一节中的\",{\"1\":{\"476\":1}}],[\"对流进行修剪\",{\"1\":{\"387\":1,\"389\":1}}],[\"对性能要求高\",{\"1\":{\"366\":1}}],[\"对象与xml文件的映射框架\",{\"1\":{\"727\":1}}],[\"对象没有任何区别\",{\"1\":{\"691\":1,\"693\":1}}],[\"对象称为\",{\"1\":{\"691\":1}}],[\"对象方法调用\",{\"1\":{\"585\":1}}],[\"对象方法是属于对象的方法\",{\"1\":{\"584\":1}}],[\"对象方法\",{\"1\":{\"584\":1}}],[\"对象属性\",{\"1\":{\"582\":1}}],[\"对象属性和对象方法\",{\"1\":{\"572\":1}}],[\"对象的\",{\"1\":{\"752\":1}}],[\"对象的方式有三种\",{\"1\":{\"752\":1}}],[\"对象的实例化和初始化\",{\"1\":{\"691\":1}}],[\"对象的clone\",{\"1\":{\"581\":1}}],[\"对象的内部实现对外部是不可见的\",{\"1\":{\"575\":1}}],[\"对象是类的具体化\",{\"1\":{\"579\":1}}],[\"对象是类的实例\",{\"1\":{\"571\":1,\"579\":1}}],[\"对象构建时初始化\",{\"1\":{\"572\":1,\"582\":1}}],[\"对象私有\",{\"1\":{\"572\":1,\"582\":1}}],[\"对象共享\",{\"0\":{\"471\":1}}],[\"对象引用计数器\",{\"1\":{\"467\":1}}],[\"对象起码就应该包含3个属性\",{\"1\":{\"466\":1}}],[\"对象类型属性赋值\",{\"0\":{\"758\":1}}],[\"对象类型\",{\"1\":{\"458\":1}}],[\"对象\",{\"1\":{\"361\":1,\"362\":1,\"467\":1,\"474\":1,\"571\":1,\"579\":1,\"581\":4,\"656\":2,\"693\":1,\"707\":1,\"708\":1,\"752\":4,\"754\":2,\"755\":2,\"757\":1}}],[\"对象即可操作\",{\"1\":{\"358\":1}}],[\"对象时\",{\"1\":{\"357\":1}}],[\"对象存储至\",{\"1\":{\"356\":1}}],[\"对象实例内的各个属性值\",{\"1\":{\"34\":1}}],[\"对\",{\"1\":{\"345\":1}}],[\"对数据库进行事务操作\",{\"1\":{\"260\":1}}],[\"对数据库的任何操作都是安全的\",{\"1\":{\"260\":1}}],[\"对limit来讲\",{\"1\":{\"218\":1}}],[\"对应用程序本身的结构影响非常小\",{\"1\":{\"726\":1}}],[\"对应使用servletcontextresource进行资源访问\",{\"1\":{\"722\":1}}],[\"对应使用filesystemresource进行资源访问\",{\"1\":{\"722\":1}}],[\"对应使用classpathresource进行资源访问\",{\"1\":{\"722\":1}}],[\"对应pingcommand\",{\"1\":{\"464\":1}}],[\"对应值\",{\"1\":{\"428\":1}}],[\"对应的底层实现有两种\",{\"1\":{\"419\":1}}],[\"对应的\",{\"1\":{\"410\":1}}],[\"对应的时间复杂度为\",{\"1\":{\"28\":1}}],[\"对应sql\",{\"1\":{\"146\":1}}],[\"对所有的表进行锁定\",{\"1\":{\"140\":1}}],[\"对于第一种方式\",{\"1\":{\"719\":1}}],[\"对于所有常规资源实现\",{\"1\":{\"705\":1}}],[\"对于不同国家的用户\",{\"1\":{\"686\":1}}],[\"对于大规模使用\",{\"1\":{\"677\":1}}],[\"对于前面页面\",{\"1\":{\"550\":1}}],[\"对于使用\",{\"1\":{\"475\":1}}],[\"对于于一个单链表来讲\",{\"1\":{\"452\":1}}],[\"对于github访问慢的⽤户\",{\"1\":{\"375\":1}}],[\"对于\",{\"1\":{\"275\":1}}],[\"对于提高数据处理的效率是有好处的\",{\"1\":{\"241\":1}}],[\"对于复杂的应用系统\",{\"1\":{\"239\":1}}],[\"对于返回的结果集\",{\"1\":{\"223\":1}}],[\"对于数据的变动\",{\"1\":{\"222\":1}}],[\"对于满足排序列表的索引\",{\"1\":{\"211\":1}}],[\"对于行级锁\",{\"1\":{\"148\":1}}],[\"对于表锁\",{\"1\":{\"145\":1}}],[\"对于表级锁\",{\"1\":{\"144\":1}}],[\"对于hash索引\",{\"1\":{\"124\":1}}],[\"对于b树\",{\"1\":{\"124\":1}}],[\"对于联合查询而言\",{\"1\":{\"99\":1}}],[\"对于union查询\",{\"1\":{\"99\":1}}],[\"对于我们日常的操作\",{\"1\":{\"82\":1}}],[\"对某一节点进行前插操作\",{\"1\":{\"39\":1}}],[\"结尾\",{\"1\":{\"423\":2}}],[\"结论\",{\"1\":{\"410\":1,\"752\":1}}],[\"结果\",{\"1\":{\"658\":1,\"665\":1,\"669\":1}}],[\"结果是\",{\"1\":{\"655\":4,\"657\":1}}],[\"结果中\",{\"1\":{\"356\":1}}],[\"结果悲剧了\",{\"1\":{\"344\":1}}],[\"结束值\",{\"1\":{\"392\":1,\"393\":1}}],[\"结束\",{\"1\":{\"346\":1}}],[\"结构体中\",{\"1\":{\"456\":1}}],[\"结构图如下\",{\"1\":{\"432\":1}}],[\"结构\",{\"1\":{\"423\":1,\"443\":1}}],[\"结构来节省内存\",{\"1\":{\"421\":1}}],[\"结构会转换为\",{\"1\":{\"419\":1}}],[\"结构默认采用了\",{\"1\":{\"419\":1}}],[\"结构类似一个双端链表\",{\"1\":{\"418\":1}}],[\"结构类型\",{\"1\":{\"34\":1}}],[\"结构化\",{\"1\":{\"366\":1}}],[\"结构如下\",{\"1\":{\"340\":1}}],[\"结构与windows中安装的nginx基本一致\",{\"1\":{\"308\":1}}],[\"结构中\",{\"1\":{\"456\":1}}],[\"结构中的数据元素之间存在多对多的关系\",{\"1\":{\"35\":1}}],[\"结构中的数据元素之间存在一对多的关系\",{\"1\":{\"35\":1}}],[\"结构中的数据元素之间只存在一对一的关系\",{\"1\":{\"35\":1}}],[\"结构中元素同属于同一个集合\",{\"1\":{\"35\":1}}],[\"结合自己的想法\",{\"1\":{\"2\":1}}],[\"是文本\",{\"1\":{\"757\":1}}],[\"是变量\",{\"1\":{\"757\":1}}],[\"是个通常的概念\",{\"1\":{\"753\":1}}],[\"是ioc的一个方面\",{\"1\":{\"753\":1}}],[\"是访问并可能操作各种数据项的一个数据库操作序列\",{\"1\":{\"733\":1}}],[\"是给定的输入流\",{\"1\":{\"711\":1}}],[\"是最低的日志级别\",{\"1\":{\"700\":1}}],[\"是对ioc的一种具体实现\",{\"1\":{\"694\":1}}],[\"是spring封装的校验工具类\",{\"1\":{\"681\":1}}],[\"是spring里面核心的东西\",{\"1\":{\"649\":1}}],[\"是默认模式\",{\"1\":{\"677\":1}}],[\"是默认方案\",{\"1\":{\"322\":1}}],[\"是aop思想的一种实现\",{\"1\":{\"663\":1}}],[\"是软件设计领域中的面向切面编程\",{\"1\":{\"660\":1}}],[\"是基于\",{\"1\":{\"649\":1}}],[\"是属性名\",{\"1\":{\"647\":1}}],[\"是虚拟化出来的一个独立的机器\",{\"1\":{\"614\":1}}],[\"是java将编译好的class文件进行解释\",{\"1\":{\"613\":1}}],[\"是整个java的核心\",{\"1\":{\"611\":1}}],[\"是程序本身可以捕获并且处理的异常\",{\"1\":{\"595\":1}}],[\"是程序中无法处理的错误\",{\"1\":{\"595\":1}}],[\"是提供给其子类调用这些构造器来完成初始化的\",{\"1\":{\"592\":1}}],[\"是类中存储数据的变量\",{\"1\":{\"572\":1,\"582\":1}}],[\"是类的具体化\",{\"1\":{\"571\":1}}],[\"是容器内部端口绑定到指定的主机端口\",{\"1\":{\"535\":1}}],[\"是随机的\",{\"1\":{\"528\":1}}],[\"是在操作系统的层面对所使用应用的隔离\",{\"1\":{\"505\":1}}],[\"是在第\",{\"1\":{\"38\":2}}],[\"是后续学习的前提\",{\"1\":{\"494\":1}}],[\"是用于构建\",{\"1\":{\"489\":1}}],[\"是用于定义和运行多容器\",{\"1\":{\"478\":1}}],[\"是用来实现事务的原子性\",{\"1\":{\"78\":1}}],[\"是用来实现事务的持久性\",{\"1\":{\"77\":1}}],[\"是不匹配的\",{\"1\":{\"667\":1}}],[\"是不合适的\",{\"1\":{\"471\":1}}],[\"是不是\",{\"1\":{\"456\":1}}],[\"是不是第一次来同步数据\",{\"1\":{\"302\":1}}],[\"是因为java对于匿名内部类传递变量的实现是基于构造器传参的\",{\"1\":{\"580\":1}}],[\"是因为我的电脑是\",{\"1\":{\"535\":1}}],[\"是因为这三种特殊类型的底层是使用obj\",{\"1\":{\"469\":1}}],[\"是因为并不是每次\",{\"1\":{\"458\":1}}],[\"是因为其具备动态扩容的能力\",{\"1\":{\"429\":1}}],[\"是如何知道一个\",{\"1\":{\"456\":1}}],[\"是如何判断\",{\"1\":{\"302\":1}}],[\"是以\",{\"1\":{\"444\":2}}],[\"是分多次\",{\"1\":{\"440\":1}}],[\"是指其属于对象\",{\"1\":{\"572\":1,\"582\":1}}],[\"是指其属于类\",{\"1\":{\"572\":1,\"582\":1}}],[\"是指在\",{\"1\":{\"474\":1}}],[\"是指在使用哈希表存储数据时\",{\"1\":{\"437\":1}}],[\"是指数据结构在计算机中的表示\",{\"1\":{\"35\":1}}],[\"是指数据元素之间的逻辑关系\",{\"1\":{\"35\":1}}],[\"是使用\",{\"1\":{\"427\":1}}],[\"是字符串\",{\"1\":{\"427\":1}}],[\"是紧挨在一起的两个\",{\"1\":{\"421\":1}}],[\"是连续内存\",{\"1\":{\"421\":1}}],[\"是与内核建立\",{\"1\":{\"413\":1}}],[\"是谁\",{\"1\":{\"412\":1}}],[\"是利用单个线程来同时监听多个\",{\"1\":{\"406\":1}}],[\"是⽤来做基数统计的算法\",{\"1\":{\"400\":1}}],[\"是redis中最简单的存储类型\",{\"1\":{\"378\":1}}],[\"是当前sentinel实例的端口\",{\"1\":{\"333\":1}}],[\"是记录命令\",{\"1\":{\"322\":1}}],[\"是需要写入磁盘中\",{\"1\":{\"321\":1}}],[\"是内存存储\",{\"1\":{\"320\":1}}],[\"是内存的缓存\",{\"1\":{\"271\":1}}],[\"是否可以根据接口类型来获取bean\",{\"1\":{\"752\":1}}],[\"是否\",{\"1\":{\"512\":1}}],[\"是否过期呢\",{\"1\":{\"456\":1}}],[\"是否大于\",{\"1\":{\"408\":1}}],[\"是否确认移动\",{\"1\":{\"346\":1}}],[\"是否按照预期工作\",{\"1\":{\"326\":1}}],[\"是否开启\",{\"1\":{\"322\":1}}],[\"是否压缩\",{\"1\":{\"321\":1}}],[\"是否相同\",{\"1\":{\"302\":1}}],[\"是否为null\",{\"1\":{\"189\":1}}],[\"是数据集的标记\",{\"1\":{\"302\":1}}],[\"是数据的一个子集\",{\"1\":{\"34\":1}}],[\"是数据的基本单位\",{\"1\":{\"34\":1}}],[\"是\",{\"1\":{\"283\":1,\"345\":1,\"354\":1,\"360\":1,\"387\":1,\"407\":1,\"410\":1,\"417\":1,\"420\":2,\"432\":1,\"452\":1,\"531\":1,\"535\":1,\"550\":1,\"595\":1,\"618\":1,\"619\":1,\"647\":1,\"691\":1,\"695\":1}}],[\"是存储数据的临时地方\",{\"1\":{\"271\":1}}],[\"是面试中经常被问到的一个知识点\",{\"1\":{\"259\":1}}],[\"是mysql的默认存储引擎\",{\"1\":{\"239\":1}}],[\"是通过一个定时任务\",{\"1\":{\"457\":1}}],[\"是通过索引查询的\",{\"1\":{\"212\":1}}],[\"是通过将一张表复制成两张\",{\"1\":{\"98\":1}}],[\"是using\",{\"1\":{\"211\":2}}],[\"是可有可无的\",{\"1\":{\"179\":1}}],[\"是可选项\",{\"1\":{\"129\":1}}],[\"是一款主流的\",{\"1\":{\"725\":1}}],[\"是一项创新技术\",{\"1\":{\"679\":1}}],[\"是一段连续空间\",{\"1\":{\"417\":1}}],[\"是一种高性能\",{\"1\":{\"678\":1}}],[\"是一种设计思想\",{\"1\":{\"660\":1}}],[\"是一种程序设计的编程范式\",{\"1\":{\"573\":1}}],[\"是一种容器化平台\",{\"1\":{\"489\":1}}],[\"是一种以\",{\"1\":{\"448\":1}}],[\"是一种消息通信模式\",{\"1\":{\"383\":1}}],[\"是一种轻量小巧的脚本语言\",{\"1\":{\"288\":1}}],[\"是一种通过建立倒排索引\",{\"1\":{\"117\":1}}],[\"是一些客户端和链接服务\",{\"1\":{\"233\":1}}],[\"是一个不可分割的工作单位\",{\"1\":{\"733\":1}}],[\"是一个容器\",{\"1\":{\"726\":1}}],[\"是一个重要的面向对象编程法则\",{\"1\":{\"691\":1}}],[\"是一个开源的应用容器引擎\",{\"1\":{\"503\":1}}],[\"是一个节点为\",{\"1\":{\"451\":1}}],[\"是一个\",{\"1\":{\"423\":1}}],[\"是一个从\",{\"1\":{\"406\":1}}],[\"是一个可排序的set集合\",{\"1\":{\"382\":1}}],[\"是一个基于内存的键值型的nosql数据库\",{\"1\":{\"367\":1}}],[\"是一个基于\",{\"1\":{\"282\":1,\"283\":1,\"306\":1}}],[\"是一个估计值\",{\"1\":{\"231\":1}}],[\"是一个聚合函数\",{\"1\":{\"223\":1}}],[\"是一个比较重的操作\",{\"1\":{\"142\":1}}],[\"是优化数据库的一个重要手段\",{\"1\":{\"132\":1}}],[\"是哈希结构\",{\"1\":{\"123\":1}}],[\"是非阻塞读\",{\"1\":{\"83\":1}}],[\"是非随机存取的存储结构\",{\"1\":{\"39\":1}}],[\"是系统根据情况自动完成的\",{\"1\":{\"66\":1}}],[\"是删除第\",{\"1\":{\"38\":1}}],[\"是线性表的元素类型\",{\"1\":{\"38\":1}}],[\"是相互之间存在的一种或多种特定关系的数据元素的集合\",{\"1\":{\"34\":1}}],[\"是描述客观事物属性的数\",{\"1\":{\"34\":1}}],[\"是什么\",{\"0\":{\"1\":1,\"610\":1,\"725\":1}}],[\"基于xml自动装配\",{\"0\":{\"766\":1}}],[\"基于xml管理bean\",{\"0\":{\"750\":1}}],[\"基于xml实现的声明式事务\",{\"1\":{\"749\":1}}],[\"基于xml的声明式事务\",{\"0\":{\"747\":1}}],[\"基于xml的aop\",{\"0\":{\"672\":1}}],[\"基于方法实现校验\",{\"0\":{\"683\":1}}],[\"基于注解的声明式事务\",{\"0\":{\"736\":1}}],[\"基于注解的aop的实现\",{\"1\":{\"665\":1}}],[\"基于注解的aop\",{\"0\":{\"662\":1}}],[\"基于注解管理bean\",{\"0\":{\"641\":1}}],[\"基于整数数组来实现\",{\"1\":{\"432\":1}}],[\"基于简单动态字符串\",{\"1\":{\"417\":1}}],[\"基于\",{\"1\":{\"411\":1,\"412\":1,\"424\":1,\"503\":1,\"695\":1}}],[\"基于心跳机制监测服务状态\",{\"1\":{\"327\":1}}],[\"基于内存\",{\"1\":{\"320\":1}}],[\"基于引用\",{\"1\":{\"285\":1}}],[\"基于时间\",{\"1\":{\"285\":1}}],[\"基于容量\",{\"1\":{\"285\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"16\":1}}],[\"基础知识\",{\"0\":{\"615\":1}}],[\"基础类型\",{\"1\":{\"562\":2}}],[\"基础数据类型\",{\"1\":{\"562\":1}}],[\"基础代码补全\",{\"1\":{\"549\":1}}],[\"基础通用指令\",{\"0\":{\"363\":1},\"1\":{\"264\":1}}],[\"基础篇\",{\"1\":{\"172\":1}}],[\"基础概念及语法\",{\"0\":{\"559\":1}}],[\"基础概念\",{\"0\":{\"105\":1}}],[\"基数\",{\"1\":{\"134\":1}}],[\"基本名称\",{\"1\":{\"690\":1}}],[\"基本上成为oracle官方首推的java\",{\"1\":{\"679\":1}}],[\"基本实现了jvm的各种特性\",{\"1\":{\"679\":1}}],[\"基本\",{\"1\":{\"568\":1}}],[\"基本组件\",{\"1\":{\"482\":1}}],[\"基本一致\",{\"1\":{\"419\":1}}],[\"基本语法\",{\"0\":{\"242\":1}}],[\"基本查询\",{\"0\":{\"188\":1},\"1\":{\"187\":1}}],[\"基本的结构和节点的变化规律不变\",{\"1\":{\"121\":1}}],[\"基本数据类型和对应的包装类型是不一样的\",{\"1\":{\"667\":1}}],[\"基本数据类型与其包装类型之间的赋值使用自动装箱和拆箱完成\",{\"1\":{\"562\":1}}],[\"基本数据类型\",{\"1\":{\"34\":1}}],[\"基本概念\",{\"0\":{\"34\":1,\"106\":1,\"427\":1,\"432\":1,\"437\":1,\"448\":1,\"453\":1}}],[\"第五章\",{\"0\":{\"797\":1}}],[\"第五步\",{\"1\":{\"681\":1}}],[\"第四章\",{\"0\":{\"795\":1}}],[\"第四步\",{\"1\":{\"681\":1,\"682\":1,\"683\":1}}],[\"第六章\",{\"0\":{\"770\":1}}],[\"第三章\",{\"0\":{\"794\":1}}],[\"第三步\",{\"1\":{\"681\":1,\"682\":1,\"683\":1,\"687\":1,\"690\":1,\"718\":1,\"719\":1}}],[\"第三种是基于方法实现校验\",{\"1\":{\"680\":1}}],[\"第三方依赖库和任何所需的\",{\"1\":{\"679\":1}}],[\"第三方模块以及大多数的依赖项\",{\"1\":{\"306\":1}}],[\"第二章\",{\"0\":{\"796\":1}}],[\"第二本图书购买失败\",{\"1\":{\"745\":1}}],[\"第二步\",{\"1\":{\"681\":1,\"682\":1,\"683\":1,\"684\":1,\"687\":1,\"690\":1,\"718\":1,\"719\":1}}],[\"第二种\",{\"1\":{\"694\":1}}],[\"第二种是按照bean\",{\"1\":{\"680\":1}}],[\"第二种方法\",{\"1\":{\"31\":1}}],[\"第二处\",{\"1\":{\"646\":1}}],[\"第3个\",{\"1\":{\"298\":1,\"334\":1}}],[\"第2个\",{\"1\":{\"298\":1,\"334\":1}}],[\"第1个\",{\"1\":{\"298\":1,\"334\":1}}],[\"第\",{\"1\":{\"38\":1}}],[\"第一章\",{\"0\":{\"771\":1}}],[\"第一步\",{\"1\":{\"681\":1,\"682\":1,\"683\":1,\"684\":1,\"687\":1,\"690\":1,\"718\":1,\"719\":1}}],[\"第一步把绝对路径部分去掉\",{\"1\":{\"650\":1}}],[\"第一种\",{\"1\":{\"694\":1}}],[\"第一种是通过实现org\",{\"1\":{\"680\":1}}],[\"第一种即时编译\",{\"1\":{\"677\":1}}],[\"第一种方法我目前也没有理解\",{\"1\":{\"31\":1}}],[\"第一次运行慢\",{\"1\":{\"677\":1}}],[\"第一次发送的报文段\",{\"1\":{\"18\":1}}],[\"第一处\",{\"1\":{\"646\":1}}],[\"第一个哈希表没有找到\",{\"1\":{\"440\":1}}],[\"第一条sql使用id查询的效率更高\",{\"1\":{\"128\":1}}],[\"体积公式\",{\"1\":{\"31\":1}}],[\"列表对象\",{\"1\":{\"471\":1}}],[\"列表对象list\",{\"0\":{\"418\":1}}],[\"列表的节点之间并不是通过指针连接的\",{\"1\":{\"446\":1}}],[\"列表\",{\"0\":{\"380\":1},\"1\":{\"456\":1,\"469\":1}}],[\"列类型\",{\"1\":{\"366\":1}}],[\"列名列表\",{\"1\":{\"165\":3}}],[\"列存储数据库\",{\"1\":{\"111\":1}}],[\"列子查询指的是子查询的返回结果是一列\",{\"1\":{\"102\":1}}],[\"列子查询\",{\"0\":{\"102\":1},\"1\":{\"100\":1}}],[\"列式求和\",{\"1\":{\"30\":1}}],[\"列出内层语句的执行次数\",{\"1\":{\"27\":1,\"28\":1,\"29\":1}}],[\"列出外层循环中\",{\"1\":{\"27\":1,\"28\":1,\"29\":1}}],[\"列出循环次数\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"方案二\",{\"1\":{\"358\":1}}],[\"方案一\",{\"1\":{\"358\":1}}],[\"方式下获取\",{\"1\":{\"752\":1}}],[\"方式获取\",{\"1\":{\"752\":1}}],[\"方式\",{\"1\":{\"321\":1,\"357\":1,\"766\":2}}],[\"方式二\",{\"1\":{\"297\":1,\"333\":1,\"702\":1}}],[\"方式一\",{\"1\":{\"297\":1,\"333\":1,\"702\":1}}],[\"方便了人们学习\",{\"1\":{\"793\":1}}],[\"方便了我自己的复盘和巩固\",{\"1\":{\"636\":1}}],[\"方便实现对数据库操作\",{\"1\":{\"729\":1}}],[\"方便在spring中使用\",{\"1\":{\"680\":1}}],[\"方便用户部署和后续维护\",{\"1\":{\"480\":1}}],[\"方便我们快速找到想要的节点\",{\"1\":{\"452\":1}}],[\"方便于我们的优化\",{\"1\":{\"229\":1}}],[\"方便自己或者读者进行知识追溯\",{\"1\":{\"3\":1}}],[\"方法才会调用\",{\"1\":{\"764\":1}}],[\"方法定义的\",{\"1\":{\"754\":1}}],[\"方法给组件对象设置属性\",{\"1\":{\"754\":1}}],[\"方法执行过程中调用了b\",{\"1\":{\"745\":1}}],[\"方法执行完毕\",{\"1\":{\"658\":1}}],[\"方法和b\",{\"1\":{\"745\":1}}],[\"方法获取实例\",{\"1\":{\"719\":1}}],[\"方法返回true\",{\"1\":{\"711\":1}}],[\"方法不变\",{\"1\":{\"707\":1}}],[\"方法结束了\",{\"1\":{\"655\":4,\"657\":1}}],[\"方法开始了\",{\"1\":{\"655\":4,\"657\":1}}],[\"方法内部\",{\"1\":{\"655\":8,\"664\":4}}],[\"方法内要执行的语句\",{\"1\":{\"572\":1,\"583\":1}}],[\"方法上也有事务\",{\"1\":{\"745\":1}}],[\"方法上有事务\",{\"1\":{\"745\":1}}],[\"方法上\",{\"1\":{\"646\":1,\"647\":2}}],[\"方法来获得资源\",{\"1\":{\"717\":1}}],[\"方法来获取\",{\"1\":{\"600\":1}}],[\"方法来实现的\",{\"1\":{\"627\":1}}],[\"方法有两个实现\",{\"1\":{\"626\":1}}],[\"方法只有一种实现\",{\"1\":{\"624\":1}}],[\"方法会打印这些详细信息\",{\"1\":{\"601\":1}}],[\"方法添加到原来的异常\",{\"1\":{\"600\":1}}],[\"方法放在\",{\"1\":{\"600\":1}}],[\"方法也可能抛出\",{\"1\":{\"600\":1}}],[\"方法可在抽象类中实现\",{\"1\":{\"592\":1}}],[\"方法可以接受零个或多个参数\",{\"1\":{\"583\":1}}],[\"方法可以返回一个值\",{\"1\":{\"583\":1}}],[\"方法可以有访问修饰符\",{\"1\":{\"583\":1}}],[\"方法调用是程序执行的一个重要步骤\",{\"1\":{\"585\":1}}],[\"方法的返回值\",{\"1\":{\"765\":1}}],[\"方法的参数传入\",{\"1\":{\"718\":1}}],[\"方法的执行\",{\"1\":{\"665\":1}}],[\"方法的功能为\",{\"1\":{\"625\":1}}],[\"方法的重写是指在子类中可以有和父类方法名\",{\"1\":{\"586\":1}}],[\"方法的重载是指一个类中可以有多个方法具有相同的方法名\",{\"1\":{\"586\":1}}],[\"方法的重载和重写都是实现多态的方式\",{\"1\":{\"586\":1}}],[\"方法的重载和重写\",{\"0\":{\"586\":1}}],[\"方法的调用\",{\"0\":{\"585\":1}}],[\"方法的分类\",{\"0\":{\"584\":1}}],[\"方法的定义语法如下\",{\"1\":{\"583\":1}}],[\"方法的定义包括以下几个要素\",{\"1\":{\"583\":1}}],[\"方法体包含实际执行的代码块\",{\"1\":{\"583\":1}}],[\"方法体\",{\"1\":{\"583\":1}}],[\"方法是对一段代码能够实现特定功能代码的封装\",{\"1\":{\"583\":1}}],[\"方法从文件或网络中反序列化对象\",{\"1\":{\"581\":1}}],[\"方法创建\",{\"1\":{\"581\":1}}],[\"方法已经弃用\",{\"1\":{\"581\":1}}],[\"方法名是方法的标识符\",{\"1\":{\"583\":1}}],[\"方法名\",{\"1\":{\"583\":1,\"623\":1,\"665\":4,\"668\":2,\"669\":3}}],[\"方法名称\",{\"1\":{\"572\":1,\"583\":1}}],[\"方法名等上面\",{\"1\":{\"549\":1}}],[\"方法命名\",{\"1\":{\"561\":1}}],[\"方法参数提示显示\",{\"1\":{\"549\":1}}],[\"方法\",{\"0\":{\"583\":1},\"1\":{\"361\":1,\"550\":1,\"555\":1,\"560\":1,\"572\":1,\"581\":2,\"590\":1,\"591\":1,\"600\":1,\"623\":2,\"627\":1,\"656\":2,\"718\":1,\"745\":2,\"752\":1,\"754\":1}}],[\"方法后测试结果\",{\"1\":{\"353\":1}}],[\"方法二\",{\"1\":{\"165\":1}}],[\"方法一\",{\"1\":{\"165\":1}}],[\"方法2\",{\"1\":{\"30\":1}}],[\"方法1\",{\"1\":{\"30\":1}}],[\"三者的关系并不难懂\",{\"1\":{\"614\":1}}],[\"三个sentinel实例信息如下\",{\"1\":{\"332\":1}}],[\"三个字段建立联合索引\",{\"1\":{\"131\":1}}],[\"三层循环\",{\"0\":{\"30\":1}}],[\"三次握手是发生在tcp的连接过程中的\",{\"1\":{\"17\":1}}],[\"三次握手\",{\"0\":{\"17\":1}}],[\"$connection\",{\"1\":{\"634\":2}}],[\"$http\",{\"1\":{\"634\":5}}],[\"$body\",{\"1\":{\"634\":1}}],[\"$status\",{\"1\":{\"634\":1}}],[\"$request\",{\"1\":{\"634\":1}}],[\"$remote\",{\"1\":{\"634\":2}}],[\"$time\",{\"1\":{\"634\":1}}],[\"$6\",{\"1\":{\"423\":1}}],[\"$4\",{\"1\":{\"423\":1}}],[\"$3\",{\"1\":{\"423\":1}}],[\"$5\",{\"1\":{\"423\":1}}],[\"$0\",{\"1\":{\"423\":1}}],[\"$2\",{\"1\":{\"342\":1}}],[\"$path\",{\"1\":{\"307\":1}}],[\"$$\",{\"1\":{\"242\":2,\"700\":1}}],[\"$\",{\"1\":{\"29\":2,\"395\":4,\"423\":2,\"424\":2,\"479\":3,\"483\":1,\"634\":1,\"683\":1,\"730\":4,\"762\":4}}],[\"avoid\",{\"1\":{\"765\":1}}],[\"available\",{\"1\":{\"752\":1,\"765\":1}}],[\"avg\",{\"1\":{\"187\":1,\"191\":1,\"456\":1}}],[\"ahead\",{\"1\":{\"677\":1,\"765\":1}}],[\"aot解决方案\",{\"1\":{\"679\":1}}],[\"aot的思路\",{\"1\":{\"679\":1}}],[\"aot的缺点\",{\"1\":{\"677\":1}}],[\"aot的优点\",{\"1\":{\"677\":1}}],[\"aot\",{\"1\":{\"677\":6,\"678\":3}}],[\"aot概述\",{\"0\":{\"676\":1}}],[\"aot提前编译\",{\"0\":{\"675\":1}}],[\"aop应用框架\",{\"1\":{\"727\":1}}],[\"aop=\",{\"1\":{\"665\":1}}],[\"aop<\",{\"1\":{\"664\":1}}],[\"aop依赖\",{\"1\":{\"664\":1}}],[\"aop概念及相关术语\",{\"0\":{\"659\":1}}],[\"aop\",{\"1\":{\"655\":1,\"660\":1,\"661\":2,\"665\":4,\"668\":2,\"674\":7,\"726\":2,\"727\":2,\"749\":2,\"765\":3}}],[\"aof\",{\"1\":{\"322\":21,\"323\":1,\"430\":1}}],[\"aof持久化\",{\"0\":{\"322\":1}}],[\"aof保持关闭状态\",{\"1\":{\"297\":1}}],[\"abc\",{\"1\":{\"600\":1}}],[\"abstractlist\",{\"1\":{\"618\":1}}],[\"abstract的\",{\"1\":{\"592\":1}}],[\"abstract\",{\"1\":{\"572\":1,\"589\":1,\"590\":1}}],[\"ab公司开发的一款关系型数据库管理系统\",{\"1\":{\"106\":1}}],[\"af9b91fa3cc6\",{\"1\":{\"539\":1,\"540\":1}}],[\"after>\",{\"1\":{\"674\":1}}],[\"after注解标识\",{\"1\":{\"666\":1}}],[\"afterthrowing中的属性throwing\",{\"1\":{\"669\":1}}],[\"afterthrowing注解标识\",{\"1\":{\"666\":1}}],[\"afterthrowingmethod\",{\"1\":{\"665\":1,\"669\":1,\"674\":1}}],[\"afterthrowing\",{\"1\":{\"665\":1,\"669\":1}}],[\"afterreturning中的属性returning\",{\"1\":{\"669\":1}}],[\"afterreturning注解标识\",{\"1\":{\"666\":1}}],[\"afterreturningmethod\",{\"1\":{\"665\":1,\"669\":1,\"674\":1}}],[\"afterreturning\",{\"1\":{\"665\":1,\"669\":1}}],[\"aftermethod\",{\"1\":{\"665\":1,\"674\":1}}],[\"after=network\",{\"1\":{\"372\":1}}],[\"aftereach\",{\"1\":{\"353\":1}}],[\"after\",{\"1\":{\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"328\":1,\"333\":1,\"464\":1,\"665\":1,\"674\":5}}],[\"aamd64\",{\"1\":{\"535\":1}}],[\"agreed\",{\"1\":{\"765\":1}}],[\"ago\",{\"1\":{\"522\":1}}],[\"age=\",{\"1\":{\"731\":1,\"754\":1,\"763\":1,\"764\":1}}],[\"agent\",{\"1\":{\"634\":1}}],[\"age\",{\"1\":{\"212\":2,\"290\":1,\"356\":1,\"378\":1,\"579\":8,\"580\":2,\"681\":7,\"682\":5,\"683\":5,\"731\":3,\"754\":7,\"755\":3,\"758\":3,\"759\":1,\"760\":2,\"763\":9,\"764\":10}}],[\"a=\",{\"1\":{\"515\":1}}],[\"amd64\",{\"1\":{\"499\":1}}],[\"amy\",{\"1\":{\"429\":1}}],[\"aeprocessevents\",{\"1\":{\"464\":3}}],[\"aeeventloop\",{\"1\":{\"464\":2}}],[\"aesetbeforesleepproc\",{\"1\":{\"464\":1}}],[\"aecreateeventloop\",{\"1\":{\"464\":1}}],[\"aemain\",{\"1\":{\"464\":3}}],[\"aeapiassociate\",{\"1\":{\"461\":1}}],[\"aeapiaddevent\",{\"1\":{\"461\":1,\"464\":2}}],[\"aeapilookuppending\",{\"1\":{\"461\":1}}],[\"aeapiname\",{\"1\":{\"461\":1}}],[\"aeapipoll\",{\"1\":{\"461\":1,\"462\":1,\"464\":1}}],[\"aeapidelevent\",{\"1\":{\"461\":1}}],[\"aeapifree\",{\"1\":{\"461\":1}}],[\"aeapiresize\",{\"1\":{\"461\":1}}],[\"aeapicreate\",{\"1\":{\"461\":1,\"464\":1}}],[\"ae\",{\"1\":{\"461\":6,\"464\":4}}],[\"authors\",{\"1\":{\"765\":1}}],[\"author\",{\"1\":{\"765\":3}}],[\"author=\",{\"1\":{\"493\":1}}],[\"authenticationtype\",{\"1\":{\"647\":5}}],[\"auth\",{\"1\":{\"353\":1,\"424\":2}}],[\"autowire=\",{\"1\":{\"766\":5}}],[\"autowire\",{\"1\":{\"766\":12}}],[\"autowired注解默认根据类型注入\",{\"1\":{\"646\":1}}],[\"autowired注解可以出现在\",{\"1\":{\"646\":1}}],[\"autowired注解可以省略\",{\"1\":{\"646\":2}}],[\"autowired注解和\",{\"1\":{\"646\":1}}],[\"autowired注解\",{\"1\":{\"646\":1}}],[\"autowired注入\",{\"0\":{\"646\":1}}],[\"autowired\",{\"1\":{\"336\":1,\"362\":2,\"646\":10,\"647\":4,\"682\":4,\"702\":2,\"731\":2,\"737\":3,\"738\":1,\"745\":2,\"746\":1}}],[\"autowiring\",{\"1\":{\"765\":2}}],[\"automatically\",{\"1\":{\"765\":1}}],[\"automated\",{\"1\":{\"512\":1}}],[\"autoproxy\",{\"1\":{\"665\":1}}],[\"autocloseable\",{\"1\":{\"600\":2}}],[\"autocommit\",{\"1\":{\"258\":3}}],[\"auto\",{\"1\":{\"234\":1,\"322\":2,\"730\":1,\"737\":4}}],[\"awk\",{\"1\":{\"342\":1}}],[\"apt\",{\"1\":{\"487\":2,\"490\":2,\"493\":2,\"515\":2}}],[\"apache2\",{\"1\":{\"503\":1}}],[\"apache\",{\"1\":{\"362\":1,\"642\":2,\"664\":2,\"699\":2,\"765\":2}}],[\"appropriate\",{\"1\":{\"765\":1}}],[\"appear\",{\"1\":{\"623\":1}}],[\"appenders>\",{\"1\":{\"700\":1}}],[\"appended\",{\"1\":{\"623\":1}}],[\"append=\",{\"1\":{\"700\":1}}],[\"appends\",{\"1\":{\"623\":2}}],[\"appendfsync\",{\"1\":{\"322\":3}}],[\"appendfilename\",{\"1\":{\"322\":1}}],[\"append\",{\"1\":{\"322\":1}}],[\"appendonly\",{\"1\":{\"297\":1,\"322\":2}}],[\"applicable\",{\"1\":{\"765\":1}}],[\"applicationcontext确定资源访问策略通常有两种方法\",{\"1\":{\"721\":1}}],[\"applicationcontext实现类指定访问策略\",{\"0\":{\"722\":1}}],[\"applicationcontext实现类都实现resourceloader接口\",{\"1\":{\"715\":1}}],[\"applicationcontext实例获取resource实例时\",{\"1\":{\"716\":1}}],[\"applicationcontext\",{\"1\":{\"646\":1,\"648\":1,\"650\":5,\"651\":2,\"665\":2,\"682\":3,\"683\":2,\"690\":2,\"695\":3,\"696\":1,\"716\":4,\"718\":2,\"719\":4,\"723\":5,\"727\":1,\"746\":4,\"752\":2,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"765\":1,\"766\":2}}],[\"applications\",{\"1\":{\"498\":1}}],[\"application\",{\"1\":{\"308\":1,\"311\":1,\"631\":1,\"634\":1,\"647\":1}}],[\"appliactioncontext\",{\"1\":{\"727\":1}}],[\"apple芯片两种\",{\"1\":{\"498\":1}}],[\"appuser\",{\"1\":{\"493\":1}}],[\"app\",{\"1\":{\"480\":5,\"485\":1,\"490\":2,\"493\":3,\"503\":1,\"535\":2,\"537\":1,\"700\":2}}],[\"api<\",{\"1\":{\"642\":1,\"647\":1,\"650\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"api\",{\"1\":{\"283\":1,\"311\":2,\"313\":1,\"360\":1,\"361\":1,\"414\":1,\"461\":2,\"464\":1,\"474\":3,\"483\":2,\"634\":1,\"651\":1,\"665\":1,\"682\":1,\"683\":1,\"702\":2,\"746\":1}}],[\"arithmeticexception\",{\"1\":{\"743\":3}}],[\"around>\",{\"1\":{\"674\":1}}],[\"around注解标识\",{\"1\":{\"666\":1}}],[\"aroundmethod\",{\"1\":{\"665\":1,\"670\":1,\"674\":1}}],[\"around\",{\"1\":{\"665\":1,\"670\":1,\"674\":1}}],[\"are\",{\"1\":{\"621\":1,\"622\":2,\"623\":2,\"741\":1,\"765\":7}}],[\"article\",{\"1\":{\"607\":1}}],[\"artifactid>\",{\"1\":{\"336\":1,\"353\":2,\"355\":1,\"362\":2,\"642\":4,\"647\":1,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":3,\"749\":1,\"762\":2}}],[\"arm\",{\"1\":{\"535\":1}}],[\"arg标签还有两个属性可以进一步描述构造器参数\",{\"1\":{\"755\":1}}],[\"argv\",{\"1\":{\"464\":1}}],[\"argc\",{\"1\":{\"464\":1}}],[\"arg\",{\"1\":{\"385\":2,\"386\":4,\"424\":3,\"493\":2,\"755\":4}}],[\"args\",{\"1\":{\"309\":3,\"424\":4,\"579\":1,\"580\":4,\"581\":1,\"598\":1,\"658\":4,\"665\":2,\"668\":2,\"669\":1,\"670\":1,\"681\":1,\"687\":1,\"690\":1,\"707\":2,\"708\":1,\"709\":1,\"716\":2,\"718\":1,\"719\":1,\"723\":1}}],[\"argument\",{\"1\":{\"383\":2,\"627\":2}}],[\"argumentn\",{\"1\":{\"293\":2}}],[\"argument3\",{\"1\":{\"293\":2}}],[\"argument2\",{\"1\":{\"293\":2}}],[\"argument1\",{\"1\":{\"293\":2}}],[\"arrive\",{\"1\":{\"765\":1}}],[\"array>\",{\"1\":{\"759\":1,\"760\":2}}],[\"arraycopy\",{\"1\":{\"623\":3,\"626\":1}}],[\"array\",{\"1\":{\"621\":2,\"622\":1,\"627\":1}}],[\"arraylist实现\",{\"0\":{\"620\":1}}],[\"arraylist<e>\",{\"1\":{\"619\":1}}],[\"arraylist<>\",{\"1\":{\"424\":1,\"619\":2}}],[\"arraylist\",{\"0\":{\"616\":1,\"617\":1},\"1\":{\"618\":2,\"619\":4,\"621\":5,\"622\":5,\"623\":2,\"624\":1,\"626\":1,\"627\":2}}],[\"arrays\",{\"1\":{\"290\":1,\"622\":1,\"627\":1,\"658\":1,\"665\":2,\"668\":2,\"669\":1,\"670\":1}}],[\"arr\",{\"1\":{\"28\":1,\"29\":1,\"31\":1,\"290\":1}}],[\"a\",{\"1\":{\"238\":1,\"291\":2,\"344\":1,\"351\":1,\"374\":1,\"434\":1,\"514\":1,\"515\":1,\"521\":2,\"553\":1,\"562\":4,\"587\":2,\"622\":5,\"623\":8,\"626\":1,\"627\":1,\"693\":7,\"733\":1,\"745\":1,\"757\":5,\"765\":26}}],[\"aspect>\",{\"1\":{\"674\":1}}],[\"aspect标识\",{\"1\":{\"665\":1}}],[\"aspect表示这个类是一个切面类\",{\"1\":{\"665\":1}}],[\"aspects\",{\"1\":{\"727\":1}}],[\"aspects<\",{\"1\":{\"664\":1,\"749\":1}}],[\"aspects依赖\",{\"1\":{\"664\":1}}],[\"aspectj\",{\"1\":{\"663\":1,\"665\":1}}],[\"aspect\",{\"1\":{\"660\":1,\"665\":1,\"674\":1,\"726\":1}}],[\"assumed\",{\"1\":{\"765\":1}}],[\"assignable\",{\"1\":{\"643\":4}}],[\"associative\",{\"1\":{\"290\":1}}],[\"asynchronous\",{\"1\":{\"403\":1}}],[\"aside\",{\"1\":{\"277\":1}}],[\"asc|desc\",{\"1\":{\"398\":2}}],[\"asc\",{\"1\":{\"193\":1,\"213\":1}}],[\"as\",{\"1\":{\"165\":3,\"188\":2,\"623\":3,\"626\":1,\"765\":11}}],[\"alibaba\",{\"1\":{\"730\":1,\"746\":1,\"762\":1}}],[\"alibaba<\",{\"1\":{\"730\":1,\"762\":1}}],[\"aliyun\",{\"1\":{\"475\":1}}],[\"already\",{\"1\":{\"627\":1}}],[\"alt\",{\"0\":{\"550\":1,\"552\":1,\"554\":1,\"555\":1},\"1\":{\"550\":15,\"552\":19,\"554\":10,\"555\":4}}],[\"alter\",{\"1\":{\"51\":2,\"52\":1,\"146\":1,\"165\":1,\"179\":2,\"180\":4,\"197\":1,\"198\":1}}],[\"alm64\",{\"1\":{\"535\":1}}],[\"alpine\",{\"1\":{\"480\":2}}],[\"always\",{\"1\":{\"322\":2,\"765\":4}}],[\"allows\",{\"1\":{\"765\":3}}],[\"allowed\",{\"1\":{\"741\":1,\"765\":1}}],[\"alloc\",{\"1\":{\"428\":4}}],[\"allkeys\",{\"1\":{\"278\":3,\"458\":3}}],[\"all\",{\"1\":{\"99\":2,\"102\":2,\"168\":1,\"198\":2,\"231\":1,\"449\":2,\"464\":1,\"521\":1,\"623\":2}}],[\"advance\",{\"1\":{\"765\":2}}],[\"advisable\",{\"1\":{\"765\":1}}],[\"advisor>\",{\"1\":{\"749\":1}}],[\"advisor\",{\"1\":{\"749\":1}}],[\"advice>\",{\"1\":{\"749\":1}}],[\"advice标签\",{\"1\":{\"749\":1}}],[\"advice\",{\"1\":{\"749\":2}}],[\"admin\",{\"1\":{\"634\":2,\"737\":1,\"764\":1}}],[\"adminstrator数据库管理员\",{\"1\":{\"197\":1}}],[\"adaptive\",{\"0\":{\"66\":1},\"1\":{\"66\":1}}],[\"addconstraintviolation\",{\"1\":{\"684\":1}}],[\"addresult\",{\"1\":{\"657\":3}}],[\"addreplyprototolist\",{\"1\":{\"464\":1}}],[\"addreplytobuffer\",{\"1\":{\"464\":1}}],[\"addreply\",{\"1\":{\"464\":3}}],[\"addr\",{\"1\":{\"634\":1}}],[\"add方法\",{\"0\":{\"623\":1}}],[\"added\",{\"1\":{\"621\":1,\"623\":2}}],[\"addall\",{\"1\":{\"619\":1,\"623\":4}}],[\"addsusppressed\",{\"1\":{\"600\":1}}],[\"add\",{\"1\":{\"51\":1,\"52\":1,\"57\":1,\"70\":1,\"180\":1,\"307\":1,\"346\":1,\"409\":1,\"424\":1,\"493\":2,\"585\":1,\"619\":1,\"623\":12,\"655\":5,\"657\":4,\"664\":2,\"665\":2}}],[\"atguigu\",{\"1\":{\"667\":1,\"668\":2,\"683\":2,\"709\":3,\"763\":1,\"764\":1}}],[\"attach\",{\"1\":{\"524\":3}}],[\"attempted\",{\"1\":{\"449\":1}}],[\"attributeaccessor\",{\"1\":{\"765\":1}}],[\"attributes>\",{\"1\":{\"749\":2}}],[\"attribute\",{\"1\":{\"428\":5,\"765\":2}}],[\"atomicity\",{\"1\":{\"76\":1,\"259\":1,\"733\":1}}],[\"at\",{\"1\":{\"65\":1,\"623\":3,\"624\":2,\"625\":3,\"626\":1,\"627\":3,\"700\":1,\"765\":3}}],[\"acbytype\",{\"1\":{\"766\":2}}],[\"acbyname\",{\"1\":{\"766\":2}}],[\"accountservice\",{\"1\":{\"746\":2}}],[\"accept\",{\"1\":{\"464\":1}}],[\"accepttcphandler\",{\"1\":{\"464\":3}}],[\"access\",{\"1\":{\"428\":1,\"621\":1,\"634\":2,\"727\":1,\"765\":1}}],[\"ac\",{\"1\":{\"651\":2,\"665\":2,\"754\":2,\"755\":2,\"762\":2,\"763\":3,\"764\":3,\"765\":2}}],[\"aclass\",{\"1\":{\"650\":11}}],[\"active\",{\"1\":{\"362\":1}}],[\"action一致\",{\"1\":{\"52\":1}}],[\"action\",{\"1\":{\"52\":1,\"255\":2}}],[\"acid\",{\"1\":{\"76\":1,\"366\":1}}],[\"acknowledge\",{\"1\":{\"387\":1}}],[\"ack置为1\",{\"1\":{\"19\":1}}],[\"ack\",{\"1\":{\"17\":1,\"19\":2,\"387\":1}}],[\"annotationapplicationcontext\",{\"1\":{\"650\":5}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"648\":1,\"682\":3,\"683\":2,\"690\":1,\"746\":2}}],[\"annotation<\",{\"1\":{\"647\":1}}],[\"annotation\",{\"1\":{\"641\":1,\"642\":2,\"643\":4,\"646\":7,\"647\":7,\"650\":4,\"668\":1,\"682\":3,\"683\":5,\"684\":3,\"690\":1,\"702\":1,\"731\":1,\"739\":1,\"746\":6,\"749\":1,\"765\":1}}],[\"announce\",{\"1\":{\"297\":5,\"333\":1,\"341\":1}}],[\"anonymousinnerclass\",{\"1\":{\"580\":5}}],[\"anotherredisdesktopmanager\",{\"1\":{\"375\":2}}],[\"another\",{\"1\":{\"375\":1}}],[\"animal\",{\"1\":{\"577\":6,\"580\":2}}],[\"anme\",{\"1\":{\"245\":1}}],[\"and\",{\"1\":{\"189\":2,\"351\":1,\"399\":1,\"428\":5,\"434\":3,\"623\":2,\"765\":6}}],[\"anymore\",{\"1\":{\"765\":1}}],[\"any\",{\"1\":{\"102\":2,\"621\":1,\"623\":2,\"626\":1,\"627\":1,\"765\":3}}],[\"an\",{\"1\":{\"37\":1,\"434\":1,\"622\":3,\"626\":1,\"765\":7}}],[\"ai+1\",{\"1\":{\"37\":1}}],[\"ai\",{\"1\":{\"37\":1,\"38\":1}}],[\"a2\",{\"1\":{\"37\":1}}],[\"a1\",{\"1\":{\"37\":1}}],[\"jndiobjectfactorybean\",{\"1\":{\"765\":2}}],[\"jndi\",{\"1\":{\"765\":2}}],[\"jms\",{\"1\":{\"727\":1}}],[\"johnson\",{\"1\":{\"725\":1,\"765\":1}}],[\"joinpoint\",{\"1\":{\"665\":17,\"668\":8,\"669\":10,\"670\":4}}],[\"join\",{\"1\":{\"96\":1,\"97\":2,\"98\":1}}],[\"jit即时编译指的是在程序的运行过程中\",{\"1\":{\"677\":1}}],[\"jit\",{\"1\":{\"677\":5,\"678\":2}}],[\"jit和aot\",{\"1\":{\"677\":1}}],[\"jit与aot的区别\",{\"0\":{\"677\":1}}],[\"jre是运行时环境\",{\"1\":{\"614\":1}}],[\"jre中包含了jvm\",{\"1\":{\"614\":1}}],[\"jre全称\",{\"1\":{\"612\":1}}],[\"jre\",{\"0\":{\"609\":1,\"612\":1}}],[\"jdbc<\",{\"1\":{\"730\":1}}],[\"jdbctemplatetest\",{\"1\":{\"731\":1}}],[\"jdbctemplate\",{\"0\":{\"729\":1},\"1\":{\"729\":1,\"730\":3,\"731\":11,\"737\":5,\"746\":8}}],[\"jdbc事务管理\",{\"1\":{\"727\":1}}],[\"jdbc\",{\"1\":{\"631\":1,\"727\":1,\"729\":1,\"730\":12,\"731\":1,\"739\":1,\"746\":4,\"762\":10}}],[\"jdb等\",{\"1\":{\"611\":1}}],[\"jdk原生的实现方式\",{\"1\":{\"663\":1}}],[\"jdk动态代理动态生成的代理类会在com\",{\"1\":{\"663\":1}}],[\"jdk8\",{\"1\":{\"647\":2,\"678\":1}}],[\"jdk是程序员编写时需要用到的\",{\"1\":{\"614\":1}}],[\"jdk中包含了jre和jvm\",{\"1\":{\"614\":1}}],[\"jdk包含了jre和jvm\",{\"1\":{\"611\":1}}],[\"jdk全称\",{\"1\":{\"611\":1}}],[\"jdk下载与环境配置\",{\"0\":{\"602\":1}}],[\"jdk17\",{\"1\":{\"677\":1}}],[\"jdk1\",{\"1\":{\"581\":1}}],[\"jdkcollection\",{\"1\":{\"360\":1}}],[\"jdk\",{\"0\":{\"603\":1,\"609\":1,\"611\":1},\"1\":{\"354\":1,\"360\":1,\"604\":1,\"647\":4,\"678\":1,\"679\":1,\"727\":1}}],[\"jdies快速入门\",{\"0\":{\"350\":1},\"1\":{\"265\":1}}],[\"juergen\",{\"1\":{\"765\":1}}],[\"jun\",{\"1\":{\"742\":1}}],[\"junit模块\",{\"1\":{\"698\":1}}],[\"junit5测试\",{\"1\":{\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"junit\",{\"1\":{\"353\":1,\"642\":1,\"650\":1,\"651\":2,\"664\":1,\"665\":1,\"682\":1,\"683\":1,\"699\":1,\"702\":4,\"731\":1,\"746\":2}}],[\"jupiter\",{\"1\":{\"642\":1,\"650\":1,\"651\":2,\"664\":1,\"665\":1,\"682\":1,\"683\":1,\"699\":1,\"702\":4,\"731\":1,\"746\":2}}],[\"jupiter<\",{\"1\":{\"353\":2,\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"just\",{\"1\":{\"428\":1,\"677\":1}}],[\"jedis的官方地址\",{\"1\":{\"352\":1}}],[\"jedis是redis\",{\"1\":{\"351\":1}}],[\"jedis\",{\"1\":{\"349\":1,\"351\":1,\"352\":1,\"353\":10,\"360\":1}}],[\"jedispollconfig\",{\"1\":{\"349\":5}}],[\"jedispoolconfig\",{\"1\":{\"349\":3}}],[\"jedispool\",{\"1\":{\"349\":5}}],[\"jedisconnectionfactory\",{\"1\":{\"349\":1}}],[\"jedis本身是线程不安全的\",{\"1\":{\"349\":1}}],[\"jedis连接池\",{\"0\":{\"349\":1},\"1\":{\"265\":1}}],[\"json的\",{\"1\":{\"355\":1}}],[\"json参数\",{\"1\":{\"313\":2}}],[\"json\",{\"1\":{\"311\":2,\"356\":2,\"357\":1,\"358\":2,\"360\":1,\"475\":1}}],[\"jsr\",{\"1\":{\"283\":2,\"647\":2}}],[\"jakarta\",{\"1\":{\"647\":1,\"682\":5,\"683\":3,\"684\":4}}],[\"jackson\",{\"1\":{\"355\":4}}],[\"jack\",{\"1\":{\"290\":1,\"378\":1}}],[\"javaee0222\",{\"1\":{\"760\":2}}],[\"javax\",{\"1\":{\"746\":1}}],[\"java<\",{\"1\":{\"730\":1,\"762\":1}}],[\"java消息服务\",{\"1\":{\"727\":1}}],[\"java对象与数据库数据的映射框架\",{\"1\":{\"727\":1}}],[\"java的标准java\",{\"1\":{\"704\":1}}],[\"java的一个特性就是一次编译\",{\"1\":{\"613\":1}}],[\"java才会识别\",{\"1\":{\"687\":1}}],[\"java自身是支持国际化的\",{\"1\":{\"687\":1}}],[\"java国际化\",{\"0\":{\"687\":1}}],[\"javascript\",{\"1\":{\"678\":1}}],[\"java教程\",{\"1\":{\"649\":1}}],[\"javac\",{\"1\":{\"611\":1}}],[\"java这个时候我们只是安装好了jdk\",{\"1\":{\"604\":1}}],[\"java不支持多继承\",{\"1\":{\"576\":1}}],[\"java语言的redis客户端\",{\"1\":{\"376\":1}}],[\"java8\",{\"1\":{\"282\":1,\"283\":1}}],[\"java全栈知识体系\",{\"1\":{\"268\":1}}],[\"java\",{\"0\":{\"8\":1,\"559\":1,\"573\":1,\"593\":1,\"602\":1,\"609\":1,\"615\":1,\"628\":1,\"629\":1},\"1\":{\"283\":1,\"290\":2,\"351\":2,\"357\":1,\"367\":1,\"562\":2,\"580\":2,\"587\":1,\"588\":1,\"592\":1,\"595\":3,\"598\":1,\"600\":1,\"601\":1,\"603\":1,\"608\":2,\"611\":3,\"612\":1,\"613\":1,\"619\":1,\"641\":2,\"644\":1,\"646\":5,\"647\":6,\"649\":3,\"658\":1,\"677\":7,\"678\":6,\"679\":2,\"682\":1,\"684\":1,\"687\":5,\"690\":2,\"691\":3,\"693\":1,\"708\":1,\"709\":2,\"725\":5,\"726\":1,\"741\":1,\"743\":1,\"749\":3,\"752\":1,\"758\":1,\"765\":1}}],[\"jvm是把class文件进行解释的工具\",{\"1\":{\"614\":1}}],[\"jvm就相当于一本字典\",{\"1\":{\"613\":1}}],[\"jvm全称\",{\"1\":{\"613\":1}}],[\"jvm\",{\"0\":{\"609\":1,\"613\":1},\"1\":{\"285\":1,\"595\":2,\"678\":2,\"679\":1}}],[\"jvm进程缓存\",{\"0\":{\"281\":1},\"1\":{\"266\":1}}],[\"jcache\",{\"1\":{\"283\":1}}],[\"j++\",{\"1\":{\"31\":1}}],[\"j\",{\"1\":{\"28\":5,\"29\":5,\"31\":4,\"38\":10,\"464\":3,\"549\":1,\"552\":1,\"553\":1,\"655\":24,\"657\":3,\"664\":12}}],[\"mvc\",{\"1\":{\"727\":1}}],[\"mvcc的具体实现\",{\"1\":{\"81\":1}}],[\"mvcc全称为multi\",{\"1\":{\"81\":1}}],[\"mvcc多版本并发控制\",{\"0\":{\"79\":1}}],[\"mvcc\",{\"0\":{\"81\":1},\"1\":{\"78\":1,\"88\":2}}],[\"mm\",{\"1\":{\"700\":7}}],[\"m0\",{\"1\":{\"607\":1}}],[\"mul\",{\"1\":{\"655\":5,\"664\":2}}],[\"multiplexing\",{\"1\":{\"403\":1}}],[\"multi\",{\"1\":{\"401\":1}}],[\"must\",{\"1\":{\"599\":1,\"600\":1,\"687\":1,\"765\":1}}],[\"m=\",{\"1\":{\"515\":1}}],[\"m3系列\",{\"1\":{\"498\":1}}],[\"m2\",{\"1\":{\"498\":1}}],[\"m1\",{\"1\":{\"498\":1,\"535\":1}}],[\"m系列芯片\",{\"1\":{\"498\":1}}],[\"mb\",{\"1\":{\"417\":1,\"423\":1}}],[\"m|km|ft|mi\",{\"1\":{\"398\":3}}],[\"mq\",{\"1\":{\"387\":1}}],[\"mget\",{\"1\":{\"378\":1,\"424\":1}}],[\"msb\",{\"1\":{\"428\":1}}],[\"msg\",{\"1\":{\"424\":1,\"601\":2,\"700\":3}}],[\"mset\",{\"1\":{\"378\":1}}],[\"ms\",{\"1\":{\"349\":1}}],[\"might\",{\"1\":{\"765\":1}}],[\"mirrors\",{\"1\":{\"475\":3}}],[\"mirror\",{\"1\":{\"475\":2}}],[\"mid+1\",{\"1\":{\"434\":1}}],[\"mid\",{\"1\":{\"434\":5}}],[\"milliseconds\",{\"1\":{\"328\":1,\"333\":1,\"394\":2,\"396\":2}}],[\"mime\",{\"1\":{\"308\":1,\"634\":1}}],[\"minexpand\",{\"1\":{\"627\":2}}],[\"minimum\",{\"1\":{\"627\":4}}],[\"mincapacity\",{\"1\":{\"627\":17}}],[\"min\",{\"1\":{\"87\":1,\"88\":2,\"168\":1,\"187\":1,\"191\":1,\"322\":1,\"362\":1,\"382\":3,\"434\":5,\"682\":4,\"683\":1}}],[\"mkdir\",{\"1\":{\"297\":1,\"312\":1,\"333\":1,\"341\":1,\"346\":1}}],[\"mdl锁主要作用是维护元数据的数据一致性\",{\"1\":{\"146\":1}}],[\"mdl加锁过程是系统自动控制\",{\"1\":{\"146\":1}}],[\"mdl\",{\"1\":{\"144\":1}}],[\"meaningful\",{\"1\":{\"765\":1}}],[\"messaging\",{\"1\":{\"727\":1}}],[\"messagesource\",{\"1\":{\"690\":1}}],[\"messagesource接口\",{\"0\":{\"689\":1}}],[\"messages\",{\"1\":{\"687\":3}}],[\"message\",{\"1\":{\"383\":1,\"387\":1,\"423\":1,\"683\":2,\"684\":2,\"727\":2}}],[\"method属性指定销毁方法\",{\"1\":{\"764\":1}}],[\"method属性指定初始化方法\",{\"1\":{\"764\":1}}],[\"method标签\",{\"1\":{\"749\":1}}],[\"method3\",{\"1\":{\"683\":2}}],[\"methodvalidationpostprocessor\",{\"1\":{\"683\":3}}],[\"method=\",{\"1\":{\"674\":5,\"764\":2}}],[\"methodname\",{\"1\":{\"665\":5,\"668\":2,\"669\":3,\"670\":1}}],[\"method所对应方法的参数\",{\"1\":{\"658\":1}}],[\"method\",{\"1\":{\"309\":1,\"590\":2,\"646\":1,\"647\":1,\"658\":4,\"684\":2,\"687\":1,\"749\":6,\"765\":6}}],[\"metadata\",{\"1\":{\"765\":1}}],[\"metadate\",{\"1\":{\"146\":1}}],[\"meta\",{\"1\":{\"144\":1}}],[\"member2\",{\"1\":{\"398\":1}}],[\"member1\",{\"1\":{\"398\":1}}],[\"member\",{\"1\":{\"381\":3,\"382\":5,\"398\":7,\"421\":4}}],[\"memcache\",{\"1\":{\"365\":1}}],[\"memcached\",{\"1\":{\"306\":1}}],[\"memory的缺陷就是对表的大小有限制\",{\"1\":{\"239\":1}}],[\"memory存储引擎的表数据存储在内存中\",{\"1\":{\"238\":1}}],[\"memory\",{\"0\":{\"238\":1},\"1\":{\"125\":1,\"238\":1,\"239\":1}}],[\"merge\",{\"1\":{\"208\":1}}],[\"mybeanprocessor\",{\"1\":{\"764\":3}}],[\"myblog\",{\"1\":{\"378\":5}}],[\"myfile\",{\"1\":{\"705\":1}}],[\"myuserdao\",{\"1\":{\"647\":7}}],[\"myexception\",{\"1\":{\"601\":3}}],[\"myredisclient\",{\"1\":{\"424\":1}}],[\"mymaster\",{\"1\":{\"333\":5,\"336\":1}}],[\"myi\",{\"1\":{\"237\":1}}],[\"myisam是mysql早期的默认存储引擎\",{\"1\":{\"237\":1}}],[\"myisam引擎把一个表的总行数存在了磁盘上\",{\"1\":{\"221\":1}}],[\"myisam\",{\"0\":{\"237\":1},\"1\":{\"125\":1,\"238\":1,\"239\":1}}],[\"myd\",{\"1\":{\"237\":1}}],[\"my\",{\"1\":{\"229\":1,\"244\":1,\"483\":1,\"493\":2}}],[\"myservice\",{\"1\":{\"682\":4,\"683\":5}}],[\"myservice2\",{\"1\":{\"682\":3}}],[\"myservice1\",{\"1\":{\"682\":3}}],[\"mystream\",{\"1\":{\"395\":2,\"396\":1}}],[\"mysaldump\",{\"1\":{\"142\":1}}],[\"mysql驱动\",{\"1\":{\"730\":1,\"762\":1}}],[\"mysql服务重新启动之后\",{\"1\":{\"244\":1}}],[\"mysql认为必须要执行查询的行数\",{\"1\":{\"231\":1}}],[\"mysql客户端连接成功后\",{\"1\":{\"228\":1}}],[\"mysql中默认不开启慢查询日志\",{\"1\":{\"229\":1}}],[\"mysql中定义了很多种权限\",{\"1\":{\"198\":1}}],[\"mysql中使用的是limit子句实现\",{\"1\":{\"194\":1}}],[\"mysql中内置了很多的字符串函数\",{\"1\":{\"55\":1}}],[\"mysql特有的语法\",{\"1\":{\"175\":1}}],[\"mysql数据库的sql语言不区分大小写\",{\"1\":{\"175\":1}}],[\"mysql数据模型\",{\"0\":{\"112\":1},\"1\":{\"112\":1}}],[\"mysql必知必会\",{\"1\":{\"173\":1}}],[\"mysql从入门到精通\",{\"1\":{\"173\":1}}],[\"mysql提供了两个选项\",{\"1\":{\"166\":1}}],[\"mysql允许基于另一个视图创建视图\",{\"1\":{\"166\":1}}],[\"mysql会通过视图检查正在更改的每个行\",{\"1\":{\"166\":1}}],[\"mysql目前只支持行级触发器\",{\"1\":{\"157\":1}}],[\"mysql管理\",{\"0\":{\"153\":1},\"1\":{\"172\":1}}],[\"mysqldump\",{\"1\":{\"141\":1}}],[\"mysql优化全囊括\",{\"1\":{\"173\":1}}],[\"mysql优化器会评估哪个字段的索引效率更高\",{\"1\":{\"135\":1}}],[\"mysql优化的b+树\",{\"1\":{\"122\":1}}],[\"mysql也不一定就会使用\",{\"1\":{\"135\":1}}],[\"mysql索引数据结构对经典的b+tree进行了优化\",{\"1\":{\"122\":1}}],[\"mysql的事务要么全部执行\",{\"1\":{\"401\":1}}],[\"mysql的体系结构示意图\",{\"1\":{\"233\":1}}],[\"mysql的体系结构\",{\"0\":{\"233\":1}}],[\"mysql的索引是在存储引擎层实现的\",{\"1\":{\"117\":1}}],[\"mysql的安装\",{\"0\":{\"107\":1}}],[\"mysql版本\",{\"0\":{\"108\":1}}],[\"mysql官方下载地址\",{\"1\":{\"107\":1}}],[\"mysql\",{\"0\":{\"171\":1},\"1\":{\"106\":1,\"107\":1,\"108\":2,\"197\":2,\"204\":1,\"229\":1,\"306\":1,\"631\":1,\"730\":2,\"744\":1,\"746\":2,\"762\":2}}],[\"mysql实例在初始化时会自动创建两个默认的undo表空间\",{\"1\":{\"71\":1}}],[\"mysql5\",{\"1\":{\"61\":1}}],[\"mysql进阶\",{\"0\":{\"59\":1,\"79\":1,\"113\":1,\"137\":1,\"153\":1,\"154\":1,\"162\":1,\"199\":1,\"227\":1,\"232\":1,\"240\":1}}],[\"mysql运维\",{\"0\":{\"53\":1,\"89\":1,\"152\":1,\"170\":1}}],[\"mysql基础\",{\"0\":{\"46\":1,\"54\":1,\"90\":1,\"105\":1,\"174\":1,\"257\":1},\"1\":{\"172\":1}}],[\"more\",{\"1\":{\"449\":1,\"626\":1,\"765\":1}}],[\"move\",{\"1\":{\"346\":1}}],[\"monitor\",{\"1\":{\"333\":2}}],[\"mongodb等\",{\"1\":{\"365\":1}}],[\"mongodb\",{\"1\":{\"111\":1,\"366\":1}}],[\"month\",{\"1\":{\"57\":1}}],[\"modification\",{\"1\":{\"741\":1}}],[\"modified\",{\"1\":{\"623\":1}}],[\"modify\",{\"1\":{\"180\":1}}],[\"modcount\",{\"1\":{\"623\":1}}],[\"modcount++\",{\"1\":{\"623\":3,\"626\":1,\"627\":1}}],[\"module\",{\"1\":{\"553\":1}}],[\"mode\",{\"1\":{\"82\":1,\"146\":1,\"147\":2,\"341\":1}}],[\"mod\",{\"1\":{\"56\":1,\"409\":1}}],[\"may\",{\"1\":{\"765\":4}}],[\"making\",{\"1\":{\"687\":1}}],[\"make\",{\"1\":{\"549\":1}}],[\"matching\",{\"1\":{\"646\":1,\"752\":1}}],[\"math\",{\"1\":{\"585\":2}}],[\"maven\",{\"0\":{\"558\":1},\"1\":{\"630\":1,\"651\":1}}],[\"machine\",{\"1\":{\"613\":1}}],[\"machineerror\",{\"1\":{\"595\":1}}],[\"mac版\",{\"0\":{\"557\":1}}],[\"macos安装\",{\"0\":{\"498\":1}}],[\"macos\",{\"0\":{\"607\":1,\"634\":1},\"1\":{\"479\":1,\"499\":1,\"501\":1,\"634\":1,\"636\":1}}],[\"mac\",{\"1\":{\"474\":1,\"479\":2,\"498\":1,\"501\":1,\"650\":4}}],[\"main\",{\"1\":{\"424\":1,\"464\":2,\"499\":1,\"579\":1,\"580\":4,\"581\":1,\"598\":2,\"631\":1,\"634\":2,\"681\":1,\"687\":1,\"690\":1,\"707\":2,\"708\":1,\"709\":1,\"716\":2,\"718\":1,\"719\":1,\"723\":1,\"752\":1}}],[\"mail\",{\"1\":{\"131\":5}}],[\"mask\",{\"1\":{\"407\":3}}],[\"mast\",{\"1\":{\"128\":1,\"312\":1}}],[\"master\",{\"1\":{\"75\":3,\"296\":1,\"302\":11,\"303\":3,\"304\":4,\"324\":2,\"326\":4,\"328\":2,\"329\":5,\"330\":1,\"336\":1,\"339\":4,\"340\":3,\"345\":1,\"346\":2,\"347\":5}}],[\"map标签必须引入相应的命名空间\",{\"1\":{\"760\":1}}],[\"map集合类型的bean\",{\"1\":{\"760\":1}}],[\"map>\",{\"1\":{\"760\":2}}],[\"map<string\",{\"1\":{\"760\":3}}],[\"mappedname\",{\"1\":{\"647\":1}}],[\"map\",{\"1\":{\"290\":4,\"634\":1,\"650\":1,\"693\":1,\"760\":3}}],[\"man\",{\"1\":{\"773\":1}}],[\"managing\",{\"1\":{\"765\":1}}],[\"manages\",{\"1\":{\"765\":1}}],[\"managed\",{\"1\":{\"765\":2}}],[\"manager属性\",{\"1\":{\"749\":1}}],[\"manager属性的默认值是transactionmanager\",{\"1\":{\"739\":1}}],[\"manager=\",{\"1\":{\"739\":1,\"749\":1}}],[\"manager这款\",{\"1\":{\"375\":1}}],[\"manager\",{\"1\":{\"307\":1,\"375\":1}}],[\"management\",{\"1\":{\"106\":2}}],[\"mandatory\",{\"1\":{\"745\":1}}],[\"many\",{\"1\":{\"346\":1}}],[\"manes\",{\"1\":{\"282\":1,\"283\":1}}],[\"manipulation\",{\"1\":{\"176\":1}}],[\"max=\",{\"1\":{\"700\":1}}],[\"maxclients+config\",{\"1\":{\"464\":1}}],[\"maxevents\",{\"1\":{\"409\":1}}],[\"maxlen\",{\"1\":{\"389\":2}}],[\"maximumsize\",{\"1\":{\"285\":1}}],[\"maxmemory\",{\"1\":{\"275\":1}}],[\"max\",{\"1\":{\"87\":1,\"88\":2,\"168\":1,\"187\":1,\"191\":1,\"309\":2,\"362\":3,\"382\":3,\"417\":1,\"419\":2,\"420\":1,\"421\":2,\"434\":5,\"450\":2,\"585\":2,\"627\":1,\"682\":4,\"683\":1}}],[\"maxsize\",{\"1\":{\"38\":3}}],[\"malloc\",{\"1\":{\"39\":2}}],[\"m\",{\"1\":{\"28\":10,\"87\":1,\"88\":1,\"309\":2,\"479\":1,\"515\":1,\"700\":2}}],[\"的班级类\",{\"1\":{\"758\":1}}],[\"的字符串\",{\"1\":{\"757\":1}}],[\"的返回结果\",{\"1\":{\"752\":1}}],[\"的配置文件中\",{\"1\":{\"752\":1}}],[\"的配置本质上就是把部署\",{\"1\":{\"480\":1}}],[\"的事务中执行\",{\"1\":{\"745\":1}}],[\"的封装\",{\"1\":{\"727\":1}}],[\"的基础上全部使用\",{\"1\":{\"726\":1}}],[\"的基础上可以整合各种企业应用的开源框架和优秀的第三方类库\",{\"1\":{\"726\":1}}],[\"的基本步骤可以清晰的总结为\",{\"1\":{\"509\":1}}],[\"的适用场景很相似\",{\"1\":{\"711\":1}}],[\"的resource实现\",{\"1\":{\"711\":1}}],[\"的使用者\",{\"1\":{\"695\":1}}],[\"的子接口\",{\"1\":{\"695\":2}}],[\"的简写\",{\"1\":{\"691\":1}}],[\"的版本和\",{\"1\":{\"678\":1}}],[\"的版本迭代过程中\",{\"1\":{\"460\":1}}],[\"的多语言能力使得在单个应用程序中混合多种编程语言成为可能\",{\"1\":{\"678\":1}}],[\"的不良体验\",{\"1\":{\"677\":1}}],[\"的分层机制\",{\"1\":{\"677\":1}}],[\"的代码中\",{\"1\":{\"650\":1}}],[\"的话不需要额外引入依赖\",{\"1\":{\"647\":1}}],[\"的数量等于\",{\"1\":{\"646\":1}}],[\"的数据只减不增\",{\"1\":{\"440\":1}}],[\"的数据\",{\"1\":{\"410\":2}}],[\"的数据到redis\",{\"1\":{\"354\":1}}],[\"的类标识为\",{\"1\":{\"644\":1}}],[\"的支持\",{\"1\":{\"641\":1}}],[\"的内部数组\",{\"1\":{\"627\":1}}],[\"的内存占用不能超过\",{\"1\":{\"450\":5}}],[\"的内存\",{\"1\":{\"440\":2}}],[\"的内存淘汰机制\",{\"1\":{\"276\":1}}],[\"的源码不难看出\",{\"1\":{\"621\":1}}],[\"的方法可以不被实现子类所实现\",{\"1\":{\"590\":1}}],[\"的方式是根据\",{\"1\":{\"347\":1}}],[\"的可选择菜单\",{\"1\":{\"554\":2}}],[\"的状态下\",{\"1\":{\"550\":1}}],[\"的状态变量\",{\"1\":{\"387\":1}}],[\"的一部分\",{\"1\":{\"647\":1}}],[\"的一些学习心得和笔记\",{\"1\":{\"543\":1}}],[\"的一致性校验\",{\"1\":{\"347\":1}}],[\"的端口\",{\"1\":{\"537\":1}}],[\"的仓库\",{\"1\":{\"530\":1}}],[\"的选项即可\",{\"1\":{\"526\":1}}],[\"的实例d3a11e669e88\",{\"1\":{\"522\":1}}],[\"的最新版本\",{\"1\":{\"513\":1}}],[\"的最大内存大小\",{\"1\":{\"450\":1}}],[\"的镜像信息\",{\"1\":{\"512\":1}}],[\"的电脑\",{\"1\":{\"499\":1}}],[\"的桌面管理程序\",{\"1\":{\"498\":1}}],[\"的运行有一个简单的认识\",{\"1\":{\"494\":1}}],[\"的专有名词\",{\"1\":{\"494\":1}}],[\"的日常使用提供了基础\",{\"1\":{\"481\":1}}],[\"的二进制执行文件\",{\"1\":{\"476\":1}}],[\"的系统\",{\"1\":{\"475\":1}}],[\"的系列课程\",{\"1\":{\"173\":1,\"268\":1}}],[\"的几乎相同\",{\"1\":{\"474\":1}}],[\"的几种方式\",{\"1\":{\"290\":1}}],[\"的架构和\",{\"1\":{\"474\":1}}],[\"的sds对象\",{\"1\":{\"464\":1}}],[\"的sql语句的cpu的使用情况\",{\"1\":{\"230\":1}}],[\"的sql语句各个阶段的耗时情况\",{\"1\":{\"230\":1}}],[\"的fd读事件\",{\"1\":{\"464\":1}}],[\"的影响\",{\"1\":{\"463\":1}}],[\"的影响或者\",{\"1\":{\"463\":1}}],[\"的响应\",{\"1\":{\"462\":1}}],[\"的响应式编程\",{\"1\":{\"360\":1}}],[\"的应用\",{\"1\":{\"462\":1}}],[\"的利用率\",{\"1\":{\"460\":1}}],[\"的核心业务部分\",{\"1\":{\"460\":1}}],[\"的访问次数之所以叫做逻辑访问次数\",{\"1\":{\"458\":1}}],[\"的访问频率\",{\"1\":{\"458\":1}}],[\"的每个单独的操作系统和机器体系结构\",{\"1\":{\"679\":1}}],[\"的每个事情循环前会调用beforesleep\",{\"1\":{\"457\":1}}],[\"的每一个节点都是一个\",{\"1\":{\"448\":1}}],[\"的频率来执行过期\",{\"1\":{\"457\":1}}],[\"的存活时间\",{\"1\":{\"457\":1}}],[\"的地方\",{\"1\":{\"456\":1}}],[\"的双端列表\",{\"1\":{\"451\":1}}],[\"的首尾各有\",{\"1\":{\"450\":2}}],[\"的长度和\",{\"1\":{\"446\":1}}],[\"的所有数据都rehash到dict\",{\"1\":{\"440\":1}}],[\"的所有sql语句的日志\",{\"1\":{\"229\":1}}],[\"的entry链表rehash到dictht\",{\"1\":{\"440\":1}}],[\"的查询与\",{\"1\":{\"440\":1}}],[\"的哈希表\",{\"1\":{\"439\":1}}],[\"的哈希值hash\",{\"1\":{\"437\":1}}],[\"的进度\",{\"1\":{\"438\":1}}],[\"的指针\",{\"1\":{\"438\":2}}],[\"的编码\",{\"1\":{\"434\":1}}],[\"的范围内\",{\"1\":{\"432\":1}}],[\"的范围是否合法\",{\"1\":{\"38\":1}}],[\"的api\",{\"1\":{\"427\":1}}],[\"的新特性\",{\"1\":{\"423\":1}}],[\"的优势不明显\",{\"1\":{\"421\":1}}],[\"的优点是\",{\"1\":{\"400\":1}}],[\"的整个过程都是非阻塞的\",{\"1\":{\"414\":1}}],[\"的信号关联并设置回调\",{\"1\":{\"413\":1}}],[\"的默认模式\",{\"1\":{\"410\":1}}],[\"的作用\",{\"1\":{\"406\":1}}],[\"的监视\",{\"1\":{\"401\":1}}],[\"的结构如下所示\",{\"1\":{\"387\":1}}],[\"的操作\",{\"1\":{\"361\":1}}],[\"的发布订阅模型\",{\"1\":{\"360\":1}}],[\"的集成模块就叫做\",{\"1\":{\"360\":1}}],[\"的两种序列化实践方案\",{\"1\":{\"358\":1}}],[\"的过程\",{\"1\":{\"357\":1}}],[\"的序列化器为\",{\"1\":{\"358\":1}}],[\"的序列化方式默认就是\",{\"1\":{\"357\":1}}],[\"的序列化方式可以满足我们存储对象的需求\",{\"1\":{\"356\":1}}],[\"的序列化⽅式\",{\"1\":{\"355\":1}}],[\"的意见\",{\"1\":{\"347\":1}}],[\"的意义是什么\",{\"1\":{\"64\":1}}],[\"的有效部分计算哈希值\",{\"1\":{\"345\":1}}],[\"的有小部分计算插槽值\",{\"1\":{\"345\":1}}],[\"的三个作用是什么\",{\"1\":{\"330\":1}}],[\"的从节点\",{\"1\":{\"329\":1}}],[\"的客户端必须感知这种变化\",{\"1\":{\"336\":1}}],[\"的客户端\",{\"1\":{\"326\":1}}],[\"的命令记录的频率也可以通过\",{\"1\":{\"322\":1}}],[\"的缺点\",{\"1\":{\"321\":1}}],[\"的流程\",{\"1\":{\"321\":1}}],[\"的速度是非常快的\",{\"1\":{\"321\":1}}],[\"的机制\",{\"1\":{\"321\":1}}],[\"的文件名称\",{\"1\":{\"322\":1}}],[\"的文件\",{\"1\":{\"321\":1,\"490\":1}}],[\"的非阻塞\",{\"1\":{\"306\":1}}],[\"的目标是让你的web服务直接跑在\",{\"1\":{\"306\":1}}],[\"的高性能\",{\"1\":{\"306\":1}}],[\"的大小\",{\"1\":{\"303\":1,\"450\":1}}],[\"的大小关系\",{\"1\":{\"302\":1}}],[\"的并发能力\",{\"1\":{\"295\":1}}],[\"的并发能力是有上限的\",{\"1\":{\"295\":1}}],[\"的创建是通过\",{\"1\":{\"290\":1}}],[\"的原型库并且\",{\"1\":{\"283\":1}}],[\"的\",{\"1\":{\"283\":2,\"290\":1,\"302\":3,\"311\":3,\"322\":1,\"327\":1,\"329\":1,\"336\":1,\"346\":1,\"348\":1,\"351\":1,\"360\":1,\"378\":1,\"387\":1,\"400\":1,\"405\":1,\"417\":1,\"418\":1,\"429\":1,\"440\":1,\"443\":1,\"456\":1,\"479\":2,\"503\":1,\"536\":1,\"538\":1,\"601\":1,\"641\":1,\"643\":1,\"644\":1,\"661\":1,\"695\":1,\"705\":1,\"719\":1,\"752\":1}}],[\"的缓存\",{\"1\":{\"283\":1}}],[\"的性能成为整个系统的瓶颈\",{\"1\":{\"281\":1}}],[\"的性能\",{\"1\":{\"275\":1}}],[\"的ttl添加随机值\",{\"1\":{\"273\":1}}],[\"的时候\",{\"1\":{\"221\":1,\"457\":1,\"647\":1,\"693\":1,\"758\":1}}],[\"的时候会直接返回这个数\",{\"1\":{\"221\":1}}],[\"的争用以外\",{\"1\":{\"138\":1}}],[\"的索引\",{\"1\":{\"129\":2}}],[\"的工作压力\",{\"1\":{\"75\":1}}],[\"的元素需要比较的平均次数为\",{\"1\":{\"38\":1}}],[\"的元素\",{\"1\":{\"38\":1}}],[\"的线性表中查找值为\",{\"1\":{\"38\":1}}],[\"的线性表中删除一个结点时\",{\"1\":{\"38\":1}}],[\"的线性表中插入一个结点时\",{\"1\":{\"38\":1}}],[\"的位置\",{\"1\":{\"207\":1}}],[\"的位置是否合法\",{\"1\":{\"38\":1}}],[\"的位置不合法\",{\"1\":{\"38\":1}}],[\"的第\",{\"1\":{\"38\":1}}],[\"的变化量\",{\"1\":{\"27\":1,\"28\":1,\"29\":1}}],[\"的关系式为\",{\"1\":{\"24\":1}}],[\"的关系\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"​=2n+1​\",{\"1\":{\"38\":1}}],[\"​=2n−1​\",{\"1\":{\"38\":1}}],[\"​=2n​\",{\"1\":{\"38\":1}}],[\"​=21​\",{\"1\":{\"31\":1}}],[\"​+2n\",{\"1\":{\"31\":1}}],[\"​\",{\"1\":{\"26\":1,\"31\":1}}],[\"6cyn\",{\"1\":{\"634\":1}}],[\"64\",{\"1\":{\"418\":1,\"421\":1,\"428\":1,\"450\":1}}],[\"64mb\",{\"1\":{\"322\":1}}],[\"64tb\",{\"1\":{\"238\":1}}],[\"618\",{\"1\":{\"320\":1}}],[\"65\",{\"1\":{\"308\":1,\"634\":1}}],[\"666\",{\"1\":{\"300\":1}}],[\"6379\",{\"1\":{\"297\":3,\"341\":5,\"346\":1,\"349\":1,\"353\":1,\"362\":1,\"374\":1,\"424\":1}}],[\"60750\",{\"1\":{\"475\":1}}],[\"60000\",{\"1\":{\"333\":1}}],[\"60\",{\"1\":{\"297\":1,\"321\":4}}],[\"6版本以后✅\",{\"1\":{\"125\":1}}],[\"6n\",{\"1\":{\"31\":1}}],[\"6\",{\"0\":{\"778\":1},\"1\":{\"26\":1,\"128\":1,\"131\":2,\"195\":1,\"203\":2,\"283\":1,\"297\":6,\"343\":1,\"372\":2,\"384\":1,\"423\":2,\"432\":2,\"462\":1,\"463\":1,\"468\":1,\"699\":1,\"725\":2}}],[\"owning\",{\"1\":{\"765\":2}}],[\"other\",{\"1\":{\"765\":3}}],[\"obtain\",{\"1\":{\"765\":2}}],[\"objs为资源文件value值所需要的参数\",{\"1\":{\"690\":1}}],[\"objs\",{\"1\":{\"690\":2}}],[\"objencoding\",{\"1\":{\"468\":1}}],[\"objects\",{\"1\":{\"765\":8}}],[\"objectinputstream\",{\"1\":{\"581\":3}}],[\"object>\",{\"1\":{\"355\":2,\"650\":2}}],[\"object\",{\"1\":{\"146\":3,\"147\":2,\"354\":2,\"356\":2,\"362\":1,\"417\":1,\"424\":3,\"573\":1,\"621\":1,\"622\":3,\"623\":4,\"626\":2,\"647\":1,\"650\":4,\"658\":7,\"665\":3,\"669\":1,\"670\":2,\"681\":3,\"690\":2,\"764\":4,\"765\":16}}],[\"obj\",{\"1\":{\"421\":1,\"424\":12,\"464\":5,\"468\":10,\"469\":5,\"650\":4}}],[\"oxm\",{\"1\":{\"727\":1}}],[\"o==null\",{\"1\":{\"626\":1}}],[\"occurrence\",{\"1\":{\"626\":1}}],[\"octet\",{\"1\":{\"308\":1,\"634\":1}}],[\"old\",{\"1\":{\"681\":1}}],[\"oldcapacity\",{\"1\":{\"627\":3}}],[\"oldvalue\",{\"1\":{\"625\":2,\"626\":2}}],[\"old表示将要或者已经删除的数据\",{\"1\":{\"156\":1}}],[\"old表示修改之前的数据\",{\"1\":{\"156\":1}}],[\"ois\",{\"1\":{\"581\":2}}],[\"oop\",{\"1\":{\"573\":1}}],[\"overflow\",{\"1\":{\"627\":2}}],[\"overlay\",{\"1\":{\"486\":1}}],[\"override\",{\"1\":{\"336\":1,\"580\":1,\"581\":1,\"646\":5,\"647\":5,\"650\":3,\"655\":8,\"657\":1,\"658\":1,\"664\":4,\"681\":2,\"684\":2,\"731\":1,\"737\":4,\"745\":1,\"754\":1,\"758\":1,\"760\":1,\"763\":1,\"764\":3,\"765\":2,\"766\":2}}],[\"ok\",{\"1\":{\"309\":4,\"353\":1,\"423\":1,\"464\":1}}],[\"official\",{\"1\":{\"512\":1}}],[\"off\",{\"1\":{\"493\":1}}],[\"offset\",{\"1\":{\"302\":6,\"304\":4,\"328\":1,\"347\":2,\"399\":1,\"449\":3,\"623\":1}}],[\"of\",{\"1\":{\"351\":1,\"428\":7,\"434\":2,\"449\":5,\"621\":5,\"622\":3,\"623\":8,\"624\":1,\"625\":1,\"626\":3,\"627\":3,\"677\":1,\"691\":1,\"726\":1,\"752\":1,\"765\":22}}],[\"ofseconds\",{\"1\":{\"285\":1}}],[\"outofmemoryerror\",{\"1\":{\"595\":1}}],[\"outter$1\",{\"1\":{\"580\":1}}],[\"output\",{\"1\":{\"550\":2}}],[\"outputstreamwriter\",{\"1\":{\"424\":1}}],[\"out\",{\"1\":{\"248\":2,\"284\":2,\"353\":2,\"356\":1,\"362\":1,\"424\":4,\"579\":2,\"580\":5,\"581\":2,\"587\":1,\"631\":1,\"638\":1,\"646\":16,\"647\":8,\"648\":1,\"650\":9,\"651\":1,\"655\":16,\"657\":2,\"658\":4,\"664\":4,\"665\":8,\"668\":2,\"669\":3,\"670\":4,\"681\":1,\"682\":2,\"684\":1,\"687\":2,\"690\":1,\"700\":1,\"701\":1,\"702\":1,\"707\":4,\"708\":3,\"709\":3,\"716\":2,\"718\":3,\"719\":2,\"723\":4,\"731\":4,\"741\":1,\"742\":2,\"743\":1,\"752\":3,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":8,\"765\":2,\"766\":1}}],[\"outer\",{\"1\":{\"97\":2}}],[\"op\",{\"1\":{\"409\":1}}],[\"opsforzset\",{\"1\":{\"361\":1}}],[\"opsforset\",{\"1\":{\"361\":1}}],[\"opsforlist\",{\"1\":{\"361\":1}}],[\"opsforhash\",{\"1\":{\"361\":1}}],[\"opsforvalue\",{\"1\":{\"336\":2,\"356\":2,\"361\":2,\"362\":2}}],[\"ops\",{\"1\":{\"358\":1}}],[\"opm\",{\"1\":{\"307\":3}}],[\"opm是openresty的一个管理工具\",{\"1\":{\"307\":1}}],[\"operation匹配所有方法名以operation结尾的方法\",{\"1\":{\"667\":1}}],[\"operation\",{\"1\":{\"623\":2}}],[\"operate\",{\"1\":{\"159\":1,\"160\":1,\"161\":1}}],[\"openssl\",{\"1\":{\"307\":1}}],[\"openresty获取请求参数\",{\"0\":{\"313\":1}}],[\"openresty快速入门\",{\"0\":{\"310\":1}}],[\"openresty底层是基于nginx的\",{\"1\":{\"308\":1}}],[\"openresty就是在nginx基础上集成了一些lua模块\",{\"1\":{\"307\":1}}],[\"openresty安装的目录是\",{\"1\":{\"307\":1}}],[\"openresty官网\",{\"1\":{\"306\":1}}],[\"openresty®\",{\"1\":{\"306\":3}}],[\"openresty\",{\"1\":{\"306\":3,\"307\":9,\"308\":1,\"309\":2,\"311\":3,\"313\":1}}],[\"open\",{\"1\":{\"254\":2,\"634\":1}}],[\"options\",{\"1\":{\"374\":1}}],[\"optional\",{\"1\":{\"293\":2}}],[\"option\",{\"1\":{\"165\":3,\"166\":1}}],[\"original\",{\"1\":{\"765\":1}}],[\"oriented\",{\"1\":{\"573\":1,\"660\":1,\"726\":1}}],[\"orm\",{\"1\":{\"727\":1}}],[\"org\",{\"1\":{\"288\":1,\"306\":1,\"307\":1,\"643\":9,\"646\":1,\"651\":7,\"661\":1,\"665\":15,\"681\":5,\"682\":9,\"683\":10,\"690\":8,\"700\":7,\"701\":1,\"702\":6,\"705\":1,\"707\":1,\"708\":1,\"709\":1,\"716\":6,\"718\":10,\"719\":3,\"723\":3,\"730\":8,\"731\":3,\"739\":11,\"742\":1,\"746\":11,\"752\":1,\"760\":7,\"761\":8,\"762\":7,\"765\":10}}],[\"organized\",{\"1\":{\"206\":1}}],[\"or\",{\"1\":{\"165\":2,\"189\":1,\"395\":2,\"399\":2,\"449\":2,\"600\":1,\"626\":1,\"765\":11}}],[\"order注解可以控制切面的优先级\",{\"1\":{\"671\":1}}],[\"order\",{\"0\":{\"210\":1},\"1\":{\"136\":1,\"186\":1,\"187\":1,\"193\":1,\"195\":1,\"212\":1,\"622\":1,\"623\":2,\"671\":2}}],[\"or连接的条件\",{\"1\":{\"131\":1}}],[\"oracle官网\",{\"1\":{\"603\":1}}],[\"oracle\",{\"1\":{\"111\":1,\"603\":1,\"744\":1}}],[\"one\",{\"1\":{\"291\":1,\"329\":1,\"330\":1,\"626\":1,\"765\":1}}],[\"only属性\",{\"1\":{\"749\":1}}],[\"only=\",{\"1\":{\"749\":6}}],[\"only\",{\"1\":{\"111\":1,\"146\":1,\"322\":1,\"365\":1,\"687\":1,\"741\":1,\"765\":2}}],[\"on\",{\"1\":{\"52\":2,\"96\":1,\"97\":2,\"98\":1,\"129\":2,\"134\":1,\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"198\":2,\"308\":1,\"321\":1,\"482\":1,\"634\":3,\"765\":8}}],[\"o\",{\"1\":{\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":2,\"38\":11,\"39\":2,\"138\":1,\"306\":1,\"407\":1,\"429\":1,\"440\":9,\"442\":1,\"446\":1,\"452\":1,\"479\":1,\"500\":1,\"549\":1,\"552\":1,\"626\":6}}],[\"时为属性赋值\",{\"1\":{\"754\":1}}],[\"时至今日\",{\"1\":{\"725\":1}}],[\"时采用了多线程\",{\"1\":{\"463\":1}}],[\"时执行该语句块\",{\"1\":{\"292\":2}}],[\"时会if中的代码块会被执行\",{\"1\":{\"292\":1}}],[\"时会重复执行循环体语句\",{\"1\":{\"291\":1}}],[\"时\",{\"1\":{\"39\":1,\"134\":1,\"292\":1,\"304\":1,\"321\":1,\"383\":1,\"406\":2,\"439\":1,\"462\":1,\"472\":1,\"489\":1,\"599\":1,\"647\":1,\"693\":1,\"757\":1}}],[\"时复杂度为\",{\"1\":{\"38\":1}}],[\"时间\",{\"1\":{\"690\":1}}],[\"时间为2秒钟\",{\"1\":{\"229\":1}}],[\"时间值加上一个时间间隔expr后的时间值\",{\"1\":{\"57\":1}}],[\"时间内找到指定的元素\",{\"1\":{\"38\":1}}],[\"时间复杂度会很高\",{\"1\":{\"452\":1}}],[\"时间复杂度为\",{\"1\":{\"38\":5}}],[\"时间复杂度计算这个视频\",{\"1\":{\"22\":1}}],[\"时间复杂度\",{\"0\":{\"22\":1}}],[\"时退出循环\",{\"1\":{\"25\":1}}],[\"当计算机网络中的某个计算机系统负荷过重时\",{\"1\":{\"791\":1}}],[\"当计数器为\",{\"1\":{\"472\":1}}],[\"当a\",{\"1\":{\"745\":1}}],[\"当出现arithmeticexception不发生回滚\",{\"1\":{\"743\":1}}],[\"当不同的事务同时操纵相同的数据时\",{\"1\":{\"733\":1}}],[\"当程序创建applicationcontext实例时\",{\"1\":{\"721\":1}}],[\"当程序获取\",{\"1\":{\"719\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"595\":1}}],[\"当应用程序中的\",{\"1\":{\"719\":1}}],[\"当spring应用需要进行资源访问时\",{\"1\":{\"717\":1}}],[\"当spring识别该字符串参数中包含file\",{\"1\":{\"709\":1}}],[\"当spring识别该字符串参数中包含classpath\",{\"1\":{\"708\":1}}],[\"当执行spring的某个方法时\",{\"1\":{\"708\":1}}],[\"当执行rolback时\",{\"1\":{\"78\":1}}],[\"当目标类有接口的情况使用jdk动态代理和cglib动态代理\",{\"1\":{\"663\":1}}],[\"当中\",{\"1\":{\"647\":1}}],[\"当带参数的构造方法只有一个\",{\"1\":{\"646\":1}}],[\"当然要byname\",{\"1\":{\"646\":1}}],[\"当然也不是说这些教程不好\",{\"1\":{\"543\":1}}],[\"当然也包括网络套接字\",{\"1\":{\"406\":1}}],[\"当你引入spring\",{\"1\":{\"642\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"当时明明是可以的\",{\"1\":{\"636\":1}}],[\"当添加元素时\",{\"1\":{\"627\":1}}],[\"当代码执行到某个条件下无法继续正常执行时\",{\"1\":{\"599\":1}}],[\"当try语句块内发生异常时\",{\"1\":{\"597\":1}}],[\"当此类错误发生时\",{\"1\":{\"595\":1}}],[\"当多个类具有相同的行为\",{\"1\":{\"591\":1}}],[\"当容器在运行的时候是无法直接删除的\",{\"1\":{\"526\":1}}],[\"当运行容器时\",{\"1\":{\"510\":1}}],[\"当本地环境中已经下载好了某些镜像\",{\"1\":{\"491\":1}}],[\"当使用classpath\",{\"1\":{\"723\":2}}],[\"当使用applicationcontext的不同实现类时\",{\"1\":{\"722\":1}}],[\"当使用完一个对象后\",{\"1\":{\"472\":1}}],[\"当使用with\",{\"1\":{\"166\":1}}],[\"当新创建一个对象时\",{\"1\":{\"472\":1}}],[\"当客户端可写时\",{\"1\":{\"462\":1}}],[\"当客户端\",{\"1\":{\"462\":2}}],[\"当loadfactor小于0\",{\"1\":{\"441\":1}}],[\"当loadfactor大于5或者loadfactor大于1并且没有子进程任务时\",{\"1\":{\"441\":1}}],[\"当集合中元素较多时\",{\"1\":{\"439\":1}}],[\"当集群中有一个\",{\"1\":{\"347\":1}}],[\"当集群发生故障转移时\",{\"1\":{\"326\":1}}],[\"当哈希表保存的键值对太多或者太少时\",{\"1\":{\"439\":1}}],[\"当我们向\",{\"1\":{\"438\":1}}],[\"当在一个\",{\"1\":{\"434\":1}}],[\"当在父表中删除对应记录时\",{\"1\":{\"52\":1}}],[\"当在父表中删除\",{\"1\":{\"52\":3}}],[\"当一个集合只包含整数值元素\",{\"1\":{\"432\":1}}],[\"当一个缓存元素过期的时候\",{\"1\":{\"285\":1}}],[\"当元素数量不多时\",{\"1\":{\"421\":1}}],[\"当元素数量小于512并且元素大小小于\",{\"1\":{\"418\":1}}],[\"当存储的所有数据都是整数\",{\"1\":{\"420\":1}}],[\"当存储空间已满时\",{\"1\":{\"38\":1}}],[\"当数据量较大时\",{\"1\":{\"419\":1}}],[\"当数据准备就绪以后\",{\"1\":{\"404\":1}}],[\"当有参数的构造方法只有一个时\",{\"1\":{\"646\":1}}],[\"当有大量\",{\"1\":{\"413\":1}}],[\"当有新消息通过\",{\"1\":{\"383\":1}}],[\"当内核有\",{\"1\":{\"413\":1}}],[\"当内存使用超过配置的时候会返回错误\",{\"1\":{\"278\":1,\"458\":1}}],[\"当内存不足时自动淘汰部分数据\",{\"1\":{\"276\":1}}],[\"当进程运行在用户空间时称为用户态\",{\"1\":{\"403\":1}}],[\"当要存储\",{\"1\":{\"357\":1}}],[\"当故障节点恢复后会自动成为新的\",{\"1\":{\"329\":1}}],[\"当故障实例恢复后也以新的\",{\"1\":{\"326\":1}}],[\"当选中了其中一个\",{\"1\":{\"329\":1}}],[\"当主进程需要对所有的数据都进行修改时\",{\"1\":{\"321\":1}}],[\"当主进程执行写操作时\",{\"1\":{\"321\":1}}],[\"当主进程执行读操作时\",{\"1\":{\"321\":1}}],[\"当子进程写新的\",{\"1\":{\"321\":1}}],[\"当向缓存中一个已经过时的元素进行访问的时候将会进行异步刷新\",{\"1\":{\"283\":1}}],[\"当达到最大容量的时候可以使用基于就近度和频率的算法进行基于容量的驱逐\",{\"1\":{\"283\":1}}],[\"当满足条件的时候推出循环\",{\"1\":{\"252\":1}}],[\"当页中删除的记录达到merge\",{\"1\":{\"208\":1}}],[\"当删除一行记录时\",{\"1\":{\"208\":1}}],[\"当对一个对象进行共享时\",{\"1\":{\"472\":1}}],[\"当对一张表进行增删改查的时候\",{\"1\":{\"146\":1}}],[\"当对表结构进行变更操作的时候\",{\"1\":{\"146\":1}}],[\"当优化器知道每列是否包含null值时\",{\"1\":{\"136\":1}}],[\"当字段类型为字符串\",{\"1\":{\"134\":1}}],[\"当前文件的横向滚动轴滚动\",{\"1\":{\"551\":1}}],[\"当前光标跳转到当前文件的后一个方法名位置\",{\"1\":{\"550\":1}}],[\"当前光标跳转到当前文件的前一个方法名位置\",{\"1\":{\"550\":1}}],[\"当前\",{\"1\":{\"395\":1,\"434\":1}}],[\"当前表与自身的连接查询\",{\"1\":{\"98\":1}}],[\"当前最大事务id+1\",{\"1\":{\"87\":1}}],[\"当前活跃的事务id集合\",{\"1\":{\"87\":1}}],[\"当前读\",{\"0\":{\"82\":1}}],[\"当insert的时候\",{\"1\":{\"85\":1}}],[\"当update一条记录时\",{\"1\":{\"78\":1}}],[\"当事务提交之后会把所有的修改信息都存到该日志文件中\",{\"1\":{\"77\":1}}],[\"当事务提交之后会把所有修改信息都存到该日志中\",{\"1\":{\"74\":1}}],[\"当n=0时线性表是一个空表\",{\"1\":{\"37\":1}}],[\"当\",{\"1\":{\"25\":1,\"321\":1,\"410\":3,\"439\":1,\"489\":1,\"599\":1,\"647\":1}}],[\"45nc\",{\"1\":{\"653\":1}}],[\"4b\",{\"1\":{\"562\":1}}],[\"46\",{\"1\":{\"537\":1}}],[\"4444\",{\"1\":{\"760\":2}}],[\"44\",{\"1\":{\"417\":1}}],[\"4999\",{\"1\":{\"378\":1}}],[\"4版本\",{\"1\":{\"343\":1}}],[\"404\",{\"1\":{\"309\":1,\"634\":2}}],[\"4gb\",{\"1\":{\"275\":2}}],[\"4\",{\"0\":{\"299\":1,\"776\":1,\"792\":1},\"1\":{\"75\":2,\"195\":1,\"203\":2,\"297\":6,\"343\":1,\"355\":1,\"379\":1,\"423\":1,\"424\":3,\"428\":1,\"432\":4,\"444\":1,\"450\":2,\"458\":2,\"467\":3,\"468\":1,\"469\":1,\"522\":1,\"623\":1,\"678\":1,\"725\":1,\"727\":1,\"764\":1}}],[\"4n2​\",{\"1\":{\"25\":1}}],[\"4次及4次以上\",{\"1\":{\"18\":1}}],[\"次修改则触发\",{\"1\":{\"321\":1}}],[\"次\",{\"1\":{\"24\":1,\"38\":1}}],[\"和通信处理机\",{\"1\":{\"785\":1}}],[\"和普通的bean不同\",{\"1\":{\"765\":1}}],[\"和普通方法一样\",{\"1\":{\"588\":1}}],[\"和destroymethod\",{\"1\":{\"764\":1}}],[\"和di\",{\"1\":{\"649\":1}}],[\"和dict\",{\"1\":{\"440\":1}}],[\"和成员变量无关\",{\"1\":{\"754\":1}}],[\"和c\",{\"1\":{\"679\":1}}],[\"和多种语言中调试\",{\"1\":{\"678\":1}}],[\"和许多其他流行语言提供运行时\",{\"1\":{\"678\":1}}],[\"和实际方法中\",{\"1\":{\"667\":1}}],[\"和目标类实现相同的接口\",{\"1\":{\"663\":1}}],[\"和后端环境搭建中的下载文件是相同的\",{\"1\":{\"631\":1}}],[\"和javax\",{\"1\":{\"682\":1}}],[\"和java基础的类库\",{\"1\":{\"611\":1}}],[\"和jvm即可\",{\"1\":{\"612\":1}}],[\"和把\",{\"1\":{\"600\":1}}],[\"和其他\",{\"1\":{\"479\":2,\"678\":1}}],[\"和linkedlist\",{\"1\":{\"418\":1}}],[\"和对应的内容\",{\"1\":{\"387\":1}}],[\"和非nil为真\",{\"1\":{\"292\":1}}],[\"和asyncloadingcache\",{\"1\":{\"283\":1}}],[\"和缓存雪崩不同的是\",{\"1\":{\"274\":1}}],[\"和前面的数据修改相同\",{\"1\":{\"184\":1}}],[\"和创建视图一致\",{\"1\":{\"165\":1}}],[\"和数据表的记录总数的比值\",{\"1\":{\"134\":1}}],[\"和步骤2合并一起\",{\"1\":{\"28\":1,\"29\":1}}],[\"和\",{\"1\":{\"24\":1,\"35\":1,\"78\":1,\"192\":1,\"207\":1,\"245\":1,\"283\":1,\"290\":1,\"293\":1,\"302\":1,\"326\":1,\"355\":2,\"356\":1,\"357\":2,\"360\":1,\"379\":1,\"383\":1,\"406\":1,\"409\":1,\"419\":1,\"421\":3,\"423\":1,\"440\":1,\"455\":1,\"456\":3,\"480\":1,\"503\":1,\"531\":1,\"562\":2,\"594\":1,\"595\":2,\"649\":1,\"650\":2,\"667\":2,\"693\":1,\"695\":1,\"726\":2,\"752\":2}}],[\"kind\",{\"1\":{\"765\":1}}],[\"kit\",{\"1\":{\"611\":1}}],[\"kill\",{\"1\":{\"342\":1,\"386\":1}}],[\"kqueue\",{\"1\":{\"461\":1}}],[\"known\",{\"1\":{\"765\":2}}],[\"know\",{\"1\":{\"434\":2}}],[\"kb\",{\"1\":{\"400\":1,\"450\":5}}],[\"keepalive\",{\"1\":{\"308\":1,\"309\":1,\"634\":2}}],[\"key>\",{\"1\":{\"760\":4}}],[\"key2\",{\"1\":{\"381\":3}}],[\"key1\",{\"1\":{\"381\":3}}],[\"keys\",{\"1\":{\"363\":1,\"456\":3}}],[\"key是查询的key\",{\"1\":{\"309\":1}}],[\"key约束\",{\"1\":{\"236\":1}}],[\"key优化\",{\"0\":{\"205\":1}}],[\"key\",{\"1\":{\"49\":2,\"51\":3,\"52\":1,\"111\":1,\"148\":1,\"231\":3,\"234\":1,\"273\":2,\"274\":2,\"283\":1,\"284\":1,\"290\":2,\"309\":6,\"321\":3,\"322\":1,\"336\":8,\"345\":9,\"346\":1,\"354\":3,\"355\":1,\"357\":2,\"367\":1,\"378\":1,\"379\":2,\"380\":5,\"381\":4,\"382\":9,\"385\":2,\"386\":4,\"387\":1,\"388\":2,\"389\":2,\"390\":2,\"391\":2,\"392\":2,\"393\":2,\"394\":3,\"395\":5,\"396\":3,\"398\":10,\"399\":1,\"400\":1,\"401\":6,\"420\":1,\"421\":1,\"427\":1,\"437\":3,\"438\":2,\"440\":2,\"456\":11,\"457\":5,\"458\":3,\"730\":1,\"737\":2}}],[\"k++\",{\"1\":{\"31\":1}}],[\"k\",{\"1\":{\"24\":1,\"25\":2,\"31\":3,\"549\":1}}],[\"39\",{\"1\":{\"742\":1}}],[\"3333\",{\"1\":{\"758\":1}}],[\"33\",{\"1\":{\"755\":1}}],[\"33<\",{\"1\":{\"730\":1}}],[\"3306\",{\"1\":{\"631\":1,\"730\":1,\"746\":1,\"762\":1}}],[\"36\",{\"1\":{\"700\":2}}],[\"3600s\",{\"1\":{\"634\":1}}],[\"3600\",{\"1\":{\"297\":1}}],[\"3level\",{\"1\":{\"700\":1}}],[\"3<\",{\"1\":{\"699\":1}}],[\"3|4|5|7|8\",{\"1\":{\"683\":1}}],[\"3的值为true执行这里的代码\",{\"1\":{\"565\":1}}],[\"37\",{\"1\":{\"529\":1}}],[\"32\",{\"1\":{\"403\":1,\"407\":2,\"428\":1,\"450\":1,\"453\":1,\"455\":1}}],[\"30<\",{\"1\":{\"762\":1}}],[\"30插入到余额字段\",{\"1\":{\"738\":1}}],[\"30m\",{\"1\":{\"529\":1}}],[\"3000\",{\"1\":{\"346\":2,\"480\":2}}],[\"300\",{\"1\":{\"297\":1,\"321\":2}}],[\"30\",{\"1\":{\"275\":1,\"738\":1}}],[\"3种特殊数据类型\",{\"0\":{\"397\":1},\"1\":{\"264\":1}}],[\"3\",{\"0\":{\"30\":1,\"36\":1,\"147\":1,\"298\":1,\"309\":1,\"775\":1,\"783\":1,\"787\":1,\"788\":1,\"789\":1,\"790\":1,\"791\":2,\"792\":1,\"793\":1},\"1\":{\"24\":2,\"25\":1,\"26\":3,\"28\":1,\"29\":2,\"195\":1,\"203\":2,\"274\":2,\"284\":2,\"353\":1,\"355\":1,\"366\":1,\"407\":1,\"409\":1,\"418\":2,\"424\":5,\"428\":6,\"432\":1,\"444\":1,\"450\":1,\"468\":1,\"469\":4,\"479\":1,\"480\":2,\"482\":1,\"483\":3,\"549\":1,\"550\":1,\"553\":1,\"562\":2,\"565\":1,\"580\":2,\"585\":3,\"643\":1,\"650\":1,\"651\":1,\"658\":1,\"664\":1,\"665\":1,\"666\":2,\"677\":1,\"678\":1,\"687\":1,\"722\":1,\"742\":1,\"752\":2,\"754\":1,\"755\":1,\"757\":1,\"764\":1,\"769\":1,\"782\":1}}],[\"<i>before<\",{\"1\":{\"765\":1}}],[\"<i>not<\",{\"1\":{\"765\":1}}],[\"<util\",{\"1\":{\"760\":2}}],[\"<key>\",{\"1\":{\"760\":4}}],[\"<entry>\",{\"1\":{\"760\":2}}],[\"<entry\",{\"1\":{\"760\":2}}],[\"<element>\",{\"1\":{\"400\":1}}],[\"<map>\",{\"1\":{\"760\":1}}],[\"<masterport>\",{\"1\":{\"299\":2}}],[\"<masterip>\",{\"1\":{\"299\":2}}],[\"<ref\",{\"1\":{\"760\":9}}],[\"<rollingfile\",{\"1\":{\"700\":1}}],[\"<root\",{\"1\":{\"700\":1}}],[\"<null\",{\"1\":{\"757\":1}}],[\"<t>\",{\"1\":{\"765\":1}}],[\"<tx\",{\"1\":{\"739\":1,\"749\":8}}],[\"<tt>arraylist<\",{\"1\":{\"627\":1}}],[\"<tt>true<\",{\"1\":{\"626\":2}}],[\"<tt>\",{\"1\":{\"626\":1}}],[\"<tt>i<\",{\"1\":{\"626\":1}}],[\"<defaultrolloverstrategy\",{\"1\":{\"700\":1}}],[\"<dependencies>\",{\"1\":{\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"681\":1,\"699\":1,\"730\":1}}],[\"<dependency>\",{\"1\":{\"336\":1,\"353\":2,\"355\":1,\"362\":2,\"642\":4,\"647\":1,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":3,\"749\":1,\"762\":2}}],[\"<sizebasedtriggeringpolicy\",{\"1\":{\"700\":1}}],[\"<scope>test<\",{\"1\":{\"353\":1}}],[\"<file\",{\"1\":{\"700\":1}}],[\"<p>the\",{\"1\":{\"765\":2}}],[\"<p>this\",{\"1\":{\"765\":3}}],[\"<p>in\",{\"1\":{\"765\":1}}],[\"<p>if\",{\"1\":{\"765\":1}}],[\"<p>as\",{\"1\":{\"765\":2}}],[\"<p>finally\",{\"1\":{\"765\":1}}],[\"<p>factorybeans\",{\"1\":{\"765\":1}}],[\"<p><b>note\",{\"1\":{\"765\":3}}],[\"<p><b>nb\",{\"1\":{\"765\":1}}],[\"<p><b>the\",{\"1\":{\"765\":1}}],[\"<p><b>\",{\"1\":{\"765\":1}}],[\"<patternlayout\",{\"1\":{\"700\":3}}],[\"<property\",{\"1\":{\"690\":2,\"719\":1,\"730\":5,\"739\":1,\"754\":4,\"757\":5,\"758\":21,\"759\":6,\"760\":24,\"762\":4,\"764\":4}}],[\"<loggers>\",{\"1\":{\"700\":1}}],[\"<list>\",{\"1\":{\"690\":1,\"760\":1}}],[\"<constructor\",{\"1\":{\"755\":4}}],[\"<console\",{\"1\":{\"700\":1}}],[\"<configuration>\",{\"1\":{\"700\":1}}],[\"<context\",{\"1\":{\"643\":10,\"665\":1,\"674\":1,\"700\":1,\"730\":1,\"737\":1,\"762\":2}}],[\"<value>10086<\",{\"1\":{\"760\":2}}],[\"<value>10010<\",{\"1\":{\"760\":2}}],[\"<value>烫头<\",{\"1\":{\"759\":1,\"760\":2}}],[\"<value>喝酒<\",{\"1\":{\"759\":1,\"760\":2}}],[\"<value>抽烟<\",{\"1\":{\"759\":1,\"760\":2}}],[\"<value><\",{\"1\":{\"757\":1}}],[\"<value>codermast<\",{\"1\":{\"690\":1}}],[\"<version>1\",{\"1\":{\"730\":1,\"762\":1}}],[\"<version>8\",{\"1\":{\"730\":1,\"762\":1}}],[\"<version>7\",{\"1\":{\"681\":1}}],[\"<version>2\",{\"1\":{\"642\":2,\"647\":1,\"664\":2,\"699\":2}}],[\"<version>6\",{\"1\":{\"642\":1,\"651\":1,\"664\":3,\"699\":2,\"730\":1,\"749\":1}}],[\"<version>5\",{\"1\":{\"353\":1,\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"<version>4\",{\"1\":{\"353\":1,\"681\":1}}],[\"<array>\",{\"1\":{\"759\":1,\"760\":2}}],[\"<artifactid>druid<\",{\"1\":{\"730\":1,\"762\":1}}],[\"<artifactid>mysql\",{\"1\":{\"730\":1,\"762\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"681\":1}}],[\"<artifactid>log4j\",{\"1\":{\"642\":2,\"664\":2,\"699\":2}}],[\"<artifactid>commons\",{\"1\":{\"362\":1}}],[\"<artifactid>jakarta\",{\"1\":{\"647\":1,\"681\":1}}],[\"<artifactid>jackson\",{\"1\":{\"355\":1}}],[\"<artifactid>junit\",{\"1\":{\"353\":1,\"642\":1,\"650\":1,\"651\":1,\"664\":1,\"699\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"353\":1}}],[\"<artifactid>spring\",{\"1\":{\"336\":1,\"362\":1,\"642\":1,\"651\":1,\"664\":3,\"699\":2,\"730\":1,\"749\":1}}],[\"<appenders>\",{\"1\":{\"700\":1}}],[\"<appender\",{\"1\":{\"700\":3}}],[\"<aop\",{\"1\":{\"665\":1,\"674\":8,\"749\":2}}],[\"<bean\",{\"1\":{\"651\":1,\"690\":1,\"718\":1,\"719\":1,\"730\":2,\"739\":1,\"752\":2,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"762\":1,\"763\":2,\"764\":2,\"765\":1,\"766\":8}}],[\"<beans>\",{\"1\":{\"643\":1,\"762\":1}}],[\"<beans\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"<<=\",{\"1\":{\"563\":1}}],[\"<<\",{\"1\":{\"563\":1}}],[\"<groupid>mysql<\",{\"1\":{\"730\":1,\"762\":1}}],[\"<groupid>jakarta\",{\"1\":{\"647\":1}}],[\"<groupid>com\",{\"1\":{\"355\":1,\"730\":1,\"762\":1}}],[\"<groupid>redis\",{\"1\":{\"353\":1}}],[\"<groupid>org\",{\"1\":{\"336\":1,\"353\":1,\"362\":2,\"642\":4,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":1,\"749\":1}}],[\"<执行体>\",{\"1\":{\"291\":1}}],[\"<>或者\",{\"1\":{\"189\":1}}],[\"<=\",{\"1\":{\"31\":3,\"38\":1,\"88\":2,\"101\":1,\"189\":1,\"424\":1,\"563\":1}}],[\"<\",{\"1\":{\"24\":1,\"26\":1,\"28\":2,\"29\":2,\"38\":4,\"88\":1,\"101\":1,\"123\":1,\"131\":1,\"189\":1,\"223\":2,\"336\":1,\"353\":4,\"355\":2,\"362\":4,\"424\":1,\"434\":4,\"439\":1,\"458\":1,\"464\":1,\"518\":1,\"563\":1,\"599\":2,\"626\":3,\"627\":1,\"642\":9,\"643\":13,\"647\":1,\"650\":3,\"651\":9,\"664\":13,\"665\":3,\"674\":3,\"681\":5,\"690\":5,\"699\":11,\"700\":21,\"718\":2,\"719\":3,\"730\":15,\"737\":1,\"739\":4,\"749\":16,\"752\":1,\"754\":4,\"755\":2,\"757\":10,\"758\":9,\"759\":4,\"760\":30,\"761\":1,\"762\":8,\"763\":1,\"764\":4,\"765\":6,\"766\":2}}],[\"08\",{\"1\":{\"765\":1}}],[\"0提供的\",{\"1\":{\"727\":2}}],[\"09t12\",{\"1\":{\"529\":1}}],[\"02\",{\"1\":{\"529\":1}}],[\"03\",{\"1\":{\"503\":1,\"765\":1}}],[\"04\",{\"1\":{\"487\":2,\"515\":4,\"533\":3,\"742\":1}}],[\"0=off\",{\"1\":{\"449\":1}}],[\"01\",{\"1\":{\"444\":1,\"529\":4}}],[\"001\",{\"1\":{\"528\":2}}],[\"0001~1101\",{\"1\":{\"444\":1}}],[\"00\",{\"1\":{\"444\":1,\"529\":4}}],[\"0则继续\",{\"1\":{\"438\":1}}],[\"0则可以在任意ip访问\",{\"1\":{\"371\":1}}],[\"0结尾的char\",{\"1\":{\"430\":1}}],[\"0结尾\",{\"1\":{\"427\":1}}],[\"0不阻塞\",{\"1\":{\"409\":1}}],[\"0代表未就绪\",{\"1\":{\"407\":1}}],[\"0或1\",{\"1\":{\"399\":1}}],[\"0开始对网络请求启用多线程\",{\"1\":{\"367\":1}}],[\"0<\",{\"1\":{\"353\":1,\"642\":3,\"664\":2,\"699\":2}}],[\"0~16383\",{\"1\":{\"345\":1}}],[\"0之后hmset可以弃用了\",{\"1\":{\"379\":1}}],[\"0之后集群管理命令都集成到了redis\",{\"1\":{\"343\":1}}],[\"0之前集群命令都是用redis安装包下的src\",{\"1\":{\"343\":1}}],[\"0之前\",{\"1\":{\"343\":1}}],[\"0之前创建集群比较麻烦\",{\"1\":{\"343\":1}}],[\"0以后\",{\"1\":{\"343\":1}}],[\"0以后新增命令replicaof\",{\"1\":{\"299\":1}}],[\"0以前\",{\"1\":{\"299\":1}}],[\"0\",{\"1\":{\"24\":3,\"25\":1,\"26\":5,\"28\":5,\"29\":6,\"31\":1,\"38\":7,\"39\":1,\"65\":1,\"258\":2,\"292\":1,\"295\":2,\"328\":1,\"341\":4,\"349\":2,\"353\":1,\"362\":1,\"363\":1,\"371\":11,\"374\":4,\"387\":1,\"395\":2,\"403\":1,\"406\":1,\"407\":1,\"408\":2,\"423\":3,\"424\":5,\"428\":1,\"434\":18,\"439\":2,\"440\":4,\"441\":2,\"450\":1,\"456\":1,\"458\":1,\"460\":2,\"463\":1,\"464\":3,\"467\":1,\"469\":1,\"472\":1,\"480\":2,\"493\":1,\"503\":1,\"513\":2,\"522\":1,\"536\":4,\"537\":4,\"599\":2,\"622\":3,\"623\":5,\"626\":3,\"627\":4,\"634\":5,\"643\":2,\"650\":5,\"651\":2,\"658\":1,\"664\":3,\"665\":1,\"681\":4,\"682\":1,\"683\":1,\"690\":5,\"699\":2,\"700\":2,\"718\":1,\"725\":2,\"730\":3,\"739\":1,\"741\":1,\"742\":1,\"743\":1,\"749\":1,\"760\":1,\"761\":1,\"762\":2,\"765\":3}}],[\"nio\",{\"1\":{\"687\":1}}],[\"nil\",{\"1\":{\"290\":2,\"309\":2}}],[\"nbsp\",{\"1\":{\"626\":4}}],[\"n的平方\",{\"1\":{\"471\":1}}],[\"n$3\",{\"1\":{\"423\":1}}],[\"n小鹏\",{\"1\":{\"423\":1}}],[\"nname\",{\"1\":{\"423\":1}}],[\"nset\",{\"1\":{\"423\":1}}],[\"nhello\",{\"1\":{\"423\":1}}],[\"nfds\",{\"1\":{\"407\":1,\"408\":2}}],[\"nfdbits\",{\"1\":{\"407\":1}}],[\"ngx\",{\"1\":{\"309\":14,\"312\":2,\"313\":2}}],[\"nginx本地缓存\",{\"0\":{\"319\":1}}],[\"nginx的默认配置文件注释太多\",{\"1\":{\"308\":1}}],[\"nginx\",{\"1\":{\"306\":6,\"307\":4,\"308\":6,\"310\":1,\"311\":2,\"312\":2,\"480\":2,\"482\":1,\"483\":2,\"493\":1,\"634\":11}}],[\"nult\",{\"1\":{\"407\":1}}],[\"nullable\",{\"1\":{\"765\":3}}],[\"null时不进行校验\",{\"1\":{\"684\":1}}],[\"nullpointerexception\",{\"1\":{\"622\":1,\"623\":2}}],[\"null约束\",{\"1\":{\"223\":2}}],[\"null约束它\",{\"1\":{\"136\":1}}],[\"null值不参与所有聚合函数运算\",{\"1\":{\"191\":1}}],[\"null\",{\"1\":{\"39\":2,\"49\":1,\"52\":1,\"159\":1,\"160\":1,\"161\":1,\"189\":1,\"231\":1,\"284\":1,\"309\":1,\"353\":1,\"407\":2,\"420\":1,\"424\":5,\"428\":4,\"622\":1,\"623\":2,\"626\":3,\"650\":3,\"658\":1,\"665\":1,\"670\":1,\"684\":1,\"687\":1,\"707\":1,\"730\":4,\"731\":1,\"737\":7,\"757\":5,\"765\":5}}],[\"nummoved\",{\"1\":{\"623\":3,\"626\":3}}],[\"numnew\",{\"1\":{\"623\":13}}],[\"numevents\",{\"1\":{\"464\":2}}],[\"numkeys\",{\"1\":{\"385\":1,\"386\":2}}],[\"num\",{\"1\":{\"290\":1,\"300\":5,\"344\":2,\"345\":3,\"346\":2,\"378\":1,\"424\":1,\"599\":3}}],[\"number\",{\"1\":{\"290\":1,\"449\":1,\"599\":1,\"621\":1,\"627\":2}}],[\"navigation\",{\"1\":{\"550\":1}}],[\"nage\",{\"1\":{\"423\":1}}],[\"native\",{\"0\":{\"679\":1},\"1\":{\"197\":1,\"679\":2}}],[\"name属性\",{\"1\":{\"749\":1,\"754\":1,\"755\":1}}],[\"name=\",{\"1\":{\"690\":2,\"700\":3,\"719\":1,\"730\":5,\"731\":2,\"739\":1,\"749\":6,\"754\":5,\"757\":5,\"758\":21,\"759\":6,\"760\":24,\"761\":1,\"762\":4,\"764\":4}}],[\"names\",{\"1\":{\"587\":2}}],[\"name这个指令的返回结果应该是\",{\"1\":{\"354\":1}}],[\"name`\",{\"1\":{\"204\":1,\"737\":2}}],[\"name字段创建的有索引\",{\"1\":{\"128\":1}}],[\"name\",{\"1\":{\"70\":5,\"128\":1,\"129\":10,\"134\":1,\"146\":1,\"147\":2,\"157\":5,\"201\":1,\"202\":3,\"204\":1,\"212\":2,\"245\":7,\"290\":3,\"293\":2,\"308\":1,\"312\":1,\"336\":2,\"354\":2,\"356\":1,\"362\":4,\"378\":2,\"395\":2,\"396\":2,\"424\":7,\"449\":1,\"485\":2,\"487\":2,\"512\":1,\"528\":3,\"579\":6,\"580\":6,\"581\":7,\"587\":2,\"631\":1,\"634\":1,\"647\":9,\"681\":7,\"682\":5,\"683\":5,\"731\":3,\"746\":1,\"754\":7,\"755\":3,\"757\":3,\"758\":3,\"759\":1,\"760\":2,\"765\":1}}],[\"nrtj\",{\"1\":{\"173\":1}}],[\"n个指针\",{\"1\":{\"120\":1}}],[\"necessarily\",{\"1\":{\"765\":1}}],[\"necessary\",{\"1\":{\"627\":1}}],[\"need\",{\"1\":{\"765\":2}}],[\"negative\",{\"1\":{\"622\":1}}],[\"nested\",{\"1\":{\"621\":1,\"745\":1}}],[\"net2\",{\"1\":{\"487\":2}}],[\"net1\",{\"1\":{\"487\":2}}],[\"net\",{\"1\":{\"486\":1,\"487\":2,\"607\":1,\"704\":1}}],[\"network\",{\"1\":{\"486\":1,\"487\":2}}],[\"networks\",{\"1\":{\"482\":4,\"483\":4}}],[\"never\",{\"1\":{\"428\":1,\"434\":1,\"745\":1}}],[\"newproxyinstance\",{\"1\":{\"658\":2}}],[\"newcapacity\",{\"1\":{\"627\":6}}],[\"newinstance\",{\"1\":{\"581\":4,\"650\":1}}],[\"newenc\",{\"1\":{\"434\":2}}],[\"newbuilder\",{\"1\":{\"284\":1,\"285\":2}}],[\"new\",{\"1\":{\"159\":3,\"160\":3,\"161\":3,\"349\":2,\"353\":1,\"355\":3,\"356\":1,\"424\":8,\"577\":2,\"579\":3,\"580\":7,\"581\":8,\"585\":1,\"599\":1,\"600\":3,\"619\":2,\"622\":2,\"623\":2,\"646\":1,\"648\":1,\"650\":4,\"651\":1,\"658\":3,\"665\":1,\"681\":3,\"682\":6,\"683\":3,\"687\":2,\"690\":3,\"691\":1,\"693\":1,\"696\":1,\"707\":2,\"708\":3,\"709\":4,\"716\":2,\"718\":1,\"719\":1,\"723\":4,\"731\":3,\"745\":2,\"746\":4,\"749\":3,\"752\":1,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":2,\"766\":2}}],[\"new表示将要或已经修改后的数据\",{\"1\":{\"156\":1}}],[\"new表示将要或者已经新增的数据\",{\"1\":{\"156\":1}}],[\"new和old\",{\"1\":{\"156\":1}}],[\"neo4j\",{\"1\":{\"111\":1,\"366\":1}}],[\"nextelement\",{\"1\":{\"650\":1}}],[\"next\",{\"1\":{\"39\":2,\"148\":1,\"438\":1,\"449\":1}}],[\"normal\",{\"1\":{\"765\":2}}],[\"norollbackforclassname\",{\"1\":{\"743\":1}}],[\"norollbackfor\",{\"1\":{\"743\":1}}],[\"norollbackfor属性\",{\"1\":{\"743\":1}}],[\"nouniquebeandefinition\",{\"1\":{\"752\":1}}],[\"nopush\",{\"1\":{\"634\":1}}],[\"noclassdeffounderror\",{\"1\":{\"595\":1}}],[\"noack\",{\"1\":{\"396\":1}}],[\"nosql数据库的常见种类\",{\"1\":{\"366\":1}}],[\"nosql与sql\",{\"0\":{\"366\":1}}],[\"nosql是一项全新的数据库革命性运动\",{\"1\":{\"365\":1}}],[\"nosql仅仅是一个概念\",{\"1\":{\"365\":1}}],[\"nosql最常见的解释是\",{\"1\":{\"365\":1}}],[\"nosql\",{\"1\":{\"365\":1,\"366\":1}}],[\"nobody\",{\"1\":{\"308\":1,\"634\":1}}],[\"noeviction\",{\"1\":{\"278\":1,\"458\":1}}],[\"nonempty\",{\"1\":{\"623\":1}}],[\"nonblocking\",{\"1\":{\"403\":1}}],[\"non\",{\"1\":{\"60\":1,\"111\":1,\"365\":1,\"621\":1}}],[\"now\",{\"1\":{\"57\":1,\"765\":1}}],[\"no\",{\"1\":{\"52\":1,\"146\":1,\"256\":1,\"297\":1,\"322\":2,\"329\":1,\"330\":1,\"341\":1,\"346\":1,\"749\":1,\"752\":1,\"765\":1}}],[\"notblank\",{\"1\":{\"682\":1,\"683\":1}}],[\"notnull\",{\"1\":{\"682\":3,\"683\":3}}],[\"notice\",{\"1\":{\"634\":1}}],[\"notempty\",{\"1\":{\"682\":1}}],[\"note\",{\"1\":{\"428\":1}}],[\"not\",{\"1\":{\"49\":1,\"102\":2,\"103\":1,\"178\":1,\"189\":1,\"255\":1,\"309\":5,\"365\":1,\"399\":2,\"434\":1,\"449\":1,\"626\":1,\"627\":1,\"684\":1,\"730\":1,\"737\":2,\"741\":1,\"745\":1,\"765\":12}}],[\"nodes\",{\"1\":{\"336\":1,\"341\":1,\"343\":1,\"348\":1,\"449\":2}}],[\"node\",{\"1\":{\"39\":1,\"60\":2,\"341\":1,\"346\":2,\"449\":4,\"480\":2}}],[\"n−1\",{\"1\":{\"38\":1}}],[\"n−i\",{\"1\":{\"38\":3}}],[\"n−i+1\",{\"1\":{\"38\":3}}],[\"n3\",{\"1\":{\"31\":1}}],[\"n+1\",{\"1\":{\"31\":2,\"38\":2}}],[\"nm\",{\"1\":{\"28\":1}}],[\"n21​\",{\"1\":{\"26\":1}}],[\"n2\",{\"1\":{\"25\":1,\"29\":1,\"32\":1}}],[\"n\",{\"1\":{\"24\":6,\"25\":3,\"26\":3,\"28\":6,\"29\":6,\"31\":3,\"32\":1,\"38\":11,\"39\":2,\"55\":2,\"128\":3,\"134\":1,\"207\":1,\"238\":1,\"297\":2,\"298\":1,\"333\":1,\"341\":2,\"342\":2,\"408\":2,\"423\":14,\"446\":1,\"452\":1,\"471\":1,\"549\":1,\"553\":1,\"554\":1,\"555\":1,\"700\":3}}],[\"ftp程序\",{\"1\":{\"785\":1}}],[\"ftp\",{\"1\":{\"707\":1,\"719\":1}}],[\"f6\",{\"1\":{\"551\":1}}],[\"f7在\",{\"1\":{\"554\":1}}],[\"f7\",{\"1\":{\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"556\":1}}],[\"f2\",{\"1\":{\"550\":1,\"551\":1,\"556\":1}}],[\"f9\",{\"1\":{\"549\":1,\"551\":2,\"553\":1,\"554\":1,\"556\":1}}],[\"f8\",{\"1\":{\"549\":1,\"550\":1,\"551\":1,\"553\":1,\"556\":1}}],[\"f4\",{\"1\":{\"549\":1,\"551\":1,\"556\":1}}],[\"f3\",{\"1\":{\"549\":1,\"550\":1,\"551\":1,\"556\":1}}],[\"f10\",{\"1\":{\"551\":1,\"554\":1}}],[\"f12\",{\"1\":{\"549\":1,\"553\":1,\"556\":1}}],[\"f11\",{\"1\":{\"549\":1,\"551\":1,\"552\":1,\"556\":1}}],[\"f1\",{\"1\":{\"549\":1,\"550\":1,\"551\":1}}],[\"fssl\",{\"1\":{\"500\":1,\"634\":1}}],[\"fd未打开\",{\"1\":{\"408\":1}}],[\"fdset\",{\"1\":{\"464\":1}}],[\"fds\",{\"1\":{\"407\":2}}],[\"fd\",{\"1\":{\"406\":7,\"407\":15,\"408\":7,\"409\":4,\"410\":7,\"412\":12,\"413\":1,\"461\":3,\"464\":7}}],[\"focused\",{\"1\":{\"485\":2,\"538\":2}}],[\"found捕获的sqlstate代码的简写\",{\"1\":{\"255\":1}}],[\"found\",{\"1\":{\"255\":1,\"309\":1,\"434\":2,\"646\":1,\"752\":1}}],[\"for=\",{\"1\":{\"749\":3}}],[\"for属性\",{\"1\":{\"749\":2}}],[\"forname\",{\"1\":{\"650\":1}}],[\"format\",{\"1\":{\"634\":1}}],[\"formally\",{\"1\":{\"626\":1}}],[\"forwarded\",{\"1\":{\"634\":1}}],[\"forward\",{\"1\":{\"454\":1}}],[\"fork\",{\"1\":{\"321\":8}}],[\"for循环\",{\"0\":{\"568\":1},\"1\":{\"291\":1}}],[\"force\",{\"1\":{\"132\":2,\"347\":1,\"526\":1}}],[\"foreign\",{\"1\":{\"49\":1,\"51\":3,\"52\":1}}],[\"for\",{\"1\":{\"28\":2,\"29\":2,\"31\":3,\"38\":3,\"39\":1,\"82\":1,\"146\":1,\"147\":1,\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"198\":1,\"230\":2,\"254\":1,\"255\":1,\"291\":3,\"351\":2,\"424\":2,\"434\":2,\"449\":2,\"464\":1,\"501\":3,\"568\":5,\"587\":1,\"626\":2,\"627\":1,\"634\":1,\"650\":3,\"687\":1,\"745\":1,\"765\":17}}],[\"fetch\",{\"1\":{\"254\":1}}],[\"fetch和close\",{\"1\":{\"254\":1}}],[\"future\",{\"1\":{\"449\":1}}],[\"fully\",{\"1\":{\"765\":2}}],[\"fullname\",{\"1\":{\"650\":3}}],[\"fulltext\",{\"1\":{\"126\":1,\"129\":2}}],[\"full\",{\"1\":{\"117\":1,\"125\":1}}],[\"function\",{\"1\":{\"256\":1,\"290\":1,\"293\":7,\"309\":3}}],[\"func\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"31\":1}}],[\"first\",{\"1\":{\"621\":1,\"623\":1,\"626\":1}}],[\"field\",{\"1\":{\"379\":2,\"388\":3,\"419\":1,\"646\":1,\"647\":1,\"650\":10,\"684\":2}}],[\"fields\",{\"1\":{\"204\":1}}],[\"fine\",{\"1\":{\"765\":1}}],[\"final<\",{\"1\":{\"681\":1}}],[\"finally结构围绕整个被代理的目标方法\",{\"1\":{\"661\":1,\"666\":1}}],[\"finally语句块中发生了异常\",{\"1\":{\"600\":1}}],[\"finally语句块总是会被执行\",{\"1\":{\"597\":1}}],[\"finally遇见如下情况不会执行\",{\"1\":{\"600\":1}}],[\"finally可用在不需要捕获异常的代码\",{\"1\":{\"600\":1}}],[\"finally\",{\"1\":{\"424\":1,\"597\":1,\"600\":10,\"658\":1,\"665\":1,\"670\":1,\"734\":1}}],[\"final\",{\"1\":{\"349\":1,\"572\":1,\"590\":1,\"592\":1,\"600\":1,\"622\":1,\"623\":2}}],[\"find\",{\"1\":{\"293\":2,\"434\":1,\"749\":1}}],[\"fin报文段即使不携带任何数据\",{\"1\":{\"19\":1}}],[\"filters属性\",{\"1\":{\"643\":1}}],[\"filters=\",{\"1\":{\"643\":2}}],[\"filter\",{\"1\":{\"643\":4}}],[\"filter标签\",{\"1\":{\"643\":2}}],[\"filtered的值越大越好\",{\"1\":{\"231\":1}}],[\"filtered\",{\"1\":{\"231\":1}}],[\"fill\",{\"1\":{\"449\":3}}],[\"file访问\",{\"1\":{\"710\":1}}],[\"file>\",{\"1\":{\"700\":1}}],[\"filepattern=\",{\"1\":{\"700\":1}}],[\"filepath\",{\"1\":{\"650\":4}}],[\"fileparent\",{\"1\":{\"650\":3}}],[\"filenotfoundexception\",{\"1\":{\"598\":1,\"600\":4}}],[\"filename=\",{\"1\":{\"700\":2}}],[\"filename\",{\"1\":{\"84\":1}}],[\"fileinputstream\",{\"1\":{\"581\":1,\"600\":1}}],[\"filesystemapplicationcontext获取resource实例\",{\"1\":{\"716\":1}}],[\"filesystemresource等实现类\",{\"1\":{\"717\":1}}],[\"filesystemresource实例可使用filesystemresource构造器显示地创建\",{\"1\":{\"709\":1}}],[\"filesystemresourcedemo\",{\"1\":{\"709\":1}}],[\"filesystemresource\",{\"0\":{\"709\":1},\"1\":{\"706\":1,\"709\":7,\"719\":1,\"721\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"695\":1,\"716\":2,\"722\":1,\"723\":1}}],[\"filesort并存\",{\"1\":{\"212\":1}}],[\"filesort\",{\"1\":{\"211\":2}}],[\"files\",{\"0\":{\"73\":1}}],[\"file\",{\"0\":{\"69\":1},\"1\":{\"68\":1,\"69\":1,\"70\":1,\"77\":1,\"204\":2,\"236\":2,\"311\":1,\"313\":1,\"321\":1,\"322\":1,\"341\":1,\"406\":1,\"491\":1,\"493\":2,\"650\":4,\"705\":1,\"707\":2,\"709\":1,\"717\":1,\"765\":1}}],[\"float\",{\"1\":{\"378\":1,\"562\":1}}],[\"floor\",{\"1\":{\"56\":1}}],[\"flags\",{\"1\":{\"428\":6,\"464\":1}}],[\"flag\",{\"1\":{\"290\":1}}],[\"flaged\",{\"1\":{\"208\":1}}],[\"flush\",{\"1\":{\"65\":1,\"141\":1,\"386\":1,\"424\":1}}],[\"fri\",{\"1\":{\"742\":1}}],[\"framework\",{\"1\":{\"726\":3,\"765\":3}}],[\"framework的特点\",{\"0\":{\"726\":1}}],[\"frac\",{\"1\":{\"29\":1}}],[\"front\",{\"1\":{\"483\":3}}],[\"from\",{\"1\":{\"96\":2,\"97\":2,\"98\":1,\"99\":2,\"100\":2,\"128\":2,\"129\":1,\"132\":3,\"134\":2,\"146\":1,\"147\":1,\"165\":1,\"179\":1,\"184\":1,\"186\":1,\"188\":4,\"189\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"197\":1,\"198\":1,\"212\":1,\"231\":1,\"242\":1,\"245\":1,\"246\":1,\"346\":1,\"490\":2,\"493\":2,\"623\":1,\"626\":4,\"731\":5,\"737\":1,\"765\":2}}],[\"frequently\",{\"1\":{\"458\":1}}],[\"free\",{\"1\":{\"63\":1}}],[\"frm\",{\"1\":{\"236\":1}}],[\"f\",{\"1\":{\"58\":1,\"526\":2,\"529\":3,\"541\":2,\"549\":1,\"553\":1,\"554\":1}}],[\"far\",{\"1\":{\"765\":1}}],[\"facilities\",{\"1\":{\"765\":1}}],[\"factories\",{\"1\":{\"765\":1}}],[\"factor\",{\"1\":{\"449\":1,\"458\":2}}],[\"factorybean<user>\",{\"1\":{\"765\":1}}],[\"factorybean<t>\",{\"1\":{\"765\":1}}],[\"factorybeans\",{\"1\":{\"765\":2}}],[\"factorybeannotinitializedexception\",{\"1\":{\"765\":4}}],[\"factorybeanobjecttype\",{\"1\":{\"765\":1}}],[\"factorybean接口源码\",{\"1\":{\"765\":1}}],[\"factorybean是spring提供的一种整合第三方框架的常用机制\",{\"1\":{\"765\":1}}],[\"factorybean\",{\"0\":{\"765\":1},\"1\":{\"765\":19}}],[\"factory\",{\"1\":{\"355\":2,\"646\":1,\"658\":2,\"682\":2,\"702\":1,\"731\":1,\"746\":1,\"752\":1,\"765\":9}}],[\"fatal\",{\"1\":{\"700\":2}}],[\"fastremove\",{\"1\":{\"626\":2}}],[\"fast模式规则\",{\"1\":{\"457\":1}}],[\"fasterxml\",{\"1\":{\"355\":1}}],[\"fasle\",{\"1\":{\"38\":1}}],[\"failover\",{\"1\":{\"333\":1,\"347\":3}}],[\"false\",{\"1\":{\"38\":3,\"290\":2,\"292\":2,\"623\":2,\"626\":1,\"643\":2,\"684\":1,\"700\":1,\"734\":1,\"749\":3,\"765\":2}}],[\"解耦\",{\"1\":{\"655\":1,\"656\":1}}],[\"解压完成以后的文件如下\",{\"1\":{\"634\":1}}],[\"解释成操作系统能够识别的字节码\",{\"1\":{\"613\":1}}],[\"解释器来执行脚本\",{\"1\":{\"384\":1}}],[\"解析缓冲区字符串\",{\"1\":{\"464\":1}}],[\"解析客户端命令\",{\"1\":{\"463\":1}}],[\"解析响应\",{\"1\":{\"424\":3}}],[\"解锁\",{\"1\":{\"141\":1}}],[\"解决问题的困难\",{\"1\":{\"655\":1}}],[\"解决这两个问题\",{\"1\":{\"655\":1}}],[\"解决连续内存空间申请效率问题\",{\"1\":{\"451\":1}}],[\"解决了传统链表的内存占用问题\",{\"1\":{\"451\":1}}],[\"解决了顺序表需要大量连续存储单元的缺点\",{\"1\":{\"39\":1}}],[\"解决方案二\",{\"1\":{\"757\":1}}],[\"解决方案一\",{\"1\":{\"757\":1}}],[\"解决方案\",{\"1\":{\"272\":1,\"273\":1,\"274\":2}}],[\"解决哈希碰撞的方法有很多\",{\"1\":{\"123\":1}}],[\"解决思路\",{\"1\":{\"23\":1,\"655\":1}}],[\"解题思路\",{\"1\":{\"27\":1,\"30\":1}}],[\"解得i=2−1±1+8n​​\",{\"1\":{\"26\":1}}],[\"解得\",{\"1\":{\"25\":1,\"128\":1}}],[\"解方程\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"联合索引很多时候可以覆盖索引\",{\"1\":{\"136\":1}}],[\"联合索引中\",{\"1\":{\"131\":1}}],[\"联合索引\",{\"0\":{\"135\":1},\"1\":{\"129\":1,\"131\":1,\"135\":1}}],[\"联合查询等操作\",{\"1\":{\"164\":1}}],[\"联合查询\",{\"0\":{\"99\":1}}],[\"联立即可得到\",{\"1\":{\"24\":1}}],[\"联立两式\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"联系我\",{\"0\":{\"4\":1}}],[\"确保transaction01可以多次从一个表中读取到相同的行\",{\"1\":{\"744\":1}}],[\"确保transaction01可以多次从一个字段中读取到相同的值\",{\"1\":{\"744\":1}}],[\"确保索引记录间隙不变\",{\"1\":{\"148\":1}}],[\"确定循环的停止条件\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"确认字符\",{\"1\":{\"387\":1}}],[\"确认号ack\",{\"1\":{\"19\":1}}],[\"确认号ack=x+1\",{\"1\":{\"17\":1}}],[\"确认报文段不携带数据\",{\"1\":{\"17\":1}}],[\"i>\",{\"1\":{\"765\":2}}],[\"i18n\",{\"1\":{\"687\":1}}],[\"i18n概述\",{\"0\":{\"686\":1}}],[\"illegalaccessexception\",{\"1\":{\"650\":2}}],[\"illegalargumentexception\",{\"1\":{\"599\":2,\"622\":2}}],[\"illegal\",{\"1\":{\"622\":1}}],[\"implementation\",{\"1\":{\"765\":3}}],[\"implementations\",{\"1\":{\"765\":4}}],[\"implement\",{\"1\":{\"765\":4}}],[\"implemented\",{\"1\":{\"765\":1}}],[\"implements\",{\"1\":{\"581\":1,\"600\":1,\"646\":5,\"647\":5,\"650\":5,\"655\":2,\"657\":1,\"664\":1,\"681\":1,\"684\":1,\"718\":1,\"737\":2,\"745\":1,\"764\":1,\"765\":3,\"766\":2}}],[\"implied\",{\"1\":{\"765\":1}}],[\"implies\",{\"1\":{\"623\":1}}],[\"impl\",{\"1\":{\"749\":1}}],[\"impl<\",{\"1\":{\"642\":1,\"664\":1,\"699\":1}}],[\"import\",{\"1\":{\"518\":1,\"525\":1,\"646\":5,\"647\":5,\"651\":3,\"665\":6,\"681\":5,\"682\":15,\"683\":13,\"684\":5,\"687\":3,\"690\":5,\"701\":1,\"702\":7,\"707\":1,\"708\":2,\"709\":2,\"716\":6,\"718\":6,\"719\":3,\"723\":3,\"731\":3,\"746\":15,\"765\":1}}],[\"images\",{\"1\":{\"495\":1,\"496\":1,\"511\":1,\"515\":1}}],[\"image\",{\"0\":{\"679\":1},\"1\":{\"480\":3,\"482\":2,\"483\":5,\"493\":1,\"511\":1,\"679\":2}}],[\"i7系列\",{\"1\":{\"498\":1}}],[\"i3\",{\"1\":{\"498\":1}}],[\"i5\",{\"1\":{\"498\":1}}],[\"i++\",{\"1\":{\"424\":1}}],[\"i+1\",{\"1\":{\"26\":1,\"31\":1}}],[\"itself\",{\"1\":{\"765\":4}}],[\"its\",{\"1\":{\"626\":1,\"765\":1}}],[\"it\",{\"1\":{\"520\":2,\"621\":1,\"626\":2,\"627\":3,\"765\":11}}],[\"itd\",{\"1\":{\"487\":2}}],[\"itcast\",{\"1\":{\"345\":2}}],[\"iterator\",{\"1\":{\"622\":1,\"623\":2}}],[\"iterator<string>\",{\"1\":{\"600\":1}}],[\"iterate\",{\"1\":{\"253\":2}}],[\"items\",{\"1\":{\"449\":1}}],[\"item\",{\"1\":{\"309\":2,\"311\":4,\"312\":2,\"313\":3}}],[\"iphone\",{\"1\":{\"503\":1}}],[\"iputils\",{\"1\":{\"487\":1}}],[\"ipfd\",{\"1\":{\"464\":3}}],[\"ip和port是redis地址\",{\"1\":{\"309\":1}}],[\"ip\",{\"1\":{\"296\":1,\"297\":6,\"309\":2,\"332\":1,\"333\":1,\"340\":1,\"341\":1,\"536\":1,\"537\":1}}],[\"ipairs是lua提供的一个迭代器函数\",{\"1\":{\"291\":1}}],[\"ipairs\",{\"1\":{\"291\":1}}],[\"i是数组索引值\",{\"1\":{\"291\":1}}],[\"ix\",{\"1\":{\"147\":1}}],[\"issingleton\",{\"1\":{\"765\":2}}],[\"isprototype\",{\"1\":{\"765\":2}}],[\"isfile\",{\"1\":{\"705\":2}}],[\"isopen\",{\"1\":{\"705\":2}}],[\"isolation属性\",{\"1\":{\"749\":1}}],[\"isolation\",{\"1\":{\"76\":1,\"259\":1,\"261\":2,\"733\":1,\"744\":10}}],[\"isreadable\",{\"1\":{\"705\":2}}],[\"isvalid\",{\"1\":{\"684\":1}}],[\"isinterface\",{\"1\":{\"650\":1}}],[\"isdirectory\",{\"1\":{\"650\":2}}],[\"isempty\",{\"1\":{\"619\":1,\"682\":1}}],[\"is\",{\"1\":{\"147\":1,\"189\":1,\"346\":1,\"351\":1,\"428\":2,\"434\":38,\"621\":2,\"622\":2,\"623\":8,\"626\":2,\"627\":2,\"741\":1,\"765\":17}}],[\"ignore\",{\"1\":{\"132\":2,\"765\":1}}],[\"iocxml\",{\"1\":{\"752\":3,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"763\":2,\"764\":1,\"765\":1,\"766\":8}}],[\"ioc和di的基本实现\",{\"1\":{\"727\":1}}],[\"ioc思想的一个落地的产品实现\",{\"1\":{\"695\":1}}],[\"ioc控制反转\",{\"0\":{\"693\":1}}],[\"ioc容器关闭\",{\"1\":{\"764\":1}}],[\"ioc容器初始化时\",{\"1\":{\"763\":1}}],[\"ioc容器中管理的组件也叫做\",{\"1\":{\"695\":1}}],[\"ioc容器在spring中的实现\",{\"0\":{\"695\":1}}],[\"ioc容器\",{\"0\":{\"691\":1,\"692\":1},\"1\":{\"753\":1}}],[\"ioc\",{\"1\":{\"642\":2,\"649\":4,\"650\":1,\"664\":1,\"691\":4,\"693\":5,\"694\":1,\"695\":5,\"719\":1,\"726\":3,\"751\":1}}],[\"ioexception\",{\"1\":{\"424\":4,\"581\":1,\"595\":1,\"598\":1,\"600\":7,\"705\":8}}],[\"io多路复用\",{\"0\":{\"406\":1},\"1\":{\"367\":1,\"406\":1}}],[\"io详解\",{\"0\":{\"402\":1},\"1\":{\"267\":1}}],[\"iot\",{\"1\":{\"206\":1}}],[\"io\",{\"1\":{\"75\":1,\"303\":2,\"321\":1,\"360\":1,\"368\":1,\"376\":1,\"403\":11,\"404\":2,\"405\":2,\"406\":5,\"408\":1,\"410\":1,\"413\":2,\"414\":3,\"415\":1,\"461\":1,\"462\":1,\"463\":3,\"705\":1,\"707\":1,\"708\":2,\"709\":2,\"710\":1,\"716\":2,\"718\":3,\"719\":1,\"723\":1,\"765\":1}}],[\"ibd\",{\"1\":{\"84\":1,\"236\":1}}],[\"ibd2sdi\",{\"1\":{\"84\":1}}],[\"ibd2sdi指令可以查看ibd文件\",{\"1\":{\"84\":1}}],[\"ibd2sdi指令\",{\"1\":{\"84\":1}}],[\"ib\",{\"1\":{\"74\":2}}],[\"id和类型同时使用的方式进行获取\",{\"1\":{\"752\":1}}],[\"id属性\",{\"1\":{\"749\":1}}],[\"id`\",{\"1\":{\"737\":6}}],[\"id=\",{\"1\":{\"651\":1,\"674\":1,\"690\":1,\"718\":1,\"719\":1,\"730\":2,\"731\":5,\"739\":1,\"749\":1,\"752\":2,\"754\":2,\"755\":1,\"758\":5,\"759\":1,\"760\":8,\"761\":2,\"762\":1,\"763\":3,\"764\":2,\"765\":1,\"766\":8}}],[\"id=1001\",{\"1\":{\"313\":2}}],[\"idea\",{\"0\":{\"546\":1},\"1\":{\"546\":1,\"550\":1,\"552\":1,\"604\":1,\"630\":1}}],[\"identified\",{\"1\":{\"197\":2}}],[\"idle\",{\"1\":{\"309\":2,\"362\":2}}],[\"id不同\",{\"1\":{\"231\":1}}],[\"id相同\",{\"1\":{\"231\":1}}],[\"idx\",{\"1\":{\"132\":3,\"134\":1}}],[\"id为主键\",{\"1\":{\"128\":1}}],[\"ids\",{\"1\":{\"87\":1,\"88\":1,\"387\":2}}],[\"id隐藏列\",{\"1\":{\"60\":1}}],[\"id\",{\"1\":{\"60\":1,\"84\":4,\"87\":4,\"88\":11,\"128\":1,\"159\":3,\"160\":3,\"161\":3,\"212\":1,\"223\":1,\"230\":4,\"231\":1,\"234\":1,\"302\":4,\"312\":1,\"313\":3,\"328\":1,\"346\":3,\"347\":1,\"378\":3,\"387\":6,\"388\":3,\"390\":4,\"394\":4,\"395\":2,\"396\":4,\"456\":2,\"511\":1,\"514\":1,\"515\":1,\"517\":2,\"518\":1,\"525\":1,\"526\":1,\"528\":2,\"539\":1,\"540\":1,\"651\":1,\"731\":4,\"737\":3,\"752\":7,\"754\":7,\"755\":3,\"758\":3,\"759\":1,\"760\":2,\"763\":9,\"764\":10}}],[\"i=1∑n+1​pi​\",{\"1\":{\"38\":1}}],[\"i=1∑n​pi​∗i=i=1∑n​n1​∗i=n1​2n\",{\"1\":{\"38\":1}}],[\"i=1∑n​pi​\",{\"1\":{\"38\":1}}],[\"i=1∑n​i2+i=1∑n​i\",{\"1\":{\"31\":1}}],[\"i=1∑n​j=1∑i​k=1∑j​1=i=1∑n​j=1∑i​j=i=1∑n​2i\",{\"1\":{\"31\":1}}],[\"if语句\",{\"0\":{\"565\":1}}],[\"if判断\",{\"0\":{\"247\":1}}],[\"ifnull\",{\"1\":{\"58\":1}}],[\"if\",{\"1\":{\"38\":5,\"58\":1,\"165\":1,\"178\":2,\"179\":1,\"242\":1,\"247\":2,\"292\":2,\"309\":5,\"353\":1,\"424\":6,\"434\":17,\"464\":1,\"565\":12,\"599\":1,\"622\":6,\"623\":12,\"626\":11,\"627\":6,\"650\":8,\"681\":2,\"684\":1,\"765\":7}}],[\"inputstreamresource\",{\"0\":{\"711\":1},\"1\":{\"706\":1,\"711\":1}}],[\"inputstreamreader\",{\"1\":{\"424\":1}}],[\"inputstream就不能够多次读取\",{\"1\":{\"705\":1}}],[\"inputstream\",{\"1\":{\"705\":1,\"708\":2,\"709\":2,\"711\":1}}],[\"inputstreamsource接口\",{\"1\":{\"705\":1}}],[\"inputstreamsource\",{\"1\":{\"705\":2}}],[\"injection\",{\"1\":{\"693\":1,\"694\":1,\"753\":1,\"765\":1}}],[\"inversion\",{\"1\":{\"691\":1,\"726\":1}}],[\"involved\",{\"1\":{\"765\":1}}],[\"invocations\",{\"1\":{\"765\":1}}],[\"invocationhandler\",{\"1\":{\"658\":5,\"663\":1}}],[\"invoke\",{\"1\":{\"658\":2}}],[\"inheritdoc\",{\"1\":{\"623\":1,\"624\":1,\"625\":1,\"626\":1}}],[\"init\",{\"1\":{\"764\":1}}],[\"initmethod\",{\"1\":{\"764\":2}}],[\"initialization\",{\"1\":{\"765\":2}}],[\"initialized\",{\"1\":{\"765\":2}}],[\"initialize\",{\"1\":{\"684\":1}}],[\"initialcapacity\",{\"1\":{\"622\":6}}],[\"initial\",{\"1\":{\"622\":5}}],[\"initserver\",{\"1\":{\"464\":3}}],[\"initlist\",{\"1\":{\"37\":1}}],[\"independent\",{\"1\":{\"765\":4}}],[\"index属性\",{\"1\":{\"755\":1}}],[\"index++\",{\"1\":{\"626\":2}}],[\"index+1\",{\"1\":{\"626\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"623\":2,\"624\":1,\"625\":1,\"626\":1}}],[\"index和using\",{\"1\":{\"212\":1}}],[\"index\",{\"0\":{\"66\":1},\"1\":{\"66\":1,\"129\":7,\"132\":6,\"133\":2,\"134\":1,\"147\":1,\"206\":1,\"211\":3,\"212\":2,\"215\":1,\"231\":1,\"308\":3,\"623\":15,\"624\":6,\"625\":6,\"626\":17,\"634\":3}}],[\"indicate\",{\"1\":{\"765\":2}}],[\"indicates\",{\"1\":{\"765\":1}}],[\"indices\",{\"1\":{\"623\":1,\"626\":1}}],[\"individual\",{\"1\":{\"449\":1,\"765\":1}}],[\"increases\",{\"1\":{\"623\":1,\"627\":2}}],[\"increment=2\",{\"1\":{\"737\":1}}],[\"increment=3\",{\"1\":{\"737\":1}}],[\"increment\",{\"1\":{\"234\":1,\"382\":1,\"730\":1,\"737\":2}}],[\"increment自增主键\",{\"1\":{\"209\":1}}],[\"incrbyfloat\",{\"1\":{\"378\":1}}],[\"incrby\",{\"1\":{\"378\":2}}],[\"incr\",{\"1\":{\"378\":1,\"464\":1}}],[\"include\",{\"1\":{\"308\":1,\"634\":1,\"643\":3}}],[\"instead\",{\"1\":{\"765\":1}}],[\"instrument\",{\"1\":{\"727\":1}}],[\"instantiating\",{\"1\":{\"765\":1}}],[\"instantiationexception\",{\"1\":{\"650\":1}}],[\"instances\",{\"1\":{\"765\":3}}],[\"instance\",{\"1\":{\"627\":1,\"643\":1,\"650\":5,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1,\"765\":5}}],[\"instanceof运算符用于判断前面的对象是否是后面的类\",{\"1\":{\"752\":1}}],[\"instanceof\",{\"1\":{\"563\":1,\"752\":2}}],[\"installer\",{\"1\":{\"499\":1}}],[\"installation\",{\"1\":{\"368\":1}}],[\"install\",{\"1\":{\"307\":4,\"343\":2,\"368\":1,\"372\":1,\"480\":1,\"487\":1,\"490\":2,\"493\":1,\"498\":3,\"501\":6,\"634\":3}}],[\"inserted\",{\"1\":{\"434\":1}}],[\"inserts\",{\"1\":{\"434\":1,\"623\":1}}],[\"insert优化\",{\"0\":{\"200\":1}}],[\"insert型触发器\",{\"1\":{\"156\":1}}],[\"insert\",{\"1\":{\"75\":1,\"82\":1,\"146\":1,\"147\":1,\"157\":1,\"159\":5,\"160\":2,\"161\":2,\"182\":4,\"198\":1,\"201\":1,\"202\":3,\"228\":1,\"434\":2,\"550\":1,\"623\":1,\"731\":1,\"737\":2}}],[\"inout\",{\"1\":{\"248\":2}}],[\"infrastructure\",{\"1\":{\"765\":1}}],[\"info\",{\"1\":{\"299\":1,\"475\":1,\"634\":1,\"646\":1,\"648\":1,\"665\":1,\"700\":2}}],[\"information\",{\"1\":{\"242\":1}}],[\"infogrid\",{\"1\":{\"111\":1}}],[\"infile\",{\"1\":{\"204\":5}}],[\"infinite\",{\"1\":{\"111\":1}}],[\"inner\",{\"1\":{\"96\":1}}],[\"innodb是默认的mysql存储引擎\",{\"1\":{\"236\":1}}],[\"innodb是一种兼顾高可靠性和高性能的通用存储引擎\",{\"1\":{\"236\":1}}],[\"innodb是索引组织表\",{\"1\":{\"60\":1}}],[\"innodb会开始寻找最靠近的页\",{\"1\":{\"208\":1}}],[\"innodb实现了以下两种类型的行锁\",{\"1\":{\"149\":1}}],[\"innodb的数据是基于索引组织的\",{\"1\":{\"148\":1}}],[\"innodb的指针占用6个字节的空间\",{\"1\":{\"128\":1}}],[\"innodb主键索引的b+tree高度为多高呢\",{\"1\":{\"128\":1}}],[\"innodb引擎的每张表都会对应这样一个表空间文件\",{\"1\":{\"236\":1}}],[\"innodb引擎的存储结构主要包含5个部分\",{\"1\":{\"60\":1}}],[\"innodb引擎中的行锁是针对索引加的锁\",{\"1\":{\"225\":1}}],[\"innodb引擎遍历整张表\",{\"1\":{\"223\":1}}],[\"innodb引擎会遍历整张表\",{\"1\":{\"223\":3}}],[\"innodb引擎\",{\"1\":{\"172\":1}}],[\"innodb引擎将数据页从buffer\",{\"1\":{\"73\":1}}],[\"innodb使用会话临时表和全局临时表空间\",{\"1\":{\"72\":1}}],[\"innodb\",{\"0\":{\"236\":1},\"1\":{\"65\":2,\"68\":1,\"69\":1,\"125\":1,\"144\":1,\"223\":1,\"236\":2,\"238\":1,\"239\":1}}],[\"innodb架构\",{\"1\":{\"61\":1}}],[\"innodb存储引擎会监控对表上各索引页的查询\",{\"1\":{\"66\":1}}],[\"innodb存储引擎数据是按行进行存放的\",{\"1\":{\"60\":1}}],[\"innodb存储引擎每次从磁盘申请4\",{\"1\":{\"60\":1}}],[\"innodb存储引擎页大小为16k\",{\"1\":{\"60\":1}}],[\"innodb存储引擎\",{\"0\":{\"59\":1}}],[\"innodb不支持\",{\"1\":{\"52\":1}}],[\"in\",{\"1\":{\"82\":1,\"102\":4,\"103\":2,\"104\":1,\"123\":1,\"146\":1,\"147\":1,\"189\":1,\"248\":2,\"291\":1,\"434\":2,\"449\":5,\"622\":1,\"623\":6,\"624\":2,\"625\":1,\"626\":1,\"677\":1,\"708\":2,\"709\":2,\"752\":1,\"765\":10}}],[\"intvalue\",{\"1\":{\"562\":1}}],[\"int32\",{\"1\":{\"444\":1}}],[\"intrev32ifbe\",{\"1\":{\"434\":15}}],[\"int64\",{\"1\":{\"434\":4,\"438\":1,\"444\":1}}],[\"int8\",{\"1\":{\"433\":1,\"434\":1}}],[\"int16\",{\"1\":{\"432\":2,\"434\":2,\"438\":1,\"444\":1}}],[\"intset小结\",{\"0\":{\"435\":1}}],[\"intsetget\",{\"1\":{\"434\":3}}],[\"intsetgetencoded\",{\"1\":{\"434\":1}}],[\"intsetgetencoding按照旧编码方式查找旧元素\",{\"1\":{\"434\":1}}],[\"intsetset按照新编码方式插入新元素\",{\"1\":{\"434\":1}}],[\"intsetset\",{\"1\":{\"434\":4}}],[\"intsetsearch\",{\"1\":{\"434\":2}}],[\"intsetmovetail\",{\"1\":{\"434\":1}}],[\"intsetresize\",{\"1\":{\"434\":2}}],[\"intsetupgradeandadd\",{\"1\":{\"434\":2}}],[\"intsetvalueencoding\",{\"1\":{\"434\":2}}],[\"intsetadd\",{\"1\":{\"434\":1}}],[\"intset\",{\"1\":{\"420\":2,\"432\":3,\"433\":2,\"434\":12,\"435\":2,\"468\":1,\"469\":1}}],[\"internal\",{\"1\":{\"765\":1}}],[\"internationalization的首末字符i和n\",{\"1\":{\"686\":1}}],[\"interruptedexception\",{\"1\":{\"742\":1}}],[\"interfaces\",{\"1\":{\"658\":3}}],[\"interface\",{\"1\":{\"589\":1,\"590\":1,\"600\":1,\"646\":3,\"647\":1,\"650\":5,\"655\":1,\"664\":1,\"684\":2,\"705\":2,\"737\":2,\"745\":1,\"765\":8,\"766\":2}}],[\"interval\",{\"1\":{\"57\":1}}],[\"intellij\",{\"1\":{\"550\":1,\"552\":1}}],[\"intel\",{\"1\":{\"498\":2}}],[\"integers的默认值是10000\",{\"1\":{\"471\":1}}],[\"integers的所有整数\",{\"1\":{\"471\":1}}],[\"integer\",{\"1\":{\"356\":1,\"424\":2,\"434\":2,\"562\":3,\"667\":1,\"731\":4,\"737\":18,\"741\":3,\"742\":3,\"743\":3,\"745\":7,\"754\":6,\"755\":2,\"758\":4,\"760\":4,\"763\":8,\"764\":8}}],[\"into\",{\"1\":{\"159\":2,\"160\":2,\"161\":2,\"182\":4,\"201\":1,\"202\":3,\"204\":1,\"245\":1,\"246\":1,\"254\":1,\"621\":1,\"622\":1,\"623\":1,\"731\":1,\"737\":2}}],[\"int\",{\"1\":{\"24\":3,\"25\":3,\"26\":4,\"28\":5,\"29\":4,\"31\":5,\"38\":9,\"39\":3,\"234\":1,\"246\":1,\"378\":1,\"407\":4,\"408\":5,\"409\":10,\"424\":5,\"434\":5,\"449\":12,\"454\":1,\"456\":1,\"458\":1,\"464\":6,\"467\":1,\"468\":1,\"469\":1,\"562\":3,\"579\":2,\"580\":2,\"585\":3,\"587\":4,\"599\":1,\"621\":1,\"622\":2,\"623\":10,\"624\":2,\"625\":1,\"626\":5,\"627\":9,\"655\":44,\"657\":4,\"664\":28,\"665\":2,\"667\":6,\"669\":1,\"681\":3,\"682\":3,\"683\":3,\"730\":2,\"731\":3,\"737\":5,\"757\":1}}],[\"i\",{\"1\":{\"23\":1,\"24\":9,\"25\":9,\"26\":8,\"27\":1,\"28\":6,\"29\":8,\"31\":5,\"37\":3,\"38\":38,\"39\":3,\"138\":1,\"291\":2,\"297\":8,\"298\":1,\"306\":1,\"333\":2,\"341\":2,\"342\":2,\"346\":1,\"407\":1,\"424\":2,\"515\":2,\"520\":2,\"524\":2,\"549\":1,\"552\":1,\"553\":1,\"554\":1,\"623\":3,\"626\":2,\"655\":24,\"657\":3,\"664\":12,\"700\":1,\"733\":1}}],[\"与前端的全双工通信协议\",{\"1\":{\"727\":1}}],[\"与前面的\",{\"1\":{\"476\":1}}],[\"与普通数组的区别就是它是没有固定大小的限制\",{\"1\":{\"618\":1}}],[\"与类同名\",{\"1\":{\"588\":2}}],[\"与检测到的主机平台\",{\"1\":{\"535\":1}}],[\"与其他resource实现相比\",{\"1\":{\"711\":1}}],[\"与其他守护进程通信以管理\",{\"1\":{\"474\":1}}],[\"与其他的mdl都互斥\",{\"1\":{\"146\":1}}],[\"与单行字符串格式一样\",{\"1\":{\"423\":1}}],[\"与java中的treeset有些类似\",{\"1\":{\"382\":1}}],[\"与lpop和rpop类似\",{\"1\":{\"380\":1}}],[\"与redis服务端做心跳测试\",{\"1\":{\"374\":1}}],[\"与restrict一致\",{\"1\":{\"52\":1}}],[\"与哨兵模式相比\",{\"1\":{\"348\":1}}],[\"与salveof效果一致\",{\"1\":{\"299\":1}}],[\"与shared\",{\"1\":{\"146\":2}}],[\"与表锁排他锁\",{\"1\":{\"147\":1}}],[\"与表锁共享锁\",{\"1\":{\"147\":2}}],[\"与exclusive\",{\"1\":{\"146\":2}}],[\"与any等同\",{\"1\":{\"102\":1}}],[\"与聚集索引不同\",{\"1\":{\"64\":1}}],[\"与no\",{\"1\":{\"52\":1}}],[\"与\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"306\":1,\"408\":1,\"417\":1}}],[\"txadvice\",{\"1\":{\"749\":2}}],[\"txbyallannotationtest\",{\"1\":{\"746\":1}}],[\"txbyannotationtest\",{\"1\":{\"738\":1}}],[\"tx=\",{\"1\":{\"739\":1}}],[\"tx\",{\"1\":{\"727\":1,\"739\":4,\"749\":5}}],[\"txt\",{\"1\":{\"490\":1,\"529\":1,\"705\":1,\"707\":1,\"708\":2,\"709\":3,\"716\":2,\"718\":1,\"719\":1,\"723\":1}}],[\"tt>\",{\"1\":{\"626\":4,\"627\":1}}],[\"ttl\",{\"1\":{\"278\":1,\"363\":1,\"456\":6,\"457\":2,\"458\":1}}],[\"tvp\",{\"1\":{\"464\":1}}],[\"tip\",{\"1\":{\"381\":1}}],[\"timed\",{\"1\":{\"742\":1}}],[\"timeunit\",{\"1\":{\"742\":1}}],[\"timeval\",{\"1\":{\"407\":1}}],[\"timeout属性\",{\"1\":{\"749\":1}}],[\"timeout\",{\"1\":{\"308\":1,\"333\":1,\"341\":1,\"407\":1,\"408\":1,\"409\":1,\"634\":3,\"742\":1}}],[\"time等\",{\"1\":{\"246\":1}}],[\"time\",{\"1\":{\"229\":2,\"309\":2,\"458\":1,\"677\":2,\"690\":1,\"765\":2}}],[\"take\",{\"1\":{\"631\":1,\"638\":1}}],[\"takeover\",{\"1\":{\"347\":1}}],[\"task\",{\"1\":{\"554\":1}}],[\"tab缩进\",{\"1\":{\"556\":1}}],[\"tab\",{\"1\":{\"549\":1,\"551\":1}}],[\"tables\",{\"1\":{\"141\":2,\"145\":2,\"179\":1}}],[\"tablespaces\",{\"0\":{\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"tablespace\",{\"0\":{\"68\":1},\"1\":{\"70\":4,\"206\":1}}],[\"table2\",{\"1\":{\"100\":1}}],[\"table1\",{\"1\":{\"100\":1}}],[\"tabletablespace\",{\"1\":{\"70\":1}}],[\"table\",{\"0\":{\"69\":1},\"1\":{\"51\":3,\"52\":1,\"69\":1,\"70\":2,\"129\":5,\"134\":1,\"146\":2,\"179\":6,\"180\":4,\"201\":1,\"202\":3,\"204\":2,\"206\":1,\"234\":1,\"236\":2,\"290\":7,\"438\":1,\"440\":1,\"627\":2,\"730\":1,\"737\":2}}],[\"tar\",{\"1\":{\"493\":1,\"518\":4,\"525\":4}}],[\"target=\",{\"1\":{\"700\":1}}],[\"target\",{\"1\":{\"372\":2,\"646\":2,\"647\":2,\"650\":2,\"657\":5,\"658\":7,\"684\":2}}],[\"tail=100\",{\"1\":{\"529\":1}}],[\"tail\",{\"1\":{\"449\":1,\"454\":1,\"529\":1}}],[\"tag\",{\"1\":{\"375\":2,\"511\":2,\"517\":4,\"533\":1}}],[\"tmp下准备一个新的redis\",{\"1\":{\"341\":1}}],[\"tmp\",{\"1\":{\"297\":4,\"333\":2,\"341\":6,\"342\":1,\"343\":1}}],[\"tmp目录执行下列命令\",{\"1\":{\"297\":3,\"333\":1}}],[\"tmp目录\",{\"1\":{\"297\":1,\"333\":1,\"341\":3,\"342\":1}}],[\"tutorial\",{\"1\":{\"293\":1}}],[\"two\",{\"1\":{\"291\":1}}],[\"tbl\",{\"1\":{\"157\":1}}],[\"tb\",{\"1\":{\"132\":3,\"134\":2,\"141\":2,\"142\":2,\"212\":1}}],[\"toarray\",{\"1\":{\"619\":1,\"622\":1,\"623\":2}}],[\"tostring\",{\"1\":{\"550\":1,\"601\":1,\"658\":1,\"665\":2,\"668\":2,\"669\":1,\"670\":1,\"683\":1,\"690\":1,\"731\":1,\"754\":1,\"758\":1,\"760\":1,\"763\":1,\"764\":1}}],[\"total\",{\"1\":{\"449\":1}}],[\"toolbox\",{\"1\":{\"479\":2}}],[\"too\",{\"1\":{\"449\":1,\"681\":1,\"765\":1}}],[\"touch\",{\"1\":{\"289\":1,\"312\":1}}],[\"tomcat\",{\"1\":{\"281\":4}}],[\"to\",{\"1\":{\"179\":2,\"198\":1,\"346\":3,\"428\":1,\"434\":3,\"449\":3,\"621\":2,\"622\":1,\"623\":10,\"624\":1,\"625\":2,\"626\":4,\"627\":4,\"634\":1,\"687\":1,\"741\":1,\"765\":15}}],[\"todo\",{\"1\":{\"120\":1,\"151\":1,\"506\":1,\"637\":1,\"649\":1,\"656\":1}}],[\"tokyo\",{\"1\":{\"111\":1}}],[\"teachertwo\",{\"1\":{\"760\":3}}],[\"teacherone\",{\"1\":{\"760\":3}}],[\"teachermap\",{\"1\":{\"760\":9,\"761\":2}}],[\"teacher>\",{\"1\":{\"760\":3}}],[\"teachername=\",{\"1\":{\"760\":1}}],[\"teachername\",{\"1\":{\"760\":11}}],[\"teacherid=\",{\"1\":{\"760\":1}}],[\"teacherid\",{\"1\":{\"760\":11}}],[\"teacher\",{\"1\":{\"760\":7}}],[\"teardown\",{\"1\":{\"353\":1}}],[\"ten\",{\"1\":{\"622\":1}}],[\"terminator\",{\"1\":{\"428\":4}}],[\"terminated\",{\"1\":{\"204\":2}}],[\"testlife\",{\"1\":{\"764\":1}}],[\"testdatasource\",{\"1\":{\"762\":1}}],[\"testdynamicproxy\",{\"1\":{\"658\":1}}],[\"testtxallannotation\",{\"1\":{\"746\":1}}],[\"testbuybook\",{\"1\":{\"738\":1}}],[\"testbeanscope\",{\"1\":{\"763\":1}}],[\"testbean\",{\"1\":{\"718\":8}}],[\"testselectlist\",{\"1\":{\"731\":1}}],[\"testselectobject\",{\"1\":{\"731\":1}}],[\"teststring\",{\"1\":{\"353\":1,\"362\":1}}],[\"testupdate\",{\"1\":{\"731\":1}}],[\"testuserfactorybean\",{\"1\":{\"765\":1}}],[\"testuser\",{\"1\":{\"702\":1}}],[\"test<\",{\"1\":{\"699\":1}}],[\"testparams\",{\"1\":{\"683\":2}}],[\"testmyservice2\",{\"1\":{\"682\":1}}],[\"testmyservice1\",{\"1\":{\"682\":1,\"683\":1}}],[\"testmethod3\",{\"1\":{\"683\":1}}],[\"testmethod2\",{\"1\":{\"682\":1}}],[\"testmethod1\",{\"1\":{\"681\":1}}],[\"testhelloworld\",{\"1\":{\"651\":1}}],[\"testioc\",{\"1\":{\"650\":1}}],[\"testautowirebyxml\",{\"1\":{\"766\":1}}],[\"testadd\",{\"1\":{\"665\":1}}],[\"testallannotation\",{\"1\":{\"648\":1}}],[\"testannotation\",{\"1\":{\"646\":1}}],[\"testobject\",{\"1\":{\"356\":1}}],[\"testcaffeine\",{\"1\":{\"284\":1}}],[\"test\",{\"1\":{\"284\":1,\"353\":1,\"356\":1,\"362\":1,\"486\":1,\"487\":6,\"500\":3,\"646\":1,\"648\":1,\"650\":1,\"651\":2,\"658\":1,\"665\":2,\"682\":3,\"683\":2,\"687\":2,\"700\":1,\"702\":5,\"727\":2,\"731\":5,\"738\":1,\"746\":3,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1}}],[\"technologies\",{\"1\":{\"603\":1}}],[\"tech\",{\"1\":{\"268\":1}}],[\"tel\",{\"1\":{\"131\":5}}],[\"text等\",{\"1\":{\"134\":1}}],[\"text索引\",{\"1\":{\"125\":1}}],[\"text\",{\"1\":{\"117\":1}}],[\"temporary\",{\"0\":{\"72\":1},\"1\":{\"215\":1}}],[\"typically\",{\"1\":{\"765\":1}}],[\"type=\",{\"1\":{\"643\":8}}],[\"type=image\",{\"1\":{\"512\":1}}],[\"type=forking\",{\"1\":{\"372\":1}}],[\"typeid\",{\"1\":{\"345\":1}}],[\"types\",{\"1\":{\"308\":1,\"634\":1,\"765\":1}}],[\"type\",{\"1\":{\"57\":1,\"146\":2,\"147\":1,\"159\":1,\"160\":1,\"161\":1,\"231\":2,\"256\":1,\"308\":1,\"311\":1,\"428\":11,\"438\":1,\"458\":1,\"467\":1,\"634\":1,\"643\":2,\"646\":1,\"647\":2,\"650\":1,\"684\":3,\"752\":1,\"765\":7}}],[\"typedef\",{\"1\":{\"38\":1,\"39\":1,\"407\":2,\"433\":1,\"438\":3,\"449\":6,\"454\":2,\"456\":1,\"458\":1,\"467\":1}}],[\"tyrant\",{\"1\":{\"111\":1}}],[\"than\",{\"1\":{\"627\":1,\"765\":1}}],[\"that\",{\"1\":{\"449\":1,\"623\":4,\"626\":2,\"627\":2,\"765\":12}}],[\"this\",{\"1\":{\"449\":1,\"579\":2,\"621\":1,\"622\":4,\"623\":16,\"624\":2,\"625\":1,\"626\":6,\"627\":2,\"646\":7,\"657\":1,\"658\":1,\"681\":2,\"682\":2,\"683\":3,\"687\":1,\"718\":2,\"719\":1,\"754\":4,\"755\":4,\"758\":5,\"759\":1,\"760\":6,\"763\":8,\"764\":8,\"765\":17,\"766\":2}}],[\"there\",{\"1\":{\"765\":2}}],[\"therefore\",{\"1\":{\"765\":2}}],[\"them\",{\"1\":{\"765\":1}}],[\"themselves\",{\"1\":{\"765\":2}}],[\"their\",{\"1\":{\"623\":1,\"626\":1,\"765\":1}}],[\"they\",{\"1\":{\"622\":1,\"623\":2}}],[\"the\",{\"1\":{\"346\":2,\"428\":6,\"434\":16,\"449\":1,\"621\":10,\"622\":10,\"623\":27,\"624\":5,\"625\":7,\"626\":16,\"627\":8,\"634\":1,\"687\":1,\"765\":53}}],[\"then\",{\"1\":{\"58\":4,\"247\":2,\"249\":4,\"292\":1,\"309\":5}}],[\"throwing>\",{\"1\":{\"674\":1}}],[\"throwing=\",{\"1\":{\"674\":1}}],[\"throwing\",{\"1\":{\"665\":1,\"669\":1,\"674\":1}}],[\"throwable\",{\"1\":{\"595\":2,\"601\":1,\"658\":1,\"665\":4,\"669\":1,\"670\":3}}],[\"throw\",{\"1\":{\"424\":2,\"597\":1,\"599\":3,\"622\":1,\"623\":1,\"650\":1,\"707\":1,\"765\":3}}],[\"throws\",{\"1\":{\"424\":2,\"581\":2,\"595\":1,\"597\":1,\"598\":2,\"600\":1,\"622\":2,\"623\":3,\"624\":1,\"625\":1,\"626\":1,\"658\":1,\"705\":8,\"708\":2,\"709\":2,\"762\":1,\"764\":2,\"765\":3}}],[\"through\",{\"1\":{\"277\":1,\"765\":1}}],[\"three\",{\"1\":{\"291\":1}}],[\"threshold\",{\"1\":{\"208\":2}}],[\"thread主要负责这些io请求的回调\",{\"1\":{\"75\":1}}],[\"thread\",{\"1\":{\"75\":10,\"598\":1,\"650\":1,\"752\":1}}],[\"trace\",{\"1\":{\"700\":2}}],[\"transient\",{\"1\":{\"621\":1}}],[\"transactiontimedoutexception\",{\"1\":{\"742\":1}}],[\"transactional的propagation属性\",{\"1\":{\"745\":1}}],[\"transactional中的propagation属性设置事务传播行为\",{\"1\":{\"745\":1}}],[\"transactional中相关属性设置回滚策略\",{\"1\":{\"743\":1}}],[\"transactional标识的类上\",{\"1\":{\"740\":1}}],[\"transactional标识在方法上\",{\"1\":{\"740\":1}}],[\"transactional注解标识的位置\",{\"0\":{\"740\":1}}],[\"transactional\",{\"1\":{\"739\":1,\"741\":1,\"742\":1,\"743\":2,\"744\":5,\"745\":3}}],[\"transactional所标识的方法或标识的类中所有的方法\",{\"1\":{\"739\":1}}],[\"transactionmanager\",{\"1\":{\"739\":2,\"749\":1}}],[\"transaction\",{\"1\":{\"142\":1,\"202\":1,\"258\":1,\"261\":2,\"730\":1,\"733\":2,\"739\":2,\"742\":2,\"746\":1,\"749\":2}}],[\"transaction参数来完成不加锁的一致性数据备份\",{\"1\":{\"142\":1}}],[\"training\",{\"1\":{\"485\":1,\"535\":3,\"537\":1}}],[\"trywithresourcetest\",{\"1\":{\"600\":1}}],[\"try块没有引发异常\",{\"1\":{\"600\":1}}],[\"try\",{\"1\":{\"424\":2,\"581\":1,\"595\":1,\"597\":1,\"600\":18,\"623\":1,\"650\":3,\"658\":1,\"665\":1,\"670\":1,\"707\":1,\"734\":1,\"742\":1,\"765\":1}}],[\"truncate\",{\"1\":{\"179\":1}}],[\"true\",{\"1\":{\"38\":3,\"290\":2,\"291\":1,\"292\":4,\"565\":1,\"569\":1,\"623\":6,\"626\":2,\"646\":1,\"647\":1,\"650\":1,\"684\":1,\"741\":1,\"749\":3,\"752\":1,\"765\":3}}],[\"trib\",{\"1\":{\"343\":4}}],[\"triggers\",{\"1\":{\"157\":1}}],[\"trigger\",{\"1\":{\"157\":5,\"159\":2,\"160\":2,\"161\":2}}],[\"trim\",{\"1\":{\"55\":1}}],[\"tree索引\",{\"1\":{\"125\":1}}],[\"tree\",{\"1\":{\"117\":1,\"120\":1}}],[\"trx\",{\"1\":{\"60\":1,\"65\":1,\"84\":2,\"87\":3,\"88\":11}}],[\"t=0∑k​=n=2i∗\",{\"1\":{\"26\":1}}],[\"t=0∑i​\",{\"1\":{\"26\":1}}],[\"t\",{\"1\":{\"23\":2,\"24\":6,\"25\":3,\"26\":6,\"29\":1,\"58\":1,\"297\":2,\"298\":1,\"333\":1,\"341\":2,\"342\":2,\"408\":1,\"428\":8,\"432\":1,\"433\":3,\"434\":11,\"438\":3,\"444\":3,\"449\":4,\"515\":2,\"520\":2,\"524\":2,\"529\":5,\"549\":1,\"552\":1,\"553\":1,\"700\":1,\"731\":7,\"737\":3,\"765\":2}}],[\"tcp\",{\"1\":{\"536\":1,\"537\":3,\"634\":1}}],[\"tcpaccepthandler\",{\"1\":{\"462\":1}}],[\"tcp层是位于ip层之上\",{\"1\":{\"16\":1}}],[\"tcp是一种面向连接的\",{\"1\":{\"16\":1}}],[\"tcp连接的3次握手和4次挥手归根结底是在保证连接可靠的情况下尽可能的减少资源的浪费\",{\"1\":{\"19\":1}}],[\"tcp连接提供的是全双工信道\",{\"1\":{\"17\":1}}],[\"tcp连接\",{\"1\":{\"15\":1}}],[\"tcp三次握手和四次挥手图文详解\",{\"0\":{\"15\":1}}],[\"2222\",{\"1\":{\"758\":1}}],[\"26\",{\"1\":{\"758\":3,\"759\":1,\"760\":2}}],[\"2的值为true执行这里的代码\",{\"1\":{\"565\":1}}],[\"2b\",{\"1\":{\"562\":2}}],[\"2018\",{\"1\":{\"529\":1}}],[\"2020\",{\"1\":{\"765\":1}}],[\"2022\",{\"1\":{\"742\":1}}],[\"2024\",{\"1\":{\"529\":4}}],[\"20210926\",{\"1\":{\"499\":1}}],[\"20\",{\"1\":{\"487\":2,\"515\":2,\"533\":3,\"579\":1,\"700\":1,\"730\":1,\"737\":2}}],[\"2003\",{\"1\":{\"765\":1}}],[\"2002\",{\"1\":{\"765\":1}}],[\"2004\",{\"1\":{\"725\":1}}],[\"2001\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"200\",{\"1\":{\"349\":1}}],[\"200010的数据\",{\"1\":{\"219\":1}}],[\"2000000\",{\"1\":{\"219\":1}}],[\"2以后\",{\"1\":{\"469\":1}}],[\"2以前\",{\"1\":{\"469\":1}}],[\"246b23d5d5a5\",{\"1\":{\"525\":2}}],[\"24\",{\"1\":{\"467\":1,\"479\":1}}],[\"24位有符号整数\",{\"1\":{\"444\":1}}],[\"25\",{\"1\":{\"742\":1}}],[\"250标准中制定的注解类型\",{\"1\":{\"647\":1}}],[\"255\",{\"1\":{\"458\":1}}],[\"25ms\",{\"1\":{\"457\":1}}],[\"254\",{\"1\":{\"445\":2}}],[\"2版本引入了新的数据结构\",{\"1\":{\"446\":1}}],[\"2kb\",{\"1\":{\"410\":1}}],[\"2kn2​\",{\"1\":{\"25\":3}}],[\"23\",{\"1\":{\"529\":1,\"537\":1,\"731\":1,\"754\":1,\"764\":1}}],[\"232\",{\"1\":{\"403\":1}}],[\"230\",{\"1\":{\"353\":1}}],[\"2^64\",{\"1\":{\"400\":1}}],[\"2<\",{\"1\":{\"353\":1,\"642\":1,\"664\":2,\"681\":1,\"699\":1,\"730\":1,\"749\":1}}],[\"27003\",{\"1\":{\"332\":1,\"333\":2,\"336\":1}}],[\"27002\",{\"1\":{\"332\":1,\"333\":1,\"336\":1}}],[\"27001\",{\"1\":{\"332\":1,\"333\":4,\"336\":1}}],[\"21\",{\"1\":{\"290\":2,\"378\":1}}],[\"21939856\",{\"1\":{\"128\":1}}],[\"2取数据\",{\"1\":{\"284\":1}}],[\"2n\",{\"1\":{\"439\":1,\"440\":2}}],[\"2n+1\",{\"1\":{\"31\":1}}],[\"2n2​\",{\"1\":{\"25\":1}}],[\"2log2​n\",{\"1\":{\"25\":1}}],[\"2\",{\"0\":{\"21\":1,\"27\":1,\"146\":1,\"297\":1,\"308\":1,\"772\":1,\"773\":1,\"774\":2,\"775\":1,\"776\":1,\"777\":1,\"778\":1,\"782\":1,\"784\":1,\"785\":1,\"786\":2,\"787\":1,\"790\":1},\"1\":{\"24\":2,\"25\":2,\"26\":3,\"28\":1,\"29\":3,\"65\":1,\"147\":1,\"195\":1,\"203\":2,\"207\":1,\"229\":1,\"272\":2,\"274\":3,\"284\":1,\"297\":6,\"313\":1,\"333\":3,\"343\":2,\"353\":3,\"355\":1,\"366\":1,\"372\":1,\"378\":1,\"384\":1,\"407\":1,\"409\":1,\"418\":2,\"423\":4,\"424\":4,\"428\":1,\"432\":1,\"438\":1,\"444\":1,\"448\":1,\"449\":2,\"450\":4,\"468\":1,\"469\":1,\"498\":1,\"549\":1,\"550\":1,\"553\":1,\"565\":1,\"641\":1,\"646\":2,\"658\":1,\"665\":1,\"677\":1,\"678\":2,\"682\":1,\"687\":1,\"690\":1,\"707\":1,\"715\":1,\"721\":1,\"722\":1,\"725\":1,\"730\":2,\"737\":1,\"752\":3,\"754\":1,\"755\":1,\"757\":1,\"762\":1,\"764\":1,\"765\":4,\"766\":1,\"782\":1}}],[\"综上所述\",{\"1\":{\"19\":1,\"636\":1}}],[\"writing\",{\"1\":{\"765\":1}}],[\"write这个队列\",{\"1\":{\"464\":1}}],[\"writer\",{\"1\":{\"424\":8}}],[\"writefds\",{\"1\":{\"407\":1}}],[\"write兼容\",{\"1\":{\"146\":2}}],[\"write\",{\"0\":{\"73\":1},\"1\":{\"75\":1,\"145\":2,\"146\":3,\"147\":2,\"277\":2,\"321\":1,\"464\":1}}],[\"w3\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"ws\",{\"1\":{\"634\":2}}],[\"well\",{\"1\":{\"765\":1}}],[\"weaver就是织入器\",{\"1\":{\"663\":1}}],[\"weight=10\",{\"1\":{\"634\":1}}],[\"weight=90\",{\"1\":{\"634\":1}}],[\"we\",{\"1\":{\"428\":1,\"434\":2}}],[\"web框架\",{\"1\":{\"727\":1}}],[\"webflux\",{\"1\":{\"727\":1}}],[\"webmvc\",{\"1\":{\"727\":1}}],[\"websocket\",{\"1\":{\"634\":1,\"727\":1}}],[\"webservers\",{\"1\":{\"634\":4}}],[\"web应用实例\",{\"0\":{\"534\":1}}],[\"webapplicationcontext\",{\"1\":{\"695\":1}}],[\"webapp\",{\"1\":{\"485\":1,\"535\":3,\"537\":1}}],[\"web和api服务都连接到front\",{\"1\":{\"483\":1}}],[\"webnet\",{\"1\":{\"482\":3}}],[\"web服务流程\",{\"0\":{\"411\":1}}],[\"web\",{\"1\":{\"306\":6,\"411\":1,\"480\":3,\"482\":1,\"483\":3,\"534\":1,\"539\":1,\"695\":2,\"708\":1,\"727\":2}}],[\"wan\",{\"1\":{\"773\":1}}],[\"wantedby=multi\",{\"1\":{\"372\":1}}],[\"want\",{\"1\":{\"346\":2}}],[\"warranties\",{\"1\":{\"765\":1}}],[\"warn\",{\"1\":{\"700\":2}}],[\"was\",{\"1\":{\"434\":1,\"449\":1,\"626\":1,\"742\":1}}],[\"watched\",{\"1\":{\"456\":1}}],[\"watch\",{\"1\":{\"401\":2}}],[\"wait\",{\"1\":{\"362\":1,\"409\":1,\"410\":3,\"412\":1,\"461\":1,\"464\":1}}],[\"work\",{\"1\":{\"577\":1,\"626\":1}}],[\"workdir\",{\"1\":{\"490\":2,\"493\":2}}],[\"working\",{\"1\":{\"480\":1}}],[\"worker\",{\"1\":{\"308\":2,\"634\":2}}],[\"world容器样例\",{\"0\":{\"495\":1}}],[\"world\",{\"1\":{\"284\":1,\"289\":2,\"476\":4,\"495\":4,\"496\":2,\"514\":3}}],[\"win\",{\"1\":{\"499\":2,\"627\":1}}],[\"windows版\",{\"0\":{\"548\":1}}],[\"windows安装遇到问题的朋友可以参考一下\",{\"1\":{\"499\":1}}],[\"windows安装\",{\"0\":{\"499\":1}}],[\"windows\",{\"0\":{\"606\":1,\"633\":1},\"1\":{\"474\":1,\"479\":3,\"499\":1,\"501\":2,\"549\":1,\"551\":1,\"636\":2,\"650\":5}}],[\"windows系统下的客户端种类很多\",{\"1\":{\"375\":1}}],[\"windows系统\",{\"1\":{\"375\":1}}],[\"will\",{\"1\":{\"449\":1,\"621\":1,\"623\":1,\"765\":7}}],[\"wiki\",{\"1\":{\"283\":1}}],[\"without\",{\"1\":{\"765\":2}}],[\"within\",{\"1\":{\"434\":1,\"765\":3}}],[\"withhash\",{\"1\":{\"398\":2}}],[\"withdist\",{\"1\":{\"398\":2}}],[\"withcoord\",{\"1\":{\"398\":2}}],[\"with\",{\"1\":{\"141\":1,\"165\":3,\"197\":1,\"346\":1,\"600\":1,\"621\":1,\"622\":3,\"625\":1,\"626\":1,\"765\":2}}],[\"www\",{\"1\":{\"107\":1,\"173\":1,\"268\":3,\"288\":1,\"293\":2,\"353\":2,\"499\":1,\"603\":1,\"633\":1,\"634\":2,\"639\":1,\"643\":7,\"651\":4,\"653\":2,\"665\":10,\"690\":8,\"700\":7,\"707\":2,\"718\":4,\"730\":7,\"739\":10,\"760\":7,\"761\":8,\"762\":7,\"765\":1,\"769\":1}}],[\"whose\",{\"1\":{\"622\":1}}],[\"which\",{\"1\":{\"621\":1,\"623\":1,\"765\":2}}],[\"while刚好相反\",{\"1\":{\"252\":1}}],[\"while循环时有条件的循环控制语句\",{\"1\":{\"251\":1}}],[\"while循环\",{\"0\":{\"251\":1,\"569\":1,\"570\":1},\"1\":{\"291\":1}}],[\"while\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"39\":1,\"251\":2,\"252\":1,\"291\":2,\"434\":2,\"464\":1,\"569\":1,\"570\":1,\"623\":1,\"650\":1,\"708\":1,\"709\":1}}],[\"what\",{\"1\":{\"346\":1}}],[\"whether\",{\"1\":{\"765\":1}}],[\"where之后包含了子查询\",{\"1\":{\"231\":1}}],[\"where不能对聚合函数进行判断\",{\"1\":{\"192\":1}}],[\"where是分组之前进行过滤\",{\"1\":{\"192\":1}}],[\"where\",{\"1\":{\"96\":1,\"100\":1,\"128\":2,\"132\":3,\"133\":1,\"136\":1,\"183\":1,\"184\":1,\"186\":1,\"187\":1,\"189\":1,\"192\":3,\"195\":1,\"231\":1,\"242\":1,\"434\":2,\"731\":4,\"737\":3}}],[\"when\",{\"1\":{\"58\":4,\"249\":6,\"434\":3,\"621\":1,\"765\":1}}],[\"w为服务端成功传输最后一个数据包的序号\",{\"1\":{\"19\":1}}],[\"w\",{\"1\":{\"19\":2,\"549\":1,\"553\":1}}],[\"vm\",{\"1\":{\"679\":1}}],[\"v8\",{\"1\":{\"535\":1}}],[\"v2\",{\"1\":{\"479\":1}}],[\"v6\",{\"1\":{\"460\":1}}],[\"v4\",{\"1\":{\"460\":1}}],[\"v1\",{\"1\":{\"375\":2,\"517\":3}}],[\"v是对应索引的数组元素值\",{\"1\":{\"291\":1}}],[\"void\",{\"1\":{\"284\":1,\"336\":1,\"353\":3,\"356\":1,\"362\":1,\"424\":2,\"438\":3,\"458\":1,\"464\":6,\"467\":1,\"579\":3,\"580\":6,\"581\":1,\"583\":1,\"587\":1,\"598\":1,\"599\":1,\"600\":2,\"623\":4,\"627\":4,\"646\":12,\"647\":5,\"648\":1,\"650\":7,\"651\":2,\"658\":1,\"665\":5,\"668\":3,\"669\":3,\"681\":4,\"682\":4,\"683\":4,\"684\":1,\"687\":1,\"690\":1,\"702\":1,\"707\":3,\"708\":2,\"709\":2,\"716\":2,\"718\":2,\"719\":3,\"723\":1,\"731\":4,\"737\":7,\"738\":1,\"741\":1,\"742\":1,\"743\":1,\"745\":3,\"746\":1,\"754\":5,\"755\":1,\"758\":3,\"759\":1,\"760\":4,\"762\":1,\"763\":5,\"764\":8,\"765\":1,\"766\":8}}],[\"volume\",{\"1\":{\"493\":2}}],[\"volumes\",{\"1\":{\"480\":1,\"482\":3,\"483\":2}}],[\"volatile\",{\"1\":{\"278\":4,\"458\":4}}],[\"voldemort\",{\"1\":{\"111\":1}}],[\"vim\",{\"1\":{\"634\":1}}],[\"virtual\",{\"1\":{\"595\":1,\"613\":1}}],[\"vi\",{\"1\":{\"307\":1,\"372\":1}}],[\"video\",{\"1\":{\"173\":1,\"268\":1,\"633\":1,\"639\":1,\"653\":2}}],[\"view\",{\"1\":{\"87\":1,\"165\":5}}],[\"varargs\",{\"1\":{\"587\":1}}],[\"var=value\",{\"1\":{\"493\":1}}],[\"var=exp1\",{\"1\":{\"291\":1}}],[\"variables\",{\"1\":{\"236\":1,\"244\":2}}],[\"var\",{\"1\":{\"229\":1,\"245\":8,\"313\":2,\"482\":1,\"483\":1,\"634\":2}}],[\"varchar\",{\"1\":{\"134\":1,\"234\":1,\"246\":1,\"730\":2,\"737\":2}}],[\"valid\",{\"1\":{\"683\":2}}],[\"validapersonbyvalidator\",{\"1\":{\"682\":2}}],[\"validatedby\",{\"1\":{\"684\":1}}],[\"validated\",{\"1\":{\"683\":2}}],[\"validate是设置校验逻辑的地点\",{\"1\":{\"681\":1}}],[\"validate\",{\"1\":{\"681\":2,\"682\":2}}],[\"validator校验\",{\"1\":{\"682\":2}}],[\"validator注入到容器中\",{\"1\":{\"682\":1}}],[\"validatorfactory\",{\"1\":{\"682\":1}}],[\"validator\",{\"1\":{\"681\":2,\"682\":15}}],[\"validator<\",{\"1\":{\"681\":2}}],[\"validator接口\",{\"1\":{\"680\":1,\"682\":1}}],[\"validator进一步的封装\",{\"1\":{\"680\":1}}],[\"validationpostprocessor\",{\"1\":{\"683\":1}}],[\"validationconfig\",{\"1\":{\"682\":3,\"683\":2}}],[\"validation中的接口\",{\"1\":{\"682\":1}}],[\"validation需要使用的javax\",{\"1\":{\"682\":1}}],[\"validation校验方式\",{\"1\":{\"682\":1}}],[\"validation注解实现\",{\"0\":{\"682\":1}}],[\"validationutils\",{\"1\":{\"681\":2}}],[\"validation方式来进行校验\",{\"1\":{\"680\":1}}],[\"validation\",{\"1\":{\"680\":1,\"681\":6,\"682\":12,\"683\":8,\"684\":4}}],[\"validation其实就是对hibernate\",{\"1\":{\"680\":1}}],[\"validation允许通过注解的方式来定义对象校验规则\",{\"1\":{\"680\":1}}],[\"val\",{\"1\":{\"438\":1}}],[\"valenc\",{\"1\":{\"434\":2}}],[\"val2\",{\"1\":{\"58\":2}}],[\"val1\",{\"1\":{\"58\":2}}],[\"value属性\",{\"1\":{\"754\":1}}],[\"value=\",{\"1\":{\"690\":1,\"719\":1,\"730\":4,\"754\":4,\"755\":4,\"757\":3,\"758\":18,\"759\":4,\"760\":16,\"762\":4,\"764\":4}}],[\"value>\",{\"1\":{\"690\":1,\"757\":1,\"759\":3,\"760\":10}}],[\"valueof\",{\"1\":{\"562\":1}}],[\"valueoperations\",{\"1\":{\"361\":2}}],[\"value字节\",{\"1\":{\"421\":1}}],[\"value支持多种不同的数据结构\",{\"1\":{\"367\":1}}],[\"values\",{\"1\":{\"182\":4,\"201\":2,\"202\":6,\"731\":1,\"737\":2}}],[\"value2\",{\"1\":{\"58\":1,\"249\":1,\"566\":2}}],[\"value1\",{\"1\":{\"58\":1,\"249\":1,\"566\":2}}],[\"value\",{\"1\":{\"58\":1,\"111\":1,\"159\":2,\"160\":2,\"161\":2,\"249\":1,\"255\":4,\"283\":1,\"336\":6,\"354\":1,\"355\":1,\"357\":3,\"367\":1,\"378\":1,\"379\":1,\"388\":3,\"399\":1,\"419\":2,\"420\":1,\"421\":1,\"427\":1,\"434\":24,\"449\":1,\"456\":5,\"665\":2,\"669\":2,\"681\":2,\"682\":5,\"684\":4,\"757\":1,\"760\":2,\"765\":1}}],[\"version=\",{\"1\":{\"493\":1,\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":2,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"version=latest\",{\"1\":{\"493\":1}}],[\"version>\",{\"1\":{\"353\":2,\"642\":4,\"647\":1,\"650\":1,\"651\":2,\"664\":6,\"681\":2,\"699\":5,\"730\":3,\"749\":1,\"762\":2}}],[\"version\",{\"1\":{\"81\":1,\"480\":1,\"482\":1,\"483\":3,\"608\":1,\"634\":1,\"765\":1}}],[\"v=31​s∗h\",{\"1\":{\"31\":1}}],[\"v为服务端最后一次传输成功的报文段的序号\",{\"1\":{\"19\":1}}],[\"v\",{\"1\":{\"19\":1,\"291\":2,\"438\":1,\"552\":1,\"553\":1,\"555\":1}}],[\"udp\",{\"1\":{\"537\":2}}],[\"uat\",{\"1\":{\"529\":6}}],[\"uat的最后10行日志\",{\"1\":{\"529\":1}}],[\"uid\",{\"1\":{\"493\":1}}],[\"uint64\",{\"1\":{\"428\":2,\"438\":1}}],[\"uint32\",{\"1\":{\"428\":2,\"433\":2,\"434\":2}}],[\"uint16\",{\"1\":{\"428\":2}}],[\"uint8\",{\"1\":{\"428\":2,\"434\":5}}],[\"ubuntu20\",{\"1\":{\"515\":2}}],[\"ubuntu\",{\"1\":{\"487\":2,\"490\":1,\"493\":1,\"515\":6,\"517\":4,\"518\":4,\"520\":2,\"522\":1,\"533\":3}}],[\"u64\",{\"1\":{\"438\":1}}],[\"util=\",{\"1\":{\"760\":1,\"761\":1}}],[\"util\",{\"1\":{\"619\":1,\"682\":1,\"687\":4,\"690\":2,\"760\":7,\"761\":4}}],[\"utils\",{\"1\":{\"307\":1}}],[\"utf\",{\"1\":{\"424\":3,\"600\":1,\"643\":1,\"650\":1,\"651\":1,\"665\":1,\"690\":2,\"700\":2,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"uri\",{\"1\":{\"705\":1}}],[\"url=jdbc\",{\"1\":{\"730\":1,\"762\":1}}],[\"urlresourcesdemo\",{\"1\":{\"707\":1}}],[\"urlresource访问网络资源\",{\"0\":{\"707\":1}}],[\"urlresource\",{\"1\":{\"706\":1,\"707\":3}}],[\"url类和各种url前缀的标准处理程序无法满足所有对low\",{\"1\":{\"704\":1}}],[\"urldecoder\",{\"1\":{\"650\":1}}],[\"url\",{\"1\":{\"353\":6,\"650\":3,\"704\":1,\"705\":1,\"707\":6,\"730\":2,\"762\":2}}],[\"uroot\",{\"1\":{\"141\":1,\"142\":1}}],[\"us\",{\"1\":{\"690\":1}}],[\"usually\",{\"1\":{\"627\":1,\"765\":2}}],[\"ustc\",{\"1\":{\"475\":2}}],[\"usage\",{\"1\":{\"449\":1}}],[\"usr\",{\"1\":{\"307\":2,\"308\":1,\"309\":2,\"311\":2,\"372\":2,\"479\":1,\"634\":3}}],[\"using\",{\"1\":{\"133\":3,\"211\":2,\"212\":1,\"215\":2,\"765\":1}}],[\"usessl=false\",{\"1\":{\"730\":1,\"746\":1}}],[\"used的2n\",{\"1\":{\"440\":2}}],[\"used\",{\"1\":{\"428\":5,\"438\":1,\"439\":1,\"440\":2,\"449\":1,\"458\":2,\"765\":6}}],[\"use\",{\"1\":{\"132\":2,\"178\":1,\"197\":1,\"351\":1,\"643\":2,\"684\":1,\"730\":1,\"765\":2}}],[\"userfactorybean\",{\"1\":{\"765\":2}}],[\"userprototype\",{\"1\":{\"763\":1}}],[\"user3\",{\"1\":{\"752\":3}}],[\"user2\",{\"1\":{\"752\":3,\"763\":1}}],[\"user1==user2\",{\"1\":{\"763\":1}}],[\"user1\",{\"1\":{\"752\":5,\"763\":1}}],[\"userid\",{\"1\":{\"737\":8,\"741\":2,\"742\":2,\"743\":2,\"745\":5}}],[\"user`\",{\"1\":{\"737\":2}}],[\"user=codermast\",{\"1\":{\"730\":1,\"762\":1}}],[\"usertest\",{\"1\":{\"702\":1}}],[\"userdao1\",{\"1\":{\"647\":2}}],[\"userdao1属性名不存在\",{\"1\":{\"647\":1}}],[\"userdaoredisimpl\",{\"1\":{\"646\":2}}],[\"userdaoimpl\",{\"1\":{\"646\":3,\"647\":3,\"650\":2,\"766\":5}}],[\"userdaoimpl实现类\",{\"1\":{\"646\":1}}],[\"userdao\",{\"1\":{\"646\":29,\"647\":5,\"650\":8,\"766\":11}}],[\"userdao接口\",{\"1\":{\"646\":1}}],[\"usercontrollerbytype\",{\"1\":{\"766\":2}}],[\"usercontrollerbyname\",{\"1\":{\"766\":2}}],[\"usercontroller\",{\"1\":{\"643\":2,\"646\":13,\"648\":5,\"766\":9}}],[\"user相关的key\",{\"1\":{\"378\":1}}],[\"usersingleton\",{\"1\":{\"763\":1}}],[\"userserviceimpl\",{\"1\":{\"646\":11,\"647\":4,\"650\":2,\"766\":5}}],[\"userserviceimpl实现类\",{\"1\":{\"646\":1}}],[\"userservice\",{\"1\":{\"646\":22,\"647\":3,\"650\":8,\"766\":11}}],[\"userservice接口\",{\"1\":{\"646\":1}}],[\"users\",{\"1\":{\"234\":1}}],[\"user表中数据删除时\",{\"1\":{\"161\":1}}],[\"user表中数据更新时\",{\"1\":{\"160\":1}}],[\"user表中数据插入时\",{\"1\":{\"159\":1}}],[\"username=\",{\"1\":{\"763\":1,\"764\":1}}],[\"username2\",{\"1\":{\"284\":3}}],[\"username\",{\"1\":{\"131\":5,\"159\":2,\"160\":2,\"161\":2,\"234\":1,\"284\":6,\"533\":1,\"631\":1,\"730\":1,\"762\":1,\"763\":9,\"764\":10}}],[\"user\",{\"1\":{\"128\":2,\"132\":6,\"134\":2,\"141\":2,\"142\":2,\"159\":4,\"160\":4,\"161\":4,\"197\":4,\"308\":1,\"356\":15,\"372\":1,\"378\":2,\"493\":2,\"529\":6,\"634\":5,\"682\":21,\"683\":9,\"701\":3,\"702\":4,\"730\":2,\"737\":2,\"752\":19,\"762\":1,\"763\":13,\"764\":8,\"765\":10}}],[\"unchanged\",{\"1\":{\"626\":1}}],[\"uncommitted\",{\"1\":{\"261\":2,\"744\":4}}],[\"underlying\",{\"1\":{\"765\":1}}],[\"under\",{\"1\":{\"765\":3}}],[\"undefined\",{\"1\":{\"623\":2}}],[\"undo页的回收\",{\"1\":{\"75\":1}}],[\"undo\",{\"0\":{\"71\":1,\"78\":1,\"85\":1,\"86\":1},\"1\":{\"65\":1,\"68\":1,\"75\":2,\"78\":6,\"81\":1,\"85\":2,\"86\":2,\"88\":2}}],[\"unknownhostexception\",{\"1\":{\"600\":2}}],[\"uname\",{\"1\":{\"479\":2}}],[\"unless\",{\"1\":{\"765\":2}}],[\"unlike\",{\"1\":{\"460\":1}}],[\"unlock\",{\"1\":{\"141\":1,\"145\":1,\"600\":1}}],[\"unused\",{\"1\":{\"428\":4}}],[\"unsigned\",{\"1\":{\"428\":5,\"434\":2,\"438\":3,\"449\":15,\"454\":2,\"456\":1,\"458\":3,\"467\":3,\"737\":2}}],[\"unsubscribe\",{\"1\":{\"383\":1}}],[\"unwatch\",{\"1\":{\"401\":1}}],[\"until\",{\"1\":{\"291\":1,\"529\":1}}],[\"until条件\",{\"1\":{\"252\":1}}],[\"unix\",{\"1\":{\"474\":1}}],[\"unit\",{\"1\":{\"372\":1}}],[\"union中的第二个或者后面的查询语句\",{\"1\":{\"231\":1}}],[\"union\",{\"1\":{\"99\":3,\"168\":2,\"231\":1,\"438\":1}}],[\"unique\",{\"1\":{\"49\":1,\"92\":1,\"126\":1,\"129\":2}}],[\"upstream\",{\"1\":{\"634\":1}}],[\"upgrade\",{\"1\":{\"634\":6}}],[\"upgrades\",{\"1\":{\"434\":1}}],[\"up\",{\"1\":{\"478\":1,\"481\":1}}],[\"upper\",{\"1\":{\"55\":1}}],[\"updatebalance\",{\"1\":{\"737\":3,\"741\":1,\"742\":1,\"743\":1}}],[\"updatestock\",{\"1\":{\"737\":3,\"741\":1,\"742\":1,\"743\":1}}],[\"updatesizeandmodcount\",{\"1\":{\"623\":1}}],[\"update优化\",{\"0\":{\"224\":1}}],[\"update型触发器\",{\"1\":{\"156\":1}}],[\"update\",{\"1\":{\"52\":1,\"82\":1,\"85\":1,\"100\":1,\"116\":1,\"146\":2,\"147\":2,\"155\":1,\"157\":1,\"160\":3,\"183\":1,\"198\":1,\"228\":2,\"307\":1,\"487\":1,\"490\":1,\"493\":1,\"515\":3,\"731\":4,\"737\":4,\"749\":1}}],[\"u为此前传输数据包的报文段的序号\",{\"1\":{\"19\":1}}],[\"u\",{\"1\":{\"19\":4,\"204\":1,\"549\":1,\"553\":1}}],[\"将工作任务均衡地分配给计算机网络中的各台计算机\",{\"1\":{\"793\":1}}],[\"将自动装配的属性的属性名\",{\"1\":{\"766\":1}}],[\"将自动被弱引用或者软引用所封装\",{\"1\":{\"283\":1}}],[\"将自动被弱引用所封装\",{\"1\":{\"283\":1}}],[\"将所对应的bean为属性赋值\",{\"1\":{\"758\":1,\"759\":1,\"760\":2}}],[\"将所有元素添加到指定hyperloglog数据结构中\",{\"1\":{\"400\":1}}],[\"将所有加入的消息都串起来\",{\"1\":{\"387\":1}}],[\"将所有数据保存在内存中\",{\"1\":{\"239\":1}}],[\"将抛出一个异常\",{\"1\":{\"745\":1}}],[\"将抛出ioexception\",{\"1\":{\"705\":1}}],[\"将字节码转换为可在硬件上直接运行的机器码\",{\"1\":{\"677\":1}}],[\"将字符串str全部转成大写\",{\"1\":{\"55\":1}}],[\"将字符串str全部转成小写\",{\"1\":{\"55\":1}}],[\"将切面类通过注解\",{\"1\":{\"665\":1}}],[\"将目标对象和切面交给ioc容器管理\",{\"1\":{\"665\":1}}],[\"将代理逻辑\",{\"1\":{\"663\":1}}],[\"将来我们整合mybatis时\",{\"1\":{\"765\":1}}],[\"将来有任何日志需求\",{\"1\":{\"657\":1}}],[\"将来其他地方也需要附加日志\",{\"1\":{\"657\":1}}],[\"将日志功能集中到一个代理类中\",{\"1\":{\"657\":1}}],[\"将被代理的目标对象声明为成员变量\",{\"1\":{\"657\":1}}],[\"将被删除的元素赋值给\",{\"1\":{\"38\":1}}],[\"将非核心逻辑剥离出来以后\",{\"1\":{\"656\":1}}],[\"将它们定义成\",{\"1\":{\"644\":1}}],[\"将新数组设置为\",{\"1\":{\"627\":1}}],[\"将新节点插入表中\",{\"1\":{\"39\":1}}],[\"将指定集合\",{\"1\":{\"623\":2}}],[\"将指定的地理空间位置\",{\"1\":{\"398\":1}}],[\"将要被监听的代码\",{\"1\":{\"597\":1}}],[\"将终止线程\",{\"1\":{\"595\":1}}],[\"将相关的数据和方法组织成一个整体看待\",{\"1\":{\"573\":1}}],[\"将方法移动到下一个方法前面\",{\"1\":{\"553\":1}}],[\"将方法移动到上一个方法前面\",{\"1\":{\"553\":1}}],[\"将方法导出\",{\"1\":{\"309\":1}}],[\"将选定的代码加入动态模板中\",{\"1\":{\"552\":1}}],[\"将容器内部使用的网络端口随机映射到我们使用的主机上\",{\"1\":{\"535\":1}}],[\"将容器内的端口映射到宿主机的端口\",{\"1\":{\"482\":1}}],[\"将准备好的镜像推送至仓库\",{\"1\":{\"530\":1}}],[\"将准备好的数据加载到数据表内\",{\"1\":{\"204\":1}}],[\"将错误日志写入文件\",{\"1\":{\"529\":1}}],[\"将操作系统进行虚拟化\",{\"1\":{\"505\":1}}],[\"将当前目录下的所有文件复制到容器的工作目录\",{\"1\":{\"490\":1}}],[\"将客户端添加到server\",{\"1\":{\"464\":1}}],[\"将rehashidx赋值为\",{\"1\":{\"440\":1}}],[\"将rdb文件保存位置都修改为自己所在目录\",{\"1\":{\"297\":1}}],[\"将用户空间中创建的\",{\"1\":{\"407\":1}}],[\"将⼀个或多个hll合并后的结果存储在另⼀个hll中\",{\"1\":{\"400\":1}}],[\"将消息标记为\",{\"1\":{\"387\":1}}],[\"将脚本添加到脚本缓存\",{\"1\":{\"386\":1}}],[\"将以下内容作为文件内容\",{\"1\":{\"372\":1}}],[\"将对象依赖属性通过配置进行注入\",{\"1\":{\"694\":1}}],[\"将对象和对象之间关系的维护权交出去\",{\"1\":{\"693\":1}}],[\"将对象的创建权利交出去\",{\"1\":{\"693\":1}}],[\"将对象的类路径地址也序列化进\",{\"1\":{\"356\":1}}],[\"将对象手动序列化为\",{\"1\":{\"358\":1}}],[\"将这个对象的\",{\"1\":{\"472\":1}}],[\"将这个文件拷贝到每个目录下\",{\"1\":{\"341\":1}}],[\"将这两张表进行连接查询\",{\"1\":{\"98\":1}}],[\"将端口分别修改为27002\",{\"1\":{\"333\":1}}],[\"将端口分别修改为7001\",{\"1\":{\"297\":1}}],[\"将故障节点标记为\",{\"1\":{\"329\":1}}],[\"将\",{\"1\":{\"302\":1,\"345\":1,\"356\":1,\"358\":1,\"408\":1,\"440\":3,\"498\":1,\"634\":1}}],[\"将完整内存数据生成\",{\"1\":{\"302\":1,\"304\":1}}],[\"将其中的内容删除\",{\"1\":{\"634\":1}}],[\"将其中的6379修改为与所在目录一致\",{\"1\":{\"341\":1}}],[\"将其中的持久化模式改为默认的rdb模式\",{\"1\":{\"297\":1}}],[\"将其ack位置为1\",{\"1\":{\"19\":1}}],[\"将根据缓存中的元素上一次访问或者被修改的时间进行基于过期时间的驱逐\",{\"1\":{\"283\":1}}],[\"将会抛出filenotfoundexception\",{\"1\":{\"705\":1}}],[\"将会持有所有加入到缓存当中的元素\",{\"1\":{\"283\":1}}],[\"将会生成该隐藏字段\",{\"1\":{\"84\":1}}],[\"将缓存和数据库操作放在同一个事务内\",{\"1\":{\"277\":1}}],[\"将一些数据进行隐藏\",{\"1\":{\"575\":1}}],[\"将一些语句封装起来\",{\"1\":{\"241\":1}}],[\"将一个fd添加到epol的红黑树中\",{\"1\":{\"409\":1}}],[\"将一列数据作为一个整体\",{\"1\":{\"191\":1}}],[\"将主键为50的这行数据\",{\"1\":{\"207\":1}}],[\"将后半段数据移动到page3\",{\"1\":{\"207\":1}}],[\"将page1中50\",{\"1\":{\"207\":1}}],[\"将page分为三种类型\",{\"1\":{\"63\":1}}],[\"将数据量的存储起来\",{\"1\":{\"222\":1}}],[\"将数据分组提交\",{\"1\":{\"202\":1}}],[\"将数据表内的所有数据全部清空\",{\"1\":{\"179\":1}}],[\"将数据和索引分开存储\",{\"1\":{\"126\":1}}],[\"将数据和索引的存储放到了一块\",{\"1\":{\"126\":1}}],[\"将使用第一个唯一unique索引作为聚集索引\",{\"1\":{\"126\":1}}],[\"将键值换算成新的hash值\",{\"1\":{\"123\":1}}],[\"将spring配置文件中去掉tx\",{\"1\":{\"749\":1}}],[\"将s1\",{\"1\":{\"55\":1}}],[\"将syn同步位置为1\",{\"1\":{\"17\":1}}],[\"将第\",{\"1\":{\"38\":2}}],[\"将fin置为1\",{\"1\":{\"19\":1}}],[\"将fin位置为1\",{\"1\":{\"19\":1}}],[\"将ack位置为1\",{\"1\":{\"19\":1}}],[\"四次挥手是发生在tcp的连接释放过程中\",{\"1\":{\"19\":1}}],[\"四次挥手\",{\"0\":{\"19\":1}}],[\"四次握手将会导致连接时间变长\",{\"1\":{\"18\":1}}],[\"肯定是更加的安全和可靠\",{\"1\":{\"18\":1}}],[\"再更新图书的库存和用户的余额\",{\"1\":{\"738\":1}}],[\"再更新缓存\",{\"1\":{\"274\":1}}],[\"再查找messages\",{\"1\":{\"687\":1}}],[\"再添加一个无参构造函数\",{\"1\":{\"646\":1}}],[\"再进行一次抽样\",{\"1\":{\"457\":2}}],[\"再读数据\",{\"1\":{\"424\":1}}],[\"再跟上元素\",{\"1\":{\"423\":1}}],[\"再次调用\",{\"1\":{\"410\":1}}],[\"再次存储\",{\"1\":{\"344\":1}}],[\"再次建立连接\",{\"1\":{\"18\":1}}],[\"再判断\",{\"1\":{\"302\":1}}],[\"再执行set\",{\"1\":{\"300\":2}}],[\"再执行循环体中的sql语句\",{\"1\":{\"251\":1}}],[\"再往缓存中存储数据时就会有额外的性能开销\",{\"1\":{\"275\":1}}],[\"再也不会被访问到\",{\"1\":{\"275\":1}}],[\"再不损失精度的前提下\",{\"1\":{\"231\":1}}],[\"再哈希法\",{\"1\":{\"123\":1}}],[\"再将数据从内核中拷贝至用户空间\",{\"1\":{\"405\":1}}],[\"再将数据恢复到\",{\"1\":{\"64\":1}}],[\"再将合并后的数据写回磁盘内\",{\"1\":{\"64\":1}}],[\"再从磁盘加载并且缓存\",{\"1\":{\"63\":1}}],[\"再删除父表数据时产生的约束行为\",{\"1\":{\"52\":1}}],[\"再返回\",{\"1\":{\"26\":1}}],[\"再阅读本文\",{\"1\":{\"22\":1}}],[\"再发一个连接请求报文段\",{\"1\":{\"18\":1}}],[\"同名的方法如果有不同的参数列表\",{\"1\":{\"586\":1}}],[\"同类中调用\",{\"1\":{\"585\":1}}],[\"同一份产物不能跨平台运行\",{\"1\":{\"677\":1}}],[\"同一个\",{\"1\":{\"600\":1}}],[\"同一个数据库的不同表可以选择不同的存储引擎\",{\"1\":{\"234\":1}}],[\"同一仓库源可以有多个\",{\"1\":{\"511\":1}}],[\"同理\",{\"1\":{\"207\":1}}],[\"同理即可\",{\"1\":{\"18\":1}}],[\"同时根据id和类型获取对象\",{\"1\":{\"752\":1}}],[\"同时根据\",{\"1\":{\"752\":2}}],[\"同时消除了外语调用成本\",{\"1\":{\"678\":1}}],[\"同时还为\",{\"1\":{\"678\":1}}],[\"同时提高了开发的效率\",{\"1\":{\"660\":1}}],[\"同时让附加功能能够集中在一起也有利于统一维护\",{\"1\":{\"656\":1}}],[\"同时也可以对这些属性和方法进行修改\",{\"1\":{\"576\":1}}],[\"同时选中该单词\",{\"1\":{\"553\":2}}],[\"同时覆盖特定环境的设置\",{\"1\":{\"483\":1}}],[\"同时失效或者\",{\"1\":{\"273\":1}}],[\"同时成立\",{\"1\":{\"189\":1}}],[\"同时锁住数据\",{\"1\":{\"148\":1}}],[\"同时却也降低更新表的速度\",{\"1\":{\"116\":1}}],[\"同样的场景\",{\"1\":{\"745\":1}}],[\"同样\",{\"1\":{\"25\":1,\"64\":1}}],[\"同意连接\",{\"1\":{\"18\":1}}],[\"同步\",{\"1\":{\"552\":1}}],[\"同步和异步\",{\"0\":{\"415\":1}}],[\"同步刷盘\",{\"1\":{\"322\":1}}],[\"同步发送状态\",{\"1\":{\"17\":1}}],[\"同步收到\",{\"1\":{\"17\":2}}],[\"同步已发送状态\",{\"1\":{\"17\":1}}],[\"则一般称为多处理器系统\",{\"1\":{\"773\":1}}],[\"则一个extent内包含了64个page\",{\"1\":{\"206\":1}}],[\"则抛出异常nouniquebeandefinitionexception\",{\"1\":{\"766\":1}}],[\"则将这个存在的事务挂起\",{\"1\":{\"745\":1}}],[\"则将该位置的\",{\"1\":{\"407\":1}}],[\"则只会影响该方法\",{\"1\":{\"740\":1}}],[\"则只需要比较一次\",{\"1\":{\"38\":1}}],[\"则spring将采用与该applicationcontext相同的资源访问策略来访问资源\",{\"1\":{\"719\":1}}],[\"则默认为最多同一文件夹下7个文件\",{\"1\":{\"700\":1}}],[\"则默认的容量大小为10\",{\"1\":{\"622\":1}}],[\"则这size大小的日志会自动存入按年份\",{\"1\":{\"700\":1}}],[\"则子类必须实现父类抽象方法\",{\"1\":{\"591\":1}}],[\"则子类必须重写默认方法\",{\"1\":{\"590\":1}}],[\"则视为重载\",{\"1\":{\"586\":1}}],[\"则循环执行这里的语句\",{\"1\":{\"569\":1}}],[\"则进入当前方法体内\",{\"1\":{\"556\":1}}],[\"则进行超时重传\",{\"1\":{\"18\":1}}],[\"则是关闭对应选中的窗口\",{\"1\":{\"549\":1}}],[\"则是单线程\",{\"1\":{\"460\":1}}],[\"则就不会跳回执行\",{\"1\":{\"597\":1}}],[\"则就不会再被使用\",{\"1\":{\"472\":1}}],[\"则就可以通过索引进行查询\",{\"1\":{\"212\":1}}],[\"则说明对象无人引用\",{\"1\":{\"467\":1}}],[\"则写到\",{\"1\":{\"464\":1}}],[\"则计数器\",{\"1\":{\"458\":1}}],[\"则使用export\",{\"1\":{\"518\":1}}],[\"则使用到该对象的次数和频率都会很低\",{\"1\":{\"471\":1}}],[\"则使用\",{\"1\":{\"445\":1}}],[\"则使用一个字节保存这个长度\",{\"1\":{\"445\":1}}],[\"则直接写入ht\",{\"1\":{\"440\":1}}],[\"则新size为第一个大于等于dict\",{\"1\":{\"440\":4}}],[\"则新空间为扩展后字符串长度\",{\"1\":{\"429\":1}}],[\"则新空间扩展后字符串长度的两倍\",{\"1\":{\"429\":1}}],[\"则查询效率会大大降低\",{\"1\":{\"439\":1}}],[\"则查询出来的数据是两张表的笛卡尔积组合\",{\"1\":{\"95\":1}}],[\"则代表该对象没有被引用\",{\"1\":{\"472\":1}}],[\"则代表\",{\"1\":{\"450\":2}}],[\"则代表不存在\",{\"1\":{\"423\":1}}],[\"则代表空字符串\",{\"1\":{\"423\":1}}],[\"则遍历\",{\"1\":{\"408\":1}}],[\"则用户进程可以直接进入第二阶段\",{\"1\":{\"406\":1}}],[\"则立刻返回\",{\"1\":{\"405\":1}}],[\"则立刻发送确认报文段\",{\"1\":{\"19\":1}}],[\"则创建一个队列\",{\"1\":{\"388\":1}}],[\"则创建的是常规索引\",{\"1\":{\"129\":1}}],[\"则必须改写程序\",{\"1\":{\"719\":1}}],[\"则必须修改redis配置文件\",{\"1\":{\"371\":1}}],[\"则必须关闭redis服务\",{\"1\":{\"370\":1}}],[\"则调用\",{\"1\":{\"361\":1}}],[\"则释放资源\",{\"1\":{\"353\":1}}],[\"则根据\",{\"1\":{\"345\":1}}],[\"则集群开始创建\",{\"1\":{\"343\":1}}],[\"则判定服务下线\",{\"1\":{\"330\":1}}],[\"则判断\",{\"1\":{\"328\":1}}],[\"则永不参与选举\",{\"1\":{\"328\":1}}],[\"则该属性不装配\",{\"1\":{\"766\":1}}],[\"则该方法应当运行在一个嵌套式事务中\",{\"1\":{\"745\":1}}],[\"则该实例客观下线\",{\"1\":{\"327\":1}}],[\"则该视图就不可更新\",{\"1\":{\"168\":1}}],[\"则认为该实例主观下线\",{\"1\":{\"327\":1}}],[\"则触发重写\",{\"1\":{\"322\":1}}],[\"则触发器会触发三次\",{\"1\":{\"155\":1}}],[\"则需要将后续的所有节点进行移动\",{\"1\":{\"445\":1}}],[\"则需要两倍原来的内存\",{\"1\":{\"321\":1}}],[\"则需要对数据进行拷贝\",{\"1\":{\"321\":1}}],[\"则需要移动除表头元素以外的所有元素\",{\"1\":{\"38\":1}}],[\"则服务不可用\",{\"1\":{\"320\":1}}],[\"则运行\",{\"1\":{\"307\":1}}],[\"则可以省略这个属性\",{\"1\":{\"739\":1}}],[\"则可以将对象序列化为json字符串后存储\",{\"1\":{\"378\":1}}],[\"则可以采用\",{\"1\":{\"303\":1}}],[\"则可以继续进行传输数据\",{\"1\":{\"19\":1}}],[\"则执行完try块就执行finally语句\",{\"1\":{\"600\":1}}],[\"则执行父类对应方法\",{\"1\":{\"577\":1}}],[\"则执行这里的语句\",{\"1\":{\"566\":3}}],[\"则执行\",{\"1\":{\"321\":3}}],[\"则执行增量同步\",{\"1\":{\"303\":1}}],[\"则执行逻辑\",{\"1\":{\"251\":1}}],[\"则\",{\"1\":{\"272\":1,\"444\":2,\"470\":1}}],[\"则开启自动提交\",{\"1\":{\"258\":1}}],[\"则开启下一个页\",{\"1\":{\"207\":1}}],[\"则继续下一次循环\",{\"1\":{\"252\":1}}],[\"则退出\",{\"1\":{\"252\":1}}],[\"则表示没有使用索引\",{\"1\":{\"231\":1}}],[\"则会影响类中所有的方法\",{\"1\":{\"740\":1}}],[\"则会执行扩容操作\",{\"1\":{\"627\":1}}],[\"则会被抑制\",{\"1\":{\"600\":1}}],[\"则会被视为慢查询\",{\"1\":{\"229\":1}}],[\"则会报异常\",{\"1\":{\"581\":1}}],[\"则会报错\",{\"1\":{\"577\":1}}],[\"则会进入该内嵌的方法中\",{\"1\":{\"554\":1}}],[\"则会自动进行安装\",{\"1\":{\"498\":1}}],[\"则会采用int\",{\"1\":{\"417\":1}}],[\"则会采用\",{\"1\":{\"417\":1}}],[\"则会排除该\",{\"1\":{\"328\":1}}],[\"则会拷贝一份数据\",{\"1\":{\"321\":1}}],[\"则会继承\",{\"1\":{\"302\":1}}],[\"则会占用的是整张表的资源\",{\"1\":{\"226\":1}}],[\"则再进行查询时\",{\"1\":{\"212\":1}}],[\"则再次发送确认报文段\",{\"1\":{\"18\":1}}],[\"则相同的在数据删除时\",{\"1\":{\"207\":1}}],[\"则此时不会以默认的\",{\"1\":{\"242\":1}}],[\"则此时需要进行数据的移动\",{\"1\":{\"207\":1}}],[\"则此时客户端就不能够再发送数据\",{\"1\":{\"19\":1}}],[\"则向日志表中插入一条数据\",{\"1\":{\"159\":1,\"160\":1,\"161\":1}}],[\"则不用重复添加\",{\"1\":{\"650\":1}}],[\"则不进入当前方法体内\",{\"1\":{\"556\":1}}],[\"则不会进入该内嵌的方法中\",{\"1\":{\"556\":1}}],[\"则不会使用索引\",{\"1\":{\"131\":1}}],[\"则不走索引\",{\"1\":{\"131\":1}}],[\"则索引失效\",{\"1\":{\"131\":1}}],[\"则从哪里断开\",{\"1\":{\"131\":1}}],[\"则走索引\",{\"1\":{\"131\":2}}],[\"则在筛选该数据记录值时会进行全表扫描\",{\"1\":{\"226\":1}}],[\"则在使用的时候根据\",{\"1\":{\"131\":1}}],[\"则在长度为\",{\"1\":{\"38\":3}}],[\"则建立哈希索引\",{\"1\":{\"66\":1}}],[\"则也删除\",{\"1\":{\"52\":1}}],[\"则赋予该默认值\",{\"1\":{\"49\":1}}],[\"则当单链表长为\",{\"1\":{\"39\":1}}],[\"则无需插入\",{\"1\":{\"434\":1}}],[\"则无需移动元素\",{\"1\":{\"38\":1}}],[\"则无法共享\",{\"1\":{\"471\":1}}],[\"则无法实现增量同步\",{\"1\":{\"303\":1}}],[\"则无法插入\",{\"1\":{\"38\":1}}],[\"则平均时间复杂度为\",{\"1\":{\"38\":3}}],[\"则返回1\",{\"1\":{\"400\":1}}],[\"则返回res2\",{\"1\":{\"58\":1}}],[\"则返回res1\",{\"1\":{\"58\":1}}],[\"则返回value1\",{\"1\":{\"58\":1}}],[\"则返回t\",{\"1\":{\"58\":1}}],[\"则返回true\",{\"1\":{\"37\":1}}],[\"则返回\",{\"1\":{\"38\":2}}],[\"则为\",{\"1\":{\"32\":2}}],[\"则对应的时间复杂度\",{\"1\":{\"29\":1}}],[\"则对应的时间复杂度为\",{\"1\":{\"26\":1,\"31\":1}}],[\"则浪费更多的资源\",{\"1\":{\"18\":1}}],[\"则现在客户端只有一个连接\",{\"1\":{\"18\":1}}],[\"则做出响应\",{\"1\":{\"18\":1}}],[\"如同交通规则制约汽车驾驶一样\",{\"1\":{\"785\":1}}],[\"如网卡\",{\"1\":{\"785\":1}}],[\"如路由器\",{\"1\":{\"785\":1}}],[\"如双绞线\",{\"1\":{\"785\":1}}],[\"如仅1m的数量级或甚至更小\",{\"1\":{\"773\":1}}],[\"如用户验证\",{\"1\":{\"661\":1}}],[\"如springmvc\",{\"1\":{\"644\":1}}],[\"如sql接口\",{\"1\":{\"233\":1}}],[\"如数据库\",{\"1\":{\"710\":1}}],[\"如数据库连接\",{\"1\":{\"597\":1}}],[\"如数字\",{\"1\":{\"101\":1}}],[\"如从猫\",{\"1\":{\"589\":1}}],[\"如从唱\",{\"1\":{\"589\":1}}],[\"如生成对象的\",{\"1\":{\"550\":1}}],[\"如拉取\",{\"1\":{\"513\":1}}],[\"如未能成功运行\",{\"1\":{\"494\":1}}],[\"如未使用索引字段进行数据更新\",{\"1\":{\"226\":1}}],[\"如开发\",{\"1\":{\"483\":1}}],[\"如java语言的jedis客户端\",{\"1\":{\"376\":1}}],[\"如操作系统\",{\"1\":{\"785\":1}}],[\"如操作\",{\"1\":{\"361\":1}}],[\"如下所示\",{\"1\":{\"599\":1}}],[\"如下\",{\"1\":{\"348\":1}}],[\"如图片等\",{\"1\":{\"427\":1}}],[\"如图\",{\"1\":{\"332\":1}}],[\"如请求不存在的数据\",{\"1\":{\"272\":1}}],[\"如02000\",{\"1\":{\"255\":1}}],[\"如何建立联系\",{\"1\":{\"446\":1}}],[\"如何将同一类数据固定的保存在同一个\",{\"1\":{\"345\":1}}],[\"如何判断一个\",{\"1\":{\"330\":1}}],[\"如何不可避免的出现filesort\",{\"1\":{\"213\":1}}],[\"如何保证数据并发访问的一致性\",{\"1\":{\"138\":1}}],[\"如身份证号\",{\"1\":{\"209\":1}}],[\"如limit\",{\"1\":{\"194\":1}}],[\"如一个sql语句更新了3行数据\",{\"1\":{\"155\":1}}],[\"如为\",{\"1\":{\"131\":1}}],[\"如对表进行insert\",{\"1\":{\"116\":1}}],[\"如学生和课程之间的关系\",{\"1\":{\"94\":1}}],[\"如\",{\"1\":{\"82\":1,\"123\":1,\"219\":1,\"233\":1,\"494\":1,\"498\":2,\"595\":1,\"651\":1,\"757\":1}}],[\"如栈\",{\"1\":{\"34\":1}}],[\"如类实例化的一个对象就是数据元素\",{\"1\":{\"34\":1}}],[\"如果接口的实现不唯一\",{\"1\":{\"752\":1}}],[\"如果接口的实现唯一\",{\"1\":{\"752\":1}}],[\"如果定义了两个相同的类\",{\"1\":{\"752\":1}}],[\"如果外层事务不存在\",{\"1\":{\"745\":1}}],[\"如果我们把它设置成只读\",{\"1\":{\"741\":1}}],[\"如果我们要创建一个对象\",{\"1\":{\"693\":1}}],[\"如果我们要想在其中查找某个数据\",{\"1\":{\"452\":1}}],[\"如果事务管理器bean的id正好就是这个默认值\",{\"1\":{\"739\":1}}],[\"如果事务成功地完成\",{\"1\":{\"733\":1}}],[\"如果资源位置发生改变\",{\"1\":{\"719\":1}}],[\"如果资源不能够被解析称为绝对路径\",{\"1\":{\"705\":1}}],[\"如果资源不能够被解析为url\",{\"1\":{\"705\":1}}],[\"如果把该bean部署在spring容器中\",{\"1\":{\"718\":1}}],[\"如果把实现resourceloaderaware接口的bean类部署在spring容器中\",{\"1\":{\"718\":1}}],[\"如果把连接点看作数据库中的记录\",{\"1\":{\"661\":1}}],[\"如果applicationcontext是classpathxmlapplicationcontext\",{\"1\":{\"717\":1}}],[\"如果applicationcontext是filesystemxmlapplicationcontext\",{\"1\":{\"717\":1}}],[\"如果需要将资源描述符保留在某处或者需要多次读取流\",{\"1\":{\"711\":1}}],[\"如果需要更新\",{\"1\":{\"65\":1}}],[\"如果为true\",{\"1\":{\"705\":1}}],[\"如果为null\",{\"1\":{\"231\":1}}],[\"如果提供的locale符合en\",{\"1\":{\"687\":1}}],[\"如果提示说命令不存在\",{\"1\":{\"307\":1}}],[\"如果同时提供了messages\",{\"1\":{\"687\":1}}],[\"如果使用普通方式\",{\"1\":{\"680\":1}}],[\"如果使用的错误的符号\",{\"1\":{\"650\":1}}],[\"如果之前在父模块中引入了该依赖\",{\"1\":{\"650\":1}}],[\"如果想要明确指定一个返回值类型\",{\"1\":{\"667\":1}}],[\"如果想要获取被抑制的异常列表\",{\"1\":{\"600\":1}}],[\"如果想根据名称装配\",{\"1\":{\"647\":1}}],[\"如果required属性设置为false\",{\"1\":{\"646\":1}}],[\"如果类上使用了\",{\"1\":{\"643\":1}}],[\"如果容量不够\",{\"1\":{\"627\":1}}],[\"如果超出\",{\"1\":{\"627\":1}}],[\"如果超过一定时间没有相向则认为是主观下线\",{\"1\":{\"330\":1}}],[\"如果超过指定值\",{\"1\":{\"328\":1}}],[\"如果方法内的某条语句可能会出现异常\",{\"1\":{\"598\":1}}],[\"如果方法体还有方法\",{\"1\":{\"554\":1}}],[\"如果finally中使用了return或者throw等终止方法的语句\",{\"1\":{\"597\":1}}],[\"如果子类实现了多个接口\",{\"1\":{\"590\":1}}],[\"如果子类重写了父类方法\",{\"1\":{\"577\":1}}],[\"如果发现通过该引用调用\",{\"1\":{\"577\":1}}],[\"如果都不匹配的话\",{\"1\":{\"566\":1}}],[\"如果都不选的话\",{\"1\":{\"129\":1}}],[\"如果以上布尔表达式都不为true执行这里的代码\",{\"1\":{\"565\":1}}],[\"如果以做出完美的笔记为目的\",{\"1\":{\"2\":1}}],[\"如果布尔表达式\",{\"1\":{\"565\":2}}],[\"如果该方法体还有方法\",{\"1\":{\"556\":1}}],[\"如果当前正有一个事务在进行中\",{\"1\":{\"745\":1}}],[\"如果当前没有事务正在发生\",{\"1\":{\"745\":1}}],[\"如果当前没有事务\",{\"1\":{\"745\":1}}],[\"如果当前行断点是一个方法\",{\"1\":{\"556\":2}}],[\"如果当前已经是断点则去掉断点\",{\"1\":{\"549\":1}}],[\"如果出现这种情况\",{\"1\":{\"514\":1}}],[\"如果出现网络断开\",{\"1\":{\"387\":1}}],[\"如果您对\",{\"1\":{\"506\":1}}],[\"如果其他系统想部署\",{\"1\":{\"499\":1}}],[\"如果文件不存在请新建该文件\",{\"1\":{\"475\":1}}],[\"如果对复杂度较高的对象创建共享对象\",{\"1\":{\"471\":1}}],[\"如果对数据安全性要求较高\",{\"1\":{\"323\":1}}],[\"如果共享对象是包含多个值的对象\",{\"1\":{\"471\":1}}],[\"如果共享对象是保存字符串值的字符串对象\",{\"1\":{\"471\":1}}],[\"如果共享对象是保存字符串对象\",{\"1\":{\"471\":1}}],[\"如果c\",{\"1\":{\"464\":1}}],[\"如果count函数的参数不是null\",{\"1\":{\"223\":1}}],[\"如果针对\",{\"1\":{\"460\":1}}],[\"如果仅仅针对\",{\"1\":{\"460\":1}}],[\"如果仅仅是尾部模糊匹配\",{\"1\":{\"131\":1}}],[\"如果没查找到\",{\"1\":{\"687\":1}}],[\"如果没找到\",{\"1\":{\"470\":1}}],[\"如果没达到时间上限\",{\"1\":{\"457\":2}}],[\"如果没有有效抽取出来\",{\"1\":{\"734\":1}}],[\"如果没有就绪\",{\"1\":{\"407\":1}}],[\"如果没有准备就绪那么就会一直等待\",{\"1\":{\"404\":1}}],[\"如果没有指定session\",{\"1\":{\"244\":1}}],[\"如果没有指定schema\",{\"1\":{\"157\":1}}],[\"如果没有主键\",{\"1\":{\"126\":1}}],[\"如果没有找到\",{\"1\":{\"38\":1}}],[\"如果已经存在的单元测试类则可以进行选择\",{\"1\":{\"553\":1}}],[\"如果已经存在则更新其score值\",{\"1\":{\"382\":1}}],[\"如果已经过期\",{\"1\":{\"457\":1}}],[\"如果值为负\",{\"1\":{\"450\":1}}],[\"如果值为正\",{\"1\":{\"450\":1}}],[\"如果内存占用较多\",{\"1\":{\"446\":1}}],[\"如果列表数据较多\",{\"1\":{\"446\":1}}],[\"如果后续空间不足\",{\"1\":{\"445\":1}}],[\"如果保存在redis中的键值对只有几个几十个\",{\"1\":{\"440\":1}}],[\"如果执行扩展操作\",{\"1\":{\"439\":1}}],[\"如果执⾏命令后hll估计的近似基数发⽣变化\",{\"1\":{\"400\":1}}],[\"如果找到了\",{\"1\":{\"434\":1}}],[\"如果新字符串大于\",{\"1\":{\"429\":1}}],[\"如果新字符串小于\",{\"1\":{\"429\":1}}],[\"如果大于等于254字节\",{\"1\":{\"445\":1}}],[\"如果大小为\",{\"1\":{\"423\":1}}],[\"如果大小为0\",{\"1\":{\"423\":1}}],[\"如果大多数\",{\"1\":{\"330\":1}}],[\"如果存储的字符串是整数型\",{\"1\":{\"417\":1}}],[\"如果存储的\",{\"1\":{\"417\":1}}],[\"如果存在和排序列表中相符合或者完全相反的索引\",{\"1\":{\"212\":1}}],[\"如果存在多个查询条件\",{\"1\":{\"135\":1}}],[\"如果存在主键\",{\"1\":{\"126\":1}}],[\"如果监听较多\",{\"1\":{\"412\":1}}],[\"如果正在处理\",{\"1\":{\"406\":1}}],[\"如果调用\",{\"1\":{\"406\":2}}],[\"如果数据没有就绪\",{\"1\":{\"405\":1}}],[\"如果指定的队列不存在\",{\"1\":{\"388\":1}}],[\"如果jedis被使用过\",{\"1\":{\"353\":1}}],[\"如果要根据名称注入的话\",{\"1\":{\"646\":1}}],[\"如果要是想拉取指定版本时可以进行如下执行\",{\"1\":{\"513\":1}}],[\"如果要降序则在命令的z后面添加rev即可\",{\"1\":{\"382\":1}}],[\"如果要让redis以后台方式启动\",{\"1\":{\"371\":1}}],[\"如果要关闭所有进程\",{\"1\":{\"342\":1}}],[\"如果要一键停止\",{\"1\":{\"298\":1}}],[\"如果某\",{\"1\":{\"327\":1}}],[\"如果至少有\",{\"1\":{\"321\":3}}],[\"如果你的电脑已经安装了docker\",{\"1\":{\"498\":1}}],[\"如果你的电脑没有安装docker\",{\"1\":{\"498\":1}}],[\"如果你想安装命令行工具\",{\"1\":{\"307\":1}}],[\"如果你需要设置函数为局部函数需要使用关键字\",{\"1\":{\"293\":1}}],[\"如果实在是太多\",{\"1\":{\"303\":1}}],[\"如果未安装\",{\"1\":{\"487\":1}}],[\"如果未命中则查询数据库\",{\"1\":{\"281\":1}}],[\"如果未指定该字段的值\",{\"1\":{\"49\":1}}],[\"如果过限\",{\"1\":{\"278\":1,\"458\":1}}],[\"如果缓存写满了\",{\"1\":{\"275\":1}}],[\"如果不是采用classpath\",{\"1\":{\"723\":1}}],[\"如果不采用任何前缀\",{\"1\":{\"719\":1}}],[\"如果不处理\",{\"1\":{\"595\":1}}],[\"如果不希望内部类被外部类访问\",{\"1\":{\"580\":1}}],[\"如果不在每个\",{\"1\":{\"566\":1}}],[\"如果不在sql逻辑中增加退出循环的条件\",{\"1\":{\"253\":1}}],[\"如果不相符\",{\"1\":{\"470\":1}}],[\"如果不存在就新建一个\",{\"1\":{\"745\":1}}],[\"如果不存在就创建\",{\"1\":{\"388\":1,\"395\":1}}],[\"如果不存在则报错\",{\"1\":{\"646\":1}}],[\"如果不存在\",{\"1\":{\"476\":1}}],[\"如果不存在匹配串返回nil\",{\"1\":{\"293\":1}}],[\"如果不存在主键\",{\"1\":{\"126\":1}}],[\"如果不满足\",{\"1\":{\"252\":1}}],[\"如果满足\",{\"1\":{\"252\":1}}],[\"如果条件为true\",{\"1\":{\"251\":1}}],[\"如果应用是以读操作和插入操作为主\",{\"1\":{\"239\":1}}],[\"如果应用对事务的完整性有比较高的要求\",{\"1\":{\"239\":1}}],[\"如果全部都能通过索引则仅为using\",{\"1\":{\"212\":1}}],[\"如果一个事务已经存在\",{\"1\":{\"745\":1}}],[\"如果一个镜像创建了多个容器\",{\"1\":{\"514\":1}}],[\"如果一行的数据过大\",{\"1\":{\"207\":1}}],[\"如果一次性需要插入大量的数据\",{\"1\":{\"204\":1}}],[\"如果查询的是第一页数据\",{\"1\":{\"194\":1}}],[\"如果视图包含了以下任意一项\",{\"1\":{\"168\":1}}],[\"如果在事务中出现错误\",{\"1\":{\"733\":1}}],[\"如果在事务执行之前这个\",{\"1\":{\"401\":1}}],[\"如果在类中没有明确定义任何构造方法\",{\"1\":{\"588\":1}}],[\"如果在切换的过程又加按上\",{\"1\":{\"549\":1}}],[\"如果在从库上备份\",{\"1\":{\"142\":1}}],[\"如果在主库上备份\",{\"1\":{\"142\":1}}],[\"如果索引列不能存储null值\",{\"1\":{\"136\":1}}],[\"如果索引了多列\",{\"1\":{\"131\":1}}],[\"如果mysql评估使用索引比全表更慢\",{\"1\":{\"131\":1}}],[\"如果or前的条件中的列有索引\",{\"1\":{\"131\":1}}],[\"如果是在webapplicationcontext环境下还会有另外几个作用域\",{\"1\":{\"763\":1}}],[\"如果是返回true\",{\"1\":{\"752\":1}}],[\"如果是个文件夹就继续调用该方法\",{\"1\":{\"650\":1}}],[\"如果是普通的数组\",{\"1\":{\"443\":1}}],[\"如果是则将dict\",{\"1\":{\"440\":1}}],[\"如果是收缩\",{\"1\":{\"440\":2}}],[\"如果是扩容\",{\"1\":{\"440\":2}}],[\"如果是\",{\"1\":{\"328\":1,\"345\":1,\"647\":1}}],[\"如果是多字段排序\",{\"1\":{\"193\":1}}],[\"如果是字符串类型和字段\",{\"1\":{\"136\":1}}],[\"如果是开头模糊匹配\",{\"1\":{\"131\":1}}],[\"如果是四次握手\",{\"1\":{\"18\":1}}],[\"如果跳跃某一列\",{\"1\":{\"131\":1}}],[\"如果\",{\"1\":{\"88\":1,\"302\":1,\"303\":1,\"320\":1,\"326\":1,\"328\":1,\"440\":1,\"458\":1,\"719\":1}}],[\"如果表结构没有指定主键\",{\"1\":{\"84\":1}}],[\"如果表是在系统表空间而不是每个表文件或通用表空间中创建的\",{\"1\":{\"68\":1}}],[\"如果观察到哈希索引可以提升速度\",{\"1\":{\"66\":1}}],[\"如果每一次都操作磁盘\",{\"1\":{\"64\":1}}],[\"如果这些数据page没有在buffer\",{\"1\":{\"64\":1}}],[\"如果expr的值等于val1\",{\"1\":{\"58\":1}}],[\"如果val2为true\",{\"1\":{\"58\":1}}],[\"如果val1为true\",{\"1\":{\"58\":1}}],[\"如果value是一个java对象\",{\"1\":{\"378\":1}}],[\"如果value1不为null\",{\"1\":{\"58\":1}}],[\"如果value为true\",{\"1\":{\"58\":1}}],[\"如果有事务存在\",{\"1\":{\"745\":2}}],[\"如果有接口把自己的class当成key\",{\"1\":{\"650\":1}}],[\"如果有接口把接口的class当成key\",{\"1\":{\"650\":1}}],[\"如果有外部文档可以连接外部文档\",{\"1\":{\"551\":1}}],[\"如果有多个容器之间需要互相连接\",{\"1\":{\"487\":1}}],[\"如果有则设置子表中该外键值为null\",{\"1\":{\"52\":1}}],[\"如果有则不允许删除\",{\"1\":{\"52\":2}}],[\"如果有\",{\"1\":{\"52\":1}}],[\"如果网络信道非常差\",{\"1\":{\"18\":1}}],[\"如若第二次服务端接收到了请求\",{\"1\":{\"18\":1}}],[\"即用户不可见的\",{\"1\":{\"783\":1}}],[\"即用作构建的起点的操作系统和环境\",{\"1\":{\"490\":1}}],[\"即值为默认值null\",{\"1\":{\"766\":1}}],[\"即能买几本就买几本\",{\"1\":{\"745\":1}}],[\"即只要有一本书买不了\",{\"1\":{\"745\":1}}],[\"即只要从左往右开始\",{\"1\":{\"212\":1}}],[\"即transaction01执行期间禁止其它事务对这个字段进行更新\",{\"1\":{\"744\":1}}],[\"即使发生系统崩溃\",{\"1\":{\"733\":1}}],[\"即使没有用\",{\"1\":{\"595\":1}}],[\"即ioc容器\",{\"1\":{\"727\":1}}],[\"即通过注解的方式\",{\"1\":{\"680\":1}}],[\"即通过首地址和元素需要可在\",{\"1\":{\"38\":1}}],[\"即编译好的可以供其他程序使用的代码和数据\",{\"1\":{\"677\":1}}],[\"即时\",{\"1\":{\"677\":1,\"678\":1}}],[\"即其中需要重写的方法\",{\"1\":{\"658\":1}}],[\"即其它对象中嵌套了字符串对象\",{\"1\":{\"471\":1}}],[\"即代理类中如何重写接口中的抽象方法\",{\"1\":{\"658\":1}}],[\"即为java虚拟机\",{\"1\":{\"613\":1}}],[\"即在同一个类中可以定义多个同名但参数列表不同的构造方法\",{\"1\":{\"588\":1}}],[\"即在sql语句中嵌套使用select语句\",{\"1\":{\"100\":1}}],[\"即静态方法的调用\",{\"1\":{\"585\":1}}],[\"即调用父类对应参数的构造方法\",{\"1\":{\"576\":1}}],[\"即子类可对父类进行扩展\",{\"1\":{\"576\":1}}],[\"即将下面的代码\",{\"1\":{\"762\":1}}],[\"即将helloworld的对象交给spring的ioc容器管理\",{\"1\":{\"651\":1}}],[\"即将依赖项写入到子模块中的\",{\"1\":{\"650\":1}}],[\"即将\",{\"1\":{\"537\":1}}],[\"即将本地\",{\"1\":{\"536\":1}}],[\"即将本机的\",{\"1\":{\"535\":1}}],[\"即我们在本地访问\",{\"1\":{\"536\":1}}],[\"即查看所有容器\",{\"1\":{\"521\":1}}],[\"即实例\",{\"1\":{\"495\":1,\"496\":1}}],[\"即后续指令执行时的当前工作目录\",{\"1\":{\"490\":1}}],[\"即每秒执行10次\",{\"1\":{\"457\":1}}],[\"即每张表都有独立的空间\",{\"1\":{\"69\":1}}],[\"即便链表中存储的数据是有序的\",{\"1\":{\"452\":1}}],[\"即client\",{\"1\":{\"423\":1}}],[\"即消息长度\",{\"1\":{\"387\":1,\"391\":1}}],[\"即可下载\",{\"1\":{\"634\":1}}],[\"即可访问该\",{\"1\":{\"536\":1}}],[\"即可后台启动redis\",{\"1\":{\"371\":1}}],[\"即可\",{\"1\":{\"346\":1,\"537\":1,\"634\":1}}],[\"即这些操作要么同时成功\",{\"1\":{\"257\":1}}],[\"即这些操作要么同时成功要么同时失败\",{\"1\":{\"76\":1}}],[\"即定义为\",{\"1\":{\"242\":1}}],[\"即外层的查询\",{\"1\":{\"231\":1}}],[\"即不使用表连接或者子查询\",{\"1\":{\"231\":1}}],[\"即以什么标准判断数据行之间的分隔\",{\"1\":{\"204\":1}}],[\"即下一小节\",{\"1\":{\"179\":1}}],[\"即保证返回的字段\",{\"1\":{\"133\":1}}],[\"即尽量保证所需要的数据在使用索引内包含\",{\"1\":{\"133\":1}}],[\"即索引列表有多个字段\",{\"1\":{\"129\":1}}],[\"即多个键值对映射到了同一个槽位上\",{\"1\":{\"123\":1}}],[\"即按行将两张表排列组合\",{\"1\":{\"95\":1}}],[\"即事务已经提交了\",{\"1\":{\"88\":1}}],[\"即当前还未提交的事务id集合\",{\"1\":{\"87\":1}}],[\"即一个索引值包含了多个列\",{\"1\":{\"135\":1}}],[\"即一个索引值包含了单个列\",{\"1\":{\"135\":1}}],[\"即一个区中一共有64个连续的页\",{\"1\":{\"60\":1}}],[\"即一共循环了\",{\"1\":{\"24\":1}}],[\"即头结点之后\",{\"1\":{\"39\":1}}],[\"即\",{\"1\":{\"38\":2,\"448\":1}}],[\"即l中元素的个数\",{\"1\":{\"37\":1}}],[\"即从逻辑关系上描述数据\",{\"1\":{\"35\":1}}],[\"即同属于一个类的对象实例\",{\"1\":{\"34\":1}}],[\"即客户端发送连接请求\",{\"1\":{\"18\":1}}],[\"即发送的数据有可能存在丢失或者延迟发送的可能\",{\"1\":{\"18\":1}}],[\"即收到大量的连接请求而占用资源\",{\"1\":{\"17\":1}}],[\"我想先说一下我为什么要写苍穹外卖的学习笔记\",{\"1\":{\"636\":1}}],[\"我的名字是\",{\"1\":{\"362\":2}}],[\"我的微信号\",{\"1\":{\"4\":1}}],[\"我会建议把缓存容量设置为总数据量的\",{\"1\":{\"275\":1}}],[\"我们先来创建一个名为\",{\"1\":{\"758\":1}}],[\"我们享受资源注入\",{\"1\":{\"726\":1}}],[\"我们通过spring整合junit可以使程序创建spring容器了\",{\"1\":{\"696\":1}}],[\"我们只需要在配置文件中说明依赖关系的维护\",{\"1\":{\"753\":1}}],[\"我们只需要在配置文件中进行简单的配置即可完成操作\",{\"1\":{\"735\":1}}],[\"我们只需要在其中加上\",{\"1\":{\"526\":1}}],[\"我们只需要告诉它配置文件位置就可以了\",{\"1\":{\"696\":1}}],[\"我们都知道junit无法知晓我们是否使用了\",{\"1\":{\"696\":1}}],[\"我们会把校验的代码和真正的业务处理逻辑耦合在一起\",{\"1\":{\"680\":1}}],[\"我们经常遇到参数校验的需求\",{\"1\":{\"680\":1}}],[\"我们发现有如下缺陷\",{\"1\":{\"655\":1}}],[\"我们这里创建一个新的子模块\",{\"1\":{\"655\":1}}],[\"我们重新创建一个子模块\",{\"1\":{\"642\":1,\"751\":1}}],[\"我们重启这个实例\",{\"1\":{\"522\":1}}],[\"我们也可以直接使用\",{\"1\":{\"600\":1}}],[\"我们是不应该实现任何新的\",{\"1\":{\"595\":1}}],[\"我们再创建一个容器\",{\"1\":{\"537\":1}}],[\"我们知道\",{\"1\":{\"526\":1}}],[\"我们知道tcp连接是可靠的\",{\"1\":{\"18\":1}}],[\"我们看到这里增加了端口的映射\",{\"1\":{\"536\":1}}],[\"我们看到\",{\"1\":{\"522\":1}}],[\"我们看下各个参数的含义\",{\"1\":{\"476\":1}}],[\"我们或多或少的了解和学习了一些\",{\"1\":{\"519\":1}}],[\"我们用社区版就可以了\",{\"1\":{\"503\":1}}],[\"我们定义了一个名为db\",{\"1\":{\"483\":1}}],[\"我们还定义了一个卷db\",{\"1\":{\"482\":1}}],[\"我们创建了一个名为webnet的网络\",{\"1\":{\"482\":1}}],[\"我们创建三个文件夹\",{\"1\":{\"297\":1,\"333\":1}}],[\"我们的操作都是使用指令进行\",{\"1\":{\"466\":1}}],[\"我们的应用都需要通过\",{\"1\":{\"403\":1}}],[\"我们要存储大量数据\",{\"1\":{\"446\":1}}],[\"我们必须限制\",{\"1\":{\"446\":1}}],[\"我们假设没有特殊字符\",{\"1\":{\"424\":1}}],[\"我们调用\",{\"1\":{\"410\":1}}],[\"我们使用\",{\"1\":{\"388\":1}}],[\"我们使用的是redis6\",{\"1\":{\"343\":1}}],[\"我们来实际测试一下\",{\"1\":{\"356\":1}}],[\"我们自定义的配置类中\",{\"1\":{\"355\":1}}],[\"我们实现了一个简单的案例\",{\"1\":{\"354\":1}}],[\"我们不必关注与资源的获取和释放等问题\",{\"1\":{\"349\":1}}],[\"我们打开3个ssh窗口\",{\"1\":{\"298\":1,\"334\":1}}],[\"我们一键完成修改\",{\"1\":{\"297\":1}}],[\"我们搭建的主从集群结构如图\",{\"1\":{\"296\":1}}],[\"我们把缓存分为两类\",{\"1\":{\"282\":1}}],[\"我们能够找到查询时间较低的sql\",{\"1\":{\"229\":1}}],[\"我们将由\",{\"1\":{\"691\":1}}],[\"我们将这种页面分裂的现象\",{\"1\":{\"207\":1}}],[\"我们将其抽取出来\",{\"1\":{\"181\":1}}],[\"我们分别从\",{\"1\":{\"207\":1}}],[\"我们可以总结下面两个概念\",{\"1\":{\"735\":1}}],[\"我们可以将\",{\"1\":{\"693\":1}}],[\"我们可以添加或删除元素\",{\"1\":{\"618\":1}}],[\"我们可以设置一个自定义的\",{\"1\":{\"528\":1}}],[\"我们可以使用多个横切关注点对相关方法进行多个不同方面的增强\",{\"1\":{\"661\":1}}],[\"我们可以使用注解来实现自动装配\",{\"1\":{\"641\":1}}],[\"我们可以使用\",{\"1\":{\"517\":1}}],[\"我们可以使用new和old两个关键字来调用执行后和执行前的数据\",{\"1\":{\"161\":1}}],[\"我们可以给链表增加多级的索引指针\",{\"1\":{\"452\":1}}],[\"我们可以创建多个\",{\"1\":{\"446\":1}}],[\"我们可以这样定义key\",{\"1\":{\"378\":1}}],[\"我们可以通过自定义\",{\"1\":{\"354\":1}}],[\"我们可以根据这个数据来判断我们主要对那些操作进行优化\",{\"1\":{\"228\":1}}],[\"我们可以直接按照表的操作来操作视图\",{\"1\":{\"165\":1}}],[\"我们可以在备份时加上参数\",{\"1\":{\"142\":1}}],[\"我们可以在缓冲池中进行合并处理\",{\"1\":{\"64\":1}}],[\"我们在操作对应的\",{\"1\":{\"361\":1}}],[\"我们在使用redis时\",{\"1\":{\"222\":1}}],[\"我们在使用的时候可以直接使用别名进行子查询\",{\"1\":{\"164\":1}}],[\"我们在下一章节的主键优化里详细说明\",{\"1\":{\"203\":1}}],[\"我们在对数据的查询时\",{\"1\":{\"127\":1}}],[\"我们在连接查询的时候\",{\"1\":{\"95\":1}}],[\"我们需要先导入对应的配置文件\",{\"1\":{\"752\":1}}],[\"我们需要先掌握一些最基础的通用指令\",{\"1\":{\"363\":1}}],[\"我们需要的是程序能自动帮我们创建容器\",{\"1\":{\"696\":1}}],[\"我们需要把附加功能从业务功能代码中抽取出来\",{\"1\":{\"655\":1}}],[\"我们需要执行命令来创建集群\",{\"1\":{\"343\":1}}],[\"我们需要了解它是干什么的\",{\"1\":{\"306\":1}}],[\"我们需要了解到需要多表查询的场景\",{\"1\":{\"91\":1}}],[\"我们需要在redis\",{\"1\":{\"297\":1}}],[\"我们需要明确一些基本概念\",{\"1\":{\"106\":1}}],[\"我们首先需要了解一个简单的概念\",{\"1\":{\"95\":1}}],[\"我们就称为删除\",{\"1\":{\"52\":1}}],[\"我们根据方法论的步骤进行解答\",{\"1\":{\"25\":1}}],[\"我们根据方法论\",{\"1\":{\"24\":1}}],[\"这概念是说你不用创建对象\",{\"1\":{\"753\":1}}],[\"这意味着\",{\"1\":{\"719\":1}}],[\"这意味着容器并不直接在操作系统上运行\",{\"1\":{\"508\":1}}],[\"这通常是完全限定的文件名或资源的实际url\",{\"1\":{\"705\":1}}],[\"这无疑是一种直接颠覆java语言设计的思路\",{\"1\":{\"679\":1}}],[\"这对于根据实时计算资源\",{\"1\":{\"677\":1}}],[\"这对于微服务架构和持续集成\",{\"1\":{\"504\":1}}],[\"这也是一个纯逻辑概念\",{\"1\":{\"661\":1}}],[\"这也是一种常见的文档编写规范\",{\"1\":{\"374\":1}}],[\"这时可以使用\",{\"1\":{\"600\":1}}],[\"这时候才能使用java命令进行运行\",{\"1\":{\"611\":1}}],[\"这时候还需要解决的一个问题是遍历元素时如何定位下一个元素呢\",{\"1\":{\"443\":1}}],[\"这时候就需要使用profile分析\",{\"1\":{\"229\":1}}],[\"这时候的查询过程为\",{\"1\":{\"127\":1}}],[\"这几个容器相互独立\",{\"1\":{\"509\":1}}],[\"这有助于避免由于一个应用程序的问题导致整个系统崩溃\",{\"1\":{\"504\":1}}],[\"这使得我们可以基于一个个功能明确\",{\"1\":{\"726\":1}}],[\"这使得这两个类从逻辑上来说是父子关系\",{\"1\":{\"576\":1}}],[\"这使得容器的启动速度更快\",{\"1\":{\"504\":1}}],[\"这使得您的配置更加灵活\",{\"1\":{\"483\":1}}],[\"这包括代码\",{\"1\":{\"504\":1}}],[\"这多个\",{\"1\":{\"446\":1}}],[\"这代表每次写操作都会进行内存分配操作\",{\"1\":{\"445\":1}}],[\"这和计算基数时\",{\"1\":{\"400\":1}}],[\"这⾥我选择的是another\",{\"1\":{\"375\":1}}],[\"这一方案在经过长时间的优化和积累后\",{\"1\":{\"679\":1}}],[\"这一概念无疑是一种全新的思维的注入\",{\"1\":{\"365\":1}}],[\"这一类数据使用相同的有效部分\",{\"1\":{\"345\":1}}],[\"这次可以了\",{\"1\":{\"344\":1}}],[\"这部分开销主要是指往缓存中写数据时判断缓存淘汰策略\",{\"1\":{\"275\":1}}],[\"这些操作要么全部执行\",{\"1\":{\"733\":1}}],[\"这些模块可以满足一切企业级应用开发的需求\",{\"1\":{\"727\":1}}],[\"这些注解可以直接标注在\",{\"1\":{\"644\":1}}],[\"这些异常一般都是因为程序逻辑错误\",{\"1\":{\"595\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"595\":1}}],[\"这些错误是不受检异常\",{\"1\":{\"595\":1}}],[\"这些内容都会在后续中进行讲解\",{\"1\":{\"494\":1}}],[\"这些指令描述了如何构建\",{\"1\":{\"489\":1}}],[\"这些命令为\",{\"1\":{\"481\":1}}],[\"这些\",{\"1\":{\"475\":1}}],[\"这些都是redis操作过程中的一些常见指令\",{\"1\":{\"363\":1}}],[\"这些请求都会打到数据库\",{\"1\":{\"272\":1}}],[\"这些数据结构以某种方式饮用\",{\"1\":{\"115\":1}}],[\"这条sql是通过全表扫描进行查询的\",{\"1\":{\"212\":1}}],[\"这两行代码的作用是创建spring容器\",{\"1\":{\"696\":1}}],[\"这两种编译方式的主要区别在于是否在\",{\"1\":{\"677\":1}}],[\"这两种情况时\",{\"1\":{\"229\":1}}],[\"这两个实际上没有区别\",{\"1\":{\"245\":1}}],[\"这两个角度来探究这个问题\",{\"1\":{\"207\":1}}],[\"这两次握手\",{\"1\":{\"18\":1}}],[\"这是已打开资源的描述符\",{\"1\":{\"711\":1}}],[\"这是servletcontext资源的resource实现\",{\"1\":{\"710\":1}}],[\"这是一个链表\",{\"1\":{\"464\":1}}],[\"这是\",{\"1\":{\"461\":1,\"695\":1}}],[\"这是新手阶段容易忽视的一点\",{\"1\":{\"374\":1}}],[\"这是因为\",{\"1\":{\"354\":1,\"427\":1}}],[\"这是为什么呢\",{\"1\":{\"354\":1}}],[\"这是由于mysql底层的数据结构造成的\",{\"1\":{\"203\":1}}],[\"这是最好的索引选择性\",{\"1\":{\"134\":1}}],[\"这类sql开发人员操作的比较少\",{\"1\":{\"197\":1}}],[\"这本工具书\",{\"1\":{\"173\":1}}],[\"这与其他的数据库是相似的\",{\"1\":{\"155\":1}}],[\"这并不是一条sql语句\",{\"1\":{\"141\":1}}],[\"这会让索引变得很大\",{\"1\":{\"134\":1}}],[\"这个bean在ioc容器中有多个实例\",{\"1\":{\"763\":1}}],[\"这个bean的对象始终为单实例\",{\"1\":{\"763\":1}}],[\"这个属性名是getxxx\",{\"1\":{\"754\":1}}],[\"这个时候可以使用\",{\"1\":{\"752\":1}}],[\"这个时候就需要用到jre和jvm进行程序的运行调试\",{\"1\":{\"611\":1}}],[\"这个时候就已经配置成功了\",{\"1\":{\"606\":1}}],[\"这个操作不涉及写操作\",{\"1\":{\"741\":1}}],[\"这个会打印出所有的信息\",{\"1\":{\"700\":1}}],[\"这个log每次运行程序会自动清空\",{\"1\":{\"700\":1}}],[\"这个功能和第一个类的功能类似\",{\"1\":{\"689\":1}}],[\"这个是基于java的resourcebundle基础类实现\",{\"1\":{\"689\":1}}],[\"这个名词是指两种不同的编译方式\",{\"1\":{\"677\":1}}],[\"这个概念不是语法层面的\",{\"1\":{\"661\":1}}],[\"这个工具\",{\"1\":{\"611\":1}}],[\"这个默认构造方法执行时不进行特定的初始化操作\",{\"1\":{\"588\":1}}],[\"这个篇章\",{\"1\":{\"543\":1}}],[\"这个章节涉及到\",{\"1\":{\"507\":1}}],[\"这个镜像\",{\"1\":{\"496\":1}}],[\"这个库\",{\"1\":{\"495\":1}}],[\"这个文件不仅定义了所使用的服务\",{\"1\":{\"482\":1}}],[\"这个文件来决定\",{\"1\":{\"311\":1}}],[\"这个值越大则淘汰优先级越高\",{\"1\":{\"458\":1}}],[\"这个参数是控制首尾不压缩的节点个数\",{\"1\":{\"450\":1}}],[\"这个结构是\",{\"1\":{\"448\":1}}],[\"这个规范就是通信协议\",{\"1\":{\"423\":1}}],[\"这个阶段用户进程是阻塞的\",{\"1\":{\"405\":1}}],[\"这个过程称为\",{\"1\":{\"440\":1}}],[\"这个过程用户进程是非阻塞的\",{\"1\":{\"405\":1}}],[\"这个过程我们就叫做回表查询\",{\"1\":{\"127\":1}}],[\"这个消息就会被发送给订阅它的三个客户端\",{\"1\":{\"383\":1}}],[\"这个格式并非固定\",{\"1\":{\"378\":1}}],[\"这个依赖项\",{\"1\":{\"355\":1}}],[\"这个\",{\"1\":{\"346\":1,\"528\":1,\"631\":2,\"646\":1,\"647\":1,\"678\":1}}],[\"这个方法写在项目启动类中\",{\"1\":{\"336\":1}}],[\"这个路径的监听\",{\"1\":{\"311\":1}}],[\"这个最简单\",{\"1\":{\"290\":1}}],[\"这个顺序来判断是否走索引\",{\"1\":{\"131\":1}}],[\"这个字段在后面的mvcc版本控制时会使用到\",{\"1\":{\"60\":1}}],[\"这样数据库就能够针对查询操作来进行优化\",{\"1\":{\"741\":1}}],[\"这样一来\",{\"1\":{\"696\":1}}],[\"这样内容\",{\"1\":{\"690\":1}}],[\"这样当之后程序需要更新时\",{\"1\":{\"577\":1}}],[\"这样它们可以在隔离环境中一起运行\",{\"1\":{\"478\":1}}],[\"这样的方法就叫通知方法\",{\"1\":{\"661\":1}}],[\"这样的类就成为内部类\",{\"1\":{\"580\":1}}],[\"这样的部署过程也相对来说比较繁琐复杂\",{\"1\":{\"477\":1}}],[\"这样的高并发场景\",{\"1\":{\"320\":1}}],[\"这样可使程序避免了重复分配的麻烦\",{\"1\":{\"471\":1}}],[\"这样可以确保ht\",{\"1\":{\"440\":1}}],[\"这样可以大大节约索引空间\",{\"1\":{\"134\":1}}],[\"这样可以极大的提高数据库的性能\",{\"1\":{\"75\":1}}],[\"这样查找效率就会很低\",{\"1\":{\"452\":1}}],[\"这样在进行渐进式\",{\"1\":{\"440\":1}}],[\"这样就可以便于未来安装或更新我们的软件包\",{\"1\":{\"307\":1}}],[\"这样就可以在这些数据结构上实现高级查找算法\",{\"1\":{\"115\":1}}],[\"这样\",{\"1\":{\"306\":1,\"474\":1,\"483\":1,\"487\":1}}],[\"这样缓存永远不会生效\",{\"1\":{\"272\":1}}],[\"这样我们可以根据自己的需要\",{\"1\":{\"233\":1}}],[\"这样导致一页中存储的键值减少\",{\"1\":{\"124\":1}}],[\"这张中间表的字段最少包含了两个外键\",{\"1\":{\"94\":1}}],[\"这种方式吞吐量高\",{\"1\":{\"677\":1}}],[\"这种方式可以实现对象的浅拷贝或深拷贝\",{\"1\":{\"581\":1}}],[\"这种方式通过记录字符串长度\",{\"1\":{\"423\":1}}],[\"这种特殊情况下产生的连续多次空间扩展操作称之为\",{\"1\":{\"445\":1}}],[\"这种情况不必担心\",{\"1\":{\"494\":1}}],[\"这种情况会导致数据的存储和查找变得复杂\",{\"1\":{\"437\":1}}],[\"这种情况即为using\",{\"1\":{\"211\":1}}],[\"这种情况经常用于多表的拆分\",{\"1\":{\"92\":1}}],[\"这种存储方式的表称为索引组织表\",{\"1\":{\"206\":1}}],[\"这种数据结构就是索引\",{\"1\":{\"115\":1}}],[\"这种关系的实现相对来说较为复杂\",{\"1\":{\"94\":1}}],[\"这种关系也是我们经常遇到的一种关系\",{\"1\":{\"94\":1}}],[\"这种关系就是一对多关系\",{\"1\":{\"93\":1}}],[\"这就是事务传播行为\",{\"1\":{\"745\":1}}],[\"这就是一种多对多的关系\",{\"1\":{\"94\":1}}],[\"这就使得基于\",{\"1\":{\"726\":1}}],[\"这就使得服务器容易遭受syn洪范攻击\",{\"1\":{\"17\":1}}],[\"这就让java语言和工程摆脱jvm的限制\",{\"1\":{\"679\":1}}],[\"这就需要使用动态代理技术了\",{\"1\":{\"657\":1}}],[\"这就实现了一次编译\",{\"1\":{\"613\":1}}],[\"这就容易造成混淆\",{\"1\":{\"245\":1}}],[\"这就要求该外键允许取null\",{\"1\":{\"52\":1}}],[\"这里也可以使用我们之前的\",{\"1\":{\"763\":1}}],[\"这里也是满足索引的最左前缀法则\",{\"1\":{\"212\":1}}],[\"这里\",{\"1\":{\"730\":1}}],[\"这里设置了20\",{\"1\":{\"700\":1}}],[\"这里设置为\",{\"1\":{\"349\":3}}],[\"这里存在一个优先级概念\",{\"1\":{\"687\":1}}],[\"这里和上面同理\",{\"1\":{\"650\":1}}],[\"这里再附上下载链接\",{\"1\":{\"631\":1}}],[\"这里要提一下javac\",{\"1\":{\"611\":1}}],[\"这里要注意\",{\"1\":{\"541\":1}}],[\"这里要注意的是如果在\",{\"1\":{\"650\":1}}],[\"这里要注意的是\",{\"1\":{\"374\":1,\"566\":1,\"600\":1}}],[\"这里每个人的电脑环境不同\",{\"1\":{\"535\":1}}],[\"这里出现了警告信息\",{\"1\":{\"535\":1}}],[\"这里是为了避免和\",{\"1\":{\"758\":1}}],[\"这里是循环要执行的语句\",{\"1\":{\"568\":2}}],[\"这里是对\",{\"1\":{\"525\":1}}],[\"这里是先\",{\"1\":{\"26\":1}}],[\"这里可以看到已经创建成功了\",{\"1\":{\"515\":1}}],[\"这里如果使用了该镜像创建了容器\",{\"1\":{\"514\":1}}],[\"这里默认拉取的是\",{\"1\":{\"513\":1}}],[\"这里仍以\",{\"1\":{\"513\":1}}],[\"这里提供一个国内的下载镜像\",{\"1\":{\"499\":1}}],[\"这里同样是个hello\",{\"1\":{\"476\":1}}],[\"这里以\",{\"1\":{\"475\":1,\"530\":1}}],[\"这里以操作string类型为例\",{\"1\":{\"353\":1}}],[\"这里只有\",{\"1\":{\"469\":1}}],[\"这里因为空间不够\",{\"1\":{\"429\":1}}],[\"这里写的是\",{\"1\":{\"421\":1}}],[\"这里写的是去数据库查询的业务逻辑\",{\"1\":{\"284\":1}}],[\"这里就已经找到了\",{\"1\":{\"512\":1}}],[\"这里就不赘述\",{\"1\":{\"375\":1}}],[\"这里就只了解增\",{\"1\":{\"181\":1}}],[\"这里options为选项\",{\"1\":{\"374\":1}}],[\"这里不再赘述\",{\"1\":{\"368\":1,\"487\":1}}],[\"这里选取\",{\"1\":{\"347\":1}}],[\"这里输入\",{\"1\":{\"346\":1}}],[\"这里输入yes\",{\"1\":{\"343\":1}}],[\"这里返回\",{\"1\":{\"311\":1}}],[\"这里将nginx\",{\"1\":{\"308\":1}}],[\"这里会用到两个很重要的概念\",{\"1\":{\"302\":1}}],[\"这里我们为了防止和之前的冲突\",{\"1\":{\"762\":1}}],[\"这里我们为了演示方便\",{\"1\":{\"299\":1}}],[\"这里我们在配置\",{\"1\":{\"758\":1}}],[\"这里我们是\",{\"1\":{\"752\":1}}],[\"这里我们创建一个新的子模块\",{\"1\":{\"650\":1}}],[\"这里我们演示删除之前下载的那个\",{\"1\":{\"514\":1}}],[\"这里我们会在同一台虚拟机中开启6个redis实例\",{\"1\":{\"340\":1}}],[\"这里我们会在同一台虚拟机中开启3个redis实例\",{\"1\":{\"296\":1}}],[\"这里我们搭建一个最小的分片集群\",{\"1\":{\"340\":1}}],[\"这里我们搭建一个三节点形成的sentinel集群\",{\"1\":{\"332\":1}}],[\"这里我们使用\",{\"1\":{\"310\":1}}],[\"这里我个人理解的是\",{\"1\":{\"241\":1}}],[\"这里表示感谢\",{\"1\":{\"268\":1}}],[\"这里查询完成以后就能够看到增删改查的执行次数\",{\"1\":{\"228\":1}}],[\"这里一共有7个空格\",{\"1\":{\"228\":1}}],[\"这里一一进行说明\",{\"1\":{\"22\":1}}],[\"这里删除数据的筛选条件可有可无\",{\"1\":{\"184\":1}}],[\"这里修改数据的筛选条件可有可无\",{\"1\":{\"183\":1}}],[\"这里的命名需要和第五步中的使用的配置文件名称相同\",{\"1\":{\"651\":1}}],[\"这里的端口映射默认都是\",{\"1\":{\"537\":1}}],[\"这里的拉取通常是指从\",{\"1\":{\"509\":1}}],[\"这里的extent和page的空间大小是固定的\",{\"1\":{\"206\":1}}],[\"这里的\",{\"1\":{\"179\":1,\"258\":1,\"312\":1}}],[\"这里的功能可以看作\",{\"1\":{\"179\":1}}],[\"这里的具体细节可以去学习数据结构中的b树\",{\"1\":{\"120\":1}}],[\"这里在此对黑马开源教学视频\",{\"1\":{\"173\":1,\"268\":1}}],[\"这里仅对外键约束做详细介绍\",{\"1\":{\"50\":1}}],[\"这里实现了顺序表的插入\",{\"1\":{\"38\":1}}],[\"这里实际上就可以拆分为两条语句\",{\"1\":{\"26\":1}}],[\"这里主要对递归操作进行说明\",{\"1\":{\"32\":1}}],[\"这里主要总结数据结构中时间复杂度的计算方法\",{\"1\":{\"22\":1}}],[\"这里确认报文段也不携带数据\",{\"1\":{\"17\":1}}],[\"而整个网络就像一个大的计算机系统一样对用户是透明的\",{\"1\":{\"783\":1}}],[\"而整数集合和压缩列表这些只能保存字符串\",{\"1\":{\"471\":1}}],[\"而并非传递\",{\"1\":{\"757\":1}}],[\"而只需要描述它如何被创建\",{\"1\":{\"753\":1}}],[\"而长时间占用资源\",{\"1\":{\"742\":1}}],[\"而图书价格为80\",{\"1\":{\"738\":1}}],[\"而无需求助于单次使用的inputstreamresource\",{\"1\":{\"712\":1}}],[\"而无法进行其他操作\",{\"1\":{\"370\":1}}],[\"而无法优化的又被统计到\",{\"1\":{\"229\":1}}],[\"而spring的resource声明了访问low\",{\"1\":{\"704\":1}}],[\"而spring\",{\"1\":{\"680\":1}}],[\"而抽象类可以包含构造器\",{\"1\":{\"592\":1}}],[\"而抽象类可以有定义与实现\",{\"1\":{\"592\":1}}],[\"而抽象类强调所属关系\",{\"1\":{\"592\":1}}],[\"而void\",{\"1\":{\"587\":1}}],[\"而后者实现的是运行时的多态性\",{\"1\":{\"586\":1}}],[\"而后面的列中没有索引\",{\"1\":{\"131\":1}}],[\"而小明\",{\"1\":{\"579\":1}}],[\"而小容量缓存不一定就起不到加速访问的效果\",{\"1\":{\"275\":1}}],[\"而表现类型不必更改\",{\"1\":{\"577\":1}}],[\"而所需要的平台是请求的映像的平台\",{\"1\":{\"535\":1}}],[\"而所有\",{\"1\":{\"427\":1}}],[\"而db和api服务则连接到back\",{\"1\":{\"483\":1}}],[\"而delete\",{\"1\":{\"179\":1}}],[\"而没有提到\",{\"1\":{\"469\":1}}],[\"而用户的余额为100\",{\"1\":{\"745\":1}}],[\"而用户在对集合进行操作时\",{\"1\":{\"466\":1}}],[\"而用户线程就会处于阻塞状态\",{\"1\":{\"404\":1}}],[\"而有些指令却能够针对所有的类型\",{\"1\":{\"466\":1}}],[\"而对于一些二进制文件\",{\"1\":{\"427\":1}}],[\"而在\",{\"1\":{\"423\":1,\"757\":1}}],[\"而redis仅仅是一组命令的顺序执行集合\",{\"1\":{\"401\":1}}],[\"而使用的步骤与哨兵模式基本一致\",{\"1\":{\"348\":1}}],[\"而使用name字段查询\",{\"1\":{\"128\":1}}],[\"而存储过程是使用call调用\",{\"1\":{\"256\":1}}],[\"而且还将策略模式和\",{\"1\":{\"719\":1}}],[\"而且还可以上传自己的镜像\",{\"1\":{\"531\":1}}],[\"而且如果未来要新增一种校验逻辑也需要在修改多个地方\",{\"1\":{\"680\":1}}],[\"而且性能也会大打折扣\",{\"1\":{\"460\":1}}],[\"而且更耗费内存\",{\"1\":{\"421\":1}}],[\"而且内核空间与用户空间的频繁信号交互性能也较低\",{\"1\":{\"413\":1}}],[\"而且增删改查效率都非常高\",{\"1\":{\"412\":1}}],[\"而且忙等机制会导致\",{\"1\":{\"405\":1}}],[\"而且不能直接调用系统资源\",{\"1\":{\"403\":1}}],[\"而且里面的\",{\"1\":{\"354\":1}}],[\"而且\",{\"1\":{\"322\":1,\"726\":1}}],[\"而且无法保障数据的安全性\",{\"1\":{\"239\":1}}],[\"而且只能有一个\",{\"1\":{\"126\":1}}],[\"而这些的命令中\",{\"1\":{\"466\":1}}],[\"而这些方式并不能够真正的评判一条sql的性能\",{\"1\":{\"231\":1}}],[\"而这类sql是非常需要我们进行优化的\",{\"1\":{\"229\":1}}],[\"而耗费的时间又在我们慢日志统计时间的临界值\",{\"1\":{\"229\":1}}],[\"而完全相反时只需要反向扫描即可\",{\"1\":{\"212\":1}}],[\"而不称为计算机网络\",{\"1\":{\"773\":1}}],[\"而不受环境差异的影响\",{\"1\":{\"504\":1}}],[\"而不满足排序列表的索引则会通过全表扫描\",{\"1\":{\"211\":1}}],[\"而不是底层的\",{\"1\":{\"695\":1}}],[\"而不是我们写好的java文件\",{\"1\":{\"611\":1}}],[\"而不是属于类的\",{\"1\":{\"580\":1}}],[\"而不是阻塞用户进程\",{\"1\":{\"405\":1}}],[\"而不是直接返回nil\",{\"1\":{\"380\":1}}],[\"而不是直接添加到页尾\",{\"1\":{\"207\":1}}],[\"而不是复制真实的数据\",{\"1\":{\"321\":1}}],[\"而不是\",{\"1\":{\"245\":1,\"430\":1}}],[\"而不是基于库的\",{\"1\":{\"234\":1}}],[\"而不是对记录加的锁\",{\"1\":{\"148\":1}}],[\"而不是比较索引中的值\",{\"1\":{\"126\":1}}],[\"而having可以\",{\"1\":{\"192\":1}}],[\"而having是在分组之后进行过滤\",{\"1\":{\"192\":1}}],[\"而local只会检查定义检查条件的视图\",{\"1\":{\"166\":1}}],[\"而非单列索引\",{\"1\":{\"135\":1}}],[\"而选择性是指不重复的索引值\",{\"1\":{\"134\":1}}],[\"而第一条sql只查询了一次b+树\",{\"1\":{\"128\":1}}],[\"而主键会建立聚集索引\",{\"1\":{\"128\":1}}],[\"而是getobject\",{\"1\":{\"765\":1}}],[\"而是针对ioc容器中所有bean都会执行\",{\"1\":{\"764\":1}}],[\"而是改为使用classpath\",{\"1\":{\"723\":1}}],[\"而是调用resourceloader实例的getresource\",{\"1\":{\"717\":1}}],[\"而是一种设计思想\",{\"1\":{\"691\":1}}],[\"而是一条shell脚本\",{\"1\":{\"141\":1}}],[\"而是根据附加功能的逻辑上的需要\",{\"1\":{\"661\":1}}],[\"而是通过代理类间接调用\",{\"1\":{\"656\":1}}],[\"而是通过运算\",{\"1\":{\"458\":1}}],[\"而是从该位置继续往后执行\",{\"1\":{\"566\":1}}],[\"而是在访问一个\",{\"1\":{\"457\":1}}],[\"而是在一次读或者写操作后\",{\"1\":{\"285\":1}}],[\"而是采用\",{\"1\":{\"456\":1}}],[\"而是采用了如下的结构\",{\"1\":{\"443\":1}}],[\"而是记录上一个节点和本节点长度来寻址\",{\"1\":{\"446\":1}}],[\"而是分多次\",{\"1\":{\"440\":1}}],[\"而是以\",{\"1\":{\"427\":1}}],[\"而是统一使用\",{\"1\":{\"357\":1}}],[\"而是与插槽绑定\",{\"1\":{\"345\":1}}],[\"而是我们设置的$$\",{\"1\":{\"242\":1}}],[\"而是专门做了优化\",{\"1\":{\"223\":1}}],[\"而是二级索引中的值\",{\"1\":{\"127\":1}}],[\"而是提供不可靠的包交换\",{\"1\":{\"16\":1}}],[\"而当我们的查询条件并不是聚集索引中的值\",{\"1\":{\"127\":1}}],[\"而innodb存储引擎中\",{\"1\":{\"206\":1}}],[\"而innodb中具有自适应hash功能\",{\"1\":{\"123\":1}}],[\"而io\",{\"1\":{\"75\":1}}],[\"而\",{\"1\":{\"99\":1,\"387\":1,\"408\":1,\"440\":1,\"505\":2,\"650\":1,\"677\":1,\"693\":1,\"694\":1}}],[\"而一门课程中也可以有多个学生\",{\"1\":{\"94\":1}}],[\"而update\",{\"1\":{\"85\":1}}],[\"而会将数据变更存在更改缓冲区\",{\"1\":{\"64\":1}}],[\"而索引是从\",{\"1\":{\"38\":2}}],[\"而数组中元素的下标是从\",{\"1\":{\"38\":1}}],[\"而算法的视线依赖于所采用的存储结构\",{\"1\":{\"35\":1}}],[\"而客户端收到重复的确认报文段以为是失效报文段\",{\"1\":{\"18\":1}}],[\"而客户端的资源是在第三次握手时创建的\",{\"1\":{\"17\":1}}],[\"而此时网络信道恢复\",{\"1\":{\"18\":1}}],[\"rs\",{\"1\":{\"731\":5}}],[\"rdlist\",{\"1\":{\"409\":1}}],[\"rdb和aof各有自己的优缺点\",{\"1\":{\"323\":1}}],[\"rdb与aof对比\",{\"0\":{\"323\":1}}],[\"rdbcompression\",{\"1\":{\"321\":1}}],[\"rdb持久化\",{\"0\":{\"321\":1}}],[\"rdb到\",{\"1\":{\"302\":1}}],[\"rdb\",{\"1\":{\"302\":3,\"303\":1,\"304\":2,\"321\":24,\"322\":1,\"323\":1}}],[\"rdbms\",{\"1\":{\"106\":1}}],[\"rpop\",{\"1\":{\"380\":1}}],[\"rpush\",{\"1\":{\"380\":1}}],[\"rpad\",{\"1\":{\"55\":1}}],[\"rust\",{\"1\":{\"677\":1}}],[\"rubygems\",{\"1\":{\"343\":1}}],[\"ruby\",{\"1\":{\"343\":1}}],[\"runtime\",{\"1\":{\"611\":1,\"612\":1,\"646\":1,\"647\":1,\"650\":2,\"677\":2,\"684\":2}}],[\"runtimeexception\",{\"1\":{\"424\":2,\"595\":3,\"650\":1,\"707\":1}}],[\"running\",{\"1\":{\"580\":1}}],[\"runnable\",{\"1\":{\"580\":4}}],[\"run\",{\"1\":{\"341\":1,\"476\":3,\"480\":1,\"485\":1,\"487\":2,\"490\":3,\"493\":2,\"495\":1,\"496\":1,\"515\":2,\"520\":1,\"528\":1,\"535\":2,\"537\":1,\"551\":1,\"554\":1,\"580\":2,\"650\":1,\"701\":1,\"752\":4,\"764\":2}}],[\"runoob\",{\"1\":{\"268\":1,\"293\":3}}],[\"rbr\",{\"1\":{\"409\":1}}],[\"rb\",{\"1\":{\"343\":2,\"409\":1}}],[\"rb是有ruby语言编写的所以需要安装ruby环境\",{\"1\":{\"343\":1}}],[\"rb来实现的\",{\"1\":{\"343\":1}}],[\"rfds\",{\"1\":{\"407\":4}}],[\"rf\",{\"1\":{\"341\":1}}],[\"rmi\",{\"1\":{\"514\":2}}],[\"rm\",{\"1\":{\"341\":1,\"514\":1,\"526\":1,\"541\":2}}],[\"rr隔离级别下都支持\",{\"1\":{\"148\":1}}],[\"rather\",{\"1\":{\"765\":1}}],[\"rap\",{\"1\":{\"589\":1}}],[\"raw编码动态字符串\",{\"1\":{\"468\":1}}],[\"raw==1\",{\"1\":{\"449\":1}}],[\"raw\",{\"1\":{\"417\":1,\"468\":1,\"469\":1,\"634\":1}}],[\"radius\",{\"1\":{\"398\":2}}],[\"rangecheck\",{\"1\":{\"624\":1,\"625\":1,\"626\":1}}],[\"rangecheckforadd\",{\"1\":{\"623\":2}}],[\"range\",{\"1\":{\"231\":1}}],[\"random\",{\"1\":{\"278\":2,\"458\":2}}],[\"rand\",{\"1\":{\"56\":1}}],[\"ram\",{\"1\":{\"138\":1}}],[\"r\",{\"1\":{\"117\":1,\"125\":1,\"423\":20,\"458\":3,\"490\":1,\"549\":1,\"553\":1}}],[\"ring0\",{\"1\":{\"403\":1}}],[\"ring3\",{\"1\":{\"403\":1}}],[\"riak\",{\"1\":{\"111\":1}}],[\"right\",{\"1\":{\"97\":1,\"623\":1}}],[\"rod\",{\"1\":{\"725\":1,\"765\":1}}],[\"robj\",{\"1\":{\"458\":1,\"464\":1,\"467\":1}}],[\"routine\",{\"1\":{\"242\":1}}],[\"routines\",{\"1\":{\"242\":1}}],[\"round\",{\"1\":{\"56\":1}}],[\"root>\",{\"1\":{\"700\":1}}],[\"rootpath\",{\"1\":{\"650\":3}}],[\"root\",{\"1\":{\"204\":1,\"308\":2,\"409\":1,\"623\":1,\"634\":2}}],[\"rownum\",{\"1\":{\"731\":1}}],[\"rows\",{\"1\":{\"231\":1}}],[\"row\",{\"1\":{\"84\":2,\"157\":1,\"159\":1,\"160\":1,\"161\":1,\"206\":1}}],[\"rollingfile>\",{\"1\":{\"700\":1}}],[\"rollingfile\",{\"1\":{\"700\":2}}],[\"roll\",{\"1\":{\"60\":1,\"84\":2}}],[\"rollbackforclassname属性\",{\"1\":{\"743\":1}}],[\"rollbackfor属性\",{\"1\":{\"743\":2}}],[\"rollback\",{\"1\":{\"60\":1,\"258\":1,\"733\":1,\"734\":1,\"749\":5}}],[\"request\",{\"1\":{\"763\":1}}],[\"requires\",{\"1\":{\"745\":2,\"749\":3}}],[\"required\",{\"1\":{\"646\":1,\"745\":2,\"765\":1}}],[\"requirements\",{\"1\":{\"490\":1}}],[\"requirepass\",{\"1\":{\"371\":1}}],[\"reosurceloader将会负责选择reosurce实现类\",{\"1\":{\"717\":1}}],[\"rejectvalue\",{\"1\":{\"681\":2}}],[\"rejectifempty\",{\"1\":{\"681\":1}}],[\"retentionpolicy\",{\"1\":{\"646\":2,\"647\":2,\"650\":2,\"684\":2}}],[\"retention\",{\"1\":{\"646\":2,\"647\":2,\"650\":2,\"684\":2}}],[\"returning>\",{\"1\":{\"674\":1}}],[\"returning=\",{\"1\":{\"674\":1}}],[\"returning\",{\"1\":{\"665\":1,\"669\":1,\"674\":1,\"765\":2}}],[\"returned\",{\"1\":{\"622\":1,\"623\":2,\"765\":2}}],[\"returns\",{\"1\":{\"256\":1,\"624\":1,\"626\":1,\"765\":2}}],[\"return\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"29\":1,\"31\":1,\"38\":9,\"39\":2,\"256\":1,\"284\":1,\"293\":1,\"309\":4,\"336\":3,\"349\":1,\"355\":1,\"424\":8,\"434\":11,\"580\":4,\"581\":1,\"583\":1,\"623\":8,\"624\":3,\"625\":2,\"626\":6,\"650\":2,\"655\":8,\"657\":1,\"658\":2,\"664\":4,\"665\":1,\"670\":1,\"681\":3,\"682\":5,\"683\":5,\"684\":2,\"687\":1,\"718\":1,\"719\":1,\"731\":2,\"737\":1,\"746\":3,\"754\":5,\"758\":4,\"759\":1,\"760\":5,\"763\":5,\"764\":7,\"765\":13}}],[\"removed\",{\"1\":{\"626\":3}}],[\"removes\",{\"1\":{\"626\":3}}],[\"remove方法\",{\"0\":{\"626\":1}}],[\"remove\",{\"1\":{\"619\":1,\"626\":5}}],[\"remote\",{\"1\":{\"367\":1}}],[\"reentrantlock\",{\"1\":{\"600\":2}}],[\"regexp\",{\"1\":{\"683\":1}}],[\"reg\",{\"1\":{\"475\":1}}],[\"registry\",{\"1\":{\"475\":5}}],[\"rehash时ht\",{\"1\":{\"441\":1}}],[\"rehash时使用\",{\"1\":{\"438\":1}}],[\"rehashid\",{\"1\":{\"440\":1}}],[\"rehashidx是否大于\",{\"1\":{\"440\":1}}],[\"rehashidx=0\",{\"1\":{\"440\":2}}],[\"rehashidx\",{\"1\":{\"438\":1}}],[\"rehash是否暂停\",{\"1\":{\"438\":1}}],[\"rehash\",{\"0\":{\"440\":1},\"1\":{\"438\":1,\"439\":1,\"440\":10}}],[\"rehard\",{\"1\":{\"346\":1}}],[\"revents\",{\"1\":{\"408\":1}}],[\"revoke\",{\"1\":{\"198\":1}}],[\"recently\",{\"1\":{\"458\":1}}],[\"receiving\",{\"1\":{\"346\":1}}],[\"recommended\",{\"1\":{\"765\":1}}],[\"recompress\",{\"1\":{\"449\":1}}],[\"record\",{\"1\":{\"148\":1}}],[\"recvfrom\",{\"1\":{\"405\":1,\"406\":3}}],[\"rewrite\",{\"1\":{\"322\":2}}],[\"rely\",{\"1\":{\"765\":2}}],[\"relativepath\",{\"1\":{\"705\":1}}],[\"relational或者not\",{\"1\":{\"111\":1}}],[\"relational\",{\"1\":{\"106\":1,\"365\":1}}],[\"releases\",{\"1\":{\"375\":2,\"479\":1}}],[\"reloadableresourcebundlemessagesource\",{\"1\":{\"689\":1}}],[\"reload\",{\"1\":{\"308\":1,\"312\":1,\"372\":1,\"475\":1}}],[\"ref属性\",{\"1\":{\"758\":1,\"759\":1,\"760\":2}}],[\"refresh\",{\"1\":{\"695\":1}}],[\"ref=\",{\"1\":{\"674\":6,\"700\":3,\"730\":1,\"739\":1,\"749\":1,\"758\":2,\"759\":1,\"760\":6,\"761\":2}}],[\"reflective\",{\"1\":{\"765\":1}}],[\"reflect\",{\"1\":{\"650\":2}}],[\"referer\",{\"1\":{\"634\":1}}],[\"reference\",{\"1\":{\"493\":1,\"765\":3}}],[\"references\",{\"1\":{\"51\":2,\"52\":1,\"765\":1}}],[\"refcount\",{\"1\":{\"458\":1,\"467\":1,\"472\":2}}],[\"ref\",{\"1\":{\"231\":2,\"700\":3}}],[\"rename\",{\"1\":{\"179\":1,\"485\":1}}],[\"repository\",{\"1\":{\"511\":1,\"644\":1,\"646\":2,\"647\":2,\"737\":1}}],[\"repo\",{\"1\":{\"307\":2}}],[\"repl\",{\"1\":{\"302\":2,\"303\":3,\"304\":3}}],[\"replid\",{\"1\":{\"302\":3}}],[\"replicas\",{\"1\":{\"343\":5}}],[\"replication\",{\"1\":{\"299\":1,\"302\":3}}],[\"replica\",{\"1\":{\"295\":1,\"297\":5,\"336\":2,\"341\":1}}],[\"replaceall\",{\"1\":{\"650\":4}}],[\"replaces\",{\"1\":{\"625\":1}}],[\"replace关键字\",{\"1\":{\"165\":1}}],[\"replace\",{\"1\":{\"165\":2,\"622\":1,\"625\":1,\"650\":2}}],[\"repeat\",{\"1\":{\"252\":2,\"291\":1}}],[\"repeat是有条件的循环控制语句\",{\"1\":{\"252\":1}}],[\"repeat循环\",{\"0\":{\"252\":1},\"1\":{\"291\":1}}],[\"repeatable\",{\"1\":{\"88\":1,\"261\":2,\"647\":2,\"744\":4}}],[\"repeated\",{\"1\":{\"83\":1}}],[\"redirect\",{\"1\":{\"634\":1}}],[\"redis7\",{\"1\":{\"513\":1}}],[\"redis预分配的值对象如下\",{\"1\":{\"471\":1}}],[\"redis是纯内存操作\",{\"1\":{\"460\":1}}],[\"redisdb\",{\"1\":{\"456\":2}}],[\"redis3\",{\"1\":{\"446\":1,\"448\":1}}],[\"redisobject\",{\"0\":{\"467\":1},\"1\":{\"417\":1,\"458\":1,\"466\":1,\"467\":2,\"472\":1}}],[\"redisobject对象机制\",{\"0\":{\"465\":1},\"1\":{\"267\":1}}],[\"redis事务命令\",{\"1\":{\"401\":1}}],[\"redis基于该类型\",{\"1\":{\"398\":1}}],[\"redis发布订阅命令\",{\"1\":{\"383\":1}}],[\"redis的字符串表示为\",{\"1\":{\"430\":1}}],[\"redis的事务和mysql的事务是不同的\",{\"1\":{\"401\":1}}],[\"redis的sortedset又可以成为zset\",{\"1\":{\"382\":1}}],[\"redis的set结构与java中的hashset类似\",{\"1\":{\"381\":1}}],[\"redis的key中虽然没有目录结构\",{\"1\":{\"378\":1}}],[\"redis中的list类型与java中的linkedlist类似\",{\"1\":{\"380\":1}}],[\"redis图形化客户端\",{\"1\":{\"375\":1}}],[\"redis命令行连接\",{\"1\":{\"374\":1}}],[\"redis本身仅有一个基于命令行的客户端\",{\"1\":{\"373\":1}}],[\"redis后台启动\",{\"1\":{\"371\":1}}],[\"redis启动的三种方式\",{\"0\":{\"369\":1}}],[\"redis安装完成后就自带了命令行客户端\",{\"1\":{\"374\":1}}],[\"redis安装\",{\"1\":{\"368\":1}}],[\"redis6\",{\"1\":{\"367\":1}}],[\"redis特征\",{\"1\":{\"367\":1}}],[\"redis诞生于2009年\",{\"1\":{\"367\":1}}],[\"redistest\",{\"1\":{\"362\":1}}],[\"redistemplate<>\",{\"1\":{\"355\":1}}],[\"redistemplate<string\",{\"1\":{\"355\":2}}],[\"redistemplate访问分片集群\",{\"0\":{\"348\":1}}],[\"redistemplate\",{\"1\":{\"336\":1,\"348\":1,\"354\":3,\"355\":9,\"356\":2,\"357\":1,\"358\":1,\"360\":1,\"361\":8,\"362\":7}}],[\"redistemplate连接集群\",{\"0\":{\"336\":1}}],[\"redis依赖\",{\"1\":{\"362\":1}}],[\"redisconnectionfactory\",{\"1\":{\"355\":1}}],[\"redisconfig\",{\"0\":{\"355\":1}}],[\"rediscontroller\",{\"1\":{\"336\":1}}],[\"redis如何判断某个\",{\"1\":{\"345\":1}}],[\"redis5\",{\"1\":{\"343\":3}}],[\"redis<\",{\"1\":{\"336\":1,\"362\":1}}],[\"redis缓存预热\",{\"0\":{\"317\":1}}],[\"redis实例的声明\",{\"1\":{\"297\":1}}],[\"redis教程\",{\"1\":{\"268\":1}}],[\"redis网络模型\",{\"0\":{\"459\":1},\"1\":{\"267\":1}}],[\"redis原理\",{\"0\":{\"267\":1,\"402\":1,\"416\":1,\"422\":1,\"425\":1,\"456\":1,\"459\":1,\"465\":1},\"1\":{\"267\":7}}],[\"redis分片集群\",{\"0\":{\"338\":1},\"1\":{\"266\":1}}],[\"redis哨兵\",{\"0\":{\"324\":1},\"1\":{\"266\":1}}],[\"redis主从\",{\"0\":{\"294\":1},\"1\":{\"266\":1}}],[\"redis持久化\",{\"0\":{\"320\":1},\"1\":{\"266\":1}}],[\"redis进阶\",{\"0\":{\"266\":1,\"269\":1,\"270\":1,\"279\":1,\"280\":1,\"281\":1,\"286\":1,\"287\":1,\"294\":1,\"305\":1,\"320\":1,\"324\":1,\"337\":1,\"338\":1},\"1\":{\"266\":13}}],[\"redisserializer\",{\"0\":{\"354\":1},\"1\":{\"265\":1}}],[\"redis客户端等\",{\"1\":{\"376\":1}}],[\"redis客户端\",{\"0\":{\"265\":1,\"349\":1,\"350\":1,\"354\":1,\"359\":1,\"373\":1},\"1\":{\"265\":4}}],[\"redis概念和基础\",{\"0\":{\"364\":1},\"1\":{\"264\":1}}],[\"redis入门到实战教程\",{\"1\":{\"268\":1}}],[\"redis入门\",{\"0\":{\"264\":1,\"363\":1,\"364\":1,\"377\":1,\"383\":1,\"384\":1,\"387\":1,\"397\":1,\"401\":1},\"1\":{\"264\":8}}],[\"redis\",{\"0\":{\"262\":1,\"387\":1},\"1\":{\"111\":1,\"262\":1,\"264\":1,\"268\":1,\"272\":1,\"273\":2,\"275\":2,\"276\":1,\"278\":1,\"281\":2,\"282\":1,\"285\":1,\"295\":3,\"297\":17,\"298\":7,\"299\":3,\"303\":2,\"306\":1,\"309\":3,\"320\":6,\"321\":14,\"322\":5,\"326\":3,\"330\":1,\"334\":3,\"336\":3,\"341\":2,\"342\":5,\"343\":8,\"344\":2,\"345\":3,\"346\":9,\"348\":2,\"351\":1,\"352\":1,\"354\":3,\"356\":2,\"358\":1,\"360\":7,\"361\":2,\"362\":1,\"365\":1,\"366\":1,\"368\":2,\"371\":2,\"372\":9,\"374\":2,\"375\":2,\"376\":1,\"378\":1,\"383\":2,\"384\":2,\"387\":9,\"388\":1,\"400\":2,\"401\":4,\"417\":1,\"418\":3,\"419\":1,\"420\":2,\"423\":6,\"424\":1,\"427\":5,\"428\":1,\"430\":2,\"432\":3,\"435\":1,\"437\":1,\"438\":1,\"440\":2,\"450\":1,\"456\":2,\"457\":2,\"458\":4,\"460\":6,\"461\":2,\"462\":2,\"463\":1,\"466\":4,\"467\":2,\"468\":1,\"469\":1,\"470\":3,\"471\":2,\"472\":1,\"474\":1,\"512\":4,\"513\":4,\"525\":6,\"528\":4,\"530\":2,\"646\":1}}],[\"red\",{\"1\":{\"309\":5}}],[\"redolog\",{\"1\":{\"88\":1}}],[\"redo\",{\"0\":{\"74\":1,\"77\":1},\"1\":{\"65\":1,\"77\":2,\"88\":1}}],[\"readonly\",{\"1\":{\"741\":1}}],[\"readobject\",{\"1\":{\"581\":2}}],[\"readlen\",{\"1\":{\"464\":1}}],[\"readline\",{\"1\":{\"424\":6}}],[\"readablechannel\",{\"1\":{\"705\":1}}],[\"readablebytechannel\",{\"1\":{\"705\":1}}],[\"readable\",{\"1\":{\"464\":1}}],[\"readqueryfromclient\",{\"1\":{\"462\":1,\"464\":3}}],[\"ready\",{\"1\":{\"456\":1}}],[\"readbulkstring\",{\"1\":{\"424\":2}}],[\"reader\",{\"1\":{\"424\":11}}],[\"readfds\",{\"1\":{\"407\":1}}],[\"readfrom\",{\"1\":{\"336\":4}}],[\"reads\",{\"1\":{\"256\":1}}],[\"readview创建者的事务id\",{\"1\":{\"87\":1}}],[\"readview中包含了4个核心字段\",{\"1\":{\"87\":1}}],[\"readview决定回滚到哪个链条节点\",{\"1\":{\"86\":1}}],[\"readview\",{\"0\":{\"87\":1},\"1\":{\"81\":1}}],[\"read\",{\"1\":{\"75\":1,\"83\":2,\"87\":1,\"88\":2,\"141\":1,\"145\":2,\"146\":6,\"147\":2,\"261\":6,\"277\":1,\"309\":4,\"424\":1,\"634\":1,\"707\":1,\"708\":1,\"709\":1,\"741\":1,\"744\":12,\"749\":7}}],[\"resrouce\",{\"1\":{\"717\":1}}],[\"res就是classpathresource实例\",{\"1\":{\"717\":1}}],[\"res就是filesystemresource实例\",{\"1\":{\"717\":1}}],[\"res\",{\"1\":{\"716\":4,\"717\":3,\"719\":8}}],[\"resourcebean\",{\"1\":{\"719\":8}}],[\"resourcebundlemessagesource\",{\"1\":{\"689\":1,\"690\":1}}],[\"resourcebundle\",{\"1\":{\"687\":3}}],[\"resourcebundle用于查找绑定对应的资源文件\",{\"1\":{\"687\":1}}],[\"resourceloaderaware接口也提供了一个setresourceloader\",{\"1\":{\"718\":1}}],[\"resourceloaderaware接口实现类的实例将获得一个resourceloader的引用\",{\"1\":{\"718\":1}}],[\"resourceloaderaware\",{\"0\":{\"718\":1},\"1\":{\"715\":1,\"718\":2}}],[\"resourceloader\",{\"0\":{\"714\":1,\"715\":1,\"717\":1},\"1\":{\"715\":1,\"718\":14}}],[\"resource类图\",{\"0\":{\"713\":1}}],[\"resource的一个实现类\",{\"1\":{\"707\":1}}],[\"resource的实现类\",{\"0\":{\"706\":1}}],[\"resource一般包括这些实现类\",{\"1\":{\"706\":1}}],[\"resource接口继承了inputstreamsource接口\",{\"1\":{\"705\":1}}],[\"resource接口\",{\"0\":{\"705\":1}}],[\"resource注解\",{\"1\":{\"647\":1}}],[\"resource注入\",{\"0\":{\"647\":1}}],[\"resource源码\",{\"1\":{\"647\":1}}],[\"resources概述\",{\"0\":{\"704\":1}}],[\"resources\",{\"1\":{\"631\":1,\"647\":1,\"707\":1}}],[\"resource\",{\"1\":{\"600\":1,\"647\":12,\"705\":3,\"706\":1,\"707\":1,\"708\":8,\"709\":7,\"715\":1,\"716\":4,\"717\":2,\"718\":5,\"719\":8,\"723\":5}}],[\"resis\",{\"1\":{\"423\":1}}],[\"reshard\",{\"1\":{\"346\":1}}],[\"rest\",{\"1\":{\"474\":1}}],[\"restart\",{\"1\":{\"372\":1,\"475\":1,\"523\":1,\"540\":2}}],[\"restcontroller\",{\"1\":{\"336\":1}}],[\"restrict\",{\"1\":{\"52\":1}}],[\"responsible\",{\"1\":{\"765\":1}}],[\"response\",{\"1\":{\"312\":1}}],[\"resp3\",{\"1\":{\"423\":1}}],[\"resp2\",{\"1\":{\"423\":2}}],[\"resp协议\",{\"0\":{\"423\":1}}],[\"resp\",{\"1\":{\"309\":8,\"423\":4}}],[\"results\",{\"1\":{\"681\":2}}],[\"result\",{\"1\":{\"293\":2,\"353\":4,\"585\":3,\"623\":2,\"626\":1,\"655\":36,\"658\":4,\"664\":16,\"665\":5,\"669\":2,\"670\":3,\"674\":1,\"731\":3}}],[\"res2\",{\"1\":{\"58\":2}}],[\"res1\",{\"1\":{\"58\":2}}],[\"rvcd\",{\"1\":{\"17\":1}}],[\"rcvd\",{\"1\":{\"17\":1}}],[\"已处理\",{\"1\":{\"387\":1}}],[\"已经步入到了第\",{\"1\":{\"725\":1}}],[\"已经拥有非常不错的效果\",{\"1\":{\"679\":1}}],[\"已经停止了exited\",{\"1\":{\"522\":1}}],[\"已经安装\",{\"1\":{\"498\":1}}],[\"已经包括\",{\"1\":{\"479\":2}}],[\"已经注册到了\",{\"1\":{\"410\":1}}],[\"已经被覆盖时\",{\"1\":{\"304\":1}}],[\"已经更新操作的事务提交语句都将被阻塞\",{\"1\":{\"140\":1}}],[\"已连接状态\",{\"1\":{\"17\":2}}],[\"已废弃\",{\"1\":{\"9\":1,\"468\":1}}],[\"yuque\",{\"1\":{\"769\":1}}],[\"yum\",{\"1\":{\"307\":7,\"343\":1,\"368\":1}}],[\"yyyy\",{\"1\":{\"700\":4}}],[\"yaml\",{\"1\":{\"480\":1}}],[\"yaml格式\",{\"1\":{\"478\":1}}],[\"yarn\",{\"1\":{\"480\":2}}],[\"yml文件示例\",{\"1\":{\"482\":1}}],[\"yml文件是docker\",{\"1\":{\"482\":1}}],[\"yml中\",{\"1\":{\"482\":1}}],[\"yml\",{\"1\":{\"478\":2,\"482\":1,\"631\":1}}],[\"you\",{\"1\":{\"346\":2,\"765\":3}}],[\"yet\",{\"1\":{\"765\":1}}],[\"yes\",{\"1\":{\"303\":1,\"321\":1,\"322\":1,\"341\":2,\"346\":2,\"371\":1}}],[\"year\",{\"1\":{\"57\":1}}],[\"y\",{\"1\":{\"17\":1,\"56\":3,\"307\":4,\"343\":1,\"490\":1,\"493\":1,\"549\":1,\"552\":1}}],[\"1oximgcfgfg34mkmuvx19ow\",{\"1\":{\"653\":1}}],[\"1<\",{\"1\":{\"647\":1,\"650\":1,\"651\":1,\"664\":1}}],[\"1ga3cy\",{\"1\":{\"634\":1}}],[\"1iskop\",{\"1\":{\"630\":1,\"631\":1}}],[\"19\",{\"1\":{\"579\":1,\"642\":2,\"664\":2,\"699\":2}}],[\"192\",{\"1\":{\"296\":3,\"297\":5,\"299\":2,\"308\":1,\"329\":1,\"332\":3,\"333\":4,\"336\":3,\"340\":6,\"341\":1,\"343\":12,\"346\":3,\"348\":6,\"349\":1,\"353\":1,\"362\":1}}],[\"1bjqsroxcwnnfg6jkhuspwq\",{\"1\":{\"639\":1}}],[\"1b\",{\"1\":{\"562\":2}}],[\"14t21\",{\"1\":{\"529\":2}}],[\"14\",{\"1\":{\"529\":2}}],[\"130\",{\"1\":{\"682\":1}}],[\"131295356\",{\"1\":{\"607\":1}}],[\"13999fa6f4f6\",{\"1\":{\"515\":2}}],[\"132537\",{\"1\":{\"374\":1}}],[\"17\",{\"1\":{\"503\":1}}],[\"11<\",{\"1\":{\"664\":1,\"699\":1}}],[\"1111\",{\"1\":{\"758\":1}}],[\"11111111\",{\"1\":{\"444\":1}}],[\"11111110\",{\"1\":{\"444\":1}}],[\"1111xxxx\",{\"1\":{\"444\":1}}],[\"11110000\",{\"1\":{\"444\":1}}],[\"11100000\",{\"1\":{\"444\":1}}],[\"110\",{\"1\":{\"681\":1}}],[\"11010000\",{\"1\":{\"444\":1}}],[\"11000000\",{\"1\":{\"444\":1}}],[\"11\",{\"1\":{\"444\":1,\"467\":1,\"468\":2,\"730\":2,\"737\":3}}],[\"1171\",{\"1\":{\"128\":3}}],[\"1170\",{\"1\":{\"128\":1}}],[\"1时\",{\"1\":{\"441\":1}}],[\"1的值为\",{\"1\":{\"565\":1}}],[\"1的2n\",{\"1\":{\"441\":1}}],[\"1的\",{\"1\":{\"440\":2}}],[\"1的整型数组\",{\"1\":{\"399\":1}}],[\"1则暂停\",{\"1\":{\"438\":1}}],[\"1ms\",{\"1\":{\"457\":1}}],[\"1m\",{\"1\":{\"429\":3}}],[\"1kb\",{\"1\":{\"410\":1}}],[\"1永不超时\",{\"1\":{\"409\":1}}],[\"1代表就绪\",{\"1\":{\"407\":1}}],[\"1或者\",{\"1\":{\"343\":1}}],[\"120\",{\"1\":{\"682\":1,\"683\":1}}],[\"128\",{\"1\":{\"421\":1}}],[\"12\",{\"1\":{\"400\":1}}],[\"127\",{\"1\":{\"336\":3,\"374\":1,\"424\":1,\"480\":1,\"634\":2}}],[\"123456\",{\"1\":{\"631\":1,\"746\":1,\"764\":1}}],[\"123\",{\"1\":{\"300\":1,\"344\":1,\"537\":2}}],[\"1a\",{\"1\":{\"297\":4}}],[\"1取数据\",{\"1\":{\"284\":1}}],[\"15<\",{\"1\":{\"730\":1,\"762\":1}}],[\"15468591\",{\"1\":{\"499\":1}}],[\"150m\",{\"1\":{\"309\":1}}],[\"150\",{\"1\":{\"296\":3,\"297\":5,\"299\":2,\"308\":1,\"329\":1,\"332\":3,\"333\":4,\"340\":6,\"341\":1,\"343\":12,\"346\":3,\"348\":6}}],[\"15\",{\"1\":{\"275\":1,\"363\":1,\"456\":1}}],[\"1qthvvyoxlfioei09gilm6w\",{\"1\":{\"173\":1}}],[\"18为中间的字符数\",{\"1\":{\"686\":1}}],[\"18\",{\"1\":{\"131\":1,\"356\":1,\"480\":2,\"579\":1}}],[\"18736\",{\"1\":{\"128\":1}}],[\"16b\",{\"1\":{\"562\":1}}],[\"163\",{\"1\":{\"475\":1}}],[\"16384\",{\"1\":{\"345\":4,\"346\":1}}],[\"168\",{\"1\":{\"296\":3,\"297\":5,\"299\":2,\"308\":1,\"329\":1,\"332\":3,\"333\":4,\"336\":3,\"340\":6,\"341\":1,\"343\":12,\"346\":3,\"348\":6,\"349\":1,\"353\":1,\"362\":1}}],[\"16\",{\"1\":{\"128\":3,\"428\":1,\"432\":1,\"443\":1,\"449\":1,\"450\":1,\"742\":1}}],[\"10为字面量\",{\"1\":{\"757\":1}}],[\"10k\",{\"1\":{\"306\":1}}],[\"1006\",{\"1\":{\"761\":1}}],[\"10086\",{\"1\":{\"760\":1}}],[\"1004\",{\"1\":{\"758\":3,\"759\":1,\"760\":2}}],[\"1002\",{\"1\":{\"755\":1}}],[\"10010\",{\"1\":{\"760\":1}}],[\"1001\",{\"1\":{\"313\":3,\"754\":1,\"764\":1}}],[\"1000\",{\"1\":{\"321\":1,\"346\":1,\"349\":1}}],[\"1000代表什么含义\",{\"1\":{\"321\":1}}],[\"10001\",{\"1\":{\"312\":1}}],[\"1000k\",{\"1\":{\"306\":1}}],[\"10000代表60秒内至少执行\",{\"1\":{\"321\":1}}],[\"10000\",{\"1\":{\"297\":1,\"309\":1,\"321\":2}}],[\"1000条\",{\"1\":{\"201\":1}}],[\"100\",{\"1\":{\"297\":1,\"309\":1,\"322\":1,\"349\":2,\"362\":3,\"737\":2}}],[\"101\",{\"1\":{\"296\":3,\"297\":5,\"299\":2,\"308\":1,\"329\":1,\"332\":3,\"333\":4,\"336\":3,\"340\":6,\"341\":1,\"343\":12,\"346\":3,\"348\":6}}],[\"107\",{\"1\":{\"283\":2}}],[\"10\",{\"1\":{\"128\":1,\"194\":1,\"203\":2,\"234\":1,\"285\":2,\"293\":1,\"321\":2,\"328\":1,\"423\":2,\"444\":1,\"457\":1,\"458\":1,\"468\":1,\"529\":1,\"622\":1,\"642\":1,\"737\":2,\"757\":1}}],[\"1024\",{\"1\":{\"78\":1,\"128\":1,\"308\":1,\"407\":1,\"408\":1,\"412\":1,\"634\":1,\"700\":1,\"708\":1,\"709\":1}}],[\"1个数据\",{\"1\":{\"120\":1}}],[\"1\",{\"0\":{\"23\":1,\"33\":1,\"145\":1,\"296\":1,\"307\":1,\"773\":1,\"779\":1,\"780\":2,\"781\":3,\"782\":2,\"783\":2,\"784\":1,\"785\":2,\"786\":1,\"787\":1,\"788\":1,\"789\":2,\"790\":1,\"791\":1,\"792\":1,\"793\":1},\"1\":{\"17\":2,\"19\":7,\"24\":3,\"25\":4,\"26\":4,\"28\":4,\"29\":4,\"31\":3,\"38\":22,\"39\":1,\"65\":2,\"75\":2,\"128\":1,\"134\":1,\"194\":1,\"195\":1,\"203\":2,\"204\":2,\"223\":3,\"229\":1,\"230\":1,\"258\":1,\"272\":2,\"274\":3,\"284\":1,\"285\":2,\"290\":2,\"297\":2,\"308\":1,\"313\":2,\"321\":2,\"322\":1,\"327\":1,\"330\":1,\"333\":1,\"341\":2,\"343\":4,\"344\":1,\"345\":1,\"346\":1,\"353\":3,\"355\":1,\"366\":2,\"371\":1,\"374\":2,\"378\":6,\"396\":1,\"407\":3,\"409\":1,\"423\":3,\"424\":4,\"428\":1,\"429\":3,\"434\":11,\"438\":2,\"439\":2,\"440\":13,\"441\":2,\"442\":1,\"444\":4,\"449\":3,\"450\":3,\"455\":1,\"458\":6,\"468\":1,\"469\":1,\"471\":1,\"480\":1,\"493\":1,\"498\":1,\"550\":1,\"565\":1,\"592\":1,\"603\":1,\"623\":3,\"626\":1,\"627\":3,\"634\":5,\"642\":1,\"643\":1,\"647\":1,\"650\":2,\"651\":1,\"658\":4,\"665\":4,\"677\":1,\"678\":1,\"681\":1,\"682\":3,\"683\":1,\"687\":1,\"690\":6,\"700\":2,\"707\":1,\"708\":1,\"709\":1,\"715\":2,\"718\":1,\"721\":1,\"722\":1,\"725\":1,\"730\":1,\"731\":4,\"737\":3,\"738\":2,\"739\":1,\"741\":1,\"742\":1,\"743\":1,\"746\":2,\"752\":2,\"754\":1,\"755\":1,\"757\":1,\"760\":1,\"761\":1,\"762\":1,\"764\":1,\"782\":1}}],[\"+add\",{\"1\":{\"665\":1}}],[\"+args\",{\"1\":{\"665\":1,\"668\":2,\"669\":1}}],[\"+result\",{\"1\":{\"665\":1,\"669\":1}}],[\"+ex\",{\"1\":{\"665\":1,\"669\":1}}],[\"+e\",{\"1\":{\"658\":1}}],[\"+methodname\",{\"1\":{\"665\":1}}],[\"+methodname+\",{\"1\":{\"665\":3,\"668\":2,\"669\":3}}],[\"+method\",{\"1\":{\"658\":4}}],[\"+backspace\",{\"1\":{\"549\":1,\"553\":1}}],[\"+逗号\",{\"1\":{\"549\":1}}],[\"+1\",{\"1\":{\"434\":4,\"549\":1,\"550\":1,\"553\":1}}],[\"+ok\",{\"1\":{\"423\":1}}],[\"+=\",{\"1\":{\"26\":1,\"563\":1}}],[\"++i\",{\"1\":{\"26\":2}}],[\"++\",{\"1\":{\"24\":1,\"26\":1,\"28\":2,\"29\":2,\"31\":1,\"38\":3,\"39\":1,\"464\":1,\"563\":1}}],[\"+\",{\"0\":{\"552\":1,\"553\":1,\"554\":1,\"555\":2},\"1\":{\"17\":2,\"19\":7,\"26\":1,\"28\":1,\"29\":1,\"38\":3,\"88\":2,\"128\":2,\"131\":2,\"284\":2,\"343\":1,\"353\":2,\"362\":1,\"392\":1,\"393\":1,\"407\":2,\"423\":1,\"424\":7,\"429\":3,\"432\":2,\"434\":3,\"440\":2,\"441\":1,\"458\":2,\"462\":1,\"549\":46,\"550\":14,\"551\":17,\"552\":38,\"553\":65,\"554\":20,\"555\":12,\"563\":1,\"579\":4,\"581\":2,\"622\":1,\"623\":7,\"627\":1,\"650\":12,\"655\":26,\"657\":4,\"658\":6,\"664\":5,\"684\":1,\"708\":2,\"709\":2,\"718\":1,\"731\":11,\"752\":3,\"754\":11,\"758\":6,\"760\":6,\"763\":11,\"764\":17}}],[\"xex\",{\"1\":{\"700\":2}}],[\"xed\",{\"1\":{\"354\":2}}],[\"x以后\",{\"1\":{\"666\":1}}],[\"x以前\",{\"1\":{\"666\":1}}],[\"x轴和y轴的交叉点就是连接点\",{\"1\":{\"661\":1}}],[\"xsd\",{\"1\":{\"643\":2,\"651\":1,\"665\":3,\"690\":1,\"700\":2,\"718\":1,\"730\":2,\"739\":3,\"760\":2,\"761\":2,\"762\":2}}],[\"xsi\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"xsi=\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"xml解析器看到cdata节就知道这里是纯文本\",{\"1\":{\"757\":1}}],[\"xml添加配置\",{\"1\":{\"737\":1}}],[\"xmlwebapplicationcontext\",{\"1\":{\"722\":1}}],[\"xml文件\",{\"1\":{\"718\":1}}],[\"xmlschema\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"xmlns\",{\"1\":{\"643\":2,\"651\":1,\"665\":3,\"690\":1,\"700\":2,\"718\":1,\"730\":2,\"739\":3,\"760\":2,\"761\":3,\"762\":2}}],[\"xmlns=\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"xml\",{\"1\":{\"641\":1,\"642\":3,\"643\":3,\"646\":1,\"650\":1,\"651\":4,\"665\":2,\"690\":2,\"695\":2,\"696\":1,\"700\":4,\"702\":2,\"717\":3,\"718\":2,\"719\":1,\"723\":5,\"726\":1,\"730\":2,\"731\":1,\"738\":1,\"739\":1,\"749\":1,\"751\":3,\"752\":5,\"754\":2,\"755\":1,\"757\":1,\"760\":1,\"761\":1,\"762\":5,\"763\":1,\"764\":1,\"765\":1,\"766\":4}}],[\"xfds\",{\"1\":{\"408\":1}}],[\"xor\",{\"1\":{\"399\":2}}],[\"xinfo\",{\"1\":{\"387\":3}}],[\"xclaim\",{\"1\":{\"387\":1}}],[\"xpending\",{\"1\":{\"387\":1}}],[\"xreadgroup\",{\"0\":{\"396\":1},\"1\":{\"387\":1,\"396\":3}}],[\"xread\",{\"0\":{\"394\":1},\"1\":{\"387\":1,\"394\":2}}],[\"xrevrange\",{\"0\":{\"393\":1},\"1\":{\"387\":1,\"393\":2}}],[\"xrange\",{\"0\":{\"392\":1},\"1\":{\"387\":1,\"392\":2}}],[\"xlen\",{\"0\":{\"391\":1},\"1\":{\"387\":1,\"391\":2}}],[\"xdel\",{\"0\":{\"390\":1},\"1\":{\"387\":1,\"390\":2}}],[\"xtrim\",{\"0\":{\"389\":1},\"1\":{\"387\":1,\"389\":2}}],[\"xgroup\",{\"0\":{\"395\":1},\"1\":{\"387\":5,\"395\":4}}],[\"x09codermast\",{\"1\":{\"354\":1}}],[\"x04name\",{\"1\":{\"354\":1}}],[\"x05t\",{\"1\":{\"354\":2}}],[\"x00\",{\"1\":{\"354\":4}}],[\"xadd\",{\"0\":{\"388\":1},\"1\":{\"387\":2,\"388\":3}}],[\"xack\",{\"1\":{\"387\":1}}],[\"xac\",{\"1\":{\"354\":2}}],[\"xargs\",{\"1\":{\"297\":2,\"298\":1,\"333\":1,\"341\":2,\"342\":3}}],[\"xxx代表的是数据表名\",{\"1\":{\"236\":1}}],[\"xxx\",{\"1\":{\"146\":1,\"237\":3,\"238\":1,\"242\":1,\"696\":2}}],[\"xxxx\",{\"1\":{\"134\":1,\"444\":1,\"696\":2}}],[\"x版本中还包含innodb数据字典\",{\"1\":{\"68\":1}}],[\"x对y取模\",{\"1\":{\"56\":1}}],[\"x\",{\"1\":{\"17\":1,\"39\":5,\"56\":5,\"149\":1,\"437\":1,\"549\":1,\"634\":1,\"678\":1}}],[\"==null\",{\"1\":{\"626\":1}}],[\"==\",{\"1\":{\"38\":1,\"88\":1,\"123\":1,\"245\":1,\"309\":1,\"424\":2,\"434\":2,\"563\":1,\"566\":2,\"621\":1,\"622\":2,\"623\":2,\"626\":2,\"650\":2,\"718\":1}}],[\"=n1​2n\",{\"1\":{\"38\":1}}],[\"=n1​i=1∑n​\",{\"1\":{\"38\":1}}],[\"=n+11​2n\",{\"1\":{\"38\":1}}],[\"=n+11​i=1∑n+1​\",{\"1\":{\"38\":1}}],[\"=i=1∑n​n1​∗\",{\"1\":{\"38\":1}}],[\"=i=1∑n+1​n+11​∗\",{\"1\":{\"38\":1}}],[\"=6n3+3n2+2n​\",{\"1\":{\"31\":1}}],[\"=21​\",{\"1\":{\"31\":1}}],[\"=\",{\"1\":{\"17\":2,\"19\":6,\"24\":4,\"25\":8,\"26\":5,\"28\":5,\"29\":4,\"31\":4,\"37\":1,\"38\":9,\"39\":11,\"70\":1,\"100\":1,\"101\":2,\"103\":2,\"128\":6,\"131\":1,\"132\":3,\"183\":2,\"189\":1,\"194\":1,\"204\":2,\"229\":2,\"230\":1,\"242\":1,\"244\":2,\"245\":10,\"246\":2,\"258\":1,\"284\":5,\"285\":2,\"290\":7,\"291\":1,\"293\":1,\"308\":1,\"309\":13,\"313\":1,\"336\":1,\"346\":1,\"349\":2,\"353\":8,\"354\":1,\"355\":3,\"356\":2,\"362\":1,\"407\":2,\"424\":21,\"432\":2,\"434\":25,\"437\":2,\"439\":1,\"464\":11,\"562\":4,\"563\":7,\"577\":3,\"579\":5,\"580\":11,\"581\":12,\"585\":4,\"600\":2,\"619\":2,\"622\":10,\"623\":17,\"625\":2,\"626\":5,\"627\":7,\"634\":1,\"646\":9,\"647\":1,\"648\":2,\"650\":22,\"651\":2,\"655\":16,\"657\":2,\"658\":8,\"664\":8,\"665\":17,\"668\":4,\"669\":8,\"670\":4,\"681\":6,\"682\":12,\"683\":9,\"684\":3,\"687\":1,\"690\":2,\"696\":2,\"702\":1,\"707\":2,\"708\":6,\"709\":7,\"716\":4,\"717\":3,\"718\":5,\"719\":3,\"723\":5,\"731\":16,\"734\":1,\"737\":9,\"738\":1,\"741\":2,\"742\":2,\"743\":3,\"744\":5,\"745\":2,\"746\":6,\"752\":4,\"754\":6,\"755\":6,\"757\":1,\"758\":5,\"759\":1,\"760\":6,\"762\":3,\"763\":11,\"764\":12,\"765\":3,\"766\":6}}],[\"为属性自动赋值\",{\"1\":{\"766\":1}}],[\"为spring集成一些基础的报文传送服务\",{\"1\":{\"727\":1}}],[\"为目标对象自动生成代理\",{\"1\":{\"665\":1}}],[\"为空\",{\"1\":{\"650\":1}}],[\"为例子进行说明\",{\"1\":{\"531\":1}}],[\"为例进行说明\",{\"1\":{\"530\":1}}],[\"为要导入的文件名\",{\"1\":{\"518\":1}}],[\"为要自定义的名称\",{\"1\":{\"485\":1}}],[\"为镜像的\",{\"1\":{\"517\":1}}],[\"为样例进行编写\",{\"1\":{\"513\":1}}],[\"为原容器名\",{\"1\":{\"485\":1}}],[\"为服务配置必要的参数\",{\"1\":{\"482\":1}}],[\"为对象引用计数器\",{\"1\":{\"472\":1}}],[\"为结点的双端链表结构\",{\"1\":{\"448\":1}}],[\"为结束符号\",{\"1\":{\"242\":1}}],[\"为结束标识符\",{\"1\":{\"242\":2}}],[\"为整数类型\",{\"1\":{\"444\":1}}],[\"为字符串类型\",{\"1\":{\"444\":1}}],[\"为消费者组设置新的最后递送消息id\",{\"1\":{\"387\":1}}],[\"为可选项\",{\"1\":{\"374\":1}}],[\"为前缀\",{\"1\":{\"345\":1}}],[\"为新的\",{\"1\":{\"329\":1,\"347\":1}}],[\"为主\",{\"1\":{\"326\":1}}],[\"为\",{\"1\":{\"292\":1,\"354\":1,\"526\":1,\"719\":1,\"758\":1}}],[\"为索引的\",{\"1\":{\"290\":1}}],[\"为删除并且他的空间变得允许被其他记录值重新声明\",{\"1\":{\"208\":1}}],[\"为dql进行说明\",{\"1\":{\"181\":1}}],[\"为on\",{\"1\":{\"69\":1}}],[\"为有以下几种\",{\"1\":{\"52\":1}}],[\"为了防止和之前的项目冲突\",{\"1\":{\"642\":1,\"751\":1}}],[\"为了便于和前面创建的容器进行区分\",{\"1\":{\"537\":1}}],[\"为了解决这个问题\",{\"1\":{\"452\":1}}],[\"为了解决以上问题\",{\"1\":{\"427\":1}}],[\"为了缓解这个问题\",{\"1\":{\"446\":1}}],[\"为了同时实现排序和快速访问的功能\",{\"1\":{\"421\":1}}],[\"为了查询效率和唯一性\",{\"1\":{\"420\":1}}],[\"为了节省内存空间\",{\"1\":{\"357\":1}}],[\"为了在反序列化时知道对象的类型\",{\"1\":{\"356\":1}}],[\"为了方便起见\",{\"1\":{\"528\":1}}],[\"为了方便观察\",{\"1\":{\"518\":1}}],[\"为了方便查找\",{\"1\":{\"432\":1}}],[\"为了方便查看日志\",{\"1\":{\"298\":1,\"334\":1}}],[\"为了方便操作\",{\"1\":{\"39\":1}}],[\"为了避免和之前的项目冲突\",{\"1\":{\"655\":1}}],[\"为了避免冲突\",{\"1\":{\"650\":1}}],[\"为了避免\",{\"1\":{\"450\":1}}],[\"为了避免用户应用导致冲突甚至内核崩溃\",{\"1\":{\"403\":1}}],[\"为了避免将来混乱\",{\"1\":{\"297\":1}}],[\"为了避免dml在执行时\",{\"1\":{\"147\":1}}],[\"为了避免dml与ddl冲突\",{\"1\":{\"146\":1}}],[\"为了提高集成度\",{\"1\":{\"283\":1}}],[\"为了确定检查的范围\",{\"1\":{\"166\":1}}],[\"为了保证页的连续性\",{\"1\":{\"60\":1}}],[\"为了保证数据库中数据的正确\",{\"1\":{\"48\":1}}],[\"为了表示自己成功接受到报文段\",{\"1\":{\"17\":1}}],[\"为元素\",{\"1\":{\"38\":1}}],[\"为什么要写这个系列\",{\"0\":{\"543\":1}}],[\"为什么要反复造一些质量并不高的轮子呢\",{\"1\":{\"2\":1}}],[\"为什么redis不共享列表对象\",{\"1\":{\"471\":1}}],[\"为什么redis要选择单线程\",{\"1\":{\"460\":1}}],[\"为什么会设计redisobject\",{\"0\":{\"466\":1}}],[\"为什么节省内存\",{\"1\":{\"443\":1}}],[\"为什么ziplist特别省内存\",{\"1\":{\"443\":1}}],[\"为什么innodb存储引擎选择使用b+树索引结构\",{\"1\":{\"124\":1}}],[\"为什么需要三次握手而不是两次\",{\"0\":{\"18\":1}}],[\"为什么\",{\"0\":{\"2\":1},\"1\":{\"128\":1}}],[\"状态和其他\",{\"1\":{\"347\":1}}],[\"状态码\",{\"1\":{\"255\":1}}],[\"状态转变为established\",{\"1\":{\"17\":1}}],[\"状态转变为syn\",{\"1\":{\"17\":1}}],[\"状态\",{\"1\":{\"17\":1}}],[\"状态变为syn\",{\"1\":{\"17\":1}}],[\"ssm\",{\"1\":{\"762\":1}}],[\"sss\",{\"1\":{\"700\":2}}],[\"ss\",{\"1\":{\"700\":3}}],[\"s5ru\",{\"1\":{\"639\":1}}],[\"sky\",{\"1\":{\"631\":4,\"634\":2,\"638\":1}}],[\"skiplist小结\",{\"0\":{\"455\":1}}],[\"skiplist内存结构\",{\"1\":{\"453\":1}}],[\"skiplist\",{\"1\":{\"382\":1,\"419\":1,\"421\":3,\"453\":2,\"468\":1,\"469\":1}}],[\"skip\",{\"1\":{\"307\":1}}],[\"sbcw\",{\"1\":{\"630\":1,\"631\":1}}],[\"sbin\",{\"1\":{\"307\":1}}],[\"smartfactorybean\",{\"1\":{\"765\":4}}],[\"smartidedl\",{\"1\":{\"499\":1}}],[\"small\",{\"1\":{\"449\":1}}],[\"smembers\",{\"1\":{\"381\":1}}],[\"sz\",{\"1\":{\"449\":3}}],[\"s64\",{\"1\":{\"438\":1}}],[\"switch语句\",{\"0\":{\"566\":1}}],[\"switch\",{\"1\":{\"424\":1,\"566\":2}}],[\"s结构通常采取两层结构\",{\"1\":{\"423\":1}}],[\"sdslen\",{\"1\":{\"464\":3}}],[\"sds小结\",{\"0\":{\"430\":1}}],[\"sdshdr64\",{\"1\":{\"428\":1}}],[\"sdshdr32\",{\"1\":{\"428\":1}}],[\"sdshdr16\",{\"1\":{\"428\":1}}],[\"sdshdr8\",{\"1\":{\"428\":1}}],[\"sdshdr5\",{\"1\":{\"428\":2}}],[\"sds\",{\"1\":{\"417\":4,\"427\":2,\"428\":9,\"429\":3,\"430\":3,\"454\":1}}],[\"sdiff\",{\"1\":{\"381\":1}}],[\"sdi\",{\"1\":{\"236\":1,\"237\":1,\"238\":1}}],[\"srem\",{\"1\":{\"381\":1}}],[\"src\",{\"1\":{\"343\":1,\"372\":1,\"428\":2,\"467\":1,\"631\":1}}],[\"s3两个文件夹内的配置文件\",{\"1\":{\"333\":1}}],[\"s3两个目录中\",{\"1\":{\"333\":1}}],[\"s3\",{\"1\":{\"332\":1,\"333\":6,\"334\":1}}],[\"same\",{\"1\":{\"765\":2}}],[\"sa\",{\"1\":{\"464\":1}}],[\"sadd\",{\"1\":{\"381\":1}}],[\"sayhello\",{\"1\":{\"651\":2}}],[\"say\",{\"1\":{\"312\":2}}],[\"saveuser\",{\"1\":{\"766\":9}}],[\"save命令\",{\"1\":{\"321\":1}}],[\"save\",{\"1\":{\"297\":4,\"321\":6,\"518\":1,\"749\":1}}],[\"synchronization\",{\"1\":{\"765\":2}}],[\"synchronized和native等修饰\",{\"1\":{\"592\":1}}],[\"synchronized\",{\"1\":{\"572\":1}}],[\"sync\",{\"1\":{\"303\":1}}],[\"systemctl\",{\"1\":{\"372\":6,\"475\":2}}],[\"systemd\",{\"1\":{\"372\":1,\"475\":1}}],[\"system\",{\"0\":{\"68\":1},\"1\":{\"106\":2,\"231\":1,\"284\":2,\"353\":2,\"356\":1,\"362\":1,\"372\":1,\"424\":4,\"579\":2,\"580\":5,\"581\":2,\"587\":1,\"623\":3,\"626\":1,\"646\":7,\"647\":5,\"650\":6,\"651\":1,\"655\":16,\"657\":2,\"658\":4,\"664\":4,\"665\":8,\"668\":2,\"669\":3,\"670\":4,\"681\":1,\"682\":2,\"684\":1,\"687\":2,\"690\":1,\"700\":1,\"701\":1,\"702\":1,\"707\":4,\"708\":3,\"709\":3,\"716\":2,\"718\":3,\"719\":2,\"723\":4,\"731\":4,\"741\":1,\"742\":1,\"743\":1,\"752\":3,\"754\":1,\"755\":1,\"762\":1,\"763\":1,\"764\":8,\"765\":2,\"766\":1}}],[\"slf4j\",{\"1\":{\"665\":2}}],[\"slf4j2\",{\"1\":{\"642\":1,\"664\":1,\"699\":1}}],[\"sleep\",{\"1\":{\"464\":2,\"742\":1}}],[\"slots\",{\"1\":{\"346\":1}}],[\"slot\",{\"1\":{\"345\":2}}],[\"slow模式规则\",{\"1\":{\"457\":1}}],[\"slow\",{\"1\":{\"229\":2,\"457\":1}}],[\"slave1\",{\"1\":{\"329\":1}}],[\"slaveof\",{\"1\":{\"299\":4,\"329\":2,\"330\":3}}],[\"slave\",{\"1\":{\"295\":1,\"296\":2,\"302\":11,\"303\":5,\"304\":7,\"324\":1,\"326\":2,\"328\":8,\"329\":5,\"330\":1,\"339\":1,\"340\":3,\"347\":3}}],[\"specific\",{\"1\":{\"765\":2}}],[\"specified\",{\"1\":{\"622\":4,\"623\":12,\"624\":2,\"625\":4,\"626\":4,\"627\":2}}],[\"space\",{\"1\":{\"549\":1,\"552\":1,\"553\":1}}],[\"span\",{\"1\":{\"454\":1}}],[\"split\",{\"1\":{\"204\":2}}],[\"springboot入门到实战\",{\"1\":{\"769\":1}}],[\"springboot3\",{\"1\":{\"768\":2,\"769\":1}}],[\"springboot\",{\"0\":{\"767\":1}}],[\"springboottest\",{\"1\":{\"362\":1}}],[\"spring就是通过factorybean机制来帮我们创建sqlsessionfactory对象的\",{\"1\":{\"765\":1}}],[\"spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来\",{\"1\":{\"765\":1}}],[\"spring会把value属性的值看做字面量\",{\"1\":{\"757\":1}}],[\"spring会将自身作为参数传给该方法\",{\"1\":{\"718\":1}}],[\"springconfig\",{\"1\":{\"746\":3}}],[\"spring表达式语言\",{\"1\":{\"727\":1}}],[\"spring的用途不仅限于服务器端的开发\",{\"1\":{\"725\":1}}],[\"spring概述\",{\"0\":{\"724\":1}}],[\"spring允许将classpath\",{\"1\":{\"723\":1}}],[\"spring允许使用一份或多分xml配置文件\",{\"1\":{\"721\":1}}],[\"spring则只加载第一个符合条件的xml文件\",{\"1\":{\"723\":1}}],[\"spring将会搜索类加载路径下所有满足该规则的配置文件\",{\"1\":{\"723\":1}}],[\"spring将采用和applicationcontext相同的策略来访问资源\",{\"1\":{\"717\":1}}],[\"spring容器将自身注入到resourceloaderaware\",{\"1\":{\"718\":1}}],[\"spring容器调用该方法时\",{\"1\":{\"718\":1}}],[\"spring容器自身完全可作为resorceloader使用\",{\"1\":{\"718\":1}}],[\"spring容器会将自身当成resourceloader作为setresourceloader\",{\"1\":{\"718\":1}}],[\"spring容器会将一个resourceloader对象作为该方法的参数传入\",{\"1\":{\"718\":2}}],[\"springjunitconfig\",{\"1\":{\"702\":2,\"731\":2,\"738\":1,\"746\":1}}],[\"springextension\",{\"1\":{\"702\":2}}],[\"spring对java\",{\"1\":{\"727\":1}}],[\"spring对jdbc的封装\",{\"1\":{\"727\":1}}],[\"spring对junit的支持相关依赖\",{\"1\":{\"699\":1}}],[\"spring对象的数据序列化和反序列化\",{\"1\":{\"360\":1}}],[\"spring提供了一个运行器\",{\"1\":{\"696\":1}}],[\"spring中国际化是通过messagesource这个接口来支持的\",{\"1\":{\"689\":1}}],[\"spring默认有一个实现类localvalidatorfactorybean\",{\"1\":{\"682\":1}}],[\"spring版本5\",{\"1\":{\"666\":2}}],[\"spring只是借用了aspectj中的注解\",{\"1\":{\"663\":1}}],[\"springs\",{\"1\":{\"651\":1}}],[\"spring全注解开发\",{\"0\":{\"648\":1}}],[\"spring6log\",{\"1\":{\"700\":2}}],[\"spring6国际化\",{\"0\":{\"688\":1}}],[\"spring6config\",{\"1\":{\"648\":2}}],[\"spring6\",{\"1\":{\"642\":2,\"643\":5,\"648\":1,\"650\":1,\"651\":3,\"653\":1,\"655\":1,\"677\":1,\"678\":2,\"681\":1,\"683\":2,\"700\":3,\"701\":1,\"702\":1,\"730\":1,\"731\":1,\"737\":1,\"746\":3,\"751\":1,\"752\":3,\"754\":1,\"755\":1,\"758\":5,\"759\":1,\"760\":6,\"761\":1,\"763\":3,\"764\":2,\"765\":1,\"766\":8}}],[\"springdata\",{\"1\":{\"360\":1}}],[\"springdataredis\",{\"0\":{\"359\":1},\"1\":{\"265\":1,\"360\":1,\"361\":1}}],[\"springframework<\",{\"1\":{\"642\":1,\"651\":1,\"664\":3,\"699\":2,\"730\":1,\"749\":1}}],[\"springframework\",{\"1\":{\"336\":1,\"362\":1,\"643\":8,\"646\":1,\"651\":5,\"661\":1,\"665\":11,\"680\":1,\"681\":5,\"682\":10,\"683\":9,\"690\":7,\"700\":6,\"701\":1,\"702\":4,\"705\":1,\"707\":1,\"708\":1,\"709\":1,\"716\":6,\"718\":9,\"719\":3,\"723\":3,\"730\":7,\"731\":3,\"739\":10,\"742\":1,\"746\":10,\"752\":1,\"760\":6,\"761\":7,\"762\":6,\"765\":9}}],[\"spring\",{\"0\":{\"10\":1,\"362\":1,\"641\":1,\"649\":1,\"651\":1,\"652\":1,\"654\":1,\"675\":1,\"680\":1,\"685\":1,\"691\":1,\"696\":1,\"703\":1,\"724\":1,\"725\":1,\"726\":1,\"727\":1,\"728\":1,\"750\":1},\"1\":{\"282\":1,\"336\":2,\"348\":1,\"357\":1,\"360\":3,\"362\":2,\"641\":3,\"642\":1,\"643\":6,\"644\":6,\"647\":1,\"649\":2,\"651\":4,\"652\":1,\"661\":1,\"664\":3,\"665\":10,\"669\":3,\"670\":1,\"674\":2,\"678\":2,\"680\":1,\"682\":1,\"690\":1,\"691\":4,\"695\":5,\"696\":2,\"699\":1,\"700\":2,\"705\":1,\"706\":1,\"709\":1,\"715\":1,\"718\":2,\"719\":6,\"725\":9,\"726\":9,\"727\":24,\"729\":1,\"730\":6,\"739\":3,\"746\":1,\"749\":1,\"760\":2,\"761\":2,\"762\":4,\"763\":1,\"764\":1,\"765\":1,\"769\":1}}],[\"script\",{\"1\":{\"385\":1,\"386\":8}}],[\"score\",{\"1\":{\"382\":1,\"421\":6,\"454\":1,\"455\":3}}],[\"scope=\",{\"1\":{\"763\":2,\"764\":1}}],[\"scope>\",{\"1\":{\"353\":1}}],[\"scope\",{\"1\":{\"293\":2,\"763\":1}}],[\"scan\",{\"1\":{\"643\":4,\"665\":1,\"674\":1,\"700\":1,\"737\":1}}],[\"scan>\",{\"1\":{\"643\":5,\"674\":1}}],[\"scanner\",{\"1\":{\"600\":8}}],[\"scanf\",{\"1\":{\"39\":2}}],[\"scard\",{\"1\":{\"381\":1}}],[\"schemalocation=\",{\"1\":{\"643\":1,\"651\":1,\"665\":1,\"690\":1,\"700\":1,\"718\":1,\"730\":1,\"739\":1,\"760\":1,\"761\":1,\"762\":1}}],[\"schema\",{\"1\":{\"146\":2,\"147\":2,\"157\":1,\"242\":2,\"643\":6,\"651\":3,\"665\":9,\"690\":3,\"700\":6,\"718\":3,\"730\":6,\"739\":9,\"760\":6,\"761\":7,\"762\":6}}],[\"shifts\",{\"1\":{\"623\":1,\"626\":1}}],[\"shift\",{\"0\":{\"551\":1,\"553\":1,\"554\":1,\"555\":1},\"1\":{\"551\":17,\"553\":33,\"554\":10,\"555\":4}}],[\"shell\",{\"1\":{\"480\":1}}],[\"sh\",{\"1\":{\"480\":1,\"500\":3,\"634\":1}}],[\"should\",{\"1\":{\"765\":3}}],[\"shortcuts\",{\"1\":{\"687\":1}}],[\"short\",{\"1\":{\"408\":2,\"562\":1}}],[\"show\",{\"1\":{\"129\":1,\"157\":1,\"165\":1,\"178\":1,\"179\":2,\"198\":1,\"228\":2,\"230\":3,\"234\":1,\"236\":1,\"242\":1,\"244\":2}}],[\"sha1\",{\"1\":{\"386\":2}}],[\"shareable\",{\"1\":{\"647\":1}}],[\"shared\",{\"1\":{\"146\":6,\"309\":1,\"464\":2,\"471\":2,\"765\":1}}],[\"share\",{\"1\":{\"82\":1,\"146\":1,\"147\":1}}],[\"shutdown\",{\"1\":{\"298\":1,\"342\":1,\"363\":1}}],[\"shwo\",{\"1\":{\"230\":1}}],[\"software\",{\"1\":{\"765\":1}}],[\"sort\",{\"1\":{\"619\":1}}],[\"sortedset的常见命令有\",{\"1\":{\"382\":1}}],[\"sortedset具备下列特性\",{\"1\":{\"382\":1}}],[\"sortedset中的每一个元素都带有一个score属性\",{\"1\":{\"382\":1}}],[\"sortedset\",{\"0\":{\"382\":1},\"1\":{\"421\":1}}],[\"sortedset类型时\",{\"1\":{\"358\":1}}],[\"sorted\",{\"1\":{\"377\":1,\"397\":1}}],[\"socket\",{\"1\":{\"406\":4,\"410\":2,\"424\":3,\"462\":5,\"464\":2}}],[\"so\",{\"1\":{\"309\":1,\"311\":1,\"627\":1,\"677\":1,\"765\":1}}],[\"sourcekey\",{\"1\":{\"400\":1}}],[\"source\",{\"1\":{\"307\":1}}],[\"solr\",{\"1\":{\"117\":1}}],[\"some\",{\"1\":{\"102\":2}}],[\"sql标准中规定了多种事务隔离级别\",{\"1\":{\"744\":1}}],[\"sql查询\",{\"1\":{\"366\":1}}],[\"sqlexception\",{\"1\":{\"255\":1,\"595\":1,\"741\":1,\"762\":1}}],[\"sqlwarning\",{\"1\":{\"255\":1}}],[\"sqlstate\",{\"1\":{\"255\":2}}],[\"sql逻辑\",{\"1\":{\"251\":1,\"252\":1,\"253\":1}}],[\"sql的分析和优化\",{\"1\":{\"233\":1}}],[\"sql语句\",{\"1\":{\"242\":1,\"248\":1,\"256\":1}}],[\"sql语句执行超过两秒\",{\"1\":{\"229\":1}}],[\"sql语句可以使用空格\",{\"1\":{\"175\":1}}],[\"sql语句可以单行或者多行书写\",{\"1\":{\"175\":1}}],[\"sql执行频率\",{\"0\":{\"228\":1}}],[\"sql性能分析\",{\"0\":{\"227\":1}}],[\"sql分类\",{\"0\":{\"176\":1}}],[\"sql优化\",{\"0\":{\"199\":1},\"1\":{\"172\":1}}],[\"sql基础语法\",{\"0\":{\"174\":1},\"1\":{\"172\":1}}],[\"sql提示\",{\"0\":{\"132\":1},\"1\":{\"132\":1}}],[\"sql\",{\"1\":{\"106\":2,\"111\":1,\"141\":1,\"142\":1,\"159\":2,\"160\":2,\"161\":2,\"256\":2,\"365\":1,\"366\":1,\"631\":5,\"661\":1,\"731\":14,\"737\":6,\"741\":1,\"746\":1}}],[\"sqlist\",{\"1\":{\"38\":5}}],[\"simply\",{\"1\":{\"765\":2}}],[\"simplify\",{\"1\":{\"621\":1}}],[\"simple\",{\"1\":{\"427\":1}}],[\"signed\",{\"1\":{\"449\":1}}],[\"signal\",{\"1\":{\"403\":1,\"765\":1}}],[\"sigio\",{\"1\":{\"413\":3}}],[\"since\",{\"1\":{\"529\":1,\"765\":3}}],[\"since=\",{\"1\":{\"529\":4}}],[\"sinter\",{\"1\":{\"381\":1}}],[\"singletons\",{\"1\":{\"765\":1}}],[\"singleton\",{\"1\":{\"763\":2,\"765\":9}}],[\"single\",{\"1\":{\"142\":2,\"646\":1,\"752\":1}}],[\"sismember\",{\"1\":{\"381\":1}}],[\"size=\",{\"1\":{\"700\":1}}],[\"size命令查看\",{\"1\":{\"450\":1}}],[\"sizemask\",{\"1\":{\"437\":1,\"438\":2,\"440\":2}}],[\"size\",{\"1\":{\"213\":1,\"309\":2,\"322\":1,\"409\":1,\"438\":2,\"440\":1,\"449\":5,\"450\":1,\"511\":1,\"619\":1,\"621\":2,\"622\":2,\"623\":5,\"626\":4,\"627\":4,\"682\":1}}],[\"sizeof\",{\"1\":{\"39\":2}}],[\"sie\",{\"1\":{\"65\":1}}],[\"still\",{\"1\":{\"765\":1}}],[\"style\",{\"1\":{\"765\":1}}],[\"students\",{\"1\":{\"760\":9}}],[\"studentseven\",{\"1\":{\"759\":1}}],[\"studentsix\",{\"1\":{\"758\":1,\"761\":1}}],[\"studentfive\",{\"1\":{\"758\":1,\"760\":1}}],[\"studentfour\",{\"1\":{\"758\":1,\"760\":4}}],[\"studenttwo\",{\"1\":{\"755\":4,\"760\":2}}],[\"studentone\",{\"1\":{\"754\":4,\"760\":2}}],[\"student\",{\"1\":{\"754\":9,\"755\":7,\"758\":5,\"759\":3,\"760\":3,\"761\":1}}],[\"stereotype\",{\"1\":{\"643\":2,\"682\":2,\"683\":1,\"701\":1}}],[\"steal\",{\"1\":{\"449\":1}}],[\"stdin\",{\"1\":{\"520\":1}}],[\"stock\",{\"1\":{\"737\":2}}],[\"stored\",{\"1\":{\"621\":1,\"625\":1}}],[\"storedist\",{\"1\":{\"398\":2}}],[\"store\",{\"1\":{\"398\":2}}],[\"stop\",{\"1\":{\"308\":1,\"372\":1,\"523\":1,\"539\":2}}],[\"stackoverflowerror\",{\"1\":{\"595\":1}}],[\"standardcharsets\",{\"1\":{\"424\":3,\"650\":1,\"687\":1}}],[\"stars\",{\"1\":{\"512\":1}}],[\"star\",{\"1\":{\"380\":1,\"512\":1}}],[\"startup\",{\"1\":{\"765\":1}}],[\"starting\",{\"1\":{\"623\":1}}],[\"started\",{\"1\":{\"368\":1}}],[\"starter\",{\"1\":{\"336\":1,\"348\":1,\"362\":1}}],[\"start\",{\"1\":{\"55\":1,\"202\":1,\"258\":1,\"372\":1,\"392\":2,\"393\":2,\"399\":1,\"522\":1,\"634\":1}}],[\"state\",{\"1\":{\"765\":3}}],[\"statemenets\",{\"1\":{\"598\":1}}],[\"statements\",{\"1\":{\"291\":2}}],[\"statement\",{\"1\":{\"249\":6,\"255\":1,\"600\":4}}],[\"staticmessagesource\",{\"1\":{\"689\":1}}],[\"staticinnerclass\",{\"1\":{\"580\":1}}],[\"static\",{\"1\":{\"349\":3,\"424\":7,\"434\":2,\"572\":2,\"579\":1,\"580\":7,\"581\":1,\"582\":1,\"584\":2,\"590\":3,\"592\":2,\"598\":1,\"600\":1,\"622\":1,\"634\":1,\"647\":1,\"650\":1,\"681\":1,\"687\":2,\"690\":1,\"707\":3,\"708\":2,\"709\":2,\"716\":2,\"718\":1,\"719\":1,\"723\":1}}],[\"status\",{\"1\":{\"228\":2,\"372\":1,\"765\":1}}],[\"stmt\",{\"1\":{\"157\":1}}],[\"str=context\",{\"1\":{\"690\":1}}],[\"string来实现的\",{\"1\":{\"469\":1}}],[\"strings\",{\"1\":{\"428\":1}}],[\"string类型的常见操作命令\",{\"1\":{\"378\":1}}],[\"string类型\",{\"1\":{\"378\":1}}],[\"stringredisserializer\",{\"1\":{\"355\":5}}],[\"stringredistemplate\",{\"1\":{\"336\":4,\"357\":1,\"358\":1}}],[\"string\",{\"0\":{\"378\":1},\"1\":{\"284\":2,\"290\":1,\"293\":1,\"336\":6,\"353\":2,\"354\":1,\"355\":1,\"356\":1,\"357\":3,\"358\":1,\"361\":2,\"362\":2,\"377\":1,\"378\":3,\"397\":1,\"417\":1,\"424\":4,\"427\":1,\"428\":1,\"448\":1,\"469\":1,\"562\":1,\"579\":3,\"580\":10,\"581\":2,\"587\":2,\"598\":1,\"601\":1,\"647\":4,\"650\":8,\"665\":7,\"668\":4,\"669\":4,\"670\":2,\"681\":4,\"682\":3,\"683\":7,\"684\":3,\"687\":3,\"690\":2,\"705\":3,\"707\":3,\"708\":3,\"709\":3,\"715\":1,\"716\":2,\"718\":1,\"719\":1,\"723\":1,\"731\":10,\"737\":3,\"754\":7,\"755\":2,\"758\":5,\"759\":3,\"760\":5,\"763\":9,\"764\":11,\"765\":1}}],[\"string>\",{\"1\":{\"284\":1,\"285\":2,\"684\":1}}],[\"stream流\",{\"1\":{\"468\":1}}],[\"streams\",{\"1\":{\"394\":1,\"396\":2}}],[\"stream\",{\"0\":{\"387\":1},\"1\":{\"264\":1,\"308\":1,\"387\":6,\"395\":1,\"468\":1,\"634\":1,\"710\":1}}],[\"str\",{\"1\":{\"55\":6,\"290\":1,\"690\":1}}],[\"structured\",{\"1\":{\"106\":1}}],[\"struct\",{\"1\":{\"38\":1,\"39\":2,\"407\":2,\"408\":2,\"409\":5,\"428\":5,\"433\":1,\"438\":4,\"449\":8,\"454\":6,\"456\":1,\"458\":1,\"467\":1}}],[\"sun\",{\"1\":{\"663\":1}}],[\"sunion\",{\"1\":{\"381\":1}}],[\"supported\",{\"1\":{\"745\":1}}],[\"supports方法用来表示此校验用在哪个类型上\",{\"1\":{\"681\":1}}],[\"supports\",{\"1\":{\"681\":1,\"745\":1}}],[\"support\",{\"1\":{\"651\":1,\"665\":1,\"690\":2,\"716\":2,\"718\":1,\"719\":1,\"723\":1,\"765\":2}}],[\"supposed\",{\"1\":{\"627\":1,\"765\":1}}],[\"super\",{\"1\":{\"576\":1,\"581\":1,\"601\":1}}],[\"such\",{\"1\":{\"626\":2,\"765\":3}}],[\"success\",{\"1\":{\"336\":1,\"434\":5,\"650\":1}}],[\"sudo\",{\"1\":{\"475\":2,\"479\":1,\"500\":1}}],[\"subtracts\",{\"1\":{\"626\":1}}],[\"subcommand\",{\"1\":{\"383\":1}}],[\"substrate\",{\"1\":{\"679\":1}}],[\"substring\",{\"1\":{\"55\":1,\"134\":1,\"650\":3}}],[\"subsequent\",{\"1\":{\"623\":1,\"626\":1}}],[\"subscribe\",{\"1\":{\"383\":1}}],[\"sub\",{\"1\":{\"383\":2,\"387\":2,\"655\":5,\"664\":2}}],[\"subquery\",{\"1\":{\"231\":1}}],[\"sum\",{\"1\":{\"26\":7,\"168\":1,\"187\":1,\"191\":1}}],[\"sn按照顺序拼接成一个字符串\",{\"1\":{\"55\":1}}],[\"sn\",{\"1\":{\"55\":1}}],[\"s2\",{\"1\":{\"55\":2,\"332\":1,\"333\":6,\"334\":1}}],[\"s1\",{\"1\":{\"55\":1,\"332\":1,\"333\":7,\"334\":1}}],[\"s\",{\"1\":{\"39\":5,\"149\":1,\"173\":1,\"285\":1,\"293\":2,\"297\":7,\"298\":1,\"308\":2,\"312\":1,\"333\":4,\"341\":2,\"342\":2,\"346\":1,\"423\":1,\"424\":6,\"464\":1,\"474\":1,\"479\":1,\"552\":1,\"555\":1,\"622\":1,\"623\":12,\"627\":1,\"630\":1,\"631\":1,\"634\":1,\"639\":1,\"653\":1,\"765\":1}}],[\"see\",{\"1\":{\"765\":8}}],[\"seehello\",{\"1\":{\"585\":1}}],[\"sex=\",{\"1\":{\"731\":1,\"754\":1}}],[\"sex\",{\"1\":{\"731\":3,\"754\":7,\"755\":3,\"758\":3,\"759\":1,\"760\":2}}],[\"seconds\",{\"1\":{\"522\":1,\"742\":1}}],[\"selec\",{\"1\":{\"407\":1}}],[\"selectcount\",{\"1\":{\"731\":1}}],[\"select无法得知具体是哪个fd就绪\",{\"1\":{\"407\":1}}],[\"select结束还要再次拷贝回用户空间\",{\"1\":{\"407\":1}}],[\"select模式存在的问题\",{\"1\":{\"407\":1}}],[\"select函数\",{\"1\":{\"407\":1}}],[\"select语句\",{\"1\":{\"165\":3}}],[\"select操作中的任意一个\",{\"1\":{\"100\":1}}],[\"select\",{\"0\":{\"407\":1},\"1\":{\"82\":2,\"96\":2,\"97\":2,\"98\":1,\"99\":2,\"100\":2,\"128\":2,\"132\":3,\"134\":2,\"146\":4,\"147\":3,\"165\":1,\"178\":1,\"186\":1,\"188\":4,\"189\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"197\":1,\"198\":1,\"212\":1,\"228\":2,\"230\":1,\"231\":5,\"242\":1,\"244\":1,\"245\":3,\"246\":1,\"258\":1,\"261\":1,\"353\":1,\"363\":1,\"406\":2,\"407\":2,\"408\":3,\"409\":1,\"412\":3,\"461\":2,\"731\":4,\"737\":1}}],[\"sendrequest\",{\"1\":{\"424\":5}}],[\"sendfile\",{\"1\":{\"308\":1,\"634\":1}}],[\"sentinel\",{\"1\":{\"326\":4,\"327\":4,\"328\":1,\"329\":3,\"330\":3,\"333\":11,\"334\":6,\"336\":2}}],[\"sent\",{\"1\":{\"17\":2,\"634\":1}}],[\"sed\",{\"1\":{\"297\":7,\"333\":2,\"341\":1,\"346\":1}}],[\"separated\",{\"1\":{\"293\":2}}],[\"search查找\",{\"1\":{\"512\":1}}],[\"search\",{\"1\":{\"249\":2,\"434\":1,\"512\":2,\"556\":1}}],[\"session|global\",{\"1\":{\"261\":1}}],[\"session|globle\",{\"1\":{\"230\":1}}],[\"session\",{\"1\":{\"228\":1,\"244\":6,\"763\":1}}],[\"ser\",{\"1\":{\"581\":1}}],[\"serial\",{\"1\":{\"621\":1}}],[\"serializable\",{\"1\":{\"83\":1,\"261\":2,\"581\":1,\"744\":4}}],[\"sericlization\",{\"1\":{\"423\":1}}],[\"servlet\",{\"1\":{\"727\":1}}],[\"servletcontextresource等资源访问方式\",{\"1\":{\"721\":1}}],[\"servletcontextresource\",{\"0\":{\"710\":1},\"1\":{\"706\":1}}],[\"servletcontext\",{\"1\":{\"695\":1,\"704\":1}}],[\"service匹配所有名称以service结尾的类或接口\",{\"1\":{\"667\":1}}],[\"service层执行结束\",{\"1\":{\"646\":3,\"647\":3,\"650\":1}}],[\"services\",{\"1\":{\"480\":1,\"482\":2,\"483\":3,\"634\":1}}],[\"service\",{\"1\":{\"372\":2,\"644\":3,\"646\":3,\"647\":3,\"667\":2,\"682\":4,\"683\":2,\"727\":1,\"737\":1,\"745\":1,\"749\":1,\"766\":3}}],[\"servertimezone=utc\",{\"1\":{\"762\":1}}],[\"servercron\",{\"1\":{\"457\":1}}],[\"server命令即可启动redis\",{\"1\":{\"370\":1}}],[\"server\",{\"1\":{\"108\":1,\"298\":3,\"308\":2,\"342\":1,\"346\":1,\"367\":1,\"371\":1,\"372\":2,\"423\":2,\"457\":1,\"462\":2,\"464\":10,\"467\":1,\"631\":1,\"634\":5}}],[\"serevr\",{\"1\":{\"311\":1}}],[\"segment\",{\"1\":{\"60\":3,\"78\":2,\"206\":1}}],[\"setteachermap\",{\"1\":{\"760\":1}}],[\"setteachername\",{\"1\":{\"760\":1}}],[\"setteacherid\",{\"1\":{\"760\":1}}],[\"setter\",{\"1\":{\"647\":2}}],[\"setter方法上\",{\"1\":{\"646\":1}}],[\"sethobbies\",{\"1\":{\"759\":1}}],[\"sethashvalueserializer\",{\"1\":{\"355\":1}}],[\"sethashkeyserializer\",{\"1\":{\"355\":1}}],[\"setclazz\",{\"1\":{\"758\":1}}],[\"setclazzname\",{\"1\":{\"758\":1}}],[\"setclazzid\",{\"1\":{\"758\":1}}],[\"setcommand\",{\"1\":{\"464\":1}}],[\"setconnectionfactory\",{\"1\":{\"355\":1}}],[\"setxxx\",{\"1\":{\"754\":1}}],[\"set注入\",{\"0\":{\"754\":1}}],[\"setditest\",{\"1\":{\"754\":1}}],[\"setdatasource\",{\"1\":{\"746\":2}}],[\"setdriverclassname\",{\"1\":{\"746\":1}}],[\"setpassword\",{\"1\":{\"746\":1,\"763\":1,\"764\":1}}],[\"setphone\",{\"1\":{\"683\":1}}],[\"setres\",{\"1\":{\"719\":1}}],[\"setresourceloader\",{\"1\":{\"718\":1}}],[\"set<constraintviolation<user>>\",{\"1\":{\"682\":1}}],[\"setvalidator\",{\"1\":{\"681\":1}}],[\"setvalueserializer\",{\"1\":{\"355\":1}}],[\"setattribute\",{\"1\":{\"765\":1}}],[\"setautocommit\",{\"1\":{\"734\":1}}],[\"setaccessible\",{\"1\":{\"650\":1}}],[\"setage\",{\"1\":{\"356\":1,\"681\":2,\"682\":4,\"683\":2,\"731\":1,\"754\":1,\"763\":1,\"764\":1}}],[\"seturl\",{\"1\":{\"746\":1}}],[\"setusername\",{\"1\":{\"746\":1,\"763\":1,\"764\":1}}],[\"setuserservice\",{\"1\":{\"646\":1,\"766\":1}}],[\"setuserdao\",{\"1\":{\"646\":1,\"766\":1}}],[\"setup\",{\"1\":{\"353\":1,\"765\":1}}],[\"set方法注入\",{\"1\":{\"694\":1,\"753\":1}}],[\"set方法\",{\"0\":{\"625\":1}}],[\"setstudents\",{\"1\":{\"760\":1}}],[\"setsex\",{\"1\":{\"731\":1,\"754\":1}}],[\"sets\",{\"1\":{\"434\":2,\"682\":2}}],[\"setsize\",{\"1\":{\"407\":1}}],[\"set监听的fd数量不能超过1024\",{\"1\":{\"407\":1}}],[\"set从用户空间拷贝到内核空间\",{\"1\":{\"407\":1}}],[\"set的最大fd\",{\"1\":{\"407\":1}}],[\"setbit\",{\"1\":{\"399\":1}}],[\"setid\",{\"1\":{\"387\":1,\"395\":1,\"731\":1,\"754\":1,\"763\":1,\"764\":1}}],[\"set中的指定元素自增\",{\"1\":{\"382\":1}}],[\"set中的指定元素的score值\",{\"1\":{\"382\":1}}],[\"set中的元素个数\",{\"1\":{\"382\":1}}],[\"set中的一个指定元素\",{\"1\":{\"382\":1}}],[\"setex\",{\"1\":{\"378\":1}}],[\"setnx\",{\"1\":{\"378\":1}}],[\"setname\",{\"1\":{\"356\":1,\"681\":2,\"682\":2,\"683\":1,\"731\":1,\"754\":1}}],[\"setoperations\",{\"1\":{\"361\":1}}],[\"setmaxwaitmillis\",{\"1\":{\"349\":1}}],[\"setmaxidle\",{\"1\":{\"349\":2}}],[\"setmaxtotal\",{\"1\":{\"349\":1}}],[\"setkeyserializer\",{\"1\":{\"355\":1}}],[\"setkey\",{\"1\":{\"336\":1}}],[\"set\",{\"0\":{\"381\":1},\"1\":{\"52\":2,\"179\":1,\"183\":1,\"204\":1,\"230\":2,\"244\":2,\"245\":2,\"246\":2,\"258\":1,\"261\":1,\"275\":1,\"309\":1,\"336\":3,\"344\":2,\"353\":1,\"356\":2,\"358\":1,\"362\":1,\"363\":1,\"377\":2,\"378\":1,\"382\":2,\"397\":2,\"407\":9,\"408\":1,\"420\":4,\"424\":5,\"432\":1,\"434\":1,\"469\":1,\"550\":1,\"619\":1,\"625\":2,\"634\":2,\"646\":1,\"650\":1,\"682\":1,\"731\":1,\"737\":2,\"754\":2,\"755\":1,\"760\":1,\"765\":1}}],[\"seq\",{\"1\":{\"17\":1,\"19\":2}}],[\"并赋予了不同的\",{\"1\":{\"752\":1}}],[\"并赋值给dict\",{\"1\":{\"440\":2}}],[\"并添加配置\",{\"1\":{\"749\":1}}],[\"并允许在构建时将字节码直接静态编译为机器码\",{\"1\":{\"677\":1}}],[\"并部署至托管环境中的过程\",{\"1\":{\"677\":1}}],[\"并需要一定时间和调用频率才能触发\",{\"1\":{\"677\":1}}],[\"并可以做到动态生成代码等\",{\"1\":{\"677\":1}}],[\"并实现了\",{\"1\":{\"618\":1}}],[\"并提供实现\",{\"1\":{\"590\":1}}],[\"并使用\",{\"1\":{\"581\":1}}],[\"并重写\",{\"1\":{\"581\":1}}],[\"并高亮显示\",{\"1\":{\"550\":1}}],[\"并把复制内容插入光标位置下面\",{\"1\":{\"549\":1}}],[\"并遵从\",{\"1\":{\"503\":1}}],[\"并对镜像进行提交\",{\"1\":{\"492\":1}}],[\"并在其中添加如下内容\",{\"1\":{\"490\":1}}],[\"并在某个\",{\"1\":{\"406\":1}}],[\"并设置了一个环境变量\",{\"1\":{\"480\":1}}],[\"并设置ep\",{\"1\":{\"409\":1}}],[\"并没有新的底层实现方式\",{\"1\":{\"469\":1}}],[\"并绑定读处理器readqueryfromclient\",{\"1\":{\"464\":1}}],[\"并得到fd\",{\"1\":{\"464\":1}}],[\"并将分散在不同地理位置的计算机联系起来\",{\"1\":{\"789\":1}}],[\"并将对象引入存入\",{\"1\":{\"695\":1}}],[\"并将其挂载到数据库服务的数据目录\",{\"1\":{\"483\":1}}],[\"并将其挂载到一个或多个容器中\",{\"1\":{\"482\":1}}],[\"并将容器的\",{\"1\":{\"480\":1}}],[\"并将length\",{\"1\":{\"434\":1}}],[\"并将读取到的数据存放到新节点的数据域中\",{\"1\":{\"39\":1}}],[\"并返回结果给用户线程\",{\"1\":{\"404\":1}}],[\"并集图示\",{\"1\":{\"381\":1}}],[\"并集\",{\"1\":{\"381\":1,\"382\":1,\"399\":1,\"420\":1}}],[\"并作为一个\",{\"1\":{\"346\":1}}],[\"并存储\",{\"1\":{\"346\":1}}],[\"并存储在文件系统上的单个数据文件中\",{\"1\":{\"69\":1}}],[\"并解析响应\",{\"1\":{\"309\":1}}],[\"并持续将\",{\"1\":{\"302\":1}}],[\"并不需要将我们写的java文件进行编译\",{\"1\":{\"612\":1}}],[\"并不需要增加额外的方法\",{\"1\":{\"580\":1}}],[\"并不需要指定数据类型\",{\"1\":{\"290\":1}}],[\"并不会重新编写程序\",{\"1\":{\"614\":1}}],[\"并不会自动被删除\",{\"1\":{\"527\":1}}],[\"并不会立即删除undo\",{\"1\":{\"78\":1}}],[\"并不想关心具体的底层实现是什么样的\",{\"1\":{\"466\":1}}],[\"并不是我所需求的\",{\"1\":{\"543\":1}}],[\"并不是一个通用的容器工具\",{\"1\":{\"499\":1}}],[\"并不是一次性完成的\",{\"1\":{\"440\":1}}],[\"并不是在\",{\"1\":{\"457\":1}}],[\"并不是到期立刻删除\",{\"1\":{\"456\":1}}],[\"并不像普通链表那样记录前后节点的指针\",{\"1\":{\"443\":1}}],[\"并以超时剔除作为兜底方案\",{\"1\":{\"276\":1}}],[\"并完成缓存的查询\",{\"1\":{\"233\":1}}],[\"并非实际使用长度\",{\"1\":{\"231\":1}}],[\"并非所有内容都是本人原创\",{\"1\":{\"3\":1}}],[\"并锁住数据前面的间隙gap\",{\"1\":{\"148\":1}}],[\"并发能力虽然不错\",{\"1\":{\"320\":1}}],[\"并发能力问题\",{\"1\":{\"320\":1}}],[\"并发性要求不是很高\",{\"1\":{\"239\":1}}],[\"并发程度高\",{\"1\":{\"148\":1}}],[\"并发度最低\",{\"1\":{\"144\":1}}],[\"并每秒刷新到磁盘一次\",{\"1\":{\"65\":1}}],[\"并释放线性表l所占用的内存空间\",{\"1\":{\"37\":1}}],[\"并用e返回删除元素的值\",{\"1\":{\"37\":1}}],[\"并且缺少某些spring所需要的功能\",{\"1\":{\"704\":1}}],[\"并且trim\",{\"1\":{\"682\":1}}],[\"并且长度不为0\",{\"1\":{\"682\":1}}],[\"并且也实现了org\",{\"1\":{\"682\":1}}],[\"并且把\",{\"1\":{\"650\":1}}],[\"并且引入\",{\"1\":{\"642\":1,\"751\":1}}],[\"并且维护好了各项数据\",{\"1\":{\"621\":1}}],[\"并且根据异常的不同类型\",{\"1\":{\"600\":1}}],[\"并且这些接口包含一样的默认方法\",{\"1\":{\"590\":1}}],[\"并且这个集合的元素数量不多时\",{\"1\":{\"432\":1}}],[\"并且大小和之前的不一样了\",{\"1\":{\"515\":1}}],[\"并且大小在\",{\"1\":{\"417\":1}}],[\"并且让web和db服务都连接到这个网络\",{\"1\":{\"482\":1}}],[\"并且进行了端口映射\",{\"1\":{\"480\":1}}],[\"并且对象的复杂度过高\",{\"1\":{\"471\":1}}],[\"并且对事务的完整性\",{\"1\":{\"239\":1}}],[\"并且带有其底层的编码方式\",{\"1\":{\"466\":1}}],[\"并且带有以下三个重要的保证\",{\"1\":{\"401\":1}}],[\"并且支持各种不同的多路复用实现\",{\"1\":{\"461\":1}}],[\"并且过期key比例大于10\",{\"1\":{\"457\":2}}],[\"并且该操作的时间复杂度为\",{\"1\":{\"442\":1}}],[\"并且该索引不能失效\",{\"1\":{\"225\":1}}],[\"并且服务器没有执行\",{\"1\":{\"439\":1}}],[\"并且具备长度可变\",{\"1\":{\"432\":1}}],[\"并且可以作用在应用的任何层次\",{\"1\":{\"644\":1}}],[\"并且可以动态修改\",{\"1\":{\"618\":1}}],[\"并且可以根据\",{\"1\":{\"421\":1}}],[\"并且可以同时存储\",{\"1\":{\"421\":1}}],[\"并且元素数量不超过set\",{\"1\":{\"420\":1}}],[\"并且是很⼩的\",{\"1\":{\"400\":1}}],[\"并且是在使用视图时动态生成的\",{\"1\":{\"164\":1}}],[\"并且能记住每一个客户端的访问位置\",{\"1\":{\"387\":1}}],[\"并且指定有效期\",{\"1\":{\"378\":1}}],[\"并且将这些实现进行封装\",{\"1\":{\"461\":1}}],[\"并且将rehashidx++\",{\"1\":{\"440\":1}}],[\"并且将不同数据类型的操作api封装到了不同的类型中\",{\"1\":{\"361\":1}}],[\"并且将客户端的tcp连接断开\",{\"1\":{\"19\":1}}],[\"并且使用jedis连接池较为可靠\",{\"1\":{\"349\":1}}],[\"并且频繁的创建和销毁连接会有性能损耗\",{\"1\":{\"349\":1}}],[\"并且在移除结点后\",{\"1\":{\"445\":1}}],[\"并且在集群伸缩的同时\",{\"1\":{\"346\":1}}],[\"并且在\",{\"1\":{\"304\":1}}],[\"并且在叶子结点中\",{\"1\":{\"121\":1}}],[\"并且设置存储引擎为innodb\",{\"1\":{\"234\":1}}],[\"并且设置唯一约束\",{\"1\":{\"92\":1}}],[\"并且\",{\"1\":{\"189\":1,\"427\":1}}],[\"并且重新创建该表\",{\"1\":{\"179\":1}}],[\"并且最后一个字段后没有逗号\",{\"1\":{\"179\":1}}],[\"并且检查定义检查条件的依赖的视图\",{\"1\":{\"166\":1}}],[\"并且需要返回的列\",{\"1\":{\"133\":1}}],[\"并且不跳过索引中的列\",{\"1\":{\"131\":1}}],[\"并且以相对随机的顺序插入二级索引\",{\"1\":{\"64\":1}}],[\"并且建立连接\",{\"1\":{\"18\":1}}],[\"并且为自己也选一个初始序列号seq=y\",{\"1\":{\"17\":1}}],[\"并且选择一个初始序列号seq=x\",{\"1\":{\"17\":1}}],[\"像管道一样的连接\",{\"1\":{\"16\":1}}],[\"不影响后续的操作\",{\"1\":{\"763\":1}}],[\"不提供给开发人员使用\",{\"1\":{\"695\":1}}],[\"不提供技术支持\",{\"1\":{\"108\":1}}],[\"不必等待及时编译器的预热\",{\"1\":{\"677\":1}}],[\"不必理会\",{\"1\":{\"535\":1}}],[\"不限\",{\"1\":{\"667\":1}}],[\"不再是直接对目标方法进行调用\",{\"1\":{\"656\":1}}],[\"不再需要\",{\"1\":{\"417\":1}}],[\"不利于统一维护\",{\"1\":{\"655\":1}}],[\"不存在的话\",{\"1\":{\"646\":1}}],[\"不存在则从数据库查询\",{\"1\":{\"284\":1}}],[\"不存在则返回\",{\"1\":{\"284\":1}}],[\"不返回是使用\",{\"1\":{\"583\":1}}],[\"不匹配com\",{\"1\":{\"667\":1}}],[\"不匹配\",{\"1\":{\"535\":1}}],[\"不但可以下载需要的镜像\",{\"1\":{\"531\":1}}],[\"不变\",{\"1\":{\"517\":1}}],[\"不理解属于正常情况\",{\"1\":{\"494\":1}}],[\"不断接收\",{\"1\":{\"462\":1}}],[\"不执行\",{\"1\":{\"457\":1}}],[\"不执行逻辑\",{\"1\":{\"251\":1}}],[\"不方便管理和查找\",{\"1\":{\"446\":1}}],[\"不得小于4\",{\"1\":{\"440\":2}}],[\"不包括pipeline\",{\"1\":{\"423\":1}}],[\"不包含sql语句\",{\"1\":{\"256\":1}}],[\"不包含该记录值\",{\"1\":{\"148\":1}}],[\"不一定确保元素有序\",{\"1\":{\"420\":1}}],[\"不管有没有\",{\"1\":{\"745\":1}}],[\"不管以怎样的方式创建applicationcontext实例\",{\"1\":{\"721\":1}}],[\"不管通过\",{\"1\":{\"719\":1}}],[\"不管是扩容还是收缩\",{\"1\":{\"440\":1}}],[\"不管是哪种格式\",{\"1\":{\"378\":1}}],[\"不管数据是否被处理完成\",{\"1\":{\"410\":1}}],[\"不为空则返回就绪的fd的数量\",{\"1\":{\"409\":1}}],[\"不为null\",{\"1\":{\"223\":1}}],[\"不阻塞等待\",{\"1\":{\"407\":1}}],[\"不指定commond时\",{\"1\":{\"374\":1}}],[\"不指定条件列表\",{\"1\":{\"95\":1}}],[\"不建议在⽣产环境设备上使⽤\",{\"1\":{\"363\":1}}],[\"不建议使用\",{\"1\":{\"285\":1}}],[\"不需要相关的编译工具\",{\"1\":{\"614\":1}}],[\"不需要我们创建\",{\"1\":{\"341\":1}}],[\"不需要额外排序\",{\"1\":{\"211\":1}}],[\"不完整\",{\"1\":{\"323\":1}}],[\"不能在外部通过ioc容器获取\",{\"1\":{\"758\":1}}],[\"不能随便使用\",{\"1\":{\"757\":1}}],[\"不能直接讲\",{\"1\":{\"757\":1}}],[\"不能包含空格\",{\"1\":{\"684\":1}}],[\"不能包含特殊字符\",{\"1\":{\"427\":1}}],[\"不能根据硬件情况或程序运行情况择优选择机器指令序列\",{\"1\":{\"677\":1}}],[\"不能根据程序运行情况做进一步的优化\",{\"1\":{\"677\":1}}],[\"不能根据返回类型进行区分\",{\"1\":{\"586\":1}}],[\"不能装配\",{\"1\":{\"646\":1}}],[\"不能指定具体的实现过程\",{\"1\":{\"592\":1}}],[\"不能被private\",{\"1\":{\"592\":1}}],[\"不能定义私有成员\",{\"1\":{\"590\":1}}],[\"不能定义静态方法\",{\"1\":{\"590\":1}}],[\"不能比父类被重写方法声明更多的异常\",{\"1\":{\"586\":1}}],[\"不能有方法的实现\",{\"1\":{\"592\":1}}],[\"不能有\",{\"1\":{\"580\":1}}],[\"不能以特殊字符开头\",{\"1\":{\"561\":1}}],[\"不能以数字开头\",{\"1\":{\"561\":1}}],[\"不能以保留关键字为名称\",{\"1\":{\"561\":1}}],[\"不能像集合那样\",{\"1\":{\"400\":1}}],[\"不能将所有的实际内存分配给\",{\"1\":{\"321\":1}}],[\"不能只删除某一个字段的值\",{\"1\":{\"184\":1}}],[\"不仅仅对\",{\"1\":{\"306\":1}}],[\"不仅如此还会记录自己在学习生活中的一些感想感悟\",{\"1\":{\"1\":1}}],[\"不用自己维护\",{\"1\":{\"276\":1}}],[\"不过在其\",{\"1\":{\"456\":1}}],[\"不过需要同时满足连个条件\",{\"1\":{\"421\":1}}],[\"不过根据字符串的格式不同\",{\"1\":{\"378\":1}}],[\"不过\",{\"1\":{\"275\":1,\"678\":1}}],[\"不过可以使用update语句来进行修改\",{\"1\":{\"184\":1}}],[\"不取值\",{\"1\":{\"223\":1}}],[\"不通过innodb引擎提供的计数方式进行计算\",{\"1\":{\"222\":1}}],[\"不符合where条件的不参与分组\",{\"1\":{\"192\":1}}],[\"不是语法定义的\",{\"1\":{\"661\":1}}],[\"不是以空字符串来判断是否结束\",{\"1\":{\"427\":1}}],[\"不是与节点绑定\",{\"1\":{\"345\":1}}],[\"不是用户定义的\",{\"1\":{\"244\":1}}],[\"不是针对记录值加的锁\",{\"1\":{\"225\":1}}],[\"不是\",{\"1\":{\"189\":1}}],[\"不等于\",{\"1\":{\"189\":1}}],[\"不保证有序\",{\"1\":{\"420\":1}}],[\"不保证一致性\",{\"1\":{\"274\":1}}],[\"不保证遵循acid原则的数据存储系统\",{\"1\":{\"111\":1}}],[\"不保存查询的结果\",{\"1\":{\"164\":1}}],[\"不支持外键\",{\"1\":{\"237\":1}}],[\"不支持事务\",{\"1\":{\"237\":1,\"745\":2}}],[\"不支持语句级触发\",{\"1\":{\"155\":1}}],[\"不支持范围查找\",{\"1\":{\"123\":1}}],[\"不支持范围查询\",{\"1\":{\"117\":1}}],[\"不回表查询\",{\"1\":{\"133\":1}}],[\"不加引号\",{\"1\":{\"131\":1}}],[\"不加锁\",{\"1\":{\"83\":2}}],[\"不要导入错了\",{\"1\":{\"665\":1}}],[\"不要松开\",{\"1\":{\"549\":1}}],[\"不要在索引列上进行运算操作\",{\"1\":{\"131\":1}}],[\"不要求逻辑上相邻的元素在物理位置上也相邻\",{\"1\":{\"35\":1}}],[\"不在指定的集合范围内\",{\"1\":{\"102\":1}}],[\"不在\",{\"1\":{\"88\":1}}],[\"不可被覆盖\",{\"1\":{\"493\":1}}],[\"不可见的\",{\"1\":{\"466\":1}}],[\"不可修改\",{\"1\":{\"427\":1}}],[\"不可重复读\",{\"1\":{\"260\":1,\"261\":1,\"744\":1}}],[\"不可以对元数据进行写入操作\",{\"1\":{\"146\":1}}],[\"不可以访问该版本\",{\"1\":{\"88\":1}}],[\"不可分割\",{\"1\":{\"34\":1}}],[\"不单单依赖undo\",{\"1\":{\"86\":1}}],[\"不同隔离级别对应不同的干扰程度\",{\"1\":{\"744\":1}}],[\"不同点\",{\"1\":{\"592\":1}}],[\"不同在于它是在容器内部运行的\",{\"1\":{\"476\":1}}],[\"不同层指针到下一个节点的跨度不同\",{\"1\":{\"455\":1}}],[\"不同的存储引擎具有不同的功能\",{\"1\":{\"233\":1}}],[\"不同的存储引擎有不同的结构\",{\"1\":{\"117\":1}}],[\"不同的数据库拥有不同的语法实现\",{\"1\":{\"194\":1}}],[\"不同的隔离级别\",{\"1\":{\"88\":1}}],[\"不同事务或者相同事务对同一条数据记录进行操作\",{\"1\":{\"86\":1}}],[\"不同主机的应用层之间经常需要可靠的\",{\"1\":{\"16\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"733\":1}}],[\"不会导致容器的停止\",{\"1\":{\"524\":1}}],[\"不会重复下载\",{\"1\":{\"491\":1}}],[\"不会\",{\"1\":{\"434\":1}}],[\"不会产生数据丢失\",{\"1\":{\"434\":1}}],[\"不会自动立即将其清理和驱逐\",{\"1\":{\"285\":1}}],[\"不会驱逐任何键\",{\"1\":{\"278\":1,\"458\":1}}],[\"不会立刻被删除\",{\"1\":{\"85\":1}}],[\"不会直接操作磁盘\",{\"1\":{\"64\":1}}],[\"不重复的\",{\"1\":{\"49\":1}}],[\"不容易出错\",{\"1\":{\"23\":1}}],[\"不以理睬\",{\"1\":{\"18\":1}}],[\"可重复读\",{\"1\":{\"744\":2}}],[\"可测试性和松耦合的角度而言\",{\"1\":{\"725\":1}}],[\"可通过不同前缀指定强制使用指定的classpathresource\",{\"1\":{\"717\":1}}],[\"可通过构建命令传递\",{\"1\":{\"493\":1}}],[\"可自动搜索位于\",{\"1\":{\"708\":1}}],[\"可将\",{\"1\":{\"679\":1}}],[\"可在子类中被重新定义\",{\"1\":{\"592\":1}}],[\"可变参数在方法内部被当作数组处理\",{\"1\":{\"587\":1}}],[\"可变参数在方法的参数列表中使用省略号\",{\"1\":{\"587\":1}}],[\"可变参数必须是方法的最后一个参数\",{\"1\":{\"587\":1}}],[\"可变参数\",{\"0\":{\"587\":1}}],[\"可用于打包\",{\"1\":{\"504\":1}}],[\"可移植的容器中\",{\"1\":{\"503\":1}}],[\"可移植和可自动化的容器化部署\",{\"1\":{\"490\":1}}],[\"可先学习自本小节起的后续章节\",{\"1\":{\"494\":1}}],[\"可视化界面配置\",{\"1\":{\"475\":1}}],[\"可视化构建和共享容器的应用程序\",{\"1\":{\"474\":1}}],[\"可见字符串是\",{\"1\":{\"427\":1}}],[\"可写事件\",{\"1\":{\"408\":1}}],[\"可写时得到通知\",{\"1\":{\"406\":1}}],[\"可读事件\",{\"1\":{\"408\":1}}],[\"可读\",{\"1\":{\"406\":1,\"462\":1}}],[\"可读性差\",{\"1\":{\"354\":1}}],[\"可排序这几个需求\",{\"1\":{\"421\":1}}],[\"可排序\",{\"1\":{\"382\":1}}],[\"可靠性差\",{\"1\":{\"322\":1}}],[\"可靠性高\",{\"1\":{\"322\":1}}],[\"可靠性能较低\",{\"1\":{\"282\":1}}],[\"可靠性要求较高\",{\"1\":{\"282\":1}}],[\"可靠性更好\",{\"1\":{\"282\":1}}],[\"可靠的\",{\"1\":{\"16\":1}}],[\"可控性更高\",{\"1\":{\"277\":1}}],[\"可选中光标所在的单词或段落\",{\"1\":{\"549\":1,\"553\":1}}],[\"可选\",{\"1\":{\"247\":2,\"394\":1,\"566\":2}}],[\"可以避免任何并发问题\",{\"1\":{\"744\":1}}],[\"可以避免在运行时的编译性能消耗和内存消耗\",{\"1\":{\"677\":1}}],[\"可以读取配置文件\",{\"1\":{\"696\":1}}],[\"可以无需\",{\"1\":{\"677\":1}}],[\"可以跑得更快\",{\"1\":{\"677\":1}}],[\"可以调用\",{\"1\":{\"600\":1}}],[\"可以保证资源在使用后被关闭\",{\"1\":{\"600\":1}}],[\"可以捕获多个异常\",{\"1\":{\"600\":1}}],[\"可以对接口的多实现\",{\"1\":{\"576\":1}}],[\"可以对当前文件和整个包目录使用\",{\"1\":{\"552\":2}}],[\"可以直接执行\",{\"1\":{\"677\":1}}],[\"可以直接使用方法名进行调用\",{\"1\":{\"585\":1}}],[\"可以直接访问\",{\"1\":{\"580\":1}}],[\"可以直接通过类名调用\",{\"1\":{\"572\":1,\"582\":1}}],[\"可以直接在国内的gitee中下载安装\",{\"1\":{\"375\":1}}],[\"可以同时选择其他单词\",{\"1\":{\"554\":1}}],[\"可以跳过接口\",{\"1\":{\"552\":1}}],[\"可以关闭当前打开文件\",{\"1\":{\"551\":1}}],[\"可以连写的\",{\"1\":{\"520\":1}}],[\"可以用来创建\",{\"1\":{\"508\":1}}],[\"可以用其来实现简单的死循环\",{\"1\":{\"253\":1}}],[\"可以参考本站的\",{\"1\":{\"506\":1}}],[\"可以参考redis官方的安装文档\",{\"1\":{\"368\":1}}],[\"可以理解为一个轻量级的虚拟机\",{\"1\":{\"508\":1}}],[\"可以理解为普通虚拟机是在宿主机的物理环境上\",{\"1\":{\"505\":1}}],[\"可以理解为给sql语句设置别名\",{\"1\":{\"164\":1}}],[\"可以适当进行简化\",{\"1\":{\"491\":1}}],[\"可以适当增大排序缓冲区大小sort\",{\"1\":{\"213\":1}}],[\"可以指定服务启动的顺序\",{\"1\":{\"482\":1}}],[\"可以指定该表空间\",{\"1\":{\"70\":1}}],[\"可以设置环境变量\",{\"1\":{\"482\":1}}],[\"可以被轻松内嵌\",{\"1\":{\"679\":1}}],[\"可以被多次调用\",{\"1\":{\"583\":1}}],[\"可以被覆盖\",{\"1\":{\"493\":1}}],[\"可以被回收\",{\"1\":{\"467\":1}}],[\"可以被立即删除\",{\"1\":{\"85\":1}}],[\"可以使用星号代表多个字符\",{\"1\":{\"749\":1}}],[\"可以使用file\",{\"1\":{\"719\":1}}],[\"可以使用如下指令打开对应的文件夹\",{\"1\":{\"634\":1}}],[\"可以使用config\",{\"1\":{\"450\":1}}],[\"可以使用\",{\"1\":{\"450\":1,\"580\":1,\"581\":1,\"599\":1,\"667\":3}}],[\"可以使用角标获取\",{\"1\":{\"313\":1}}],[\"可以简单的理解为慢慢的将旧的哈希表\",{\"1\":{\"440\":1}}],[\"可以简单的理解为cascaded是强制检查所有相关的视图\",{\"1\":{\"166\":1}}],[\"可以节省内存空间\",{\"1\":{\"435\":1}}],[\"可以是基本数据类型\",{\"1\":{\"572\":1,\"582\":1}}],[\"可以是基于命令行的\",{\"1\":{\"474\":1}}],[\"可以是本地主机\",{\"1\":{\"474\":1}}],[\"可以是上述所有类型\",{\"1\":{\"423\":1}}],[\"可以是多列的数据集\",{\"1\":{\"103\":1}}],[\"可以是多行的数据集\",{\"1\":{\"102\":1}}],[\"可以实现快速访问功能\",{\"1\":{\"421\":1}}],[\"可以实现排序功能\",{\"1\":{\"421\":1}}],[\"可以键值存储\",{\"1\":{\"421\":1}}],[\"可以排序\",{\"1\":{\"421\":1}}],[\"可以根据\",{\"1\":{\"421\":1}}],[\"可以根据score\",{\"1\":{\"421\":1}}],[\"可以根据索引的选择性来决定\",{\"1\":{\"134\":1}}],[\"可以根据索引长度来判断\",{\"1\":{\"131\":1}}],[\"可以满足元素唯一\",{\"1\":{\"420\":1}}],[\"可以判断元素是否存在\",{\"1\":{\"420\":1}}],[\"可以从首\",{\"1\":{\"418\":1}}],[\"可以从以下几个方面来优化\",{\"1\":{\"303\":1}}],[\"可以看我写的这章笔记\",{\"1\":{\"656\":1}}],[\"可以看做一个类\",{\"1\":{\"579\":1}}],[\"可以看做一种连续内存空间的\",{\"1\":{\"446\":1}}],[\"可以看做一种特殊的双端链表\",{\"1\":{\"442\":1}}],[\"可以看做是给镜像起别名\",{\"1\":{\"517\":1}}],[\"可以看做是特殊的整数数组\",{\"1\":{\"435\":1}}],[\"可以看做是一个value为null的hashmap\",{\"1\":{\"381\":1}}],[\"可以看做是一个双向链表结构\",{\"1\":{\"380\":1}}],[\"可以看做是命令日志文件\",{\"1\":{\"322\":1}}],[\"可以看如下对比\",{\"1\":{\"430\":1}}],[\"可以看到\",{\"1\":{\"404\":1,\"405\":1}}],[\"可以计算多个hll\",{\"1\":{\"400\":1}}],[\"可以随时对任意⼀位进⾏运算\",{\"1\":{\"399\":1}}],[\"可以自定义大小\",{\"1\":{\"408\":1}}],[\"可以自定义\",{\"1\":{\"388\":1}}],[\"可以自己设置\",{\"1\":{\"208\":1}}],[\"可以分发消息\",{\"1\":{\"387\":1}}],[\"可以基于score属性对元素排序\",{\"1\":{\"382\":1}}],[\"可以针对单个字段做crud\",{\"1\":{\"379\":1}}],[\"可以针对于字段的特点\",{\"1\":{\"136\":1}}],[\"可以做自增\",{\"1\":{\"378\":2}}],[\"可以包含任何数据\",{\"1\":{\"378\":1}}],[\"可以选择⾃⼰喜欢的⼀款就可以\",{\"1\":{\"375\":1}}],[\"可以查看\",{\"1\":{\"512\":1}}],[\"可以查看⼀个命令的具体⽤法\",{\"1\":{\"363\":1}}],[\"可以查看当前数据库的insert\",{\"1\":{\"228\":1}}],[\"可以接收任意\",{\"1\":{\"354\":1}}],[\"可以接收参数\",{\"1\":{\"241\":1}}],[\"可以明显的看到\",{\"1\":{\"354\":1}}],[\"可以将其处理的某个复杂任务分配给网络中的其他计算机系统\",{\"1\":{\"791\":1}}],[\"可以将这些行为提取到一个抽象类中\",{\"1\":{\"591\":1}}],[\"可以将对象的状态从持久性存储中重新创建出来\",{\"1\":{\"581\":1}}],[\"可以将\",{\"1\":{\"484\":1}}],[\"可以将注意力集中于业务逻辑上\",{\"1\":{\"349\":1}}],[\"可以将共享看作是只读\",{\"1\":{\"149\":1}}],[\"可以执行命令\",{\"1\":{\"342\":1}}],[\"可以让开发者打包他们的应用以及依赖包到一个轻量级\",{\"1\":{\"503\":1}}],[\"可以让任何客户端访问任何时刻的数据\",{\"1\":{\"387\":1}}],[\"可以让\",{\"1\":{\"322\":1}}],[\"可以帮助我们安装一个第三方的lua模块\",{\"1\":{\"307\":1}}],[\"可以发现\",{\"1\":{\"300\":1}}],[\"可以运行下面命令\",{\"1\":{\"298\":1}}],[\"可以重复执行指定语句\",{\"1\":{\"291\":1}}],[\"可以再集群间共享\",{\"1\":{\"282\":1}}],[\"可以作存储过程内的局部变量和输入参数\",{\"1\":{\"246\":1}}],[\"可以手动开启事务\",{\"1\":{\"202\":1}}],[\"可以讲索引分为两种类型\",{\"1\":{\"129\":1}}],[\"可以存储到\",{\"1\":{\"346\":1}}],[\"可以存储大量数据\",{\"1\":{\"39\":1}}],[\"可以存在多个\",{\"1\":{\"126\":1}}],[\"可以有多个\",{\"1\":{\"126\":3}}],[\"可以通过配置bean指定为初始化和销毁的方法\",{\"1\":{\"764\":1}}],[\"可以通过以下方式为bean的各个属性赋值\",{\"1\":{\"761\":1}}],[\"可以通过redis\",{\"1\":{\"346\":1}}],[\"可以通过like模糊匹配的方式查找变量\",{\"1\":{\"244\":1}}],[\"可以通过\",{\"1\":{\"230\":1,\"363\":1,\"533\":1,\"743\":1,\"745\":1}}],[\"可以通过覆盖索引加子查询形式进行优化\",{\"1\":{\"220\":1}}],[\"可以通过索引来提高效率\",{\"1\":{\"216\":1}}],[\"可以通过构建链表来解决\",{\"1\":{\"123\":1}}],[\"可以通过它来找到该记录修改前的信息\",{\"1\":{\"60\":1}}],[\"可以访问该版本\",{\"1\":{\"88\":2}}],[\"可以认为当delete一条记录时\",{\"1\":{\"78\":1}}],[\"可以在程序运行初期就达到最高性能\",{\"1\":{\"677\":1}}],[\"可以在编译\",{\"1\":{\"641\":1}}],[\"可以在运行时获取类的信息\",{\"1\":{\"581\":1}}],[\"可以在弹出的层上直接输入\",{\"1\":{\"549\":1}}],[\"可以在其中存储和分享\",{\"1\":{\"508\":1}}],[\"可以在任意一端压入弹出操作\",{\"1\":{\"442\":1}}],[\"可以在\",{\"1\":{\"244\":1,\"321\":1}}],[\"可以在sql语句中实现条件筛选\",{\"1\":{\"58\":1}}],[\"可以在创建表\",{\"1\":{\"49\":1}}],[\"可以在看完视频后\",{\"1\":{\"22\":1}}],[\"可能是java程序或mysql数据库或网络连接等等\",{\"1\":{\"742\":1}}],[\"可能也会遇到和我相似的问题\",{\"1\":{\"636\":1}}],[\"可能也会有对知识的误解和遗漏\",{\"1\":{\"3\":1}}],[\"可能并未意识到某些问题\",{\"1\":{\"636\":1}}],[\"可能并不总是准确的\",{\"1\":{\"231\":1}}],[\"可能抛出异常的代码\",{\"1\":{\"597\":1}}],[\"可能会出现你完全按照教程进行\",{\"1\":{\"494\":1}}],[\"可能会影响查询效率\",{\"1\":{\"446\":1}}],[\"可能会产生一系列的问题\",{\"1\":{\"260\":1}}],[\"可能丢失大量数据\",{\"1\":{\"322\":1}}],[\"可能有死锁风险\",{\"1\":{\"274\":1}}],[\"可能造成短期的不一致\",{\"1\":{\"272\":1}}],[\"可能不用了\",{\"1\":{\"75\":1}}],[\"可能客户端发送很多请求以后\",{\"1\":{\"18\":1}}],[\"心路历程\",{\"0\":{\"12\":1}}],[\"苍穹外卖\",{\"0\":{\"635\":1},\"1\":{\"9\":1}}],[\"瑞吉外卖\",{\"1\":{\"9\":1}}],[\"也称端系统\",{\"1\":{\"785\":1}}],[\"也称为字段或成员变量\",{\"1\":{\"572\":1}}],[\"也称为物理结构\",{\"1\":{\"35\":1}}],[\"也对\",{\"1\":{\"678\":1}}],[\"也欢迎大家在评论区交流\",{\"1\":{\"640\":1}}],[\"也可被重新赋值\",{\"1\":{\"592\":1}}],[\"也可以通过正则表达式和flag指定自定义的email格式\",{\"1\":{\"682\":1}}],[\"也可以直接访问\",{\"1\":{\"634\":1}}],[\"也可以捕获多种类型异常\",{\"1\":{\"600\":1}}],[\"也可以不做任何处理\",{\"1\":{\"595\":1}}],[\"也可以自己实现父类的方法\",{\"1\":{\"576\":1}}],[\"也可以由对象引用调用\",{\"1\":{\"572\":1,\"582\":1}}],[\"也可以无限个条件使用\",{\"1\":{\"565\":1}}],[\"也可以在提示补充的时候按\",{\"1\":{\"549\":1}}],[\"也可以指定为\",{\"1\":{\"537\":1}}],[\"也可以更改为自己的想使用的仓库\",{\"1\":{\"530\":1}}],[\"也可以实现虚拟化\",{\"1\":{\"503\":1}}],[\"也可以使用\",{\"1\":{\"485\":1,\"517\":1}}],[\"也可以是硬件共享\",{\"1\":{\"790\":1}}],[\"也可以是引用数据类型\",{\"1\":{\"572\":1,\"582\":1}}],[\"也可以是网络端口映射\",{\"1\":{\"537\":1}}],[\"也可以是远程的服务器\",{\"1\":{\"474\":1}}],[\"也可以是基于图形化界面的\",{\"1\":{\"474\":1}}],[\"也可以是外连接查询\",{\"1\":{\"98\":1}}],[\"也可以将bitmap想象成⼀个只能存储0\",{\"1\":{\"399\":1}}],[\"也可以根据自己的需求来删除或添加词条\",{\"1\":{\"378\":1}}],[\"也可以作为输出参数\",{\"1\":{\"248\":1}}],[\"也可以返回数据\",{\"1\":{\"241\":1}}],[\"也可以建立相关的表\",{\"1\":{\"222\":1}}],[\"也可以填充100\",{\"1\":{\"207\":1}}],[\"也可以填充一半\",{\"1\":{\"207\":1}}],[\"也可以归纳为字段操作\",{\"1\":{\"179\":1}}],[\"也可以简化他们的操作\",{\"1\":{\"169\":1}}],[\"也顺便记录自己学习\",{\"1\":{\"543\":1}}],[\"也更适合不同的环境\",{\"1\":{\"483\":1}}],[\"也更加复杂\",{\"1\":{\"138\":1}}],[\"也容易出问题\",{\"1\":{\"477\":1}}],[\"也节约了一些cpu时间\",{\"1\":{\"471\":1}}],[\"也叫做\",{\"1\":{\"467\":1}}],[\"也叫散列\",{\"1\":{\"379\":1}}],[\"也只能从头到尾遍历链表\",{\"1\":{\"452\":1}}],[\"也会编译通过\",{\"1\":{\"595\":1}}],[\"也会对负载因子做检查\",{\"1\":{\"439\":1}}],[\"也会在触发阈值时自动去重写\",{\"1\":{\"322\":1}}],[\"也读一行\",{\"1\":{\"424\":1}}],[\"也没有用\",{\"1\":{\"595\":1}}],[\"也没有键值对的概念\",{\"1\":{\"421\":1}}],[\"也没有合适的唯一索引\",{\"1\":{\"126\":1}}],[\"也做了同样的处理\",{\"1\":{\"354\":1}}],[\"也伴随着槽位及槽位中数据在节点之间的移动\",{\"1\":{\"346\":1}}],[\"也被叫做\",{\"1\":{\"321\":1}}],[\"也是在使用过程中最常使用到的\",{\"1\":{\"507\":1}}],[\"也是立即缩容\",{\"1\":{\"445\":1}}],[\"也是我们需要重点掌握的协议\",{\"1\":{\"423\":1}}],[\"也是返回0\",{\"1\":{\"399\":1}}],[\"也是实际业务中容易出错的一个点\",{\"1\":{\"259\":1}}],[\"也是遵循最最前缀法则的\",{\"1\":{\"213\":1}}],[\"也就是确定具体的资源访问策略\",{\"1\":{\"717\":1}}],[\"也就是每次扩展都是根据原哈希表已使用的空间扩大一倍创建另一个哈希表\",{\"1\":{\"439\":1}}],[\"也就是\",{\"1\":{\"419\":1,\"421\":1,\"725\":1}}],[\"也就是阶段二是同步还是异步\",{\"1\":{\"415\":1}}],[\"也就是字符串类型\",{\"1\":{\"378\":1}}],[\"也就是本地缓存\",{\"1\":{\"309\":1}}],[\"也就是该参数可以作为返回值\",{\"1\":{\"248\":1}}],[\"也就是需要调用时传入值\",{\"1\":{\"248\":1}}],[\"也就是说属于\",{\"1\":{\"647\":1}}],[\"也就是说如果允许你在匿名内部类中修改值\",{\"1\":{\"580\":1}}],[\"也就是说扩容和收缩操作不是一次性\",{\"1\":{\"440\":1}}],[\"也就是说\",{\"1\":{\"234\":1,\"595\":1,\"717\":1,\"752\":1}}],[\"也就是数据表之间的关系\",{\"1\":{\"91\":1}}],[\"也要消耗掉一个序号\",{\"1\":{\"19\":1}}],[\"也能够后续的读者展现出更高质量的文章\",{\"1\":{\"3\":1}}],[\"也希望读者朋友们保持一个批判性思维\",{\"1\":{\"3\":1}}],[\"也希望其他人在对本人文章进行参考时\",{\"1\":{\"3\":1}}],[\"也加上文章的来源\",{\"1\":{\"3\":1}}],[\"也不报错\",{\"1\":{\"646\":1}}],[\"也不乏有许多大佬\",{\"1\":{\"543\":1}}],[\"也不乏来源于互联网\",{\"1\":{\"3\":1}}],[\"也不预留内存空间\",{\"1\":{\"445\":1}}],[\"也不会随着报错而停止\",{\"1\":{\"401\":1}}],[\"也不会造成后续的指令不做\",{\"1\":{\"401\":1}}],[\"也不存在数据的移动问题\",{\"1\":{\"207\":1}}],[\"也不见得这些笔记没有价值\",{\"1\":{\"2\":1}}],[\"本课程采用spring当前最新发布的正式版本6\",{\"1\":{\"725\":1}}],[\"本机图像编译提前将\",{\"1\":{\"678\":1}}],[\"本机映像提供了一流的支持\",{\"1\":{\"678\":1}}],[\"本文章尚未提及\",{\"1\":{\"640\":1}}],[\"本文主要以\",{\"1\":{\"531\":1}}],[\"本章节我们就来自己实现\",{\"1\":{\"649\":1}}],[\"本章节会不断维护\",{\"1\":{\"640\":1}}],[\"本章节诞生\",{\"1\":{\"636\":1}}],[\"本集合会更新一些\",{\"1\":{\"546\":1}}],[\"本小节以查找\",{\"1\":{\"512\":1}}],[\"本小节的目的是为了让大家对\",{\"1\":{\"494\":1}}],[\"本地端口映射\",{\"1\":{\"537\":1}}],[\"本地仓库只有你拉取的镜像\",{\"1\":{\"509\":1}}],[\"本地进程缓存\",{\"0\":{\"282\":1}}],[\"本身\",{\"1\":{\"695\":1}}],[\"本身的停止命令即可\",{\"1\":{\"539\":1}}],[\"本身就是一个\",{\"1\":{\"539\":1}}],[\"本身可以包含字符串对象\",{\"1\":{\"471\":1}}],[\"本身是一个典型的\",{\"1\":{\"456\":1}}],[\"本身是有一个\",{\"1\":{\"387\":1}}],[\"本身没有排序功能\",{\"1\":{\"421\":1}}],[\"本质就是自动调一些方法\",{\"1\":{\"562\":1}}],[\"本质是\",{\"1\":{\"407\":1}}],[\"本质是字符串key\",{\"1\":{\"399\":1}}],[\"本质上来说\",{\"1\":{\"694\":1}}],[\"本质上是静态代理\",{\"1\":{\"663\":1}}],[\"本质上是class文件\",{\"1\":{\"612\":1}}],[\"本质上是模拟现实中解决问题的过程\",{\"1\":{\"573\":1}}],[\"本质上是一个东西\",{\"1\":{\"295\":1}}],[\"本质上就是从远程的仓库中下载镜像到本地\",{\"1\":{\"513\":1}}],[\"本质上就是\",{\"1\":{\"462\":1}}],[\"本质上都是对数据的缓存\",{\"1\":{\"285\":1}}],[\"本人所写的所有内容也并非100\",{\"1\":{\"3\":1}}],[\"本人根据互联网上的资料加上本人对知识的理解\",{\"1\":{\"3\":1}}],[\"本项目中的内容除了自己的日常学习\",{\"1\":{\"3\":1}}],[\"一站式\",{\"1\":{\"726\":1}}],[\"一直被广大开发人员作为\",{\"1\":{\"725\":1}}],[\"一会我们可以通过这个来实现db中存储国际化信息的功能\",{\"1\":{\"689\":1}}],[\"一种高级优化编译器\",{\"1\":{\"678\":1}}],[\"一种是dict\",{\"1\":{\"419\":1}}],[\"一种是ziplist\",{\"1\":{\"419\":1}}],[\"一方面\",{\"1\":{\"636\":1}}],[\"一堆java工具\",{\"1\":{\"611\":1}}],[\"一些能够被处理的异常可以通过捕获进行处理\",{\"1\":{\"600\":1}}],[\"一些自己的思考和想法\",{\"1\":{\"1\":1}}],[\"一匹马等就可以看做是动物的一个对象\",{\"1\":{\"571\":1}}],[\"一条小鱼\",{\"1\":{\"571\":1}}],[\"一只小猫\",{\"1\":{\"571\":1}}],[\"一定是在新的哈希表上进行的\",{\"1\":{\"440\":1}}],[\"一段时间内不能进行别的操作\",{\"1\":{\"440\":1}}],[\"一颗红黑树\",{\"1\":{\"409\":1}}],[\"一键启动所有服务\",{\"1\":{\"342\":1}}],[\"一键拷贝\",{\"1\":{\"297\":1,\"333\":1}}],[\"一样的元素的角标\",{\"1\":{\"434\":1}}],[\"一样\",{\"1\":{\"328\":1,\"551\":1}}],[\"一致则说明是同一数据集\",{\"1\":{\"302\":1}}],[\"一致性要求较高\",{\"1\":{\"366\":1}}],[\"一致性数据备份\",{\"0\":{\"141\":1}}],[\"一致性\",{\"1\":{\"76\":1,\"88\":1,\"259\":1,\"276\":1,\"733\":1}}],[\"一组被重复执行的语句称之为循环体\",{\"1\":{\"291\":1}}],[\"一旦发生异常\",{\"1\":{\"600\":1}}],[\"一旦发现master\",{\"1\":{\"328\":1}}],[\"一旦确定了缓存最大容量\",{\"1\":{\"275\":1}}],[\"一旦深入一点\",{\"1\":{\"2\":1}}],[\"一行行地判断\",{\"1\":{\"223\":1}}],[\"一行数据大小为1k=1024b=1024字节\",{\"1\":{\"128\":1}}],[\"一般认为\",{\"1\":{\"780\":1}}],[\"一般在开发中\",{\"1\":{\"700\":1}}],[\"一般放在resources目录下\",{\"1\":{\"687\":1}}],[\"一般不能自己解决\",{\"1\":{\"601\":1}}],[\"一般是从\",{\"1\":{\"510\":1}}],[\"一般是以阶树来衡量b树\",{\"1\":{\"120\":1}}],[\"一般会把一些常见的值放到一个共享对象中\",{\"1\":{\"471\":1}}],[\"一般为\",{\"1\":{\"467\":1}}],[\"一般为null\",{\"1\":{\"231\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"595\":1}}],[\"一般情况下使用的格式为\",{\"1\":{\"378\":1}}],[\"一般情况下都使用第一种方法\",{\"1\":{\"277\":1}}],[\"一般适用于网络带宽较大的情况下\",{\"1\":{\"303\":1}}],[\"一般\",{\"1\":{\"276\":1}}],[\"一般来说\",{\"1\":{\"275\":1,\"430\":1,\"580\":1}}],[\"一般读写性能比较高\",{\"1\":{\"271\":1}}],[\"一般分页查询时\",{\"1\":{\"220\":1}}],[\"一次购买多本图书\",{\"1\":{\"745\":1}}],[\"一次性加载多个配置文件的方式\",{\"1\":{\"723\":1}}],[\"一次性加载进数据库内\",{\"1\":{\"204\":1}}],[\"一次性可以插入多个数据\",{\"1\":{\"201\":1}}],[\"一次select的返回集又称为了另外一个select的数据集\",{\"1\":{\"100\":1}}],[\"一页中能存储16行这样的数据\",{\"1\":{\"128\":1}}],[\"一棵n阶b树的节点最多能存储n\",{\"1\":{\"120\":1}}],[\"一共支持\",{\"1\":{\"278\":1,\"458\":1}}],[\"一共有七种传播行为\",{\"1\":{\"745\":1}}],[\"一共有\",{\"1\":{\"95\":1}}],[\"一共执行的次数\",{\"1\":{\"29\":1}}],[\"一共执行的次数t\",{\"1\":{\"28\":1}}],[\"一对多的关系也可以看作多对一\",{\"1\":{\"93\":1}}],[\"一对多\",{\"0\":{\"93\":1}}],[\"一对一关系是我们比较常见的关系\",{\"1\":{\"92\":1}}],[\"一对一\",{\"0\":{\"92\":1}}],[\"一个完整的计算机网络主要由硬件\",{\"1\":{\"785\":1}}],[\"一个方法表示一个完成的功能\",{\"1\":{\"739\":1}}],[\"一个方法最多只能有一个可变参数\",{\"1\":{\"587\":1}}],[\"一个\",{\"1\":{\"667\":1}}],[\"一个无参构造函数和一个带有详细描述信息的构造函数\",{\"1\":{\"601\":1}}],[\"一个子类继承一个抽象类\",{\"1\":{\"591\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"592\":1}}],[\"一个类可以一次性实现多个接口\",{\"1\":{\"576\":1}}],[\"一个类在继承另外一个类后\",{\"1\":{\"576\":1}}],[\"一个类一次性继承多个类\",{\"1\":{\"576\":1}}],[\"一个java后端开发人员\",{\"1\":{\"543\":1}}],[\"一个镜像可以实例化多个容器\",{\"1\":{\"509\":1}}],[\"一个运行\",{\"1\":{\"474\":1}}],[\"一个用来记录\",{\"1\":{\"456\":1}}],[\"一个dict包含两个哈希表\",{\"1\":{\"438\":1}}],[\"一个包含字符串name的sds结构如下\",{\"1\":{\"428\":1}}],[\"一个占3个字节\",{\"1\":{\"423\":1}}],[\"一个链表\",{\"1\":{\"409\":1}}],[\"一个消费组有多个消费者\",{\"1\":{\"387\":1}}],[\"一个主节点\",{\"1\":{\"296\":1}}],[\"一个事务与其他事务隔离的程度称为隔离级别\",{\"1\":{\"744\":1}}],[\"一个事务\",{\"1\":{\"733\":1}}],[\"一个事务从开始到执行会经历以下三个阶段\",{\"1\":{\"401\":1}}],[\"一个事务按照指定条件查询数据时\",{\"1\":{\"260\":1}}],[\"一个事务先后读取同一条记录\",{\"1\":{\"260\":1}}],[\"一个事务读到另外一个事务还没有提交的数据\",{\"1\":{\"260\":1}}],[\"一个或者多个\",{\"1\":{\"231\":1}}],[\"一个升序一个降序\",{\"1\":{\"213\":1}}],[\"一个索引可以关联多个字段\",{\"1\":{\"129\":1}}],[\"一个学生可以选择多门课程\",{\"1\":{\"94\":1}}],[\"一个部门下有多个员工\",{\"1\":{\"93\":1}}],[\"一个mysql实例可以对应多个表空间\",{\"1\":{\"60\":1}}],[\"一个算法的设计取决于所选定的逻辑结构\",{\"1\":{\"35\":1}}],[\"一个数据元素可由若干数据项组成\",{\"1\":{\"34\":1}}],[\"但找到\",{\"1\":{\"752\":1}}],[\"但性能十分低下\",{\"1\":{\"744\":1}}],[\"但并发性越弱\",{\"1\":{\"744\":1}}],[\"但并不是所有的错误都是异常\",{\"1\":{\"594\":1}}],[\"但并不映射到主机\",{\"1\":{\"493\":1}}],[\"但通过指定classpath\",{\"1\":{\"723\":1}}],[\"但通常至少有一个默认构造方法\",{\"1\":{\"588\":1}}],[\"但更多的时候它都是隐式创建\",{\"1\":{\"709\":1}}],[\"但更多的时候它都是隐式地创建的\",{\"1\":{\"708\":1}}],[\"但更多时候选择redis数据库\",{\"1\":{\"239\":1}}],[\"但足够轻量\",{\"1\":{\"679\":1}}],[\"但在读者的实际学习中出现的问题\",{\"1\":{\"640\":1}}],[\"但在实际中常常使用到\",{\"1\":{\"534\":1}}],[\"但为什么我还要造一些质量或许并不高的轮子呢\",{\"1\":{\"636\":1}}],[\"但构造器并不是让其用来构造对象的\",{\"1\":{\"592\":1}}],[\"但一个类只能继承一个抽象类\",{\"1\":{\"592\":1}}],[\"但只有在扩展web应用程序存档且资源实际位于文件系统上时才允许java\",{\"1\":{\"710\":1}}],[\"但只有最后一次写操作才有意义\",{\"1\":{\"322\":1}}],[\"但只能被实现子类的对象调用\",{\"1\":{\"590\":1}}],[\"但这些依赖访问策略要么需要使用\",{\"1\":{\"719\":1}}],[\"但这些方法的参数类型不同\",{\"1\":{\"586\":1}}],[\"但这部分数据依然留在缓存中\",{\"1\":{\"275\":1}}],[\"但由于其被嵌套在外部类中\",{\"1\":{\"580\":1}}],[\"但由于编码方式只能写一种\",{\"1\":{\"421\":1}}],[\"但可以追加参数\",{\"1\":{\"493\":1}}],[\"但端口映射并不是唯一把\",{\"1\":{\"484\":1}}],[\"但它也可以用于生产环境的部署\",{\"1\":{\"483\":1}}],[\"但它有个缺点就是消息无法持久化\",{\"1\":{\"387\":1}}],[\"但两次fast模式间隔不低于2ms\",{\"1\":{\"457\":1}}],[\"但批量指令并非原子化的操作\",{\"1\":{\"401\":1}}],[\"但\",{\"1\":{\"401\":1}}],[\"但无法记录历史消息\",{\"1\":{\"387\":1}}],[\"但底层数据结构却差别很大\",{\"1\":{\"382\":1}}],[\"但主要分为三种类型\",{\"1\":{\"373\":1}}],[\"但如果\",{\"1\":{\"303\":1}}],[\"但还是有所区别\",{\"1\":{\"283\":1}}],[\"但不常用\",{\"1\":{\"763\":1}}],[\"但不执行\",{\"1\":{\"386\":1}}],[\"但不包含写入数据的语句\",{\"1\":{\"256\":1}}],[\"但不支持行锁\",{\"1\":{\"237\":1}}],[\"但不取值\",{\"1\":{\"223\":1}}],[\"但长度为\",{\"1\":{\"131\":1}}],[\"但突然恢复以后\",{\"1\":{\"18\":1}}],[\"但是我们设置的回滚策略是\",{\"1\":{\"743\":1}}],[\"但是用户的余额没有更新\",{\"1\":{\"738\":1}}],[\"但是用户进程会一直发起请求\",{\"1\":{\"405\":1}}],[\"但是inputstreamresource除外\",{\"1\":{\"705\":1}}],[\"但是ip层不提供这样的流机制\",{\"1\":{\"16\":1}}],[\"但是每次测试都需要重复编写\",{\"1\":{\"696\":1}}],[\"但是无运行时性能加成\",{\"1\":{\"677\":1}}],[\"但是相对启动速度较慢\",{\"1\":{\"677\":1}}],[\"但是由于代码都写死了\",{\"1\":{\"657\":1}}],[\"但是由于数据查询的操作使用频繁\",{\"1\":{\"181\":1}}],[\"但是本人所使用的电脑是\",{\"1\":{\"636\":1}}],[\"但是并没有设置其环境变量\",{\"1\":{\"604\":1}}],[\"但是并没有进行捕获处理\",{\"1\":{\"598\":1}}],[\"但是构造方法不能用于实例化\",{\"1\":{\"591\":1}}],[\"但是抽象类不一定含有抽象方法\",{\"1\":{\"591\":1}}],[\"但是支持多重继承\",{\"1\":{\"576\":1}}],[\"但是导出的结果是镜像的配置文件\",{\"1\":{\"525\":1}}],[\"但是运行结果并不与教程相符合的情况\",{\"1\":{\"494\":1}}],[\"但是过多的层也会导致镜像过大\",{\"1\":{\"491\":1}}],[\"但是要在配置文件里描述哪些组件需要哪些服务\",{\"1\":{\"753\":1}}],[\"但是要正确实现这些命令\",{\"1\":{\"466\":1}}],[\"但是要自己保证递增性\",{\"1\":{\"388\":1}}],[\"但是与传统的链表相比有些差异\",{\"1\":{\"453\":1}}],[\"但是申请内存必须是连续空间\",{\"1\":{\"446\":1}}],[\"但是进行增加操作\",{\"1\":{\"440\":1}}],[\"但是目前\",{\"1\":{\"423\":1}}],[\"但是目前每个服务之间都是独立的\",{\"1\":{\"343\":1}}],[\"但是依然要遍历所有的\",{\"1\":{\"412\":1}}],[\"但是依然有两个问题没有解决\",{\"1\":{\"339\":1}}],[\"但是时间通知的模式有两种\",{\"1\":{\"410\":1}}],[\"但是不确定是那个\",{\"1\":{\"406\":1}}],[\"但是不能重写\",{\"1\":{\"586\":1}}],[\"但是不能授权到数据库特定行和特定的列上\",{\"1\":{\"169\":1}}],[\"但是不能深究\",{\"1\":{\"2\":1}}],[\"但是性能提升并不明显\",{\"1\":{\"408\":1}}],[\"但是性能并没有得到提高\",{\"1\":{\"405\":1}}],[\"但是性能越低\",{\"1\":{\"261\":1}}],[\"但是还没有\",{\"1\":{\"387\":1}}],[\"但是允许有多个单词形成层级结构\",{\"1\":{\"378\":1}}],[\"但是这种方式在我们使用过程中不太直观\",{\"1\":{\"373\":1}}],[\"但是这里还是想整理成方法论\",{\"1\":{\"23\":1}}],[\"但是对于我\",{\"1\":{\"543\":1}}],[\"但是对于innodb引擎\",{\"1\":{\"221\":1}}],[\"但是对命令的执行依然是单线程\",{\"1\":{\"367\":1}}],[\"但是从代码中看\",{\"1\":{\"354\":1}}],[\"但是多线程环境下必须使用jedis连接池\",{\"1\":{\"349\":1}}],[\"但是也无法满足如\",{\"1\":{\"320\":1}}],[\"但是也要占用一个序号\",{\"1\":{\"17\":1}}],[\"但是\",{\"1\":{\"283\":1,\"400\":1,\"427\":1,\"443\":1}}],[\"但是成本也会更高\",{\"1\":{\"275\":1}}],[\"但是两次读取的数据不一致\",{\"1\":{\"260\":1}}],[\"但是在高并发的访问下\",{\"1\":{\"414\":1}}],[\"但是在插入操作时\",{\"1\":{\"260\":1}}],[\"但是在并发环境下\",{\"1\":{\"260\":1}}],[\"但是在mysql中\",{\"1\":{\"245\":1}}],[\"但是repeat是满足条件则推出和do\",{\"1\":{\"252\":1}}],[\"但是存储过程中的sql语句\",{\"1\":{\"242\":1}}],[\"但是仍耗费了很长时间\",{\"1\":{\"229\":1}}],[\"但是仍要占用一个序号\",{\"1\":{\"17\":1}}],[\"但是有时候我们对于sql已经优化到了极致\",{\"1\":{\"229\":1}}],[\"但是如果该断点下面代码还有断点则停在下一个断点上\",{\"1\":{\"556\":1}}],[\"但是如果键值对有几百万\",{\"1\":{\"440\":1}}],[\"但是如果对age字段建立索引\",{\"1\":{\"212\":1}}],[\"但是如果下一次想要插入的数据主键不为最大值\",{\"1\":{\"207\":1}}],[\"但是一次性插入的数据量不建议超过500\",{\"1\":{\"201\":1}}],[\"但是一个员工只能属于一个部门\",{\"1\":{\"93\":1}}],[\"但是常用的就以下几种\",{\"1\":{\"198\":1}}],[\"但是没有筛选条件时则会删除整张表的所有数据\",{\"1\":{\"184\":1}}],[\"但是没有筛选条件时则会修改整张表的所有数据\",{\"1\":{\"183\":1}}],[\"但是例如字段自增的序号和建立的一些索引等是不会被清除的\",{\"1\":{\"179\":1}}],[\"但是实际存储的\",{\"1\":{\"354\":1}}],[\"但是实际上的操作流程是将表删除\",{\"1\":{\"179\":1}}],[\"但是实际的底层在b+树内查询了两次\",{\"1\":{\"127\":1}}],[\"但是会阻塞写\",{\"1\":{\"145\":1}}],[\"但是需要保证or\",{\"1\":{\"165\":1}}],[\"但是需要的数据都在索引列中能找到\",{\"1\":{\"133\":1}}],[\"但是需要回表查询数据\",{\"1\":{\"133\":1}}],[\"但是其可以对位进⾏操作\",{\"1\":{\"399\":1}}],[\"但是其为二级索引\",{\"1\":{\"128\":1}}],[\"但是其本质上仍然是二叉树\",{\"1\":{\"119\":1}}],[\"但是数据并未被修改过\",{\"1\":{\"63\":1}}],[\"但是tcp连接是全双工的\",{\"1\":{\"19\":1}}],[\"但是服务端还可以向客户端发送数据\",{\"1\":{\"19\":1}}],[\"但是三次握手已经足够保证连接可靠\",{\"1\":{\"18\":1}}],[\"但是网络信道并不可靠\",{\"1\":{\"18\":1}}],[\"但时并未做到完美的点\",{\"1\":{\"3\":1}}],[\"但也绝不是简单的复制粘帖\",{\"1\":{\"3\":1}}],[\"但后期的维护和补丁也不可或缺\",{\"1\":{\"2\":1}}],[\"随后才能删除该容器\",{\"1\":{\"526\":1}}],[\"随后就可以使用该镜像创建\",{\"1\":{\"515\":1}}],[\"随机分配到不同master\",{\"1\":{\"343\":1}}],[\"随着rehash最终为空\",{\"1\":{\"440\":1}}],[\"随着记录在\",{\"1\":{\"302\":1}}],[\"随着服务的不断运行\",{\"1\":{\"275\":1}}],[\"随着时间的变迁\",{\"1\":{\"1\":1}}],[\"随便提起来一些知识点也都能说上两嘴\",{\"1\":{\"2\":1}}],[\"会被回滚\",{\"1\":{\"733\":1}}],[\"会造成异常\",{\"1\":{\"665\":1}}],[\"会造成大量的磁盘io\",{\"1\":{\"64\":1}}],[\"会继承目标类\",{\"1\":{\"663\":1}}],[\"会报错\",{\"1\":{\"587\":1}}],[\"会先执行一次循环体内的语句\",{\"1\":{\"570\":1}}],[\"会弹出进入哪个方法\",{\"1\":{\"551\":1}}],[\"会显示光标所在的类信息摘要\",{\"1\":{\"549\":1}}],[\"会自动从扫描指定的包\",{\"1\":{\"643\":1}}],[\"会自动调用\",{\"1\":{\"600\":1}}],[\"会自动为该类提供一个默认的无参数构造方法\",{\"1\":{\"588\":1}}],[\"会自动为其进行命名\",{\"1\":{\"485\":1}}],[\"会自动过滤已经删除的消息\",{\"1\":{\"387\":1,\"392\":1,\"393\":1}}],[\"会执行一条\",{\"1\":{\"480\":1}}],[\"会由命令回复处理器进行处理\",{\"1\":{\"462\":1}}],[\"会判断是客户端可读还是服务端可读\",{\"1\":{\"462\":1}}],[\"会统计每个\",{\"1\":{\"458\":1}}],[\"会设置一个定时任务\",{\"1\":{\"457\":1}}],[\"会基于原哈希表创建一个大小等于\",{\"1\":{\"439\":1}}],[\"会做哈希收缩\",{\"1\":{\"439\":1}}],[\"会确保\",{\"1\":{\"435\":1}}],[\"会不会做一个降级操作呢\",{\"1\":{\"434\":1}}],[\"会不断检查您的\",{\"1\":{\"326\":1}}],[\"会不断对知识进行迭代更新\",{\"1\":{\"1\":1}}],[\"会采用\",{\"1\":{\"420\":1}}],[\"会发出\",{\"1\":{\"413\":1}}],[\"会复杂一些\",{\"1\":{\"410\":1}}],[\"会重复通知多次\",{\"1\":{\"410\":1}}],[\"会通知用户进程\",{\"1\":{\"406\":1}}],[\"会使cpu空转\",{\"1\":{\"406\":1}}],[\"会使进程阻塞\",{\"1\":{\"406\":1}}],[\"会在处理客户端命令的方法\",{\"1\":{\"458\":1}}],[\"会在内核创建eventpoll结构体\",{\"1\":{\"409\":1}}],[\"会在用户空间和内核空间都加入缓冲区\",{\"1\":{\"403\":1}}],[\"会在什么时候执行\",{\"1\":{\"321\":1}}],[\"会进入redis\",{\"1\":{\"374\":1}}],[\"会带来额外的资源消耗\",{\"1\":{\"356\":1}}],[\"会根据当前不同文件类型使用不同的注释符号\",{\"1\":{\"549\":1}}],[\"会根据\",{\"1\":{\"345\":1}}],[\"会把每一个\",{\"1\":{\"345\":1}}],[\"会将\",{\"1\":{\"432\":1}}],[\"会将最新信息推送给\",{\"1\":{\"326\":1}}],[\"会将一个\",{\"1\":{\"326\":1}}],[\"会将数据合并后去重\",{\"1\":{\"99\":1}}],[\"会有压缩\",{\"1\":{\"323\":1}}],[\"会记录对同一个\",{\"1\":{\"322\":1}}],[\"会阻塞所有命令\",{\"1\":{\"321\":1}}],[\"会对数据库产生冲击\",{\"1\":{\"281\":1}}],[\"会对读取的记录进行加锁\",{\"1\":{\"82\":1}}],[\"会话变量\",{\"1\":{\"244\":2}}],[\"会行溢出\",{\"1\":{\"207\":1}}],[\"会讲数据表内的所有数据清空\",{\"1\":{\"179\":1}}],[\"会讲全部的数据直接合并在一起\",{\"1\":{\"99\":1}}],[\"会导致进程卡顿\",{\"1\":{\"677\":1}}],[\"会导致只能在本地访问\",{\"1\":{\"371\":1}}],[\"会导致主从延迟\",{\"1\":{\"142\":1}}],[\"会导致该记录的\",{\"1\":{\"86\":1}}],[\"会影响增删改茶的效率\",{\"1\":{\"136\":1}}],[\"会选择该索引完成本次查询\",{\"1\":{\"135\":1}}],[\"会退化成为一个链表\",{\"1\":{\"118\":1}}],[\"会创建更多的连接\",{\"1\":{\"18\":1}}],[\"会给出参考的地址\",{\"1\":{\"3\":1}}],[\"会让你产生一种所有知识都懂假象\",{\"1\":{\"2\":1}}],[\"会让自己陷入一种自我麻痹且极度自信的状态\",{\"1\":{\"2\":1}}],[\"零散化地去学习\",{\"1\":{\"2\":1}}],[\"碎片化\",{\"1\":{\"2\":1}}],[\"目标方法的返回值一定要返回给外界调用者\",{\"1\":{\"670\":1}}],[\"目标方法的执行\",{\"1\":{\"670\":1}}],[\"目标操作\",{\"1\":{\"666\":2}}],[\"目标对象\",{\"1\":{\"665\":1}}],[\"目标对象实现的所有接口的class对象所组成的数组\",{\"1\":{\"658\":1}}],[\"目标\",{\"1\":{\"656\":1,\"661\":1}}],[\"目录下\",{\"1\":{\"634\":1}}],[\"目录\",{\"1\":{\"553\":1}}],[\"目录创建文件夹\",{\"1\":{\"312\":1}}],[\"目录结构\",{\"1\":{\"307\":1}}],[\"目的是为了提高\",{\"1\":{\"463\":1}}],[\"目的是为了掌握知识点\",{\"1\":{\"2\":1}}],[\"目的都是为了加速数据的读取\",{\"1\":{\"285\":1}}],[\"目的\",{\"0\":{\"48\":1},\"1\":{\"782\":1}}],[\"目前业界除了这种在jvm中进行aot的方案\",{\"1\":{\"679\":1}}],[\"目前市面上的docker要么过于繁琐\",{\"1\":{\"543\":1}}],[\"目前\",{\"1\":{\"282\":1}}],[\"目前知识星球还在建设之中\",{\"1\":{\"4\":1}}],[\"目前在互联网上有很多大佬开源了他们的学习笔记\",{\"1\":{\"2\":1}}],[\"十分完美且科学\",{\"1\":{\"2\":1}}],[\"做出不同的处理方式\",{\"1\":{\"600\":1}}],[\"做压缩\",{\"1\":{\"450\":1}}],[\"做数据同步\",{\"1\":{\"302\":1}}],[\"做好数据的基础格式校验\",{\"1\":{\"272\":1}}],[\"做笔记并不是目的\",{\"1\":{\"2\":1}}],[\"做笔记其实并不是需要一步到位\",{\"1\":{\"2\":1}}],[\"做的堪称完美\",{\"1\":{\"2\":1}}],[\"以能够相互共享资源的方式互联起来的自治计算机系统的集合\",{\"1\":{\"782\":1}}],[\"以非事务方式运行\",{\"1\":{\"745\":2}}],[\"以上的错误是因为userdao接口下有两个实现类导致的\",{\"1\":{\"647\":1}}],[\"以上构造方法和setter方法都没有提供\",{\"1\":{\"646\":1}}],[\"以上单机并发连接的高性能\",{\"1\":{\"306\":1}}],[\"以替代原来的数组\",{\"1\":{\"627\":1}}],[\"以lock加锁为例\",{\"1\":{\"600\":1}}],[\"以告知调用者当前的程序状态\",{\"1\":{\"599\":1}}],[\"以外的异常\",{\"1\":{\"595\":1}}],[\"以满足自身的需求\",{\"1\":{\"576\":1}}],[\"以最终创建一个镜像\",{\"1\":{\"489\":1}}],[\"以确保在不同环境中的一致性和可移植性\",{\"1\":{\"489\":1}}],[\"以下显示了resource接口定义的方法\",{\"1\":{\"705\":1}}],[\"以下是docker的一些主要功能和用途\",{\"1\":{\"504\":1}}],[\"以下是一个网络配置的例子\",{\"1\":{\"483\":1}}],[\"以下sql语句中\",{\"1\":{\"128\":1}}],[\"以便实现代码的重用\",{\"1\":{\"591\":1}}],[\"以便外部访问\",{\"1\":{\"482\":1}}],[\"以便于后续的理解和学习\",{\"1\":{\"106\":1}}],[\"以便于形成自己的知识体系\",{\"1\":{\"1\":1}}],[\"以秒为单位记录最近一次访问时间\",{\"1\":{\"458\":1}}],[\"以\",{\"1\":{\"423\":1,\"427\":1,\"430\":1,\"476\":1}}],[\"以crlf\",{\"1\":{\"423\":1}}],[\"以节省内存\",{\"1\":{\"420\":1}}],[\"以给定的经纬度为中⼼\",{\"1\":{\"398\":1}}],[\"以阻塞或非阻塞方式获取消息列表\",{\"1\":{\"387\":1,\"394\":1}}],[\"以前的网络模型都是单线程的\",{\"1\":{\"462\":1}}],[\"以前\",{\"1\":{\"295\":1}}],[\"以限制其内存占用\",{\"1\":{\"283\":1}}],[\"以减少在并发环境下\",{\"1\":{\"225\":1}}],[\"以分号结尾\",{\"1\":{\"175\":1}}],[\"以使其符合视图的定义\",{\"1\":{\"166\":1}}],[\"以此类推\",{\"1\":{\"131\":1,\"193\":1}}],[\"以此类推即可\",{\"1\":{\"32\":1}}],[\"以其最大度数作为b树的阶数\",{\"1\":{\"120\":1}}],[\"以循环方式写入重做日志文件\",{\"1\":{\"74\":1}}],[\"以后都交给spring来维护\",{\"1\":{\"753\":1}}],[\"以后引入了可变参数\",{\"1\":{\"587\":1}}],[\"以后每次\",{\"1\":{\"412\":1}}],[\"以后\",{\"1\":{\"64\":1}}],[\"以及bean对象中属性的赋值\",{\"1\":{\"694\":1}}],[\"以及订阅这个频道的三个客户端\",{\"1\":{\"383\":1}}],[\"以及\",{\"1\":{\"306\":2}}],[\"以及相关的安全方案\",{\"1\":{\"233\":1}}],[\"以及两张表交集部分的数据\",{\"1\":{\"97\":2}}],[\"以及有哪些多表查询的情况\",{\"1\":{\"91\":1}}],[\"以及重做日志文件\",{\"1\":{\"77\":1}}],[\"以及每轮循环的变化值\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"以及最后的解决方案\",{\"1\":{\"1\":1}}],[\"以为报文段丢失\",{\"1\":{\"18\":1}}],[\"在获取bean的时候得到的并不是class属性中配置的这个类的对象\",{\"1\":{\"765\":1}}],[\"在获取数据以后\",{\"1\":{\"357\":1}}],[\"在ioc容器中匹配某一个bean\",{\"1\":{\"766\":1}}],[\"在ioc容器中配置后置处理器\",{\"1\":{\"764\":1}}],[\"在ioc容器中\",{\"1\":{\"763\":1}}],[\"在in之后的列表中\",{\"1\":{\"189\":1}}],[\"在innodb引擎的表中\",{\"1\":{\"231\":1}}],[\"在innodb引擎中\",{\"1\":{\"142\":1}}],[\"在innodb中引入了意向锁\",{\"1\":{\"147\":1}}],[\"在innodb存储引擎中\",{\"1\":{\"75\":1,\"126\":1,\"206\":1}}],[\"在insert\",{\"1\":{\"85\":1}}],[\"在为对象类型属性赋值之前\",{\"1\":{\"758\":1}}],[\"在满足\",{\"1\":{\"752\":1}}],[\"在通过\",{\"1\":{\"752\":1}}],[\"在checkout\",{\"1\":{\"745\":1}}],[\"在service类中有a\",{\"1\":{\"745\":1}}],[\"在spring中可以通过配置bean标签的scope属性来指定bean的作用域范围\",{\"1\":{\"763\":1}}],[\"在spring中有多种校验的方式\",{\"1\":{\"680\":1}}],[\"在spring的配置文件中添加配置\",{\"1\":{\"739\":1}}],[\"在spring的配置文件中配置\",{\"1\":{\"665\":1}}],[\"在spring配置文件中引入tx命名空间\",{\"1\":{\"739\":1}}],[\"在transaction01执行期间\",{\"1\":{\"744\":1}}],[\"在bookcontroller中添加方法\",{\"1\":{\"745\":1}}],[\"在bookserviceimpl的buybook\",{\"1\":{\"739\":1}}],[\"在beans\",{\"1\":{\"737\":1}}],[\"在开发过程中可以根据需求有选择性地使用所需要的模块\",{\"1\":{\"727\":1}}],[\"在开发中\",{\"1\":{\"680\":1}}],[\"在项目根路径下创建文件\",{\"1\":{\"707\":1}}],[\"在项目编写时\",{\"1\":{\"636\":1}}],[\"在之前的测试方法中\",{\"1\":{\"696\":1}}],[\"在之前的章节中\",{\"1\":{\"534\":1}}],[\"在构建本机可执行文件期间处理的\",{\"1\":{\"679\":1}}],[\"在云原生时代的需求\",{\"1\":{\"677\":1}}],[\"在方法返回值部分\",{\"1\":{\"667\":1}}],[\"在方法参数列表部分\",{\"1\":{\"667\":3}}],[\"在方法名部分\",{\"1\":{\"667\":2}}],[\"在类路径下创建文件codermast\",{\"1\":{\"708\":1}}],[\"在类名的部分\",{\"1\":{\"667\":2}}],[\"在类中嵌套的一种类\",{\"1\":{\"580\":1}}],[\"在包名的部分\",{\"1\":{\"667\":2}}],[\"在被代理的目标方法最终结束后执行\",{\"1\":{\"661\":1,\"666\":1}}],[\"在被代理的目标方法异常结束后执行\",{\"1\":{\"661\":1,\"666\":1}}],[\"在被代理的目标方法成功结束后执行\",{\"1\":{\"661\":1,\"666\":1}}],[\"在被代理的目标方法前执行\",{\"1\":{\"661\":1,\"666\":1}}],[\"在同一个切面中使用\",{\"1\":{\"668\":1}}],[\"在同一个项目中\",{\"1\":{\"661\":1}}],[\"在同一系统上运行\",{\"1\":{\"474\":1}}],[\"在不修改源代码的基础上增强代码功能\",{\"1\":{\"726\":1}}],[\"在不修改源代码的情况下\",{\"1\":{\"660\":1}}],[\"在不同切面中使用\",{\"1\":{\"668\":1}}],[\"在不同的人生阶段对于同一个事物的看法是不同的\",{\"1\":{\"1\":1}}],[\"在实际的\",{\"1\":{\"658\":1}}],[\"在实际开发中往往会结合两者来使用\",{\"1\":{\"323\":1}}],[\"在数学中\",{\"1\":{\"658\":1}}],[\"在数据库字典中查找和他相对应的redisobject\",{\"1\":{\"470\":1}}],[\"在数据库中将用户的余额修改为100元\",{\"1\":{\"745\":1}}],[\"在数据库中\",{\"1\":{\"138\":1}}],[\"在数据之外\",{\"1\":{\"115\":1}}],[\"在源代码中嵌入补充信息\",{\"1\":{\"641\":1}}],[\"在解决问题后\",{\"1\":{\"636\":1}}],[\"在解决这些问题的过程中我也花费了大量的时间和精力\",{\"1\":{\"636\":1}}],[\"在前端项目的部署过程中也遇到了很多困难\",{\"1\":{\"636\":1}}],[\"在前面的代码中用了system\",{\"1\":{\"600\":1}}],[\"在程序运行前编译\",{\"1\":{\"677\":1}}],[\"在程序运行之前\",{\"1\":{\"677\":1}}],[\"在程序运行时\",{\"1\":{\"677\":1}}],[\"在程序运行时需要使用\",{\"1\":{\"614\":1}}],[\"在程序中被抽象为具有属性和方法的实例\",{\"1\":{\"579\":1}}],[\"在确保自己都是正确操作的情况下\",{\"1\":{\"608\":1}}],[\"在系统命令行中\",{\"1\":{\"608\":1}}],[\"在电脑搜索栏搜索编辑环境变量\",{\"1\":{\"606\":1}}],[\"在特定的情况下\",{\"1\":{\"600\":1}}],[\"在一个会话范围内有效\",{\"1\":{\"763\":1}}],[\"在一个请求范围内有效\",{\"1\":{\"763\":1}}],[\"在一个bean中再声明一个bean就是内部bean\",{\"1\":{\"758\":1}}],[\"在一个\",{\"1\":{\"600\":1}}],[\"在发生异常时不仅仅可以进行异常的声明\",{\"1\":{\"600\":1}}],[\"在吃饭\",{\"1\":{\"579\":1}}],[\"在代码文件上\",{\"1\":{\"553\":2}}],[\"在打开的文件名上按此快捷键\",{\"1\":{\"551\":1}}],[\"在打开的文件标题上\",{\"1\":{\"549\":1}}],[\"在查找模式下\",{\"1\":{\"551\":1,\"552\":2,\"556\":1}}],[\"在光标所在的错误代码处显示错误信息\",{\"1\":{\"549\":1}}],[\"在端口后面加上\",{\"1\":{\"537\":1}}],[\"在需要使用\",{\"1\":{\"532\":1}}],[\"在容器停止运行后\",{\"1\":{\"527\":1}}],[\"在退出容器终端后\",{\"1\":{\"524\":2}}],[\"在新容器内指定一个伪终端或终端\",{\"1\":{\"520\":1}}],[\"在镜像导入之前\",{\"1\":{\"518\":1}}],[\"在性能上大大高于普通虚拟机\",{\"1\":{\"505\":1}}],[\"在宿主机的基础上\",{\"1\":{\"505\":1}}],[\"在这期间可能会需要输入电脑的密码\",{\"1\":{\"498\":1}}],[\"在这个例子中\",{\"1\":{\"483\":1,\"577\":1}}],[\"在这个配置中\",{\"1\":{\"483\":1}}],[\"在这个示例中\",{\"1\":{\"482\":1}}],[\"在本章节中的所有关于\",{\"1\":{\"494\":1}}],[\"在上面的例子中\",{\"1\":{\"537\":1}}],[\"在上面的\",{\"1\":{\"519\":1}}],[\"在上面的示例中\",{\"1\":{\"490\":1}}],[\"在上一个章节中我们学习了\",{\"1\":{\"484\":1}}],[\"在上一篇中\",{\"1\":{\"354\":1}}],[\"在空目录下\",{\"1\":{\"490\":1}}],[\"在创建\",{\"1\":{\"695\":1}}],[\"在创建一个容器的时候\",{\"1\":{\"485\":1}}],[\"在创建表或者创建索引时指定\",{\"1\":{\"208\":1}}],[\"在创建表时\",{\"1\":{\"70\":1}}],[\"在docker\",{\"1\":{\"482\":1,\"483\":2}}],[\"在该容器内运行\",{\"1\":{\"515\":1}}],[\"在该样例中我们定义了\",{\"1\":{\"480\":1}}],[\"在该索引中已经全部能够找到\",{\"1\":{\"133\":1}}],[\"在部署应用时\",{\"1\":{\"477\":1}}],[\"在启动的容器里执行的命令以上命令\",{\"1\":{\"476\":1}}],[\"在设置中的\",{\"1\":{\"475\":1}}],[\"在设计时就很容易想到要尽量让每个元素按照实际的内容大小存储\",{\"1\":{\"443\":1}}],[\"在国内访问不稳定\",{\"1\":{\"475\":1}}],[\"在使用构造器注入时和\",{\"1\":{\"755\":1}}],[\"在使用\",{\"1\":{\"509\":1,\"524\":1,\"642\":1,\"643\":1,\"751\":1,\"754\":1,\"762\":1}}],[\"在使用时我们需要拉取\",{\"1\":{\"475\":1}}],[\"在使用redis\",{\"1\":{\"374\":1}}],[\"在内\",{\"1\":{\"471\":1}}],[\"在内核中采用链表\",{\"1\":{\"408\":1}}],[\"在底层就需要调用不同的视线方式\",{\"1\":{\"466\":1}}],[\"在底层将数据序列化处理以后\",{\"1\":{\"354\":1}}],[\"在命令读处理和命令的响应两个部分引入了多线程\",{\"1\":{\"463\":1}}],[\"在命令行中\",{\"1\":{\"242\":1}}],[\"在ae\",{\"1\":{\"461\":1}}],[\"在核心网络模型中引入多线程\",{\"1\":{\"460\":1}}],[\"在两个重要的时间节点上引入了多线程的支持\",{\"1\":{\"460\":1}}],[\"在普通数组中每个元素定长\",{\"1\":{\"443\":1}}],[\"在做特殊\",{\"1\":{\"438\":1}}],[\"在做题过程中\",{\"1\":{\"23\":1}}],[\"在哈希法\",{\"1\":{\"437\":1}}],[\"在添加数据时会进行扩容操作\",{\"1\":{\"434\":1}}],[\"在当前类需要用到其他类的对象\",{\"1\":{\"753\":1}}],[\"在当前方法中抛出一个异常可以使用\",{\"1\":{\"599\":1}}],[\"在当前文件跳转到指定行处\",{\"1\":{\"549\":1}}],[\"在当前文件进行文本替换\",{\"1\":{\"549\":1}}],[\"在当前文件进行文本查找\",{\"1\":{\"549\":1}}],[\"在当前\",{\"1\":{\"434\":1}}],[\"在后续的章节中会一一解决这些问题\",{\"1\":{\"494\":1}}],[\"在后续的章节中会进行详细说明\",{\"1\":{\"487\":1}}],[\"在后\",{\"1\":{\"421\":1}}],[\"在异步\",{\"1\":{\"414\":1}}],[\"在单线程情况下\",{\"1\":{\"406\":1}}],[\"在单线程环境中可以不使用jedis连接池\",{\"1\":{\"349\":1}}],[\"在单线程环境下\",{\"1\":{\"260\":1}}],[\"在第二个阶段是阻塞的\",{\"1\":{\"405\":1}}],[\"在第一个实际节点之间附加一个头结点\",{\"1\":{\"39\":1}}],[\"在输⼊元素的数量或者体积⾮常⾮常⼤时\",{\"1\":{\"400\":1}}],[\"在地图上就是经纬度\",{\"1\":{\"398\":1}}],[\"在我们首次使用\",{\"1\":{\"387\":1}}],[\"在我们平常的业务中基本只会使用到redis的基本数据类型\",{\"1\":{\"377\":1,\"397\":1}}],[\"在linux的控制台输入命令以启动nginx\",{\"1\":{\"308\":1}}],[\"在最下面加入两行\",{\"1\":{\"307\":1}}],[\"在5\",{\"1\":{\"299\":1}}],[\"在函数参数列表中使用三点\",{\"1\":{\"293\":1}}],[\"在布尔表达式为\",{\"1\":{\"292\":2}}],[\"在条件进行判断前循环体都会执行一次\",{\"1\":{\"291\":1}}],[\"在条件表达式中相当于\",{\"1\":{\"290\":1}}],[\"在判断条件为\",{\"1\":{\"291\":1}}],[\"在正式介绍项目之前\",{\"1\":{\"636\":1}}],[\"在正式介绍redis数据结构及其操作指令之前\",{\"1\":{\"363\":1}}],[\"在正式安装\",{\"1\":{\"306\":1}}],[\"在正式了解变量之前\",{\"1\":{\"290\":1}}],[\"在正式学习数据库的多表查询之前\",{\"1\":{\"91\":1}}],[\"在\",{\"1\":{\"289\":1,\"290\":1,\"295\":2,\"297\":3,\"303\":1,\"311\":2,\"312\":2,\"333\":1,\"336\":1,\"341\":1,\"362\":1,\"400\":1,\"406\":1,\"418\":2,\"423\":1,\"428\":1,\"460\":1,\"462\":1,\"466\":1,\"467\":1,\"496\":1,\"512\":1,\"549\":1,\"550\":1,\"551\":2,\"553\":1,\"556\":3,\"580\":1,\"581\":1,\"598\":1,\"634\":1,\"650\":1,\"664\":1,\"678\":1,\"726\":2,\"752\":1,\"755\":1,\"759\":1,\"760\":2}}],[\"在默认情况下\",{\"1\":{\"285\":1}}],[\"在牺牲了功能和性能的代价下使代码更加规范\",{\"1\":{\"283\":1}}],[\"在某个调用的方法名上使用会跳到具体的实现处\",{\"1\":{\"552\":1}}],[\"在某个范围之内\",{\"1\":{\"189\":1}}],[\"在某些场景下\",{\"1\":{\"283\":1}}],[\"在删除缓存\",{\"1\":{\"277\":1}}],[\"在操作缓存时\",{\"1\":{\"277\":1}}],[\"在更新数据库的同时更新缓存\",{\"1\":{\"277\":1}}],[\"在修改数据库的同时\",{\"1\":{\"276\":1}}],[\"在存储过程和函数中可以使用游标对结果集进行循环的处理\",{\"1\":{\"254\":1}}],[\"在存储元素信息时\",{\"1\":{\"35\":1}}],[\"在赋值时我们能看到有两种写法\",{\"1\":{\"245\":1}}],[\"在用的时候直接用\",{\"1\":{\"245\":1}}],[\"在并发条件下要求数据的一致性\",{\"1\":{\"239\":1}}],[\"在并发访问的情况下\",{\"1\":{\"86\":1}}],[\"在选择存储引擎时\",{\"1\":{\"239\":1}}],[\"在分组操作时\",{\"1\":{\"216\":1}}],[\"在没有建立任何索引的情况下\",{\"1\":{\"212\":1}}],[\"在order\",{\"1\":{\"211\":1}}],[\"在触发器内所执行的sql中\",{\"1\":{\"161\":1}}],[\"在resourceloader接口里有如下方法\",{\"1\":{\"715\":1}}],[\"在resource目录下创建两个配置文件\",{\"1\":{\"687\":1}}],[\"在resources目录创建一个\",{\"1\":{\"651\":1}}],[\"在rehash过程中\",{\"1\":{\"440\":1}}],[\"在redis5\",{\"1\":{\"343\":1}}],[\"在redis\",{\"1\":{\"299\":1}}],[\"在rr隔离级别下支持\",{\"1\":{\"148\":1}}],[\"在rr隔离级别下都支持\",{\"1\":{\"148\":1}}],[\"在rc\",{\"1\":{\"148\":1}}],[\"在访问一张表的时候会自动加上\",{\"1\":{\"146\":1}}],[\"在业务场景中\",{\"1\":{\"135\":1}}],[\"在字符串类型字段上使用时\",{\"1\":{\"131\":1}}],[\"在相同数据规模的情况下\",{\"1\":{\"124\":1}}],[\"在指定的条件下会自动的将b+树索引构建成hash索引\",{\"1\":{\"123\":1}}],[\"在指定的集合范围之内\",{\"1\":{\"102\":1}}],[\"在mysql数据库中\",{\"1\":{\"197\":1}}],[\"在mysql中\",{\"1\":{\"123\":1}}],[\"在mysql5\",{\"1\":{\"68\":1,\"146\":1,\"236\":1}}],[\"在原b+tree的基础上增加了一个指向相邻叶子结点的链表指针\",{\"1\":{\"122\":1}}],[\"在叶子结点中存储数据\",{\"1\":{\"121\":1}}],[\"在大量数据的情况下\",{\"1\":{\"119\":1}}],[\"在学习手写\",{\"1\":{\"649\":1}}],[\"在学习苍穹外卖这个项目时\",{\"1\":{\"636\":1}}],[\"在学习\",{\"1\":{\"506\":1}}],[\"在学习本小节之前\",{\"1\":{\"494\":1}}],[\"在学习mysql之前\",{\"1\":{\"106\":1}}],[\"在学习过程中\",{\"1\":{\"22\":1}}],[\"在多次数据插入时\",{\"1\":{\"202\":1}}],[\"在多联合查询时\",{\"1\":{\"135\":1}}],[\"在多表查询时\",{\"1\":{\"95\":1}}],[\"在多的一方建立外键\",{\"1\":{\"93\":1}}],[\"在任意目录下输入redis\",{\"1\":{\"370\":1}}],[\"在任意一方加入外键\",{\"1\":{\"92\":1}}],[\"在任何时候\",{\"1\":{\"34\":1}}],[\"在事务执行过程\",{\"1\":{\"401\":1}}],[\"在事务中每一次执行快照读时生成readview\",{\"1\":{\"88\":1}}],[\"在事务提交后\",{\"1\":{\"85\":1}}],[\"在事务提交之后\",{\"1\":{\"75\":1}}],[\"在快照读时也需要\",{\"1\":{\"85\":1}}],[\"在合适的时间内刷新到磁盘\",{\"1\":{\"75\":1}}],[\"在未来数据被读取时\",{\"1\":{\"64\":1}}],[\"在未来的发展过程中不断的巩固\",{\"1\":{\"2\":1}}],[\"在执行时优先调用\",{\"1\":{\"586\":1}}],[\"在执行过程中\",{\"1\":{\"577\":1}}],[\"在执行之前请确保安装了该指令工具\",{\"1\":{\"487\":1}}],[\"在执行命令时\",{\"1\":{\"470\":1}}],[\"在执行dml语句时\",{\"1\":{\"64\":1}}],[\"在执行增删改查操作时\",{\"1\":{\"63\":1}}],[\"在日常开发中使用非常广泛\",{\"1\":{\"61\":1}}],[\"在表上有活动事务的时候\",{\"1\":{\"146\":1}}],[\"在表\",{\"1\":{\"129\":1}}],[\"在表头插入\",{\"1\":{\"38\":2}}],[\"在表l中的第i个位置上插入指定的元素e\",{\"1\":{\"37\":1}}],[\"在表l中查找具有给定关键字值的元素\",{\"1\":{\"37\":1}}],[\"在位置\",{\"1\":{\"38\":1}}],[\"在顺序表\",{\"1\":{\"38\":3}}],[\"在线性表中的位序\",{\"1\":{\"38\":1}}],[\"在客户端传送完数据以后\",{\"1\":{\"19\":1}}],[\"在因特网协议族中\",{\"1\":{\"16\":1}}],[\"在简化的计算机网络osi模型中\",{\"1\":{\"16\":1}}],[\"在对参考的部分\",{\"1\":{\"3\":1}}],[\"在步入职场以后也会记录自己在工作中遇到的各种问题\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
