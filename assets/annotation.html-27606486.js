const e=JSON.parse('{"key":"v-18e1d4c5","path":"/java/basis/annotation.html","title":"Java - 注解","lang":"zh-CN","frontmatter":{"order":7,"description":"Java - 注解 注解概述 注解是 JDK 5 开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。主要有以下四种作用： 生成文档，通过程序里标识的元数据生成 JavaDoc 文档。 编译检查，通过程序里标识的元数据让编译器在编译期间进行检查验证。 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。 运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。 这么说不够简单明了，常见的注解分类如下：","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/java/basis/annotation.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"Java - 注解"}],["meta",{"property":"og:description","content":"Java - 注解 注解概述 注解是 JDK 5 开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。主要有以下四种作用： 生成文档，通过程序里标识的元数据生成 JavaDoc 文档。 编译检查，通过程序里标识的元数据让编译器在编译期间进行检查验证。 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。 运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。 这么说不够简单明了，常见的注解分类如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T13:41:43.000Z"}],["meta",{"property":"article:author","content":"友人CoderMast"}],["meta",{"property":"article:modified_time","content":"2024-03-21T13:41:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java - 注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-21T13:41:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人CoderMast\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"注解概述","slug":"注解概述","link":"#注解概述","children":[]},{"level":2,"title":"内置注解","slug":"内置注解","link":"#内置注解","children":[{"level":3,"title":"@Override注解","slug":"override注解","link":"#override注解","children":[]},{"level":3,"title":"@Deprecated注解","slug":"deprecated注解","link":"#deprecated注解","children":[]},{"level":3,"title":"@SuppressWarnings注解","slug":"suppresswarnings注解","link":"#suppresswarnings注解","children":[]}]},{"level":2,"title":"元注解","slug":"元注解","link":"#元注解","children":[{"level":3,"title":"@Target注解","slug":"target注解","link":"#target注解","children":[]},{"level":3,"title":"@Retention & @RetentionTarget注解","slug":"retention-retentiontarget注解","link":"#retention-retentiontarget注解","children":[]},{"level":3,"title":"@Documented注解","slug":"documented注解","link":"#documented注解","children":[]},{"level":3,"title":"@Inherited注解","slug":"inherited注解","link":"#inherited注解","children":[]}]},{"level":2,"title":"注解与反射接口","slug":"注解与反射接口","link":"#注解与反射接口","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[{"level":3,"title":"注解自定义语法","slug":"注解自定义语法","link":"#注解自定义语法","children":[]},{"level":3,"title":"注解使用语法","slug":"注解使用语法","link":"#注解使用语法","children":[]},{"level":3,"title":"特殊属性","slug":"特殊属性","link":"#特殊属性","children":[]},{"level":3,"title":"自定义注解实例","slug":"自定义注解实例","link":"#自定义注解实例","children":[]}]}],"git":{"createdTime":1711028503000,"updatedTime":1711028503000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":11.18,"words":3354},"filePathRelative":"java/basis/annotation.md","localizedDate":"2024年3月21日","excerpt":"<h1> Java - 注解</h1>\\n<h2> 注解概述</h2>\\n<p>注解是 JDK 5 开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。主要有以下四种作用：</p>\\n<ol>\\n<li>生成文档，通过程序里标识的元数据生成 JavaDoc 文档。</li>\\n<li>编译检查，通过程序里标识的元数据让编译器在编译期间进行检查验证。</li>\\n<li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li>\\n<li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li>\\n</ol>\\n<p>这么说不够简单明了，常见的注解分类如下：</p>","autoDesc":true}');export{e as data};
