import{_ as r,W as l,X as o,Z as t,$ as e,a0 as a,Y as s,C as i}from"./framework-a0cce298.js";const d="/assets/2023-04-06-22-41-06-31d0944d.png",c="/assets/2023-04-06-22-41-59-a1c53824.png",p="/assets/2023-04-06-22-41-36-989b4002.png",g="/assets/2023-04-06-22-38-53-96a1ca3e.png",h={},u=s(`<h1 id="java基础-6-string、stringbuilder、stringbuffer" tabindex="-1"><a class="header-anchor" href="#java基础-6-string、stringbuilder、stringbuffer" aria-hidden="true">#</a> Java基础 - 6.String、StringBuilder、StringBuffer</h1><h2 id="💥string" tabindex="-1"><a class="header-anchor" href="#💥string" aria-hidden="true">#</a> 💥String</h2><h3 id="_1️⃣创建字符串" tabindex="-1"><a class="header-anchor" href="#_1️⃣创建字符串" aria-hidden="true">#</a> 1️⃣创建字符串</h3><p>  创建字符串的方式有很多种，这里我们只对部分进行介绍：</p><ol><li>直接赋值</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>new String对象进行创建</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用字符数组进行创建</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;W&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>  这里创建的三种字符串所打印输出的值均为<code>Hello World!</code></p><ol start="4"><li>创建格式化的字符串</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str<span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;我的年龄为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot;%d, 我的体重为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot; %f, 我的名字为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot; %s&quot;</span><span class="token punctuation">,</span> intValue<span class="token punctuation">,</span> floatValue<span class="token punctuation">,</span> stringVaule<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的用法和格式化输出是类似的。</p></blockquote><h3 id="_2️⃣连接字符串" tabindex="-1"><a class="header-anchor" href="#_2️⃣连接字符串" aria-hidden="true">#</a> 2️⃣连接字符串</h3><p>连接字符串有两种方式：</p><ol><li>使用concat方法</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>即将str1和str2连接起来。</p></blockquote><ol start="2"><li>使用 + 连接</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>功能和方法一相同，一般在使用中这种方式最为常见。</p></blockquote><p>对于字符串的加运算，当编译成 class 文件时，会自动编译为 StringBuffer 来进行字符串的连接操作。</p><p>同时对于字符串常量池：</p><p>当一个字符串是一个字面量时，它会被放到一个常量池中，等待复用。</p><h3 id="_3️⃣字符串的存储" tabindex="-1"><a class="header-anchor" href="#_3️⃣字符串的存储" aria-hidden="true">#</a> 3️⃣字符串的存储</h3><p>  直接向String对象通过字面量的形式赋值，也就是第一种方式，这样所创建的字符串其本质是存储在公共池，而后面的几种方式是存储在堆，所以这里的在比较的时候会出现下面这种情况：</p><blockquote><p>str1 == str2 为 true str1 == string1 为 fasle string1 == string2 为 false</p></blockquote><p>这里的string1和string2是对象进行比较，在java中，对象之间要相等，其内容必须一致，而且其哈希值也必须一致，也就是存储的地址是相同的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> string1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> string2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4️⃣字符串的更改" tabindex="-1"><a class="header-anchor" href="#_4️⃣字符串的更改" aria-hidden="true">#</a> 4️⃣字符串的更改</h3><p>  需要注意的是，字符串是不可更改的，我们平时所接触的更改只是将对象引用指向另外一个字符串对象，从而实现了更改的效果，但是本质上的字符串是没有进行更改的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Google&quot;</span><span class="token punctuation">;</span>
str1 <span class="token operator">=</span> <span class="token string">&quot;Baidu&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>  那么这里为什么是不可修改的呢？我们在JDK中找到了答案：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>  实际上String字符串在底层是以一个字符数组进行存储的，并且通过final关键字进行修饰，所以不可更改。</p><h3 id="_5️⃣字符串api" tabindex="-1"><a class="header-anchor" href="#_5️⃣字符串api" aria-hidden="true">#</a> 5️⃣字符串API</h3>',39),f=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"SN(序号)"),t("th",{style:{"text-align":"left"}},"方法描述")])],-1),_=t("td",{style:{"text-align":"left"}},"1",-1),b={style:{"text-align":"left"}},v={href:"https://www.runoob.com/java/java-string-charat.html",target:"_blank",rel:"noopener noreferrer"},x=t("td",{style:{"text-align":"left"}},"2",-1),m={style:{"text-align":"left"}},y={href:"https://www.runoob.com/java/java-string-compareto.html",target:"_blank",rel:"noopener noreferrer"},k=t("td",{style:{"text-align":"left"}},"3",-1),w={style:{"text-align":"left"}},S={href:"https://www.runoob.com/java/java-string-compareto.html",target:"_blank",rel:"noopener noreferrer"},j=t("td",{style:{"text-align":"left"}},"4",-1),q={style:{"text-align":"left"}},B={href:"https://www.runoob.com/java/java-string-comparetoignorecase.html",target:"_blank",rel:"noopener noreferrer"},C=t("td",{style:{"text-align":"left"}},"5",-1),I={style:{"text-align":"left"}},O={href:"https://www.runoob.com/java/java-string-concat.html",target:"_blank",rel:"noopener noreferrer"},W=t("td",{style:{"text-align":"left"}},"6",-1),A={style:{"text-align":"left"}},L={href:"https://www.runoob.com/java/java-string-contentequals.html",target:"_blank",rel:"noopener noreferrer"},H=t("td",{style:{"text-align":"left"}},"7",-1),V={style:{"text-align":"left"}},E={href:"https://www.runoob.com/java/java-string-copyvalueof.html",target:"_blank",rel:"noopener noreferrer"},N=t("td",{style:{"text-align":"left"}},"8",-1),z={style:{"text-align":"left"}},J={href:"https://www.runoob.com/java/java-string-copyvalueof.html",target:"_blank",rel:"noopener noreferrer"},T=t("td",{style:{"text-align":"left"}},"9",-1),M={style:{"text-align":"left"}},P={href:"https://www.runoob.com/java/java-string-endswith.html",target:"_blank",rel:"noopener noreferrer"},U=t("td",{style:{"text-align":"left"}},"10",-1),D={style:{"text-align":"left"}},F={href:"https://www.runoob.com/java/java-string-equals.html",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"left"}},"11",-1),K={style:{"text-align":"left"}},X={href:"https://www.runoob.com/java/java-string-equalsignorecase.html",target:"_blank",rel:"noopener noreferrer"},Y=t("td",{style:{"text-align":"left"}},"12",-1),Z={style:{"text-align":"left"}},$={href:"https://www.runoob.com/java/java-string-getbytes.html",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"left"}},"13",-1),R={style:{"text-align":"left"}},tt={href:"https://www.runoob.com/java/java-string-getbytes.html",target:"_blank",rel:"noopener noreferrer"},et=t("td",{style:{"text-align":"left"}},"14",-1),nt={style:{"text-align":"left"}},at={href:"https://www.runoob.com/java/java-string-getchars.html",target:"_blank",rel:"noopener noreferrer"},st=t("td",{style:{"text-align":"left"}},"15",-1),rt={style:{"text-align":"left"}},lt={href:"https://www.runoob.com/java/java-string-hashcode.html",target:"_blank",rel:"noopener noreferrer"},ot=t("td",{style:{"text-align":"left"}},"16",-1),it={style:{"text-align":"left"}},dt={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},ct=t("td",{style:{"text-align":"left"}},"17",-1),pt={style:{"text-align":"left"}},gt={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"left"}},"18",-1),ut={style:{"text-align":"left"}},ft={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},_t=t("td",{style:{"text-align":"left"}},"19",-1),bt={style:{"text-align":"left"}},vt={href:"https://www.runoob.com/java/java-string-indexof.html",target:"_blank",rel:"noopener noreferrer"},xt=t("td",{style:{"text-align":"left"}},"20",-1),mt={style:{"text-align":"left"}},yt={href:"https://www.runoob.com/java/java-string-intern.html",target:"_blank",rel:"noopener noreferrer"},kt=t("td",{style:{"text-align":"left"}},"21",-1),wt={style:{"text-align":"left"}},St={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},jt=t("td",{style:{"text-align":"left"}},"22",-1),qt={style:{"text-align":"left"}},Bt={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},Ct=t("td",{style:{"text-align":"left"}},"23",-1),It={style:{"text-align":"left"}},Ot={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},Wt=t("td",{style:{"text-align":"left"}},"24",-1),At={style:{"text-align":"left"}},Lt={href:"https://www.runoob.com/java/java-string-lastindexof.html",target:"_blank",rel:"noopener noreferrer"},Ht=t("td",{style:{"text-align":"left"}},"25",-1),Vt={style:{"text-align":"left"}},Et={href:"https://www.runoob.com/java/java-string-length.html",target:"_blank",rel:"noopener noreferrer"},Nt=t("td",{style:{"text-align":"left"}},"26",-1),zt={style:{"text-align":"left"}},Jt={href:"https://www.runoob.com/java/java-string-matches.html",target:"_blank",rel:"noopener noreferrer"},Tt=t("td",{style:{"text-align":"left"}},"27",-1),Mt={style:{"text-align":"left"}},Pt={href:"https://www.runoob.com/java/java-string-regionmatches.html",target:"_blank",rel:"noopener noreferrer"},Ut=t("td",{style:{"text-align":"left"}},"28",-1),Dt={style:{"text-align":"left"}},Ft={href:"https://www.runoob.com/java/java-string-regionmatches.html",target:"_blank",rel:"noopener noreferrer"},Gt=t("td",{style:{"text-align":"left"}},"29",-1),Kt={style:{"text-align":"left"}},Xt={href:"https://www.runoob.com/java/java-string-replace.html",target:"_blank",rel:"noopener noreferrer"},Yt=t("td",{style:{"text-align":"left"}},"30",-1),Zt={style:{"text-align":"left"}},$t={href:"https://www.runoob.com/java/java-string-replaceall.html",target:"_blank",rel:"noopener noreferrer"},Qt=t("td",{style:{"text-align":"left"}},"31",-1),Rt={style:{"text-align":"left"}},te={href:"https://www.runoob.com/java/java-string-replacefirst.html",target:"_blank",rel:"noopener noreferrer"},ee=t("td",{style:{"text-align":"left"}},"32",-1),ne={style:{"text-align":"left"}},ae={href:"https://www.runoob.com/java/java-string-split.html",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"left"}},"33",-1),re={style:{"text-align":"left"}},le={href:"https://www.runoob.com/java/java-string-split.html",target:"_blank",rel:"noopener noreferrer"},oe=t("td",{style:{"text-align":"left"}},"34",-1),ie={style:{"text-align":"left"}},de={href:"https://www.runoob.com/java/java-string-startswith.html",target:"_blank",rel:"noopener noreferrer"},ce=t("td",{style:{"text-align":"left"}},"35",-1),pe={style:{"text-align":"left"}},ge={href:"https://www.runoob.com/java/java-string-startswith.html",target:"_blank",rel:"noopener noreferrer"},he=t("td",{style:{"text-align":"left"}},"36",-1),ue={style:{"text-align":"left"}},fe={href:"https://www.runoob.com/java/java-string-subsequence.html",target:"_blank",rel:"noopener noreferrer"},_e=t("td",{style:{"text-align":"left"}},"37",-1),be={style:{"text-align":"left"}},ve={href:"https://www.runoob.com/java/java-string-substring.html",target:"_blank",rel:"noopener noreferrer"},xe=t("td",{style:{"text-align":"left"}},"38",-1),me={style:{"text-align":"left"}},ye={href:"https://www.runoob.com/java/java-string-substring.html",target:"_blank",rel:"noopener noreferrer"},ke=t("td",{style:{"text-align":"left"}},"39",-1),we={style:{"text-align":"left"}},Se={href:"https://www.runoob.com/java/java-string-tochararray.html",target:"_blank",rel:"noopener noreferrer"},je=t("td",{style:{"text-align":"left"}},"40",-1),qe={style:{"text-align":"left"}},Be={href:"https://www.runoob.com/java/java-string-tolowercase.html",target:"_blank",rel:"noopener noreferrer"},Ce=t("td",{style:{"text-align":"left"}},"41",-1),Ie={style:{"text-align":"left"}},Oe={href:"https://www.runoob.com/java/java-string-tolowercase.html",target:"_blank",rel:"noopener noreferrer"},We=t("td",{style:{"text-align":"left"}},"42",-1),Ae={style:{"text-align":"left"}},Le={href:"https://www.runoob.com/java/java-string-tostring.html",target:"_blank",rel:"noopener noreferrer"},He=t("td",{style:{"text-align":"left"}},"43",-1),Ve={style:{"text-align":"left"}},Ee={href:"https://www.runoob.com/java/java-string-touppercase.html",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"left"}},"44",-1),ze={style:{"text-align":"left"}},Je={href:"https://www.runoob.com/java/java-string-touppercase.html",target:"_blank",rel:"noopener noreferrer"},Te=t("td",{style:{"text-align":"left"}},"45",-1),Me={style:{"text-align":"left"}},Pe={href:"https://www.runoob.com/java/java-string-trim.html",target:"_blank",rel:"noopener noreferrer"},Ue=t("td",{style:{"text-align":"left"}},"46",-1),De={style:{"text-align":"left"}},Fe={href:"https://www.runoob.com/java/java-string-valueof.html",target:"_blank",rel:"noopener noreferrer"},Ge=t("td",{style:{"text-align":"left"}},"47",-1),Ke={style:{"text-align":"left"}},Xe={href:"https://www.runoob.com/java/java-string-contains.html",target:"_blank",rel:"noopener noreferrer"},Ye=t("td",{style:{"text-align":"left"}},"48",-1),Ze={style:{"text-align":"left"}},$e={href:"https://www.runoob.com/java/java-string-isempty.html",target:"_blank",rel:"noopener noreferrer"},Qe={href:"https://www.runoob.com/java/java-string.html",target:"_blank",rel:"noopener noreferrer"},Re=s('<h2 id="💦stringbuffer和stringbuilder" tabindex="-1"><a class="header-anchor" href="#💦stringbuffer和stringbuilder" aria-hidden="true">#</a> 💦StringBuffer和StringBuilder</h2><p>  当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>  和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>String实现了charsequence接口，而StringBuilder和StringBuffer继承自AbstractStringBuilder类，AbstractStringBuilder不仅实现了charsequence接口，而且也实现了Appendable接口，所以能够进行修改。</p></blockquote><p>  在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p><p>  StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>  由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p><h3 id="_1️⃣stringbuffer" tabindex="-1"><a class="header-anchor" href="#_1️⃣stringbuffer" aria-hidden="true">#</a> 1️⃣StringBuffer</h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">int capacity() 返回当前容量。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">char charAt(int index) 返回此序列中指定索引处的 <code>char</code> 值。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 <code>dst</code>。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">int length() 返回长度（字符数）。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">void setCharAt(int index, char ch) 将给定索引处的字符设置为 <code>ch</code>。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">void setLength(int newLength) 设置字符序列的长度。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">String substring(int start) 返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">String substring(int start, int end) 返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">String toString() 返回此序列中数据的字符串表示形式。</td></tr></tbody></table><h3 id="_2️⃣stringbuilder" tabindex="-1"><a class="header-anchor" href="#_2️⃣stringbuilder" aria-hidden="true">#</a> 2️⃣StringBuilder</h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">public StringBuffer append(String s) 将指定的字符串追加到此字符序列。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">public StringBuffer reverse() 将此字符序列用其反转形式取代。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">public delete(int start, int end) 移除此序列的子字符串中的字符。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">public insert(int offset, int i) 将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">insert(int offset, String str) 将 <code>str</code> 参数的字符串插入此序列中。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">replace(int start, int end, String str) 使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><ul><li>StringBuilder效率更高，但是不是线程安全的。</li><li>StringBuffer效率不是最高，但其是线程安全的</li></ul><h2 id="三者区别" tabindex="-1"><a class="header-anchor" href="#三者区别" aria-hidden="true">#</a> 三者区别</h2><p>String：字符串常量，字符串长度不可变。Java中String 是immutable（不可变）的。用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。</p><p>StringBuffer：字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String 类型，可以调用 StringBuffer 的 toString() 方法。Java.lang.StringBuffer 线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。</p><p>StringBuilder：字符串变量（非线程安全）。在内部 StringBuilder 对象被当作是一个包含字符序列的变长数组。</p><p>基本原则：</p><ul><li>如果要操作少量的数据用 String ；</li><li>单线程操作大量数据用StringBuilder ；</li><li>多线程操作大量数据，用StringBuffer。</li></ul>',19);function tn(en,nn){const n=i("ExternalLinkIcon");return l(),o("div",null,[u,t("table",null,[f,t("tbody",null,[t("tr",null,[_,t("td",b,[t("a",v,[e("char charAt(int index)"),a(n)]),e(" 返回指定索引处的 char 值。")])]),t("tr",null,[x,t("td",m,[t("a",y,[e("int compareTo(Object o)"),a(n)]),e(" 把这个字符串和另一个对象比较。")])]),t("tr",null,[k,t("td",w,[t("a",S,[e("int compareTo(String anotherString)"),a(n)]),e(" 按字典顺序比较两个字符串。")])]),t("tr",null,[j,t("td",q,[t("a",B,[e("int compareToIgnoreCase(String str)"),a(n)]),e(" 按字典顺序比较两个字符串，不考虑大小写。")])]),t("tr",null,[C,t("td",I,[t("a",O,[e("String concat(String str)"),a(n)]),e(" 将指定字符串连接到此字符串的结尾。")])]),t("tr",null,[W,t("td",A,[t("a",L,[e("boolean contentEquals(StringBuffer sb)"),a(n)]),e(" 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。")])]),t("tr",null,[H,t("td",V,[e("[static String copyValueOf(char"),t("a",E,[e("] data)"),a(n)]),e(" 返回指定数组中表示该字符序列的 String。")])]),t("tr",null,[N,t("td",z,[e("[static String copyValueOf(char"),t("a",J,[e("] data, int offset, int count)"),a(n)]),e(" 返回指定数组中表示该字符序列的 String。")])]),t("tr",null,[T,t("td",M,[t("a",P,[e("boolean endsWith(String suffix)"),a(n)]),e(" 测试此字符串是否以指定的后缀结束。")])]),t("tr",null,[U,t("td",D,[t("a",F,[e("boolean equals(Object anObject)"),a(n)]),e(" 将此字符串与指定的对象比较。")])]),t("tr",null,[G,t("td",K,[t("a",X,[e("boolean equalsIgnoreCase(String anotherString)"),a(n)]),e(" 将此 String 与另一个 String 比较，不考虑大小写。")])]),t("tr",null,[Y,t("td",Z,[e("[byte"),t("a",$,[e("] getBytes()"),a(n)]),e(" 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。")])]),t("tr",null,[Q,t("td",R,[e("[byte"),t("a",tt,[e("] getBytes(String charsetName)"),a(n)]),e(" 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。")])]),t("tr",null,[et,t("td",nt,[e("[void getChars(int srcBegin, int srcEnd, char"),t("a",at,[e("] dst, int dstBegin)"),a(n)]),e(" 将字符从此字符串复制到目标字符数组。")])]),t("tr",null,[st,t("td",rt,[t("a",lt,[e("int hashCode()"),a(n)]),e(" 返回此字符串的哈希码。")])]),t("tr",null,[ot,t("td",it,[t("a",dt,[e("int indexOf(int ch)"),a(n)]),e(" 返回指定字符在此字符串中第一次出现处的索引。")])]),t("tr",null,[ct,t("td",pt,[t("a",gt,[e("int indexOf(int ch, int fromIndex)"),a(n)]),e(" 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。")])]),t("tr",null,[ht,t("td",ut,[t("a",ft,[e("int indexOf(String str)"),a(n)]),e(" 返回指定子字符串在此字符串中第一次出现处的索引。")])]),t("tr",null,[_t,t("td",bt,[t("a",vt,[e("int indexOf(String str, int fromIndex)"),a(n)]),e(" 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。")])]),t("tr",null,[xt,t("td",mt,[t("a",yt,[e("String intern()"),a(n)]),e(" 返回字符串对象的规范化表示形式。")])]),t("tr",null,[kt,t("td",wt,[t("a",St,[e("int lastIndexOf(int ch)"),a(n)]),e(" 返回指定字符在此字符串中最后一次出现处的索引。")])]),t("tr",null,[jt,t("td",qt,[t("a",Bt,[e("int lastIndexOf(int ch, int fromIndex)"),a(n)]),e(" 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。")])]),t("tr",null,[Ct,t("td",It,[t("a",Ot,[e("int lastIndexOf(String str)"),a(n)]),e(" 返回指定子字符串在此字符串中最右边出现处的索引。")])]),t("tr",null,[Wt,t("td",At,[t("a",Lt,[e("int lastIndexOf(String str, int fromIndex)"),a(n)]),e(" 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。")])]),t("tr",null,[Ht,t("td",Vt,[t("a",Et,[e("int length()"),a(n)]),e(" 返回此字符串的长度。")])]),t("tr",null,[Nt,t("td",zt,[t("a",Jt,[e("boolean matches(String regex)"),a(n)]),e(" 告知此字符串是否匹配给定的正则表达式。")])]),t("tr",null,[Tt,t("td",Mt,[t("a",Pt,[e("boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)"),a(n)]),e(" 测试两个字符串区域是否相等。")])]),t("tr",null,[Ut,t("td",Dt,[t("a",Ft,[e("boolean regionMatches(int toffset, String other, int ooffset, int len)"),a(n)]),e(" 测试两个字符串区域是否相等。")])]),t("tr",null,[Gt,t("td",Kt,[t("a",Xt,[e("String replace(char oldChar, char newChar)"),a(n)]),e(" 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。")])]),t("tr",null,[Yt,t("td",Zt,[t("a",$t,[e("String replaceAll(String regex, String replacement)"),a(n)]),e(" 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。")])]),t("tr",null,[Qt,t("td",Rt,[t("a",te,[e("String replaceFirst(String regex, String replacement)"),a(n)]),e(" 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。")])]),t("tr",null,[ee,t("td",ne,[e("[String"),t("a",ae,[e("] split(String regex)"),a(n)]),e(" 根据给定正则表达式的匹配拆分此字符串。")])]),t("tr",null,[se,t("td",re,[e("[String"),t("a",le,[e("] split(String regex, int limit)"),a(n)]),e(" 根据匹配给定的正则表达式来拆分此字符串。")])]),t("tr",null,[oe,t("td",ie,[t("a",de,[e("boolean startsWith(String prefix)"),a(n)]),e(" 测试此字符串是否以指定的前缀开始。")])]),t("tr",null,[ce,t("td",pe,[t("a",ge,[e("boolean startsWith(String prefix, int toffset)"),a(n)]),e(" 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。")])]),t("tr",null,[he,t("td",ue,[t("a",fe,[e("CharSequence subSequence(int beginIndex, int endIndex)"),a(n)]),e(" 返回一个新的字符序列，它是此序列的一个子序列。")])]),t("tr",null,[_e,t("td",be,[t("a",ve,[e("String substring(int beginIndex)"),a(n)]),e(" 返回一个新的字符串，它是此字符串的一个子字符串。")])]),t("tr",null,[xe,t("td",me,[t("a",ye,[e("String substring(int beginIndex, int endIndex)"),a(n)]),e(" 返回一个新字符串，它是此字符串的一个子字符串。")])]),t("tr",null,[ke,t("td",we,[e("[char"),t("a",Se,[e("] toCharArray()"),a(n)]),e(" 将此字符串转换为一个新的字符数组。")])]),t("tr",null,[je,t("td",qe,[t("a",Be,[e("String toLowerCase()"),a(n)]),e(" 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。")])]),t("tr",null,[Ce,t("td",Ie,[t("a",Oe,[e("String toLowerCase(Locale locale)"),a(n)]),e(" 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。")])]),t("tr",null,[We,t("td",Ae,[t("a",Le,[e("String toString()"),a(n)]),e(" 返回此对象本身（它已经是一个字符串！）。")])]),t("tr",null,[He,t("td",Ve,[t("a",Ee,[e("String toUpperCase()"),a(n)]),e(" 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。")])]),t("tr",null,[Ne,t("td",ze,[t("a",Je,[e("String toUpperCase(Locale locale)"),a(n)]),e(" 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。")])]),t("tr",null,[Te,t("td",Me,[t("a",Pe,[e("String trim()"),a(n)]),e(" 返回字符串的副本，忽略前导空白和尾部空白。")])]),t("tr",null,[Ue,t("td",De,[t("a",Fe,[e("static String valueOf(primitive data type x)"),a(n)]),e(" 返回给定data type类型x参数的字符串表示形式。")])]),t("tr",null,[Ge,t("td",Ke,[t("a",Xe,[e("contains(CharSequence chars)"),a(n)]),e(" 判断是否包含指定的字符系列。")])]),t("tr",null,[Ye,t("td",Ze,[t("a",$e,[e("isEmpty()"),a(n)]),e(" 判断字符串是否为空。")])])])]),t("blockquote",null,[t("p",null,[e("API资料来源于：菜鸟教程"),t("a",Qe,[e("https://www.runoob.com/java/java-string.html"),a(n)])])]),Re])}const sn=r(h,[["render",tn],["__file","java-base-string.html.vue"]]);export{sn as default};
