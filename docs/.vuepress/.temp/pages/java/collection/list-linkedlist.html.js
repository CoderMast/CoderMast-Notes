export const data = JSON.parse("{\"key\":\"v-be3711a0\",\"path\":\"/java/collection/list-linkedlist.html\",\"title\":\"Collection - LinkedList 源码解析\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":2,\"description\":\"Collection - LinkedList 源码解析 介绍 LinkedList 是一个同时实现了 List 和 Deque 接口的双向链表，既可以被看做是一个顺序集合，也可以看做是一个队列，又可以看做为一个栈。 双向链表结构 LinkedList 内部使用双向链表来存储元素，每个节点包含了对前一个节点和后一个节点的引用。 这种结构使得在任意位置进行删除和插入操作的时间复杂度是 O(1)。 实现接口 实现了 List 接口，故可以存储一组有序元素，并且支持通过索引访问、插入、删除等操作。 实现了 Deque 接口，提供了双端队列的功能，故可以从队列的两端进行元素的插入和删除操作。 特点和优势 节点逻辑有序：LinkedList 中的所有数据节点，是通过引用来连接起来，在物理存储上是随机分配的。 支持动态增长：LinkedList 的容量可以动态增长，不必要像数组预先分配指定大小且连续的空间。 插入和删除效率高：因为其底层是通过引用连接起来的，故对其操作时仅需更改与其相连接的结点的引用即可。 线程不安全的：是非线程安全的，在并发环境下使用，需要考虑同步操作或者改用其他线程安全的类，如 java.util.concurrent.ConcurrentLinkedDeque。 适用场景 不需要频繁的随机访问数据，需要频繁的添加、修改、删除操作，特别是在中间位置时推荐使用。 对存储占用不敏感的情况，因为其是通过引用连接起来的，所以相较于数组而言，存储了较多的辅助信息，故存储消耗比 ArrayList 大。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/java/collection/list-linkedlist.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"CoderMast编程桅杆\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Collection - LinkedList 源码解析\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Collection - LinkedList 源码解析 介绍 LinkedList 是一个同时实现了 List 和 Deque 接口的双向链表，既可以被看做是一个顺序集合，也可以看做是一个队列，又可以看做为一个栈。 双向链表结构 LinkedList 内部使用双向链表来存储元素，每个节点包含了对前一个节点和后一个节点的引用。 这种结构使得在任意位置进行删除和插入操作的时间复杂度是 O(1)。 实现接口 实现了 List 接口，故可以存储一组有序元素，并且支持通过索引访问、插入、删除等操作。 实现了 Deque 接口，提供了双端队列的功能，故可以从队列的两端进行元素的插入和删除操作。 特点和优势 节点逻辑有序：LinkedList 中的所有数据节点，是通过引用来连接起来，在物理存储上是随机分配的。 支持动态增长：LinkedList 的容量可以动态增长，不必要像数组预先分配指定大小且连续的空间。 插入和删除效率高：因为其底层是通过引用连接起来的，故对其操作时仅需更改与其相连接的结点的引用即可。 线程不安全的：是非线程安全的，在并发环境下使用，需要考虑同步操作或者改用其他线程安全的类，如 java.util.concurrent.ConcurrentLinkedDeque。 适用场景 不需要频繁的随机访问数据，需要频繁的添加、修改、删除操作，特别是在中间位置时推荐使用。 对存储占用不敏感的情况，因为其是通过引用连接起来的，所以相较于数组而言，存储了较多的辅助信息，故存储消耗比 ArrayList 大。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"友人CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Collection - LinkedList 源码解析\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"友人CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@163.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"介绍\",\"slug\":\"介绍\",\"link\":\"#介绍\",\"children\":[]},{\"level\":2,\"title\":\"常用API\",\"slug\":\"常用api\",\"link\":\"#常用api\",\"children\":[]},{\"level\":2,\"title\":\"实现方式\",\"slug\":\"实现方式\",\"link\":\"#实现方式\",\"children\":[{\"level\":3,\"title\":\"底层存储\",\"slug\":\"底层存储\",\"link\":\"#底层存储\",\"children\":[]},{\"level\":3,\"title\":\"构造方法\",\"slug\":\"构造方法\",\"link\":\"#构造方法\",\"children\":[]},{\"level\":3,\"title\":\"add方法\",\"slug\":\"add方法\",\"link\":\"#add方法\",\"children\":[]},{\"level\":3,\"title\":\"get方法\",\"slug\":\"get方法\",\"link\":\"#get方法\",\"children\":[]},{\"level\":3,\"title\":\"remove方法\",\"slug\":\"remove方法\",\"link\":\"#remove方法\",\"children\":[]},{\"level\":3,\"title\":\"set方法\",\"slug\":\"set方法\",\"link\":\"#set方法\",\"children\":[]},{\"level\":3,\"title\":\"clear方法\",\"slug\":\"clear方法\",\"link\":\"#clear方法\",\"children\":[]},{\"level\":3,\"title\":\"index方法\",\"slug\":\"index方法\",\"link\":\"#index方法\",\"children\":[]},{\"level\":3,\"title\":\"Queue接口方法\",\"slug\":\"queue接口方法\",\"link\":\"#queue接口方法\",\"children\":[]},{\"level\":3,\"title\":\"Deque接口方法\",\"slug\":\"deque接口方法\",\"link\":\"#deque接口方法\",\"children\":[]}]}],\"readingTime\":{\"minutes\":13.92,\"words\":4175},\"filePathRelative\":\"java/collection/list-linkedlist.md\",\"excerpt\":\"<h1> Collection - LinkedList 源码解析</h1>\\n<figure><figcaption></figcaption></figure>\\n<h2> 介绍</h2>\\n<p>LinkedList 是一个同时实现了 List 和 Deque 接口的双向链表，既可以被看做是一个顺序集合，也可以看做是一个队列，又可以看做为一个栈。</p>\\n<ol>\\n<li>\\n<p>双向链表结构</p>\\n<ul>\\n<li>LinkedList 内部使用双向链表来存储元素，每个节点包含了对前一个节点和后一个节点的引用。</li>\\n<li>这种结构使得在任意位置进行删除和插入操作的时间复杂度是 O(1)。</li>\\n</ul>\\n</li>\\n<li>\\n<p>实现接口</p>\\n<ul>\\n<li>实现了 List 接口，故可以存储一组有序元素，并且支持通过索引访问、插入、删除等操作。</li>\\n<li>实现了 Deque 接口，提供了双端队列的功能，故可以从队列的两端进行元素的插入和删除操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>特点和优势</p>\\n<ul>\\n<li>节点逻辑有序：LinkedList 中的所有数据节点，是通过引用来连接起来，在物理存储上是随机分配的。</li>\\n<li>支持动态增长：LinkedList 的容量可以动态增长，不必要像数组预先分配指定大小且连续的空间。</li>\\n<li>插入和删除效率高：因为其底层是通过引用连接起来的，故对其操作时仅需更改与其相连接的结点的引用即可。</li>\\n<li>线程不安全的：是非线程安全的，在并发环境下使用，需要考虑同步操作或者改用其他线程安全的类，如 <code>java.util.concurrent.ConcurrentLinkedDeque</code>。</li>\\n</ul>\\n</li>\\n<li>\\n<p>适用场景</p>\\n<ul>\\n<li>不需要频繁的随机访问数据，需要频繁的添加、修改、删除操作，特别是在中间位置时推荐使用。</li>\\n<li>对存储占用不敏感的情况，因为其是通过引用连接起来的，所以相较于数组而言，存储了较多的辅助信息，故存储消耗比 ArrayList 大。</li>\\n</ul>\\n</li>\\n</ol>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
