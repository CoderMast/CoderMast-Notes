export const data = JSON.parse("{\"key\":\"v-a63a099a\",\"path\":\"/java/core/class-and-object.html\",\"title\":\"Java核心 - 面向对象\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":3,\"description\":\"Java核心 - 面向对象 面向对象（Object-Oriented，OOP）是一种程序设计的编程范式，主要基于对象这个概念，将相关的数据和方法组织成一个整体看待，本质上是模拟现实中解决问题的过程。 面向对象三个特性 面向对象的三大基本特征是：封装、继承、多态 封装 封装是将对象的属性和方法封装在一个类的内部，对外部隐藏对象的具体实现细节。通过封装，对象的内部实现对外部是不可见的，只有公共接口对外部可见。仅能通过提供的公共接口来操作改对象。 最常用的就是使用 private 关键字修饰，将一些数据进行隐藏，仅对外提供一些公共操作方法，让外部程序通过该类提供的方法来实现对内部信息的操作和访问。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/java/core/class-and-object.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"CoderMast编程桅杆\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java核心 - 面向对象\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Java核心 - 面向对象 面向对象（Object-Oriented，OOP）是一种程序设计的编程范式，主要基于对象这个概念，将相关的数据和方法组织成一个整体看待，本质上是模拟现实中解决问题的过程。 面向对象三个特性 面向对象的三大基本特征是：封装、继承、多态 封装 封装是将对象的属性和方法封装在一个类的内部，对外部隐藏对象的具体实现细节。通过封装，对象的内部实现对外部是不可见的，只有公共接口对外部可见。仅能通过提供的公共接口来操作改对象。 最常用的就是使用 private 关键字修饰，将一些数据进行隐藏，仅对外提供一些公共操作方法，让外部程序通过该类提供的方法来实现对内部信息的操作和访问。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"友人CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java核心 - 面向对象\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"友人CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@163.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"面向对象三个特性\",\"slug\":\"面向对象三个特性\",\"link\":\"#面向对象三个特性\",\"children\":[{\"level\":3,\"title\":\"封装\",\"slug\":\"封装\",\"link\":\"#封装\",\"children\":[]},{\"level\":3,\"title\":\"继承\",\"slug\":\"继承\",\"link\":\"#继承\",\"children\":[]},{\"level\":3,\"title\":\"多态\",\"slug\":\"多态\",\"link\":\"#多态\",\"children\":[]}]},{\"level\":2,\"title\":\"类和对象\",\"slug\":\"类和对象\",\"link\":\"#类和对象\",\"children\":[{\"level\":3,\"title\":\"概述\",\"slug\":\"概述\",\"link\":\"#概述\",\"children\":[]},{\"level\":3,\"title\":\"内部类\",\"slug\":\"内部类\",\"link\":\"#内部类\",\"children\":[]},{\"level\":3,\"title\":\"创建对象\",\"slug\":\"创建对象\",\"link\":\"#创建对象\",\"children\":[]}]},{\"level\":2,\"title\":\"属性\",\"slug\":\"属性\",\"link\":\"#属性\",\"children\":[]},{\"level\":2,\"title\":\"方法\",\"slug\":\"方法\",\"link\":\"#方法\",\"children\":[{\"level\":3,\"title\":\"方法的分类\",\"slug\":\"方法的分类\",\"link\":\"#方法的分类\",\"children\":[]},{\"level\":3,\"title\":\"方法的调用\",\"slug\":\"方法的调用\",\"link\":\"#方法的调用\",\"children\":[]},{\"level\":3,\"title\":\"方法的重载和重写\",\"slug\":\"方法的重载和重写\",\"link\":\"#方法的重载和重写\",\"children\":[]},{\"level\":3,\"title\":\"可变参数\",\"slug\":\"可变参数\",\"link\":\"#可变参数\",\"children\":[]},{\"level\":3,\"title\":\"构造方法\",\"slug\":\"构造方法\",\"link\":\"#构造方法\",\"children\":[]}]},{\"level\":2,\"title\":\"接口和抽象类\",\"slug\":\"接口和抽象类\",\"link\":\"#接口和抽象类\",\"children\":[{\"level\":3,\"title\":\"接口\",\"slug\":\"接口\",\"link\":\"#接口\",\"children\":[]},{\"level\":3,\"title\":\"抽象类\",\"slug\":\"抽象类\",\"link\":\"#抽象类\",\"children\":[]},{\"level\":3,\"title\":\"接口和抽象类的区别\",\"slug\":\"接口和抽象类的区别\",\"link\":\"#接口和抽象类的区别\",\"children\":[]}]}],\"readingTime\":{\"minutes\":15.95,\"words\":4784},\"filePathRelative\":\"java/core/class-and-object.md\",\"excerpt\":\"<h1> Java核心 - 面向对象</h1>\\n<p>面向对象（Object-Oriented，OOP）是一种程序设计的编程范式，主要基于对象这个概念，将相关的数据和方法组织成一个整体看待，本质上是模拟现实中解决问题的过程。</p>\\n<h2> 面向对象三个特性</h2>\\n<p>面向对象的三大基本特征是：封装、继承、多态</p>\\n<h3> 封装</h3>\\n<p>封装是将对象的属性和方法封装在一个类的内部，对外部隐藏对象的具体实现细节。通过封装，对象的内部实现对外部是不可见的，只有公共接口对外部可见。仅能通过提供的公共接口来操作改对象。</p>\\n<p>最常用的就是使用 <code>private</code> 关键字修饰，将一些数据进行隐藏，仅对外提供一些公共操作方法，让外部程序通过该类提供的方法来实现对内部信息的操作和访问。</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
