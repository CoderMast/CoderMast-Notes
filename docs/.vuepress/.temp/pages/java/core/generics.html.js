export const data = JSON.parse("{\"key\":\"v-6cad573e\",\"path\":\"/java/core/generics.html\",\"title\":\"Java核心 - 泛型\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":6,\"description\":\"Java核心 - 泛型 什么是泛型？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。 泛型的核心就是参数化类型，通过参数将类型传递进来，也就是说所操作的数据类型被指定为一个参数。即就是在泛型的使用过程中，操作的数据类型被指定为一个参数，这种参数可以使用在 接口、类、方法上，称为 泛型接口、泛型类、泛型方法。 JDK 为了兼容以前的版本，Java 泛型的实现采用的是“伪泛型”，即在语法上支持泛型，但是在编译时会进行“泛型擦除”，将所有的泛型修改为传入的具体类型。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/java/core/generics.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"CoderMast编程桅杆\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java核心 - 泛型\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Java核心 - 泛型 什么是泛型？ Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。 泛型的核心就是参数化类型，通过参数将类型传递进来，也就是说所操作的数据类型被指定为一个参数。即就是在泛型的使用过程中，操作的数据类型被指定为一个参数，这种参数可以使用在 接口、类、方法上，称为 泛型接口、泛型类、泛型方法。 JDK 为了兼容以前的版本，Java 泛型的实现采用的是“伪泛型”，即在语法上支持泛型，但是在编译时会进行“泛型擦除”，将所有的泛型修改为传入的具体类型。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"友人CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java核心 - 泛型\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"友人CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@163.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"什么是泛型？\",\"slug\":\"什么是泛型\",\"link\":\"#什么是泛型\",\"children\":[]},{\"level\":2,\"title\":\"为什么要用泛型？\",\"slug\":\"为什么要用泛型\",\"link\":\"#为什么要用泛型\",\"children\":[]},{\"level\":2,\"title\":\"泛型的使用\",\"slug\":\"泛型的使用\",\"link\":\"#泛型的使用\",\"children\":[{\"level\":3,\"title\":\"泛型上下限\",\"slug\":\"泛型上下限\",\"link\":\"#泛型上下限\",\"children\":[]},{\"level\":3,\"title\":\"泛型类\",\"slug\":\"泛型类\",\"link\":\"#泛型类\",\"children\":[]},{\"level\":3,\"title\":\"泛型接口\",\"slug\":\"泛型接口\",\"link\":\"#泛型接口\",\"children\":[]},{\"level\":3,\"title\":\"泛型方法\",\"slug\":\"泛型方法\",\"link\":\"#泛型方法\",\"children\":[]}]}],\"readingTime\":{\"minutes\":4.62,\"words\":1387},\"filePathRelative\":\"java/core/generics.md\",\"excerpt\":\"<h1> Java核心 - 泛型</h1>\\n<h2> 什么是泛型？</h2>\\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p>\\n<p>泛型的核心就是参数化类型，通过参数将类型传递进来，也就是说所操作的数据类型被指定为一个参数。即就是在泛型的使用过程中，操作的数据类型被指定为一个参数，这种参数可以使用在 接口、类、方法上，称为 泛型接口、泛型类、泛型方法。</p>\\n<p>JDK 为了兼容以前的版本，Java 泛型的实现采用的是“伪泛型”，即在语法上支持泛型，但是在编译时会进行“泛型擦除”，将所有的泛型修改为传入的具体类型。</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
