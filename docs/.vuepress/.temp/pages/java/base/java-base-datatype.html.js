export const data = JSON.parse("{\"key\":\"v-578b2cba\",\"path\":\"/java/base/java-base-datatype.html\",\"title\":\"Java基础 - 3.数据类型\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":3,\"description\":\"Java基础 - 3.数据类型 💓内置数据类型 Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。 实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。 1️⃣byte：(字节型) byte 数据类型是8位、有符号的，以二进制补码表示的整数； 最小值是 -128（-2^7）； 最大值是 127（2^7-1）； 默认值是 0； byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/java/base/java-base-datatype.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"CoderMast编程学习笔记\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java基础 - 3.数据类型\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Java基础 - 3.数据类型 💓内置数据类型 Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。 实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。 1️⃣byte：(字节型) byte 数据类型是8位、有符号的，以二进制补码表示的整数； 最小值是 -128（-2^7）； 最大值是 127（2^7-1）； 默认值是 0； byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java基础 - 3.数据类型\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@qq.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"💓内置数据类型\",\"slug\":\"💓内置数据类型\",\"link\":\"#💓内置数据类型\",\"children\":[{\"level\":3,\"title\":\"1️⃣byte：(字节型)\",\"slug\":\"_1️⃣byte-字节型\",\"link\":\"#_1️⃣byte-字节型\",\"children\":[]},{\"level\":3,\"title\":\"2️⃣short：(短整型)\",\"slug\":\"_2️⃣short-短整型\",\"link\":\"#_2️⃣short-短整型\",\"children\":[]},{\"level\":3,\"title\":\"3️⃣int：(整型)\",\"slug\":\"_3️⃣int-整型\",\"link\":\"#_3️⃣int-整型\",\"children\":[]},{\"level\":3,\"title\":\"4️⃣long：(长整型)\",\"slug\":\"_4️⃣long-长整型\",\"link\":\"#_4️⃣long-长整型\",\"children\":[]},{\"level\":3,\"title\":\"5️⃣float：(单精度浮点型)\",\"slug\":\"_5️⃣float-单精度浮点型\",\"link\":\"#_5️⃣float-单精度浮点型\",\"children\":[]},{\"level\":3,\"title\":\"6️⃣double：(双精度浮点型)\",\"slug\":\"_6️⃣double-双精度浮点型\",\"link\":\"#_6️⃣double-双精度浮点型\",\"children\":[]},{\"level\":3,\"title\":\"7️⃣boolean：(布尔型)\",\"slug\":\"_7️⃣boolean-布尔型\",\"link\":\"#_7️⃣boolean-布尔型\",\"children\":[]},{\"level\":3,\"title\":\"8️⃣char：(字符型)\",\"slug\":\"_8️⃣char-字符型\",\"link\":\"#_8️⃣char-字符型\",\"children\":[]}]},{\"level\":2,\"title\":\"💖引用数据类型\",\"slug\":\"💖引用数据类型\",\"link\":\"#💖引用数据类型\",\"children\":[]},{\"level\":2,\"title\":\"❤️‍🔥常量\",\"slug\":\"❤️‍🔥常量\",\"link\":\"#❤️‍🔥常量\",\"children\":[]},{\"level\":2,\"title\":\"🤎特殊字符\",\"slug\":\"🤎特殊字符\",\"link\":\"#🤎特殊字符\",\"children\":[]},{\"level\":2,\"title\":\"💙N进制表示\",\"slug\":\"💙n进制表示\",\"link\":\"#💙n进制表示\",\"children\":[]},{\"level\":2,\"title\":\"💦类型转换\",\"slug\":\"💦类型转换\",\"link\":\"#💦类型转换\",\"children\":[{\"level\":3,\"title\":\"❣️自动类型转换\",\"slug\":\"❣️自动类型转换\",\"link\":\"#❣️自动类型转换\",\"children\":[]},{\"level\":3,\"title\":\"💖强制类型转换\",\"slug\":\"💖强制类型转换\",\"link\":\"#💖强制类型转换\",\"children\":[]}]},{\"level\":2,\"title\":\"装箱和拆箱\",\"slug\":\"装箱和拆箱\",\"link\":\"#装箱和拆箱\",\"children\":[]}],\"readingTime\":{\"minutes\":6.75,\"words\":2025},\"filePathRelative\":\"java/base/java-base-datatype.md\",\"excerpt\":\"<h1> Java基础 - 3.数据类型</h1>\\n<h2> 💓内置数据类型</h2>\\n<p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\\n<blockquote>\\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\\n</blockquote>\\n<h3> 1️⃣byte：(字节型)</h3>\\n<ul>\\n<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\\n<li>最小值是 -128（-2^7）；</li>\\n<li>最大值是 127（2^7-1）；</li>\\n<li>默认值是 0；</li>\\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
