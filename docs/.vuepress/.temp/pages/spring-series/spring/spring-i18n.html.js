export const data = JSON.parse("{\"key\":\"v-76e3364c\",\"path\":\"/spring-series/spring/spring-i18n.html\",\"title\":\"Spring - 国际化i18n\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":11,\"description\":\"Spring - 国际化i18n i18n概述 国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。 Java国际化 （1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/spring-series/spring/spring-i18n.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"CoderMast编程桅杆\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Spring - 国际化i18n\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Spring - 国际化i18n i18n概述 国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。 Java国际化 （1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Spring - 国际化i18n\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@163.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"i18n概述\",\"slug\":\"i18n概述\",\"link\":\"#i18n概述\",\"children\":[]},{\"level\":2,\"title\":\"Java国际化\",\"slug\":\"java国际化\",\"link\":\"#java国际化\",\"children\":[]},{\"level\":2,\"title\":\"Spring6国际化\",\"slug\":\"spring6国际化\",\"link\":\"#spring6国际化\",\"children\":[{\"level\":3,\"title\":\"MessageSource接口\",\"slug\":\"messagesource接口\",\"link\":\"#messagesource接口\",\"children\":[]},{\"level\":3,\"title\":\"使用Spring6国际化\",\"slug\":\"使用spring6国际化\",\"link\":\"#使用spring6国际化\",\"children\":[]}]}],\"readingTime\":{\"minutes\":2.77,\"words\":831},\"filePathRelative\":\"spring-series/spring/spring-i18n.md\",\"excerpt\":\"<h1> Spring - 国际化i18n</h1>\\n<h2> i18n概述</h2>\\n<p>国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。</p>\\n<h2> Java国际化</h2>\\n<p>（1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
