export const data = JSON.parse("{\"key\":\"v-2ea65610\",\"path\":\"/spring-series/spring/annotations-beans.html\",\"title\":\"Spring - 基于注解管理Bean\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":5,\"description\":\"Spring - 基于注解管理Bean 从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。 Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。 Spring 通过注解实现自动装配的步骤如下： 引入依赖 开启组件扫描 使用注解定义 Bean 依赖注入\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.codermast.com/spring-series/spring/annotations-beans.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"编程桅杆\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Spring - 基于注解管理Bean\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Spring - 基于注解管理Bean 从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。 Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。 Spring 通过注解实现自动装配的步骤如下： 引入依赖 开启组件扫描 使用注解定义 Bean 依赖注入\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"CoderMast\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Spring - 基于注解管理Bean\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"CoderMast\\\",\\\"url\\\":\\\"https://www.codermast.com\\\",\\\"email\\\":\\\"codermast@163.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"创建子模块\",\"slug\":\"创建子模块\",\"link\":\"#创建子模块\",\"children\":[]},{\"level\":2,\"title\":\"开启组件扫描\",\"slug\":\"开启组件扫描\",\"link\":\"#开启组件扫描\",\"children\":[]},{\"level\":2,\"title\":\"使用注解定义bean\",\"slug\":\"使用注解定义bean\",\"link\":\"#使用注解定义bean\",\"children\":[]},{\"level\":2,\"title\":\"数据注入\",\"slug\":\"数据注入\",\"link\":\"#数据注入\",\"children\":[{\"level\":3,\"title\":\"@Autowired注入\",\"slug\":\"autowired注入\",\"link\":\"#autowired注入\",\"children\":[]},{\"level\":3,\"title\":\"@Resource注入\",\"slug\":\"resource注入\",\"link\":\"#resource注入\",\"children\":[]}]},{\"level\":2,\"title\":\"Spring全注解开发\",\"slug\":\"spring全注解开发\",\"link\":\"#spring全注解开发\",\"children\":[]}],\"readingTime\":{\"minutes\":8.6,\"words\":2581},\"filePathRelative\":\"spring-series/spring/annotations-beans.md\",\"excerpt\":\"<h1> Spring - 基于注解管理Bean</h1>\\n<p>从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。</p>\\n<p>Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。</p>\\n<p>Spring 通过注解实现自动装配的步骤如下：</p>\\n<ol>\\n<li>引入依赖</li>\\n<li>开启组件扫描</li>\\n<li>使用注解定义 Bean</li>\\n<li>依赖注入</li>\\n</ol>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
