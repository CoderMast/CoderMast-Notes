export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"首页","i":"home"},["/index.html","/README.md"]],
  ["v-70bc2959","/algorithm/",{"e":"<h1> 算法题解</h1>\n","y":"a","t":"算法题解","I":0},["/algorithm/index.html","/algorithm/Readme.md"]],
  ["v-d440f426","/tools/",{"e":"<h1> 工具使用</h1>\n","y":"a","t":"工具使用","I":0},["/tools/index.html","/tools/readme.md"]],
  ["v-884a0bbc","/problems/",{"e":"<h1> 题解</h1>\n","y":"a","t":"题解","I":0},["/problems/index.html","/problems/Readme.md"]],
  ["v-9a72c4ae","/computer/cn/",{"e":"<h1> 计算机网络</h1>\n","y":"a","t":"计算机网络","O":4},["/computer/cn/index.html","/computer/cn/Readme.md"]],
  ["v-1be8c5c4","/computer/cn/cn-tcp-3-4.html",{"e":"<h1> TCP三次握手和四次挥手图文详解</h1>\n<figure><figcaption>tcp连接</figcaption></figure>\n<h2> 什么是TCP连接？</h2>\n<p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议是同一层内另一个重要的传输协议。在因特网协议族中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。</p>\n<h2> 三次握手</h2>\n<p>三次握手是发生在TCP的连接过程中的，具体的步骤如下：</p>","y":"a","t":"TCP三次握手和四次挥手图文详解"},["/computer/cn/cn-tcp-3-4","/computer/cn/cn-tcp-3-4.md"]],
  ["v-9a72c470","/computer/co/",{"e":"<h1> 计算机组成原理</h1>\n","y":"a","t":"计算机组成原理","O":2},["/computer/co/index.html","/computer/co/readme.md"]],
  ["v-f6a06ba6","/computer/ds/queue.html",{"e":"<h1> 队列</h1>\n","y":"a","t":"队列"},["/computer/ds/queue","/computer/ds/queue.md"]],
  ["v-9a72bbf6","/computer/ds/",{"e":"<h1> 数据结构</h1>\n","y":"a","t":"数据结构","O":1},["/computer/ds/index.html","/computer/ds/readme.md"]],
  ["v-9a726960","/computer/os/",{"e":"<h1> 计算机操作系统</h1>\n","y":"a","t":"计算机操作系统","O":3},["/computer/os/index.html","/computer/os/readme.md"]],
  ["v-21ba2ec8","/database/mysql/",{"e":"<h1> MySQL 数据库</h1>\n","y":"a","t":"MySQL 数据库","I":0},["/database/mysql/index.html","/database/mysql/readme.md"]],
  ["v-2921a50f","/database/redis/",{"e":"<h1> Redis 数据库</h1>\n","y":"a","t":"Redis 数据库","I":0},["/database/redis/index.html","/database/redis/readme.md"]],
  ["v-16722c46","/java/collection/",{"c":["Java"],"e":"<h1> Java集合框架</h1>\n","y":"a","t":"Java集合框架","O":2},["/java/collection/index.html","/java/collection/readme.md"]],
  ["v-e0b06004","/java/base/java-base-final.html",{"e":"<h1> Final关键字的用法及加载时机</h1>\n<h2> 修饰变量</h2>\n<p>final关键字修饰变量表示该变量一经初始化，则无法被修改。</p>\n<ul>\n<li>基本类型和String类型：这类一般都是通过字面量进行赋值，一经初始化无法改变。</li>\n<li>其他引用类型：这种类型我们无法改变常量指向的引用，但是仍然可以改变引用指向的对象，即引用指向的地址。</li>\n</ul>\n<h3> 静态常量和对象常量</h3>\n<p>这里根据是否被static修饰可以将常量分为两类：</p>\n<ol>\n<li><strong>被final和static关键字同时修饰的变量</strong></li>\n</ol>","y":"a","t":"Final关键字的用法及加载时机"},["/java/base/java-base-final","/java/base/java-base-final.md"]],
  ["v-5adb4bb0","/java/base/java-base-static.html",{"e":"<h1> Static关键字的五种用法详解</h1>\n<p>Static的五种用法大致如下：</p>\n<ul>\n<li>修饰成员变量，使其成为类变量，也叫静态变量</li>\n<li>修饰成员方法，使其成为类方法</li>\n<li>修饰内部类，使其成为静态内部类</li>\n<li>静态代码块</li>\n<li>静态导包</li>\n</ul>\n<blockquote>\n<p>直接一点将，static关键字就是把属性和方法变为类相关，而不是实例相关。</p>\n</blockquote>\n<h2> 修饰成员变量</h2>\n<p>被static关键字修饰的属性叫做静态属性，也叫类属性。顾名思义现在该属性为该类所有，而非该类实例化的对象所有，在类的加载阶段进行初始化。虽然使用类实例化的对象也能够调用该属性，但是该属性是属于类所有，所有该类的实例化对象和该类共享一个值，即操作的是同一个值。</p>","y":"a","t":"Static关键字的五种用法详解"},["/java/base/java-base-static","/java/base/java-base-static.md"]],
  ["v-673af10a","/java/base/",{"e":"<h1> Java基础知识</h1>\n","y":"a","t":"Java基础知识","O":1},["/java/base/index.html","/java/base/readme.md"]],
  ["v-6cec0ebc","/java/jvm/",{"e":"<h1> JVM</h1>\n","y":"a","t":"JVM","O":5},["/java/jvm/index.html","/java/jvm/readme.md"]],
  ["v-4c274696","/java/oop/java-base-basic-grammar.html",{"e":"<h1> Java基础 - 基本语法</h1>\n","y":"a","t":"Java基础 - 基本语法"},["/java/oop/java-base-basic-grammar","/java/oop/java-base-basic-grammar.md"]],
  ["v-03c5c12d","/java/oop/java-base-oop.html",{"e":"<h1> Java基础 - 面向对象</h1>\n","y":"a","t":"Java基础 - 面向对象"},["/java/oop/java-base-oop","/java/oop/java-base-oop.md"]],
  ["v-6ce7b6da","/java/oop/",{"c":["Java"],"e":"<h1> Java - 面向对象</h1>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">预览</p>\n<p>本章节主要总结了Java编程语言的基础知识，其中包含了：基础语法、面向对象、数据类型、关键字详解几个方面展开。</p>\n</div>\n","y":"a","t":"Java面向对象","O":3},["/java/oop/index.html","/java/oop/readme.md"]],
  ["v-48579df1","/java/thread/",{"c":["Java"],"e":"<h1> Java多线程和并发</h1>\n","y":"a","t":"Java多线程和并发","O":4},["/java/thread/index.html","/java/thread/readme.md"]],
  ["v-594b2522","/tools/stata/",{"e":"<h1> Stata 分析工具</h1>\n","y":"a","t":"Stata 分析工具","I":0},["/tools/stata/index.html","/tools/stata/readme.md"]],
  ["v-5e01a32b","/tools/stata/stata-commom-instruct.html",{"e":"<h1> Stata 常见指令</h1>\n<h2> 1.输入数据</h2>\n<div class=\"language-stata line-numbers-mode\" data-ext=\"stata\"><pre class=\"language-stata\"><code><span class=\"token command keyword\">input</span> x y\n...\n...\n...\n<span class=\"token command keyword\">end</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Stata 常见指令","I":0},["/tools/stata/stata-commom-instruct","/tools/stata/stata-commom-instruct.md"]],
  ["v-a94b64b0","/problems/leetcode/leetcode15.html",{"e":"<h1> 15.三数之和</h1>\n<h2> 题目描述</h2>\n<p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p>\n<p>你返回所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p>示例 1：</p>\n<p>输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]</p>\n<p>解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。\n示例 2：</p>","y":"a","t":"15.三数之和","O":15},["/problems/leetcode/leetcode15","/problems/leetcode/leetcode15.md"]],
  ["v-ebd584f6","/problems/leetcode/leetcode1646.html",{"e":"<h1> 1646. 获取生成数组中的最大值</h1>\n<h2> 题目介绍</h2>\n<p>给你一个整数 n 。按下述规则生成一个长度为 n + 1 的数组 nums ：</p>\n<p>nums[0] = 0\nnums[1] = 1\n当 2 &lt;= 2 * i &lt;= n 时，nums[2 * i] = nums[i]\n当 2 &lt;= 2 * i + 1 &lt;= n 时，nums[2 * i + 1] = nums[i] + nums[i + 1]\n返回生成数组 nums 中的 最大 值。</p>\n<h2> 题目地址</h2>\n<p><a href=\"https://leetcode-cn.com/problems/get-maximum-in-generated-array/\" target=\"_blank\" rel=\"noopener noreferrer\">1646. 获取生成数组中的最大值</a></p>","y":"a","t":"1646. 获取生成数组中的最大值","O":1646},["/problems/leetcode/leetcode1646","/problems/leetcode/leetcode1646.md"]],
  ["v-004e2d72","/problems/leetcode/leetcode455.html",{"e":"<h1> 455.分发饼干</h1>\n<h2> 题目描述</h2>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p>示例 1:</p>\n<p>输入: g = [1,2,3], s = [1,1]\n输出: 1\n解释:\n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n示例 2:</p>","y":"a","t":"455.分发饼干","O":455},["/problems/leetcode/leetcode455","/problems/leetcode/leetcode455.md"]],
  ["v-66839488","/problems/leetcode/leetcode509.html",{"e":"<h1> 509. 斐波那契数</h1>\n<h2> 题目描述</h2>\n<p>斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<p>F(0) = 0，F(1) = 1\nF(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1\n给定 n ，请计算 F(n) 。</p>\n<p>示例 1：</p>\n<p>输入：n = 2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1</p>\n<p>示例 2：\n输入：n = 3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2</p>","y":"a","t":"509. 斐波那契数","O":509},["/problems/leetcode/leetcode509","/problems/leetcode/leetcode509.md"]],
  ["v-a28a27e0","/problems/leetcode/leetcode62.html",{"e":"<h1> 62.不同路径</h1>\n<h2> 题目描述</h2>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p>输入：m = 3, n = 7\n输出：28\n示例 2：</p>\n<p>输入：m = 3, n = 2\n输出：3\n解释：\n从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向下 -&gt; 向下</li>\n<li>向下 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向下\n示例 3：</li>\n</ol>","y":"a","t":"62.不同路径","O":62},["/problems/leetcode/leetcode62","/problems/leetcode/leetcode62.md"]],
  ["v-71afee22","/problems/leetcode/leetcode6322.html",{"e":"<h1> 6322.检查骑士巡视方案</h1>\n<h2> 题目描述</h2>\n<p>骑士在一张 n x n 的棋盘上巡视。在有效的巡视方案中，骑士会从棋盘的 左上角 出发，并且访问棋盘上的每个格子 恰好一次 。</p>\n<p>给你一个 n x n 的整数矩阵 grid ，由范围 [0, n * n - 1] 内的不同整数组成，其中 grid[row][col] 表示单元格 (row, col) 是骑士访问的第 grid[row][col] 个单元格。骑士的行动是从下标 0 开始的。</p>\n<p>如果 grid 表示了骑士的有效巡视方案，返回 true；否则返回 false。</p>\n<p>注意，骑士行动时可以垂直移动两个格子且水平移动一个格子，或水平移动两个格子且垂直移动一个格子。下图展示了骑士从某个格子出发可能的八种行动路线。</p>","y":"a","t":"6322.检查骑士巡视方案","O":6322},["/problems/leetcode/leetcode6322","/problems/leetcode/leetcode6322.md"]],
  ["v-3f9113da","/problems/leetcode/leetcode70.html",{"e":"<h1> 70. 爬楼梯</h1>\n<h2> 题目描述</h2>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶\n示例 2：</li>\n</ol>\n<p>输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>","y":"a","t":"70. 爬楼梯","O":70},["/problems/leetcode/leetcode70","/problems/leetcode/leetcode70.md"]],
  ["v-04c0516d","/problems/leetcode/leetcode746.html",{"e":"<h1> 746. 使用最小花费爬楼梯</h1>\n<h2> 题目描述</h2>\n<p>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p>\n<p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p>\n<p>请你计算并返回达到楼梯顶部的最低花费。</p>\n<p>示例 1：</p>\n<p>输入：cost = [10,15,20]\n输出：15\n解释：你将从下标为 1 的台阶开始。</p>\n<ul>\n<li>支付 15 ，向上爬两个台阶，到达楼梯顶部。\n总花费为 15 。\n示例 2：</li>\n</ul>","y":"a","t":"746. 使用最小花费爬楼梯","O":746},["/problems/leetcode/leetcode746","/problems/leetcode/leetcode746.md"]],
  ["v-56c36d18","/problems/leetcode/",{"e":"<h1> Leetcode 题解</h1>\n","y":"a","t":"Leetcode 题解","I":0},["/problems/leetcode/index.html","/problems/leetcode/readme.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-a94a8cca","/computer/",{"y":"p","t":"Computer"},["/computer/index.html"]],
  ["v-2e25198a","/database/",{"y":"p","t":"Database"},["/database/index.html"]],
  ["v-14c69af4","/java/",{"y":"p","t":"Java"},["/java/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},["/timeline/index.html"]],
  ["v-5831b135","/category/java/",{"y":"p","t":"Java 分类","I":0},["/category/java/index.html"]],
]
