export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"首页","i":"home"},["/index.html","/README.md"]],
  ["v-70bc2959","/algorithm/",{"e":"<h1> 算法题解</h1>\n","y":"a","t":"算法题解","I":0},["/algorithm/index.html","/algorithm/Readme.md"]],
  ["v-2e25198a","/database/",{"e":"<h1> 数据库</h1>\n","y":"a","t":"数据库","I":0},["/database/index.html","/database/readme.md"]],
  ["v-884a0bbc","/problems/",{"e":"<h1> 题解</h1>\n","y":"a","t":"题解","I":0},["/problems/index.html","/problems/Readme.md"]],
  ["v-d440f426","/tools/",{"e":"<h1> 工具使用</h1>\n","y":"a","t":"工具使用","I":0},["/tools/index.html","/tools/readme.md"]],
  ["v-9a72c4ae","/computer/cn/",{"e":"<h1> 计算机网络</h1>\n","y":"a","t":"计算机网络","O":4},["/computer/cn/index.html","/computer/cn/Readme.md"]],
  ["v-1be8c5c4","/computer/cn/cn-tcp-3-4.html",{"e":"<h1> TCP三次握手和四次挥手图文详解</h1>\n<figure><figcaption>tcp连接</figcaption></figure>\n<h2> 什么是TCP连接？</h2>\n<p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议是同一层内另一个重要的传输协议。在因特网协议族中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。</p>\n<h2> 三次握手</h2>\n<p>三次握手是发生在TCP的连接过程中的，具体的步骤如下：</p>","y":"a","t":"TCP三次握手和四次挥手图文详解"},["/computer/cn/cn-tcp-3-4","/computer/cn/cn-tcp-3-4.md"]],
  ["v-9a72c470","/computer/co/",{"e":"<h1> 计算机组成原理</h1>\n","y":"a","t":"计算机组成原理","O":2},["/computer/co/index.html","/computer/co/readme.md"]],
  ["v-cbc27fe0","/computer/ds/graph.html",{"e":"<h1> 第六章 图</h1>\n","y":"a","t":"第六章 图","O":6},["/computer/ds/graph","/computer/ds/graph.md"]],
  ["v-5234f19a","/computer/ds/introduction.html",{"e":"<h1> 第一章 绪论</h1>\n<h2> 1.1数据结构的基本概念</h2>\n<h3> 1.1.1基本概念和术语</h3>\n<ol>\n<li>数据</li>\n</ol>\n<p>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</p>\n<ol start=\"2\">\n<li>数据元素</li>\n</ol>\n<p>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分隔的最小单位。</p>\n<ol start=\"3\">\n<li>数据对象</li>\n</ol>","y":"a","t":"第一章 绪论","O":1},["/computer/ds/introduction","/computer/ds/introduction.md"]],
  ["v-fd067b50","/computer/ds/linear-list.html",{"e":"<h1> 第二章 线性表</h1>\n<h2> 2.1线性表的定义和基本操作</h2>\n<h3> 2.1.1定义</h3>\n<p>线性表是具有相同数据类型的n个数据元素的有限集序列，其中n为表长，当n=0时线性表是一个空表。若用L命名线性表，其一般表示为：L = ( a<sub>1</sub> ,a<sub>2</sub> ,...,a<sub>i</sub> ,a<sub>i+1</sub> ,...,a<sub>n</sub> )</p>\n<h3> 2.1.2基本操作</h3>\n<ul>\n<li><code>InitList(&amp;L)</code>:初始化表，构造一个空的线性表。</li>\n<li><code>Length(L)</code>:求表长，返回线性表L的长度，即L中元素的个数。</li>\n<li><code>LocateElem(L,e)</code>:按值查找操作，在表L中查找具有给定关键字值的元素。</li>\n<li><code>GetElem(L,i)</code>:按位查找操作。获取表L中第i个位置的数据元素的值。</li>\n<li><code>ListInsert(&amp;L,i,e)</code>:插入操作，在表L中的第i个位置上插入指定的元素e.</li>\n<li><code>ListDelete(&amp;L,i,&amp;e)</code>:删除操作，删除表L中的第i个位置的元素，并用e返回删除元素的值。</li>\n<li><code>PrintList(L)</code>:输出操作，按前后顺序输出线性表L的所有元素值。</li>\n<li><code>Empty(L)</code>:判空操作，若L表为空，则返回True，否则返回false。</li>\n<li><code>DestroyList(&amp;L)</code>:销毁操作，销毁线性表，并释放线性表L所占用的内存空间。</li>\n</ul>","y":"a","t":"第二章 线性表","O":2},["/computer/ds/linear-list","/computer/ds/linear-list.md"]],
  ["v-9a72bbf6","/computer/ds/",{"e":"<h1> 数据结构</h1>\n","y":"a","t":"数据结构","O":1},["/computer/ds/index.html","/computer/ds/readme.md"]],
  ["v-63bc7d0c","/computer/ds/search.html",{"e":"<h1> 第七章 查找</h1>\n","y":"a","t":"第七章 查找","O":7},["/computer/ds/search","/computer/ds/search.md"]],
  ["v-4790f196","/computer/ds/sort.html",{"e":"<h1> 第八章 排序</h1>\n<h2> 8.1排序的基本概念</h2>\n<h2> 8.2插入排序</h2>\n<h2> 8.3交换排序</h2>\n<h2> 8.4选择排序</h2>\n<h2> 8.5归并排序和基数排序</h2>\n<h2> 8.6内部排序的算法比较和应用</h2>\n<h2> 8.7外部排序</h2>\n","y":"a","t":"第八章 排序","O":8},["/computer/ds/sort","/computer/ds/sort.md"]],
  ["v-0300d146","/computer/ds/stack-queue-array.html",{"e":"<h1> 第三章 栈、队列、数组</h1>\n","y":"a","t":"第三章 栈、队列、数组","O":3},["/computer/ds/stack-queue-array","/computer/ds/stack-queue-array.md"]],
  ["v-29da9c43","/computer/ds/string.html",{"e":"<h1> 第四章 串</h1>\n","y":"a","t":"第四章 串","O":4},["/computer/ds/string","/computer/ds/string.md"]],
  ["v-f1799970","/computer/ds/tree-bree-tree.html",{"e":"<h1> 第五章 树与二叉树</h1>\n","y":"a","t":"第五章 树与二叉树","O":5},["/computer/ds/tree-bree-tree","/computer/ds/tree-bree-tree.md"]],
  ["v-9a726960","/computer/os/",{"e":"<h1> 计算机操作系统</h1>\n","y":"a","t":"计算机操作系统","O":3},["/computer/os/index.html","/computer/os/readme.md"]],
  ["v-21ba2ec8","/database/mysql/",{"e":"<h1> MySQL 数据库</h1>\n<h2> 学习目录</h2>\n<ul>\n<li>基础篇\n<ol>\n<li>MySQL基础</li>\n<li>SQL基础语法</li>\n<li>函数</li>\n<li>约束</li>\n<li>多表查询</li>\n<li>事务</li>\n</ol>\n</li>\n<li>进阶篇\n<ol>\n<li>存储引擎</li>\n<li>索引</li>\n<li>SQL优化</li>\n<li>视图</li>\n<li>存储过程</li>\n<li>触发器</li>\n<li>锁</li>\n<li>InnoDB引擎</li>\n<li>MySQL管理</li>\n</ol>\n</li>\n<li>运维篇\n<ol>\n<li>日志</li>\n<li>主从复制</li>\n<li>分库分表</li>\n<li>读写分离</li>\n</ol>\n</li>\n</ul>","y":"a","t":"MySQL 数据库","I":0},["/database/mysql/index.html","/database/mysql/readme.md"]],
  ["v-2921a50f","/database/redis/",{"e":"<h1> Redis 数据库</h1>\n","y":"a","t":"Redis 数据库","I":0},["/database/redis/index.html","/database/redis/readme.md"]],
  ["v-e0b06004","/java/base/java-base-final.html",{"e":"<h1> Final关键字的用法及加载时机</h1>\n<h2> 修饰变量</h2>\n<p>final关键字修饰变量表示该变量一经初始化，则无法被修改。</p>\n<ul>\n<li>基本类型和String类型：这类一般都是通过字面量进行赋值，一经初始化无法改变。</li>\n<li>其他引用类型：这种类型我们无法改变常量指向的引用，但是仍然可以改变引用指向的对象，即引用指向的地址。</li>\n</ul>\n<h3> 静态常量和对象常量</h3>\n<p>这里根据是否被static修饰可以将常量分为两类：</p>\n<ol>\n<li><strong>被final和static关键字同时修饰的变量</strong></li>\n</ol>","y":"a","t":"Final关键字的用法及加载时机"},["/java/base/java-base-final","/java/base/java-base-final.md"]],
  ["v-5adb4bb0","/java/base/java-base-static.html",{"e":"<h1> Static关键字的五种用法详解</h1>\n<p>Static的五种用法大致如下：</p>\n<ul>\n<li>修饰成员变量，使其成为类变量，也叫静态变量</li>\n<li>修饰成员方法，使其成为类方法</li>\n<li>修饰内部类，使其成为静态内部类</li>\n<li>静态代码块</li>\n<li>静态导包</li>\n</ul>\n<blockquote>\n<p>直接一点将，static关键字就是把属性和方法变为类相关，而不是实例相关。</p>\n</blockquote>\n<h2> 修饰成员变量</h2>\n<p>被static关键字修饰的属性叫做静态属性，也叫类属性。顾名思义现在该属性为该类所有，而非该类实例化的对象所有，在类的加载阶段进行初始化。虽然使用类实例化的对象也能够调用该属性，但是该属性是属于类所有，所有该类的实例化对象和该类共享一个值，即操作的是同一个值。</p>","y":"a","t":"Static关键字的五种用法详解"},["/java/base/java-base-static","/java/base/java-base-static.md"]],
  ["v-673af10a","/java/base/",{"e":"<h1> Java基础知识</h1>\n","y":"a","t":"Java基础知识","O":1},["/java/base/index.html","/java/base/readme.md"]],
  ["v-16722c46","/java/collection/",{"c":["Java"],"e":"<h1> Java集合框架</h1>\n","y":"a","t":"Java集合框架","O":2},["/java/collection/index.html","/java/collection/readme.md"]],
  ["v-6cec0ebc","/java/jvm/",{"e":"<h1> JVM</h1>\n","y":"a","t":"JVM","O":5},["/java/jvm/index.html","/java/jvm/readme.md"]],
  ["v-4c274696","/java/oop/java-base-basic-grammar.html",{"e":"<h1> Java基础 - 基本语法</h1>\n","y":"a","t":"Java基础 - 基本语法"},["/java/oop/java-base-basic-grammar","/java/oop/java-base-basic-grammar.md"]],
  ["v-03c5c12d","/java/oop/java-base-oop.html",{"e":"<h1> Java基础 - 面向对象</h1>\n","y":"a","t":"Java基础 - 面向对象"},["/java/oop/java-base-oop","/java/oop/java-base-oop.md"]],
  ["v-6ce7b6da","/java/oop/",{"c":["Java"],"e":"<h1> Java - 面向对象</h1>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">预览</p>\n<p>本章节主要总结了Java编程语言的基础知识，其中包含了：基础语法、面向对象、数据类型、关键字详解几个方面展开。</p>\n</div>\n","y":"a","t":"Java面向对象","O":3},["/java/oop/index.html","/java/oop/readme.md"]],
  ["v-48579df1","/java/thread/",{"c":["Java"],"e":"<h1> Java多线程和并发</h1>\n","y":"a","t":"Java多线程和并发","O":4},["/java/thread/index.html","/java/thread/readme.md"]],
  ["v-a94b64b0","/problems/leetcode/leetcode15.html",{"e":"<h1> 15.三数之和</h1>\n<h2> 题目描述</h2>\n<p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p>\n<p>你返回所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p>示例 1：</p>\n<p>输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]</p>\n<p>解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。\n示例 2：</p>","y":"a","t":"15.三数之和","O":15},["/problems/leetcode/leetcode15","/problems/leetcode/leetcode15.md"]],
  ["v-ebd584f6","/problems/leetcode/leetcode1646.html",{"e":"<h1> 1646. 获取生成数组中的最大值</h1>\n<h2> 题目介绍</h2>\n<p>给你一个整数 n 。按下述规则生成一个长度为 n + 1 的数组 nums ：</p>\n<p>nums[0] = 0\nnums[1] = 1\n当 2 &lt;= 2 * i &lt;= n 时，nums[2 * i] = nums[i]\n当 2 &lt;= 2 * i + 1 &lt;= n 时，nums[2 * i + 1] = nums[i] + nums[i + 1]\n返回生成数组 nums 中的 最大 值。</p>\n<h2> 题目地址</h2>\n<p><a href=\"https://leetcode-cn.com/problems/get-maximum-in-generated-array/\" target=\"_blank\" rel=\"noopener noreferrer\">1646. 获取生成数组中的最大值</a></p>","y":"a","t":"1646. 获取生成数组中的最大值","O":1646},["/problems/leetcode/leetcode1646","/problems/leetcode/leetcode1646.md"]],
  ["v-004e2d72","/problems/leetcode/leetcode455.html",{"e":"<h1> 455.分发饼干</h1>\n<h2> 题目描述</h2>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p>示例 1:</p>\n<p>输入: g = [1,2,3], s = [1,1]\n输出: 1\n解释:\n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n示例 2:</p>","y":"a","t":"455.分发饼干","O":455},["/problems/leetcode/leetcode455","/problems/leetcode/leetcode455.md"]],
  ["v-66839488","/problems/leetcode/leetcode509.html",{"e":"<h1> 509. 斐波那契数</h1>\n<h2> 题目描述</h2>\n<p>斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<p>F(0) = 0，F(1) = 1\nF(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1\n给定 n ，请计算 F(n) 。</p>\n<p>示例 1：</p>\n<p>输入：n = 2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1</p>\n<p>示例 2：\n输入：n = 3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2</p>","y":"a","t":"509. 斐波那契数","O":509},["/problems/leetcode/leetcode509","/problems/leetcode/leetcode509.md"]],
  ["v-a28a27e0","/problems/leetcode/leetcode62.html",{"e":"<h1> 62.不同路径</h1>\n<h2> 题目描述</h2>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p>输入：m = 3, n = 7\n输出：28\n示例 2：</p>\n<p>输入：m = 3, n = 2\n输出：3\n解释：\n从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向下 -&gt; 向下</li>\n<li>向下 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向下\n示例 3：</li>\n</ol>","y":"a","t":"62.不同路径","O":62},["/problems/leetcode/leetcode62","/problems/leetcode/leetcode62.md"]],
  ["v-71afee22","/problems/leetcode/leetcode6322.html",{"e":"<h1> 6322.检查骑士巡视方案</h1>\n<h2> 题目描述</h2>\n<p>骑士在一张 n x n 的棋盘上巡视。在有效的巡视方案中，骑士会从棋盘的 左上角 出发，并且访问棋盘上的每个格子 恰好一次 。</p>\n<p>给你一个 n x n 的整数矩阵 grid ，由范围 [0, n * n - 1] 内的不同整数组成，其中 grid[row][col] 表示单元格 (row, col) 是骑士访问的第 grid[row][col] 个单元格。骑士的行动是从下标 0 开始的。</p>\n<p>如果 grid 表示了骑士的有效巡视方案，返回 true；否则返回 false。</p>\n<p>注意，骑士行动时可以垂直移动两个格子且水平移动一个格子，或水平移动两个格子且垂直移动一个格子。下图展示了骑士从某个格子出发可能的八种行动路线。</p>","y":"a","t":"6322.检查骑士巡视方案","O":6322},["/problems/leetcode/leetcode6322","/problems/leetcode/leetcode6322.md"]],
  ["v-3f9113da","/problems/leetcode/leetcode70.html",{"e":"<h1> 70. 爬楼梯</h1>\n<h2> 题目描述</h2>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶\n示例 2：</li>\n</ol>\n<p>输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>","y":"a","t":"70. 爬楼梯","O":70},["/problems/leetcode/leetcode70","/problems/leetcode/leetcode70.md"]],
  ["v-04c0516d","/problems/leetcode/leetcode746.html",{"e":"<h1> 746. 使用最小花费爬楼梯</h1>\n<h2> 题目描述</h2>\n<p>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p>\n<p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p>\n<p>请你计算并返回达到楼梯顶部的最低花费。</p>\n<p>示例 1：</p>\n<p>输入：cost = [10,15,20]\n输出：15\n解释：你将从下标为 1 的台阶开始。</p>\n<ul>\n<li>支付 15 ，向上爬两个台阶，到达楼梯顶部。\n总花费为 15 。\n示例 2：</li>\n</ul>","y":"a","t":"746. 使用最小花费爬楼梯","O":746},["/problems/leetcode/leetcode746","/problems/leetcode/leetcode746.md"]],
  ["v-56c36d18","/problems/leetcode/",{"e":"<h1> Leetcode 题解</h1>\n","y":"a","t":"Leetcode 题解","I":0},["/problems/leetcode/index.html","/problems/leetcode/readme.md"]],
  ["v-594b2522","/tools/stata/",{"e":"<h1> Stata 分析工具</h1>\n","y":"a","t":"Stata 分析工具","I":0},["/tools/stata/index.html","/tools/stata/readme.md"]],
  ["v-5e01a32b","/tools/stata/stata-commom-instruct.html",{"e":"<h1> Stata 常见指令</h1>\n<h2> 1.输入数据</h2>\n<div class=\"language-stata line-numbers-mode\" data-ext=\"stata\"><pre class=\"language-stata\"><code><span class=\"token command keyword\">input</span> x y\n...\n...\n...\n<span class=\"token command keyword\">end</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Stata 常见指令","I":0},["/tools/stata/stata-commom-instruct","/tools/stata/stata-commom-instruct.md"]],
  ["v-446027a3","/database/mysql/advance/innodb-engine.html",{"e":"<h1> InnoDB引擎</h1>\n","y":"a","t":"InnoDB引擎","O":9},["/database/mysql/advance/innodb-engine","/database/mysql/advance/innodb-engine.md"]],
  ["v-e9733bf2","/database/mysql/advance/mysql-index.html",{"e":"<h1> 索引</h1>\n<h2> 索引概述</h2>\n<h3> 概念</h3>\n<p>索引是帮助MySQL的<code>数据结构</code>（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式饮用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p>\n<h3> 优缺点</h3>\n<ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>提高数据检索的效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>","y":"a","t":"索引","O":2},["/database/mysql/advance/mysql-index","/database/mysql/advance/mysql-index.md"]],
  ["v-b012e064","/database/mysql/advance/mysql-lock.html",{"e":"<h1> 锁</h1>\n<h2> 介绍</h2>\n<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>\n<h2> 全局锁</h2>\n<h3> 介绍</h3>\n<p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p>\n<p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p>","y":"a","t":"锁","O":8},["/database/mysql/advance/mysql-lock","/database/mysql/advance/mysql-lock.md"]],
  ["v-68410858","/database/mysql/advance/mysql-manage.html",{"e":"<h1> MySQL管理</h1>\n","y":"a","t":"MySQL管理","O":10},["/database/mysql/advance/mysql-manage","/database/mysql/advance/mysql-manage.md"]],
  ["v-23ccb63e","/database/mysql/advance/mysql-trigger.html",{"e":"<h1> 触发器</h1>\n<h2> 介绍</h2>\n<p>触发器是于表有关的数据库对象，指在insert、update、delete之前或者之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以与协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p>\n<p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">举例</p>\n<p>语句级触发：执行一次SQL，触发器会触发一次，无论影响多少行。\n行级触发：如一个SQL语句更新了3行数据，则触发器会触发三次。</p>\n</div>","y":"a","t":"触发器","O":7},["/database/mysql/advance/mysql-trigger","/database/mysql/advance/mysql-trigger.md"]],
  ["v-fcbb12d8","/database/mysql/advance/mysql-view.html",{"e":"<h1> 视图</h1>\n<h2> 介绍和基本语法</h2>\n<h3> 介绍</h3>\n<p>视图View是一种虚拟存在的表，视图中的数据并不在数据库中实际存在，行和列数据来自定义视图中使用的表，并且是在使用视图时动态生成的。</p>\n<p>简单的来说，视图不保存数据，只是保存了查询的SQL逻辑，不保存查询的结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">简单理解</p>\n<p>可以理解为给SQL语句设置别名，我们在使用的时候可以直接使用别名进行子查询、联合查询等操作。</p>\n</div>","y":"a","t":"视图","O":5},["/database/mysql/advance/mysql-view","/database/mysql/advance/mysql-view.md"]],
  ["v-836b6296","/database/mysql/advance/",{"e":"<h1> 进阶篇</h1>\n","y":"a","t":"进阶篇","O":2},["/database/mysql/advance/index.html","/database/mysql/advance/readme.md"]],
  ["v-4ad17048","/database/mysql/advance/sql-optimize.html",{"e":"<h1> SQL优化</h1>\n<h2> insert优化</h2>\n<h3> 批量插入</h3>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><pre class=\"language-sql\"><code><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> table_name <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>values_list<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"SQL优化","O":4},["/database/mysql/advance/sql-optimize","/database/mysql/advance/sql-optimize.md"]],
  ["v-3174569a","/database/mysql/advance/sql-perfomance-analysis.html",{"e":"<h1> SQL性能分析</h1>\n<h2> SQL执行频率</h2>\n<p>MySQL客户端连接成功后，通过 SHOW [session | global] status 命令可以查看服务器状态信息。</p>\n<p>通过如下指令，可以查看当前数据库的INSERT、SELECT、UPDATE、DELETE操作的访问频次：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><pre class=\"language-sql\"><code><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token keyword\">STATUS</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">\"Com_______\"</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"SQL性能分析","O":3},["/database/mysql/advance/sql-perfomance-analysis","/database/mysql/advance/sql-perfomance-analysis.md"]],
  ["v-336c56b0","/database/mysql/advance/storage-engine.html",{"e":"<h1> 存储引擎</h1>\n<h2> MySQL的体系结构</h2>\n<figure><figcaption>MySQL的体系结构示意图</figcaption></figure>\n<ul>\n<li>\n<p>连接层\n连接层处于MySQL体系结构中的最上层，是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、以及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>\n</li>\n<li>\n<p>服务层\n服务层处于MySQL体系结构中的第二层，主要完成大多书的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有存储引擎的功能也在这一层实现，如 过程、函数等。</p>\n</li>\n<li>\n<p>引擎层</p>\n</li>\n</ul>","y":"a","t":"存储引擎","O":1},["/database/mysql/advance/storage-engine","/database/mysql/advance/storage-engine.md"]],
  ["v-5d392287","/database/mysql/advance/store-procedure.html",{"e":"<h1> 存储过程</h1>\n<h2> 介绍</h2>\n<p>存储过程是事先经过编译并且存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p>\n<p>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">个人理解</p>\n<p>这里我个人理解的是 类似于 编程语言中的函数，将一些语句封装起来，直接进行函数的调用即可。</p>\n</div>","y":"a","t":"存储过程","O":6},["/database/mysql/advance/store-procedure","/database/mysql/advance/store-procedure.md"]],
  ["v-b4f56eb4","/database/mysql/base/constraint.html",{"e":"<h1> 约束</h1>\n<h2> 概念</h2>\n<p>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>\n<h2> 目的</h2>\n<p>为了保证数据库中数据的正确、有效性和完整性。</p>\n<h2> 分类</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">约束</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">非空约束</td>\n<td style=\"text-align:center\">限制该字段的数据不能为null</td>\n<td style=\"text-align:center\">NOT NULL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">唯一约束</td>\n<td style=\"text-align:center\">保证该字段的所有数据都是唯一，不重复的</td>\n<td style=\"text-align:center\">UNIQUE</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">主键约束</td>\n<td style=\"text-align:center\">主键是一行数据的唯一标识，要求非空且唯一</td>\n<td style=\"text-align:center\">PRIMARY KEY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">默认约束</td>\n<td style=\"text-align:center\">保存数据时，如果未指定该字段的值，则赋予该默认值</td>\n<td style=\"text-align:center\">DEFULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">条件约束</td>\n<td style=\"text-align:center\">保证字段值满足指定的条件</td>\n<td style=\"text-align:center\">CHECK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键约束</td>\n<td style=\"text-align:center\">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>\n<td style=\"text-align:center\">FOREIGN KEY</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"约束","O":4},["/database/mysql/base/constraint","/database/mysql/base/constraint.md"]],
  ["v-83adc5ae","/database/mysql/base/function-base.html",{"e":"<h1> 函数</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">函数</p>\n<p>函数是一段可以直接被另一段程序调用的程序或者代码。</p>\n</div>\n<h2> 字符串函数</h2>\n<p>MySQL中内置了很多的字符串函数，常用的几个如下所示:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CONCAT(S1,S2,...,Sn)</td>\n<td style=\"text-align:center\">字符串拼接，将S1、S2、...、Sn按照顺序拼接成一个字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LOWER(str)</td>\n<td style=\"text-align:center\">将字符串str全部转成小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UPPER(str)</td>\n<td style=\"text-align:center\">将字符串str全部转成大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LPAD(str,n,pad)</td>\n<td style=\"text-align:center\">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RPAD(str,n,pad)</td>\n<td style=\"text-align:center\">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TRIM(str)</td>\n<td style=\"text-align:center\">去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SUBSTRING(str,start,len)</td>\n<td style=\"text-align:center\">返回字符串str从start位置开始的len个长度的字符串</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"函数","O":3},["/database/mysql/base/function-base","/database/mysql/base/function-base.md"]],
  ["v-c124708c","/database/mysql/base/multi-table-query.html",{"e":"<h1> 多表查询</h1>\n<h2> 多表关系</h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在正式学习数据库的多表查询之前，我们需要了解到需要多表查询的场景，以及有哪些多表查询的情况，也就是数据表之间的关系。</p>\n</div>\n<h3> 一对一</h3>\n<p>一对一关系是我们比较常见的关系，比如数据表A中的一条值对应数据表B中的一条值，这种情况经常用于多表的拆分。例如将最常用的字段抽取出来，使得提高查询的效率。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">实现</p>\n<p>在任意一方加入外键，关联另外一方的主键，并且设置唯一约束(UNIQUE)。</p>\n</div>","y":"a","t":"多表查询","O":5},["/database/mysql/base/multi-table-query","/database/mysql/base/multi-table-query.md"]],
  ["v-591d90c7","/database/mysql/base/mysql-base.html",{"e":"<h1> 基础概念</h1>\n<h2> 基本概念</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">区别</p>\n<p>在学习MySQL之前，我们需要明确一些基本概念，以便于后续的理解和学习。</p>\n</div>\n<ul>\n<li>数据库</li>\n</ul>\n<p>数据库是存储数据的仓库，数据是有组织的进行存储。简写为DataBase （DB）</p>\n<ul>\n<li>数据库管理系统</li>\n</ul>\n<p>操纵和管理数据库的大型软件系统。简写为DataBase Management System （DBMS）</p>","y":"a","t":"基础概念","O":1},["/database/mysql/base/mysql-base","/database/mysql/base/mysql-base.md"]],
  ["v-8762bc94","/database/mysql/base/",{"e":"<h1> 基础篇</h1>\n","y":"a","t":"基础篇","O":1},["/database/mysql/base/index.html","/database/mysql/base/readme.md"]],
  ["v-a0975708","/database/mysql/base/sql-general-syntax.html",{"e":"<h1> SQL基础语法</h1>\n<h2> 通用语法</h2>\n<ol>\n<li>SQL语句可以单行或者多行书写，以分号结尾。</li>\n<li>SQL语句可以使用空格/缩进符来增强语句的可读性。</li>\n<li>MySQL数据库的SQL语言不区分大小写，关键字建议使用大写。</li>\n<li>注释</li>\n</ol>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">注释</p>\n<ul>\n<li>单行注释：-- 注释内容 或者 # 注释内容(MySQL特有的语法)</li>\n<li>多行注释：使用/* 注释内容 */</li>\n</ul>\n</div>","y":"a","t":"SQL基础语法","O":2},["/database/mysql/base/sql-general-syntax","/database/mysql/base/sql-general-syntax.md"]],
  ["v-ad60031e","/database/mysql/base/transaction.html",{"e":"<h1> 事务</h1>\n<p>事务是一组操作的集合，他是一个不可分隔的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<h2> 事务操作</h2>\n<ul>\n<li>查看/设置事务提交方式</li>\n</ul>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@autocommit</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> @<span class=\"token variable\">@autocommit</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"事务","O":6},["/database/mysql/base/transaction","/database/mysql/base/transaction.md"]],
  ["v-13488212","/database/mysql/devops/dividing-databases-tables.html",{"e":"<h1> 分库分表</h1>\n","y":"a","t":"分库分表","O":3},["/database/mysql/devops/dividing-databases-tables","/database/mysql/devops/dividing-databases-tables.md"]],
  ["v-c0ae6f78","/database/mysql/devops/master-slave-replication.html",{"e":"<h1> 主从复制</h1>\n","y":"a","t":"主从复制","O":2},["/database/mysql/devops/master-slave-replication","/database/mysql/devops/master-slave-replication.md"]],
  ["v-547ba0ea","/database/mysql/devops/mysql-log.html",{"e":"<h1> 日志</h1>\n","y":"a","t":"日志","O":1},["/database/mysql/devops/mysql-log","/database/mysql/devops/mysql-log.md"]],
  ["v-c22f3110","/database/mysql/devops/read-write-separation.html",{"e":"<h1> 读写分离</h1>\n","y":"a","t":"读写分离","O":1},["/database/mysql/devops/read-write-separation","/database/mysql/devops/read-write-separation.md"]],
  ["v-53fcb98a","/database/mysql/devops/",{"e":"<h1> 运维篇</h1>\n","y":"a","t":"运维篇","O":3},["/database/mysql/devops/index.html","/database/mysql/devops/readme.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-a94a8cca","/computer/",{"y":"p","t":"Computer"},["/computer/index.html"]],
  ["v-14c69af4","/java/",{"y":"p","t":"Java"},["/java/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},["/timeline/index.html"]],
  ["v-5831b135","/category/java/",{"y":"p","t":"Java 分类","I":0},["/category/java/index.html"]],
]
